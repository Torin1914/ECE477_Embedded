
motor_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081bc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f0  080082f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080082f0  080082f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082f0  080082f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082f0  080082f0  000182f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082f4  080082f4  000182f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080082f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000000c  08008304  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08008304  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f3d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002755  00000000  00000000  00031fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00034710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd3  00000000  00000000  00035740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2ff  00000000  00000000  00036413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149d1  00000000  00000000  00051712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a628d  00000000  00000000  000660e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c2c  00000000  00000000  0010c370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010ff9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008260 	.word	0x08008260

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08008260 	.word	0x08008260

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_dadd>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	464f      	mov	r7, r9
 8000220:	4646      	mov	r6, r8
 8000222:	46d6      	mov	lr, sl
 8000224:	0004      	movs	r4, r0
 8000226:	b5c0      	push	{r6, r7, lr}
 8000228:	001f      	movs	r7, r3
 800022a:	030b      	lsls	r3, r1, #12
 800022c:	0010      	movs	r0, r2
 800022e:	004e      	lsls	r6, r1, #1
 8000230:	0a5b      	lsrs	r3, r3, #9
 8000232:	0fcd      	lsrs	r5, r1, #31
 8000234:	0f61      	lsrs	r1, r4, #29
 8000236:	007a      	lsls	r2, r7, #1
 8000238:	4319      	orrs	r1, r3
 800023a:	00e3      	lsls	r3, r4, #3
 800023c:	033c      	lsls	r4, r7, #12
 800023e:	0fff      	lsrs	r7, r7, #31
 8000240:	46bc      	mov	ip, r7
 8000242:	0a64      	lsrs	r4, r4, #9
 8000244:	0f47      	lsrs	r7, r0, #29
 8000246:	4327      	orrs	r7, r4
 8000248:	0d76      	lsrs	r6, r6, #21
 800024a:	0d52      	lsrs	r2, r2, #21
 800024c:	00c0      	lsls	r0, r0, #3
 800024e:	46b9      	mov	r9, r7
 8000250:	4680      	mov	r8, r0
 8000252:	1ab7      	subs	r7, r6, r2
 8000254:	4565      	cmp	r5, ip
 8000256:	d100      	bne.n	800025a <__aeabi_dadd+0x3e>
 8000258:	e09b      	b.n	8000392 <__aeabi_dadd+0x176>
 800025a:	2f00      	cmp	r7, #0
 800025c:	dc00      	bgt.n	8000260 <__aeabi_dadd+0x44>
 800025e:	e084      	b.n	800036a <__aeabi_dadd+0x14e>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_dadd+0x4a>
 8000264:	e0be      	b.n	80003e4 <__aeabi_dadd+0x1c8>
 8000266:	4ac8      	ldr	r2, [pc, #800]	; (8000588 <__aeabi_dadd+0x36c>)
 8000268:	4296      	cmp	r6, r2
 800026a:	d100      	bne.n	800026e <__aeabi_dadd+0x52>
 800026c:	e124      	b.n	80004b8 <__aeabi_dadd+0x29c>
 800026e:	2280      	movs	r2, #128	; 0x80
 8000270:	464c      	mov	r4, r9
 8000272:	0412      	lsls	r2, r2, #16
 8000274:	4314      	orrs	r4, r2
 8000276:	46a1      	mov	r9, r4
 8000278:	2f38      	cmp	r7, #56	; 0x38
 800027a:	dd00      	ble.n	800027e <__aeabi_dadd+0x62>
 800027c:	e167      	b.n	800054e <__aeabi_dadd+0x332>
 800027e:	2f1f      	cmp	r7, #31
 8000280:	dd00      	ble.n	8000284 <__aeabi_dadd+0x68>
 8000282:	e1d6      	b.n	8000632 <__aeabi_dadd+0x416>
 8000284:	2220      	movs	r2, #32
 8000286:	464c      	mov	r4, r9
 8000288:	1bd2      	subs	r2, r2, r7
 800028a:	4094      	lsls	r4, r2
 800028c:	46a2      	mov	sl, r4
 800028e:	4644      	mov	r4, r8
 8000290:	40fc      	lsrs	r4, r7
 8000292:	0020      	movs	r0, r4
 8000294:	4654      	mov	r4, sl
 8000296:	4304      	orrs	r4, r0
 8000298:	4640      	mov	r0, r8
 800029a:	4090      	lsls	r0, r2
 800029c:	1e42      	subs	r2, r0, #1
 800029e:	4190      	sbcs	r0, r2
 80002a0:	464a      	mov	r2, r9
 80002a2:	40fa      	lsrs	r2, r7
 80002a4:	4304      	orrs	r4, r0
 80002a6:	1a89      	subs	r1, r1, r2
 80002a8:	1b1c      	subs	r4, r3, r4
 80002aa:	42a3      	cmp	r3, r4
 80002ac:	4192      	sbcs	r2, r2
 80002ae:	4252      	negs	r2, r2
 80002b0:	1a8b      	subs	r3, r1, r2
 80002b2:	469a      	mov	sl, r3
 80002b4:	4653      	mov	r3, sl
 80002b6:	021b      	lsls	r3, r3, #8
 80002b8:	d400      	bmi.n	80002bc <__aeabi_dadd+0xa0>
 80002ba:	e0d4      	b.n	8000466 <__aeabi_dadd+0x24a>
 80002bc:	4653      	mov	r3, sl
 80002be:	025a      	lsls	r2, r3, #9
 80002c0:	0a53      	lsrs	r3, r2, #9
 80002c2:	469a      	mov	sl, r3
 80002c4:	4653      	mov	r3, sl
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d100      	bne.n	80002cc <__aeabi_dadd+0xb0>
 80002ca:	e104      	b.n	80004d6 <__aeabi_dadd+0x2ba>
 80002cc:	4650      	mov	r0, sl
 80002ce:	f001 fd35 	bl	8001d3c <__clzsi2>
 80002d2:	0003      	movs	r3, r0
 80002d4:	3b08      	subs	r3, #8
 80002d6:	2220      	movs	r2, #32
 80002d8:	0020      	movs	r0, r4
 80002da:	1ad2      	subs	r2, r2, r3
 80002dc:	4651      	mov	r1, sl
 80002de:	40d0      	lsrs	r0, r2
 80002e0:	4099      	lsls	r1, r3
 80002e2:	0002      	movs	r2, r0
 80002e4:	409c      	lsls	r4, r3
 80002e6:	430a      	orrs	r2, r1
 80002e8:	42b3      	cmp	r3, r6
 80002ea:	da00      	bge.n	80002ee <__aeabi_dadd+0xd2>
 80002ec:	e102      	b.n	80004f4 <__aeabi_dadd+0x2d8>
 80002ee:	1b9b      	subs	r3, r3, r6
 80002f0:	1c59      	adds	r1, r3, #1
 80002f2:	291f      	cmp	r1, #31
 80002f4:	dd00      	ble.n	80002f8 <__aeabi_dadd+0xdc>
 80002f6:	e0a7      	b.n	8000448 <__aeabi_dadd+0x22c>
 80002f8:	2320      	movs	r3, #32
 80002fa:	0010      	movs	r0, r2
 80002fc:	0026      	movs	r6, r4
 80002fe:	1a5b      	subs	r3, r3, r1
 8000300:	409c      	lsls	r4, r3
 8000302:	4098      	lsls	r0, r3
 8000304:	40ce      	lsrs	r6, r1
 8000306:	40ca      	lsrs	r2, r1
 8000308:	1e63      	subs	r3, r4, #1
 800030a:	419c      	sbcs	r4, r3
 800030c:	4330      	orrs	r0, r6
 800030e:	4692      	mov	sl, r2
 8000310:	2600      	movs	r6, #0
 8000312:	4304      	orrs	r4, r0
 8000314:	0763      	lsls	r3, r4, #29
 8000316:	d009      	beq.n	800032c <__aeabi_dadd+0x110>
 8000318:	230f      	movs	r3, #15
 800031a:	4023      	ands	r3, r4
 800031c:	2b04      	cmp	r3, #4
 800031e:	d005      	beq.n	800032c <__aeabi_dadd+0x110>
 8000320:	1d23      	adds	r3, r4, #4
 8000322:	42a3      	cmp	r3, r4
 8000324:	41a4      	sbcs	r4, r4
 8000326:	4264      	negs	r4, r4
 8000328:	44a2      	add	sl, r4
 800032a:	001c      	movs	r4, r3
 800032c:	4653      	mov	r3, sl
 800032e:	021b      	lsls	r3, r3, #8
 8000330:	d400      	bmi.n	8000334 <__aeabi_dadd+0x118>
 8000332:	e09b      	b.n	800046c <__aeabi_dadd+0x250>
 8000334:	4b94      	ldr	r3, [pc, #592]	; (8000588 <__aeabi_dadd+0x36c>)
 8000336:	3601      	adds	r6, #1
 8000338:	429e      	cmp	r6, r3
 800033a:	d100      	bne.n	800033e <__aeabi_dadd+0x122>
 800033c:	e0b8      	b.n	80004b0 <__aeabi_dadd+0x294>
 800033e:	4653      	mov	r3, sl
 8000340:	4992      	ldr	r1, [pc, #584]	; (800058c <__aeabi_dadd+0x370>)
 8000342:	08e4      	lsrs	r4, r4, #3
 8000344:	400b      	ands	r3, r1
 8000346:	0019      	movs	r1, r3
 8000348:	075b      	lsls	r3, r3, #29
 800034a:	4323      	orrs	r3, r4
 800034c:	0572      	lsls	r2, r6, #21
 800034e:	024c      	lsls	r4, r1, #9
 8000350:	0b24      	lsrs	r4, r4, #12
 8000352:	0d52      	lsrs	r2, r2, #21
 8000354:	0512      	lsls	r2, r2, #20
 8000356:	07ed      	lsls	r5, r5, #31
 8000358:	4322      	orrs	r2, r4
 800035a:	432a      	orrs	r2, r5
 800035c:	0018      	movs	r0, r3
 800035e:	0011      	movs	r1, r2
 8000360:	bce0      	pop	{r5, r6, r7}
 8000362:	46ba      	mov	sl, r7
 8000364:	46b1      	mov	r9, r6
 8000366:	46a8      	mov	r8, r5
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	2f00      	cmp	r7, #0
 800036c:	d048      	beq.n	8000400 <__aeabi_dadd+0x1e4>
 800036e:	1b97      	subs	r7, r2, r6
 8000370:	2e00      	cmp	r6, #0
 8000372:	d000      	beq.n	8000376 <__aeabi_dadd+0x15a>
 8000374:	e10e      	b.n	8000594 <__aeabi_dadd+0x378>
 8000376:	000c      	movs	r4, r1
 8000378:	431c      	orrs	r4, r3
 800037a:	d100      	bne.n	800037e <__aeabi_dadd+0x162>
 800037c:	e1b7      	b.n	80006ee <__aeabi_dadd+0x4d2>
 800037e:	1e7c      	subs	r4, r7, #1
 8000380:	2f01      	cmp	r7, #1
 8000382:	d100      	bne.n	8000386 <__aeabi_dadd+0x16a>
 8000384:	e226      	b.n	80007d4 <__aeabi_dadd+0x5b8>
 8000386:	4d80      	ldr	r5, [pc, #512]	; (8000588 <__aeabi_dadd+0x36c>)
 8000388:	42af      	cmp	r7, r5
 800038a:	d100      	bne.n	800038e <__aeabi_dadd+0x172>
 800038c:	e1d5      	b.n	800073a <__aeabi_dadd+0x51e>
 800038e:	0027      	movs	r7, r4
 8000390:	e107      	b.n	80005a2 <__aeabi_dadd+0x386>
 8000392:	2f00      	cmp	r7, #0
 8000394:	dc00      	bgt.n	8000398 <__aeabi_dadd+0x17c>
 8000396:	e0b2      	b.n	80004fe <__aeabi_dadd+0x2e2>
 8000398:	2a00      	cmp	r2, #0
 800039a:	d047      	beq.n	800042c <__aeabi_dadd+0x210>
 800039c:	4a7a      	ldr	r2, [pc, #488]	; (8000588 <__aeabi_dadd+0x36c>)
 800039e:	4296      	cmp	r6, r2
 80003a0:	d100      	bne.n	80003a4 <__aeabi_dadd+0x188>
 80003a2:	e089      	b.n	80004b8 <__aeabi_dadd+0x29c>
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	464c      	mov	r4, r9
 80003a8:	0412      	lsls	r2, r2, #16
 80003aa:	4314      	orrs	r4, r2
 80003ac:	46a1      	mov	r9, r4
 80003ae:	2f38      	cmp	r7, #56	; 0x38
 80003b0:	dc6b      	bgt.n	800048a <__aeabi_dadd+0x26e>
 80003b2:	2f1f      	cmp	r7, #31
 80003b4:	dc00      	bgt.n	80003b8 <__aeabi_dadd+0x19c>
 80003b6:	e16e      	b.n	8000696 <__aeabi_dadd+0x47a>
 80003b8:	003a      	movs	r2, r7
 80003ba:	4648      	mov	r0, r9
 80003bc:	3a20      	subs	r2, #32
 80003be:	40d0      	lsrs	r0, r2
 80003c0:	4684      	mov	ip, r0
 80003c2:	2f20      	cmp	r7, #32
 80003c4:	d007      	beq.n	80003d6 <__aeabi_dadd+0x1ba>
 80003c6:	2240      	movs	r2, #64	; 0x40
 80003c8:	4648      	mov	r0, r9
 80003ca:	1bd2      	subs	r2, r2, r7
 80003cc:	4090      	lsls	r0, r2
 80003ce:	0002      	movs	r2, r0
 80003d0:	4640      	mov	r0, r8
 80003d2:	4310      	orrs	r0, r2
 80003d4:	4680      	mov	r8, r0
 80003d6:	4640      	mov	r0, r8
 80003d8:	1e42      	subs	r2, r0, #1
 80003da:	4190      	sbcs	r0, r2
 80003dc:	4662      	mov	r2, ip
 80003de:	0004      	movs	r4, r0
 80003e0:	4314      	orrs	r4, r2
 80003e2:	e057      	b.n	8000494 <__aeabi_dadd+0x278>
 80003e4:	464a      	mov	r2, r9
 80003e6:	4302      	orrs	r2, r0
 80003e8:	d100      	bne.n	80003ec <__aeabi_dadd+0x1d0>
 80003ea:	e103      	b.n	80005f4 <__aeabi_dadd+0x3d8>
 80003ec:	1e7a      	subs	r2, r7, #1
 80003ee:	2f01      	cmp	r7, #1
 80003f0:	d100      	bne.n	80003f4 <__aeabi_dadd+0x1d8>
 80003f2:	e193      	b.n	800071c <__aeabi_dadd+0x500>
 80003f4:	4c64      	ldr	r4, [pc, #400]	; (8000588 <__aeabi_dadd+0x36c>)
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	d100      	bne.n	80003fc <__aeabi_dadd+0x1e0>
 80003fa:	e18a      	b.n	8000712 <__aeabi_dadd+0x4f6>
 80003fc:	0017      	movs	r7, r2
 80003fe:	e73b      	b.n	8000278 <__aeabi_dadd+0x5c>
 8000400:	4c63      	ldr	r4, [pc, #396]	; (8000590 <__aeabi_dadd+0x374>)
 8000402:	1c72      	adds	r2, r6, #1
 8000404:	4222      	tst	r2, r4
 8000406:	d000      	beq.n	800040a <__aeabi_dadd+0x1ee>
 8000408:	e0e0      	b.n	80005cc <__aeabi_dadd+0x3b0>
 800040a:	000a      	movs	r2, r1
 800040c:	431a      	orrs	r2, r3
 800040e:	2e00      	cmp	r6, #0
 8000410:	d000      	beq.n	8000414 <__aeabi_dadd+0x1f8>
 8000412:	e174      	b.n	80006fe <__aeabi_dadd+0x4e2>
 8000414:	2a00      	cmp	r2, #0
 8000416:	d100      	bne.n	800041a <__aeabi_dadd+0x1fe>
 8000418:	e1d0      	b.n	80007bc <__aeabi_dadd+0x5a0>
 800041a:	464a      	mov	r2, r9
 800041c:	4302      	orrs	r2, r0
 800041e:	d000      	beq.n	8000422 <__aeabi_dadd+0x206>
 8000420:	e1e3      	b.n	80007ea <__aeabi_dadd+0x5ce>
 8000422:	074a      	lsls	r2, r1, #29
 8000424:	08db      	lsrs	r3, r3, #3
 8000426:	4313      	orrs	r3, r2
 8000428:	08c9      	lsrs	r1, r1, #3
 800042a:	e029      	b.n	8000480 <__aeabi_dadd+0x264>
 800042c:	464a      	mov	r2, r9
 800042e:	4302      	orrs	r2, r0
 8000430:	d100      	bne.n	8000434 <__aeabi_dadd+0x218>
 8000432:	e17d      	b.n	8000730 <__aeabi_dadd+0x514>
 8000434:	1e7a      	subs	r2, r7, #1
 8000436:	2f01      	cmp	r7, #1
 8000438:	d100      	bne.n	800043c <__aeabi_dadd+0x220>
 800043a:	e0e0      	b.n	80005fe <__aeabi_dadd+0x3e2>
 800043c:	4c52      	ldr	r4, [pc, #328]	; (8000588 <__aeabi_dadd+0x36c>)
 800043e:	42a7      	cmp	r7, r4
 8000440:	d100      	bne.n	8000444 <__aeabi_dadd+0x228>
 8000442:	e166      	b.n	8000712 <__aeabi_dadd+0x4f6>
 8000444:	0017      	movs	r7, r2
 8000446:	e7b2      	b.n	80003ae <__aeabi_dadd+0x192>
 8000448:	0010      	movs	r0, r2
 800044a:	3b1f      	subs	r3, #31
 800044c:	40d8      	lsrs	r0, r3
 800044e:	2920      	cmp	r1, #32
 8000450:	d003      	beq.n	800045a <__aeabi_dadd+0x23e>
 8000452:	2340      	movs	r3, #64	; 0x40
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	409a      	lsls	r2, r3
 8000458:	4314      	orrs	r4, r2
 800045a:	1e63      	subs	r3, r4, #1
 800045c:	419c      	sbcs	r4, r3
 800045e:	2300      	movs	r3, #0
 8000460:	2600      	movs	r6, #0
 8000462:	469a      	mov	sl, r3
 8000464:	4304      	orrs	r4, r0
 8000466:	0763      	lsls	r3, r4, #29
 8000468:	d000      	beq.n	800046c <__aeabi_dadd+0x250>
 800046a:	e755      	b.n	8000318 <__aeabi_dadd+0xfc>
 800046c:	4652      	mov	r2, sl
 800046e:	08e3      	lsrs	r3, r4, #3
 8000470:	0752      	lsls	r2, r2, #29
 8000472:	4313      	orrs	r3, r2
 8000474:	4652      	mov	r2, sl
 8000476:	0037      	movs	r7, r6
 8000478:	08d1      	lsrs	r1, r2, #3
 800047a:	4a43      	ldr	r2, [pc, #268]	; (8000588 <__aeabi_dadd+0x36c>)
 800047c:	4297      	cmp	r7, r2
 800047e:	d01f      	beq.n	80004c0 <__aeabi_dadd+0x2a4>
 8000480:	0309      	lsls	r1, r1, #12
 8000482:	057a      	lsls	r2, r7, #21
 8000484:	0b0c      	lsrs	r4, r1, #12
 8000486:	0d52      	lsrs	r2, r2, #21
 8000488:	e764      	b.n	8000354 <__aeabi_dadd+0x138>
 800048a:	4642      	mov	r2, r8
 800048c:	464c      	mov	r4, r9
 800048e:	4314      	orrs	r4, r2
 8000490:	1e62      	subs	r2, r4, #1
 8000492:	4194      	sbcs	r4, r2
 8000494:	18e4      	adds	r4, r4, r3
 8000496:	429c      	cmp	r4, r3
 8000498:	4192      	sbcs	r2, r2
 800049a:	4252      	negs	r2, r2
 800049c:	4692      	mov	sl, r2
 800049e:	448a      	add	sl, r1
 80004a0:	4653      	mov	r3, sl
 80004a2:	021b      	lsls	r3, r3, #8
 80004a4:	d5df      	bpl.n	8000466 <__aeabi_dadd+0x24a>
 80004a6:	4b38      	ldr	r3, [pc, #224]	; (8000588 <__aeabi_dadd+0x36c>)
 80004a8:	3601      	adds	r6, #1
 80004aa:	429e      	cmp	r6, r3
 80004ac:	d000      	beq.n	80004b0 <__aeabi_dadd+0x294>
 80004ae:	e0b3      	b.n	8000618 <__aeabi_dadd+0x3fc>
 80004b0:	0032      	movs	r2, r6
 80004b2:	2400      	movs	r4, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	e74d      	b.n	8000354 <__aeabi_dadd+0x138>
 80004b8:	074a      	lsls	r2, r1, #29
 80004ba:	08db      	lsrs	r3, r3, #3
 80004bc:	4313      	orrs	r3, r2
 80004be:	08c9      	lsrs	r1, r1, #3
 80004c0:	001a      	movs	r2, r3
 80004c2:	430a      	orrs	r2, r1
 80004c4:	d100      	bne.n	80004c8 <__aeabi_dadd+0x2ac>
 80004c6:	e200      	b.n	80008ca <__aeabi_dadd+0x6ae>
 80004c8:	2480      	movs	r4, #128	; 0x80
 80004ca:	0324      	lsls	r4, r4, #12
 80004cc:	430c      	orrs	r4, r1
 80004ce:	0324      	lsls	r4, r4, #12
 80004d0:	4a2d      	ldr	r2, [pc, #180]	; (8000588 <__aeabi_dadd+0x36c>)
 80004d2:	0b24      	lsrs	r4, r4, #12
 80004d4:	e73e      	b.n	8000354 <__aeabi_dadd+0x138>
 80004d6:	0020      	movs	r0, r4
 80004d8:	f001 fc30 	bl	8001d3c <__clzsi2>
 80004dc:	0003      	movs	r3, r0
 80004de:	3318      	adds	r3, #24
 80004e0:	2b1f      	cmp	r3, #31
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_dadd+0x2ca>
 80004e4:	e6f7      	b.n	80002d6 <__aeabi_dadd+0xba>
 80004e6:	0022      	movs	r2, r4
 80004e8:	3808      	subs	r0, #8
 80004ea:	4082      	lsls	r2, r0
 80004ec:	2400      	movs	r4, #0
 80004ee:	42b3      	cmp	r3, r6
 80004f0:	db00      	blt.n	80004f4 <__aeabi_dadd+0x2d8>
 80004f2:	e6fc      	b.n	80002ee <__aeabi_dadd+0xd2>
 80004f4:	1af6      	subs	r6, r6, r3
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <__aeabi_dadd+0x370>)
 80004f8:	401a      	ands	r2, r3
 80004fa:	4692      	mov	sl, r2
 80004fc:	e70a      	b.n	8000314 <__aeabi_dadd+0xf8>
 80004fe:	2f00      	cmp	r7, #0
 8000500:	d02b      	beq.n	800055a <__aeabi_dadd+0x33e>
 8000502:	1b97      	subs	r7, r2, r6
 8000504:	2e00      	cmp	r6, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x2ee>
 8000508:	e0b8      	b.n	800067c <__aeabi_dadd+0x460>
 800050a:	4c1f      	ldr	r4, [pc, #124]	; (8000588 <__aeabi_dadd+0x36c>)
 800050c:	42a2      	cmp	r2, r4
 800050e:	d100      	bne.n	8000512 <__aeabi_dadd+0x2f6>
 8000510:	e11c      	b.n	800074c <__aeabi_dadd+0x530>
 8000512:	2480      	movs	r4, #128	; 0x80
 8000514:	0424      	lsls	r4, r4, #16
 8000516:	4321      	orrs	r1, r4
 8000518:	2f38      	cmp	r7, #56	; 0x38
 800051a:	dd00      	ble.n	800051e <__aeabi_dadd+0x302>
 800051c:	e11e      	b.n	800075c <__aeabi_dadd+0x540>
 800051e:	2f1f      	cmp	r7, #31
 8000520:	dd00      	ble.n	8000524 <__aeabi_dadd+0x308>
 8000522:	e19e      	b.n	8000862 <__aeabi_dadd+0x646>
 8000524:	2620      	movs	r6, #32
 8000526:	000c      	movs	r4, r1
 8000528:	1bf6      	subs	r6, r6, r7
 800052a:	0018      	movs	r0, r3
 800052c:	40b3      	lsls	r3, r6
 800052e:	40b4      	lsls	r4, r6
 8000530:	40f8      	lsrs	r0, r7
 8000532:	1e5e      	subs	r6, r3, #1
 8000534:	41b3      	sbcs	r3, r6
 8000536:	40f9      	lsrs	r1, r7
 8000538:	4304      	orrs	r4, r0
 800053a:	431c      	orrs	r4, r3
 800053c:	4489      	add	r9, r1
 800053e:	4444      	add	r4, r8
 8000540:	4544      	cmp	r4, r8
 8000542:	419b      	sbcs	r3, r3
 8000544:	425b      	negs	r3, r3
 8000546:	444b      	add	r3, r9
 8000548:	469a      	mov	sl, r3
 800054a:	0016      	movs	r6, r2
 800054c:	e7a8      	b.n	80004a0 <__aeabi_dadd+0x284>
 800054e:	4642      	mov	r2, r8
 8000550:	464c      	mov	r4, r9
 8000552:	4314      	orrs	r4, r2
 8000554:	1e62      	subs	r2, r4, #1
 8000556:	4194      	sbcs	r4, r2
 8000558:	e6a6      	b.n	80002a8 <__aeabi_dadd+0x8c>
 800055a:	4c0d      	ldr	r4, [pc, #52]	; (8000590 <__aeabi_dadd+0x374>)
 800055c:	1c72      	adds	r2, r6, #1
 800055e:	4222      	tst	r2, r4
 8000560:	d000      	beq.n	8000564 <__aeabi_dadd+0x348>
 8000562:	e0a8      	b.n	80006b6 <__aeabi_dadd+0x49a>
 8000564:	000a      	movs	r2, r1
 8000566:	431a      	orrs	r2, r3
 8000568:	2e00      	cmp	r6, #0
 800056a:	d000      	beq.n	800056e <__aeabi_dadd+0x352>
 800056c:	e10a      	b.n	8000784 <__aeabi_dadd+0x568>
 800056e:	2a00      	cmp	r2, #0
 8000570:	d100      	bne.n	8000574 <__aeabi_dadd+0x358>
 8000572:	e15e      	b.n	8000832 <__aeabi_dadd+0x616>
 8000574:	464a      	mov	r2, r9
 8000576:	4302      	orrs	r2, r0
 8000578:	d000      	beq.n	800057c <__aeabi_dadd+0x360>
 800057a:	e161      	b.n	8000840 <__aeabi_dadd+0x624>
 800057c:	074a      	lsls	r2, r1, #29
 800057e:	08db      	lsrs	r3, r3, #3
 8000580:	4313      	orrs	r3, r2
 8000582:	08c9      	lsrs	r1, r1, #3
 8000584:	e77c      	b.n	8000480 <__aeabi_dadd+0x264>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	000007ff 	.word	0x000007ff
 800058c:	ff7fffff 	.word	0xff7fffff
 8000590:	000007fe 	.word	0x000007fe
 8000594:	4ccf      	ldr	r4, [pc, #828]	; (80008d4 <__aeabi_dadd+0x6b8>)
 8000596:	42a2      	cmp	r2, r4
 8000598:	d100      	bne.n	800059c <__aeabi_dadd+0x380>
 800059a:	e0ce      	b.n	800073a <__aeabi_dadd+0x51e>
 800059c:	2480      	movs	r4, #128	; 0x80
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	4321      	orrs	r1, r4
 80005a2:	2f38      	cmp	r7, #56	; 0x38
 80005a4:	dc5b      	bgt.n	800065e <__aeabi_dadd+0x442>
 80005a6:	2f1f      	cmp	r7, #31
 80005a8:	dd00      	ble.n	80005ac <__aeabi_dadd+0x390>
 80005aa:	e0dc      	b.n	8000766 <__aeabi_dadd+0x54a>
 80005ac:	2520      	movs	r5, #32
 80005ae:	000c      	movs	r4, r1
 80005b0:	1bed      	subs	r5, r5, r7
 80005b2:	001e      	movs	r6, r3
 80005b4:	40ab      	lsls	r3, r5
 80005b6:	40ac      	lsls	r4, r5
 80005b8:	40fe      	lsrs	r6, r7
 80005ba:	1e5d      	subs	r5, r3, #1
 80005bc:	41ab      	sbcs	r3, r5
 80005be:	4334      	orrs	r4, r6
 80005c0:	40f9      	lsrs	r1, r7
 80005c2:	431c      	orrs	r4, r3
 80005c4:	464b      	mov	r3, r9
 80005c6:	1a5b      	subs	r3, r3, r1
 80005c8:	4699      	mov	r9, r3
 80005ca:	e04c      	b.n	8000666 <__aeabi_dadd+0x44a>
 80005cc:	464a      	mov	r2, r9
 80005ce:	1a1c      	subs	r4, r3, r0
 80005d0:	1a88      	subs	r0, r1, r2
 80005d2:	42a3      	cmp	r3, r4
 80005d4:	4192      	sbcs	r2, r2
 80005d6:	4252      	negs	r2, r2
 80005d8:	4692      	mov	sl, r2
 80005da:	0002      	movs	r2, r0
 80005dc:	4650      	mov	r0, sl
 80005de:	1a12      	subs	r2, r2, r0
 80005e0:	4692      	mov	sl, r2
 80005e2:	0212      	lsls	r2, r2, #8
 80005e4:	d478      	bmi.n	80006d8 <__aeabi_dadd+0x4bc>
 80005e6:	4653      	mov	r3, sl
 80005e8:	4323      	orrs	r3, r4
 80005ea:	d000      	beq.n	80005ee <__aeabi_dadd+0x3d2>
 80005ec:	e66a      	b.n	80002c4 <__aeabi_dadd+0xa8>
 80005ee:	2100      	movs	r1, #0
 80005f0:	2500      	movs	r5, #0
 80005f2:	e745      	b.n	8000480 <__aeabi_dadd+0x264>
 80005f4:	074a      	lsls	r2, r1, #29
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	08c9      	lsrs	r1, r1, #3
 80005fc:	e73d      	b.n	800047a <__aeabi_dadd+0x25e>
 80005fe:	181c      	adds	r4, r3, r0
 8000600:	429c      	cmp	r4, r3
 8000602:	419b      	sbcs	r3, r3
 8000604:	4449      	add	r1, r9
 8000606:	468a      	mov	sl, r1
 8000608:	425b      	negs	r3, r3
 800060a:	449a      	add	sl, r3
 800060c:	4653      	mov	r3, sl
 800060e:	2601      	movs	r6, #1
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	d400      	bmi.n	8000616 <__aeabi_dadd+0x3fa>
 8000614:	e727      	b.n	8000466 <__aeabi_dadd+0x24a>
 8000616:	2602      	movs	r6, #2
 8000618:	4652      	mov	r2, sl
 800061a:	4baf      	ldr	r3, [pc, #700]	; (80008d8 <__aeabi_dadd+0x6bc>)
 800061c:	2101      	movs	r1, #1
 800061e:	401a      	ands	r2, r3
 8000620:	0013      	movs	r3, r2
 8000622:	4021      	ands	r1, r4
 8000624:	0862      	lsrs	r2, r4, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	07dc      	lsls	r4, r3, #31
 800062a:	085b      	lsrs	r3, r3, #1
 800062c:	469a      	mov	sl, r3
 800062e:	4314      	orrs	r4, r2
 8000630:	e670      	b.n	8000314 <__aeabi_dadd+0xf8>
 8000632:	003a      	movs	r2, r7
 8000634:	464c      	mov	r4, r9
 8000636:	3a20      	subs	r2, #32
 8000638:	40d4      	lsrs	r4, r2
 800063a:	46a4      	mov	ip, r4
 800063c:	2f20      	cmp	r7, #32
 800063e:	d007      	beq.n	8000650 <__aeabi_dadd+0x434>
 8000640:	2240      	movs	r2, #64	; 0x40
 8000642:	4648      	mov	r0, r9
 8000644:	1bd2      	subs	r2, r2, r7
 8000646:	4090      	lsls	r0, r2
 8000648:	0002      	movs	r2, r0
 800064a:	4640      	mov	r0, r8
 800064c:	4310      	orrs	r0, r2
 800064e:	4680      	mov	r8, r0
 8000650:	4640      	mov	r0, r8
 8000652:	1e42      	subs	r2, r0, #1
 8000654:	4190      	sbcs	r0, r2
 8000656:	4662      	mov	r2, ip
 8000658:	0004      	movs	r4, r0
 800065a:	4314      	orrs	r4, r2
 800065c:	e624      	b.n	80002a8 <__aeabi_dadd+0x8c>
 800065e:	4319      	orrs	r1, r3
 8000660:	000c      	movs	r4, r1
 8000662:	1e63      	subs	r3, r4, #1
 8000664:	419c      	sbcs	r4, r3
 8000666:	4643      	mov	r3, r8
 8000668:	1b1c      	subs	r4, r3, r4
 800066a:	45a0      	cmp	r8, r4
 800066c:	419b      	sbcs	r3, r3
 800066e:	4649      	mov	r1, r9
 8000670:	425b      	negs	r3, r3
 8000672:	1acb      	subs	r3, r1, r3
 8000674:	469a      	mov	sl, r3
 8000676:	4665      	mov	r5, ip
 8000678:	0016      	movs	r6, r2
 800067a:	e61b      	b.n	80002b4 <__aeabi_dadd+0x98>
 800067c:	000c      	movs	r4, r1
 800067e:	431c      	orrs	r4, r3
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x468>
 8000682:	e0c7      	b.n	8000814 <__aeabi_dadd+0x5f8>
 8000684:	1e7c      	subs	r4, r7, #1
 8000686:	2f01      	cmp	r7, #1
 8000688:	d100      	bne.n	800068c <__aeabi_dadd+0x470>
 800068a:	e0f9      	b.n	8000880 <__aeabi_dadd+0x664>
 800068c:	4e91      	ldr	r6, [pc, #580]	; (80008d4 <__aeabi_dadd+0x6b8>)
 800068e:	42b7      	cmp	r7, r6
 8000690:	d05c      	beq.n	800074c <__aeabi_dadd+0x530>
 8000692:	0027      	movs	r7, r4
 8000694:	e740      	b.n	8000518 <__aeabi_dadd+0x2fc>
 8000696:	2220      	movs	r2, #32
 8000698:	464c      	mov	r4, r9
 800069a:	4640      	mov	r0, r8
 800069c:	1bd2      	subs	r2, r2, r7
 800069e:	4094      	lsls	r4, r2
 80006a0:	40f8      	lsrs	r0, r7
 80006a2:	4304      	orrs	r4, r0
 80006a4:	4640      	mov	r0, r8
 80006a6:	4090      	lsls	r0, r2
 80006a8:	1e42      	subs	r2, r0, #1
 80006aa:	4190      	sbcs	r0, r2
 80006ac:	464a      	mov	r2, r9
 80006ae:	40fa      	lsrs	r2, r7
 80006b0:	4304      	orrs	r4, r0
 80006b2:	1889      	adds	r1, r1, r2
 80006b4:	e6ee      	b.n	8000494 <__aeabi_dadd+0x278>
 80006b6:	4c87      	ldr	r4, [pc, #540]	; (80008d4 <__aeabi_dadd+0x6b8>)
 80006b8:	42a2      	cmp	r2, r4
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x4a2>
 80006bc:	e6f9      	b.n	80004b2 <__aeabi_dadd+0x296>
 80006be:	1818      	adds	r0, r3, r0
 80006c0:	4298      	cmp	r0, r3
 80006c2:	419b      	sbcs	r3, r3
 80006c4:	4449      	add	r1, r9
 80006c6:	425b      	negs	r3, r3
 80006c8:	18cb      	adds	r3, r1, r3
 80006ca:	07dc      	lsls	r4, r3, #31
 80006cc:	0840      	lsrs	r0, r0, #1
 80006ce:	085b      	lsrs	r3, r3, #1
 80006d0:	469a      	mov	sl, r3
 80006d2:	0016      	movs	r6, r2
 80006d4:	4304      	orrs	r4, r0
 80006d6:	e6c6      	b.n	8000466 <__aeabi_dadd+0x24a>
 80006d8:	4642      	mov	r2, r8
 80006da:	1ad4      	subs	r4, r2, r3
 80006dc:	45a0      	cmp	r8, r4
 80006de:	4180      	sbcs	r0, r0
 80006e0:	464b      	mov	r3, r9
 80006e2:	4240      	negs	r0, r0
 80006e4:	1a59      	subs	r1, r3, r1
 80006e6:	1a0b      	subs	r3, r1, r0
 80006e8:	469a      	mov	sl, r3
 80006ea:	4665      	mov	r5, ip
 80006ec:	e5ea      	b.n	80002c4 <__aeabi_dadd+0xa8>
 80006ee:	464b      	mov	r3, r9
 80006f0:	464a      	mov	r2, r9
 80006f2:	08c0      	lsrs	r0, r0, #3
 80006f4:	075b      	lsls	r3, r3, #29
 80006f6:	4665      	mov	r5, ip
 80006f8:	4303      	orrs	r3, r0
 80006fa:	08d1      	lsrs	r1, r2, #3
 80006fc:	e6bd      	b.n	800047a <__aeabi_dadd+0x25e>
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d000      	beq.n	8000704 <__aeabi_dadd+0x4e8>
 8000702:	e08e      	b.n	8000822 <__aeabi_dadd+0x606>
 8000704:	464b      	mov	r3, r9
 8000706:	4303      	orrs	r3, r0
 8000708:	d117      	bne.n	800073a <__aeabi_dadd+0x51e>
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	2500      	movs	r5, #0
 800070e:	0309      	lsls	r1, r1, #12
 8000710:	e6da      	b.n	80004c8 <__aeabi_dadd+0x2ac>
 8000712:	074a      	lsls	r2, r1, #29
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	4313      	orrs	r3, r2
 8000718:	08c9      	lsrs	r1, r1, #3
 800071a:	e6d1      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 800071c:	1a1c      	subs	r4, r3, r0
 800071e:	464a      	mov	r2, r9
 8000720:	42a3      	cmp	r3, r4
 8000722:	419b      	sbcs	r3, r3
 8000724:	1a89      	subs	r1, r1, r2
 8000726:	425b      	negs	r3, r3
 8000728:	1acb      	subs	r3, r1, r3
 800072a:	469a      	mov	sl, r3
 800072c:	2601      	movs	r6, #1
 800072e:	e5c1      	b.n	80002b4 <__aeabi_dadd+0x98>
 8000730:	074a      	lsls	r2, r1, #29
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	4313      	orrs	r3, r2
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	e69f      	b.n	800047a <__aeabi_dadd+0x25e>
 800073a:	4643      	mov	r3, r8
 800073c:	08d8      	lsrs	r0, r3, #3
 800073e:	464b      	mov	r3, r9
 8000740:	464a      	mov	r2, r9
 8000742:	075b      	lsls	r3, r3, #29
 8000744:	4665      	mov	r5, ip
 8000746:	4303      	orrs	r3, r0
 8000748:	08d1      	lsrs	r1, r2, #3
 800074a:	e6b9      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 800074c:	4643      	mov	r3, r8
 800074e:	08d8      	lsrs	r0, r3, #3
 8000750:	464b      	mov	r3, r9
 8000752:	464a      	mov	r2, r9
 8000754:	075b      	lsls	r3, r3, #29
 8000756:	4303      	orrs	r3, r0
 8000758:	08d1      	lsrs	r1, r2, #3
 800075a:	e6b1      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 800075c:	4319      	orrs	r1, r3
 800075e:	000c      	movs	r4, r1
 8000760:	1e63      	subs	r3, r4, #1
 8000762:	419c      	sbcs	r4, r3
 8000764:	e6eb      	b.n	800053e <__aeabi_dadd+0x322>
 8000766:	003c      	movs	r4, r7
 8000768:	000d      	movs	r5, r1
 800076a:	3c20      	subs	r4, #32
 800076c:	40e5      	lsrs	r5, r4
 800076e:	2f20      	cmp	r7, #32
 8000770:	d003      	beq.n	800077a <__aeabi_dadd+0x55e>
 8000772:	2440      	movs	r4, #64	; 0x40
 8000774:	1be4      	subs	r4, r4, r7
 8000776:	40a1      	lsls	r1, r4
 8000778:	430b      	orrs	r3, r1
 800077a:	001c      	movs	r4, r3
 800077c:	1e63      	subs	r3, r4, #1
 800077e:	419c      	sbcs	r4, r3
 8000780:	432c      	orrs	r4, r5
 8000782:	e770      	b.n	8000666 <__aeabi_dadd+0x44a>
 8000784:	2a00      	cmp	r2, #0
 8000786:	d0e1      	beq.n	800074c <__aeabi_dadd+0x530>
 8000788:	464a      	mov	r2, r9
 800078a:	4302      	orrs	r2, r0
 800078c:	d0c1      	beq.n	8000712 <__aeabi_dadd+0x4f6>
 800078e:	074a      	lsls	r2, r1, #29
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	4313      	orrs	r3, r2
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	08c9      	lsrs	r1, r1, #3
 8000798:	0312      	lsls	r2, r2, #12
 800079a:	4211      	tst	r1, r2
 800079c:	d008      	beq.n	80007b0 <__aeabi_dadd+0x594>
 800079e:	4648      	mov	r0, r9
 80007a0:	08c4      	lsrs	r4, r0, #3
 80007a2:	4214      	tst	r4, r2
 80007a4:	d104      	bne.n	80007b0 <__aeabi_dadd+0x594>
 80007a6:	4643      	mov	r3, r8
 80007a8:	0021      	movs	r1, r4
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	0742      	lsls	r2, r0, #29
 80007ae:	4313      	orrs	r3, r2
 80007b0:	0f5a      	lsrs	r2, r3, #29
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	0752      	lsls	r2, r2, #29
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	e681      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 80007bc:	464b      	mov	r3, r9
 80007be:	4303      	orrs	r3, r0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_dadd+0x5a8>
 80007c2:	e714      	b.n	80005ee <__aeabi_dadd+0x3d2>
 80007c4:	464b      	mov	r3, r9
 80007c6:	464a      	mov	r2, r9
 80007c8:	08c0      	lsrs	r0, r0, #3
 80007ca:	075b      	lsls	r3, r3, #29
 80007cc:	4665      	mov	r5, ip
 80007ce:	4303      	orrs	r3, r0
 80007d0:	08d1      	lsrs	r1, r2, #3
 80007d2:	e655      	b.n	8000480 <__aeabi_dadd+0x264>
 80007d4:	1ac4      	subs	r4, r0, r3
 80007d6:	45a0      	cmp	r8, r4
 80007d8:	4180      	sbcs	r0, r0
 80007da:	464b      	mov	r3, r9
 80007dc:	4240      	negs	r0, r0
 80007de:	1a59      	subs	r1, r3, r1
 80007e0:	1a0b      	subs	r3, r1, r0
 80007e2:	469a      	mov	sl, r3
 80007e4:	4665      	mov	r5, ip
 80007e6:	2601      	movs	r6, #1
 80007e8:	e564      	b.n	80002b4 <__aeabi_dadd+0x98>
 80007ea:	1a1c      	subs	r4, r3, r0
 80007ec:	464a      	mov	r2, r9
 80007ee:	42a3      	cmp	r3, r4
 80007f0:	4180      	sbcs	r0, r0
 80007f2:	1a8a      	subs	r2, r1, r2
 80007f4:	4240      	negs	r0, r0
 80007f6:	1a12      	subs	r2, r2, r0
 80007f8:	4692      	mov	sl, r2
 80007fa:	0212      	lsls	r2, r2, #8
 80007fc:	d549      	bpl.n	8000892 <__aeabi_dadd+0x676>
 80007fe:	4642      	mov	r2, r8
 8000800:	1ad4      	subs	r4, r2, r3
 8000802:	45a0      	cmp	r8, r4
 8000804:	4180      	sbcs	r0, r0
 8000806:	464b      	mov	r3, r9
 8000808:	4240      	negs	r0, r0
 800080a:	1a59      	subs	r1, r3, r1
 800080c:	1a0b      	subs	r3, r1, r0
 800080e:	469a      	mov	sl, r3
 8000810:	4665      	mov	r5, ip
 8000812:	e57f      	b.n	8000314 <__aeabi_dadd+0xf8>
 8000814:	464b      	mov	r3, r9
 8000816:	464a      	mov	r2, r9
 8000818:	08c0      	lsrs	r0, r0, #3
 800081a:	075b      	lsls	r3, r3, #29
 800081c:	4303      	orrs	r3, r0
 800081e:	08d1      	lsrs	r1, r2, #3
 8000820:	e62b      	b.n	800047a <__aeabi_dadd+0x25e>
 8000822:	464a      	mov	r2, r9
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	4302      	orrs	r2, r0
 8000828:	d138      	bne.n	800089c <__aeabi_dadd+0x680>
 800082a:	074a      	lsls	r2, r1, #29
 800082c:	4313      	orrs	r3, r2
 800082e:	08c9      	lsrs	r1, r1, #3
 8000830:	e646      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 8000832:	464b      	mov	r3, r9
 8000834:	464a      	mov	r2, r9
 8000836:	08c0      	lsrs	r0, r0, #3
 8000838:	075b      	lsls	r3, r3, #29
 800083a:	4303      	orrs	r3, r0
 800083c:	08d1      	lsrs	r1, r2, #3
 800083e:	e61f      	b.n	8000480 <__aeabi_dadd+0x264>
 8000840:	181c      	adds	r4, r3, r0
 8000842:	429c      	cmp	r4, r3
 8000844:	419b      	sbcs	r3, r3
 8000846:	4449      	add	r1, r9
 8000848:	468a      	mov	sl, r1
 800084a:	425b      	negs	r3, r3
 800084c:	449a      	add	sl, r3
 800084e:	4653      	mov	r3, sl
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	d400      	bmi.n	8000856 <__aeabi_dadd+0x63a>
 8000854:	e607      	b.n	8000466 <__aeabi_dadd+0x24a>
 8000856:	4652      	mov	r2, sl
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <__aeabi_dadd+0x6bc>)
 800085a:	2601      	movs	r6, #1
 800085c:	401a      	ands	r2, r3
 800085e:	4692      	mov	sl, r2
 8000860:	e601      	b.n	8000466 <__aeabi_dadd+0x24a>
 8000862:	003c      	movs	r4, r7
 8000864:	000e      	movs	r6, r1
 8000866:	3c20      	subs	r4, #32
 8000868:	40e6      	lsrs	r6, r4
 800086a:	2f20      	cmp	r7, #32
 800086c:	d003      	beq.n	8000876 <__aeabi_dadd+0x65a>
 800086e:	2440      	movs	r4, #64	; 0x40
 8000870:	1be4      	subs	r4, r4, r7
 8000872:	40a1      	lsls	r1, r4
 8000874:	430b      	orrs	r3, r1
 8000876:	001c      	movs	r4, r3
 8000878:	1e63      	subs	r3, r4, #1
 800087a:	419c      	sbcs	r4, r3
 800087c:	4334      	orrs	r4, r6
 800087e:	e65e      	b.n	800053e <__aeabi_dadd+0x322>
 8000880:	4443      	add	r3, r8
 8000882:	4283      	cmp	r3, r0
 8000884:	4180      	sbcs	r0, r0
 8000886:	4449      	add	r1, r9
 8000888:	468a      	mov	sl, r1
 800088a:	4240      	negs	r0, r0
 800088c:	001c      	movs	r4, r3
 800088e:	4482      	add	sl, r0
 8000890:	e6bc      	b.n	800060c <__aeabi_dadd+0x3f0>
 8000892:	4653      	mov	r3, sl
 8000894:	4323      	orrs	r3, r4
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x67e>
 8000898:	e6a9      	b.n	80005ee <__aeabi_dadd+0x3d2>
 800089a:	e5e4      	b.n	8000466 <__aeabi_dadd+0x24a>
 800089c:	074a      	lsls	r2, r1, #29
 800089e:	4313      	orrs	r3, r2
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	08c9      	lsrs	r1, r1, #3
 80008a4:	0312      	lsls	r2, r2, #12
 80008a6:	4211      	tst	r1, r2
 80008a8:	d009      	beq.n	80008be <__aeabi_dadd+0x6a2>
 80008aa:	4648      	mov	r0, r9
 80008ac:	08c4      	lsrs	r4, r0, #3
 80008ae:	4214      	tst	r4, r2
 80008b0:	d105      	bne.n	80008be <__aeabi_dadd+0x6a2>
 80008b2:	4643      	mov	r3, r8
 80008b4:	4665      	mov	r5, ip
 80008b6:	0021      	movs	r1, r4
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	0742      	lsls	r2, r0, #29
 80008bc:	4313      	orrs	r3, r2
 80008be:	0f5a      	lsrs	r2, r3, #29
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	0752      	lsls	r2, r2, #29
 80008c6:	4313      	orrs	r3, r2
 80008c8:	e5fa      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 80008ca:	2300      	movs	r3, #0
 80008cc:	4a01      	ldr	r2, [pc, #4]	; (80008d4 <__aeabi_dadd+0x6b8>)
 80008ce:	001c      	movs	r4, r3
 80008d0:	e540      	b.n	8000354 <__aeabi_dadd+0x138>
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	000007ff 	.word	0x000007ff
 80008d8:	ff7fffff 	.word	0xff7fffff

080008dc <__aeabi_ddiv>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	4657      	mov	r7, sl
 80008e0:	464e      	mov	r6, r9
 80008e2:	4645      	mov	r5, r8
 80008e4:	46de      	mov	lr, fp
 80008e6:	b5e0      	push	{r5, r6, r7, lr}
 80008e8:	030c      	lsls	r4, r1, #12
 80008ea:	001f      	movs	r7, r3
 80008ec:	004b      	lsls	r3, r1, #1
 80008ee:	4681      	mov	r9, r0
 80008f0:	4692      	mov	sl, r2
 80008f2:	0005      	movs	r5, r0
 80008f4:	b085      	sub	sp, #20
 80008f6:	0b24      	lsrs	r4, r4, #12
 80008f8:	0d5b      	lsrs	r3, r3, #21
 80008fa:	0fce      	lsrs	r6, r1, #31
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_ddiv+0x26>
 8000900:	e152      	b.n	8000ba8 <__aeabi_ddiv+0x2cc>
 8000902:	4ad2      	ldr	r2, [pc, #840]	; (8000c4c <__aeabi_ddiv+0x370>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d100      	bne.n	800090a <__aeabi_ddiv+0x2e>
 8000908:	e16e      	b.n	8000be8 <__aeabi_ddiv+0x30c>
 800090a:	0f42      	lsrs	r2, r0, #29
 800090c:	00e4      	lsls	r4, r4, #3
 800090e:	4314      	orrs	r4, r2
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	0412      	lsls	r2, r2, #16
 8000914:	4322      	orrs	r2, r4
 8000916:	4690      	mov	r8, r2
 8000918:	4acd      	ldr	r2, [pc, #820]	; (8000c50 <__aeabi_ddiv+0x374>)
 800091a:	00c5      	lsls	r5, r0, #3
 800091c:	4693      	mov	fp, r2
 800091e:	449b      	add	fp, r3
 8000920:	2300      	movs	r3, #0
 8000922:	4699      	mov	r9, r3
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	033c      	lsls	r4, r7, #12
 8000928:	007b      	lsls	r3, r7, #1
 800092a:	4650      	mov	r0, sl
 800092c:	0b24      	lsrs	r4, r4, #12
 800092e:	0d5b      	lsrs	r3, r3, #21
 8000930:	0fff      	lsrs	r7, r7, #31
 8000932:	2b00      	cmp	r3, #0
 8000934:	d100      	bne.n	8000938 <__aeabi_ddiv+0x5c>
 8000936:	e11a      	b.n	8000b6e <__aeabi_ddiv+0x292>
 8000938:	4ac4      	ldr	r2, [pc, #784]	; (8000c4c <__aeabi_ddiv+0x370>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_ddiv+0x64>
 800093e:	e15e      	b.n	8000bfe <__aeabi_ddiv+0x322>
 8000940:	0f42      	lsrs	r2, r0, #29
 8000942:	00e4      	lsls	r4, r4, #3
 8000944:	4322      	orrs	r2, r4
 8000946:	2480      	movs	r4, #128	; 0x80
 8000948:	0424      	lsls	r4, r4, #16
 800094a:	4314      	orrs	r4, r2
 800094c:	4ac0      	ldr	r2, [pc, #768]	; (8000c50 <__aeabi_ddiv+0x374>)
 800094e:	00c1      	lsls	r1, r0, #3
 8000950:	4694      	mov	ip, r2
 8000952:	465a      	mov	r2, fp
 8000954:	4463      	add	r3, ip
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	469b      	mov	fp, r3
 800095a:	2000      	movs	r0, #0
 800095c:	0033      	movs	r3, r6
 800095e:	407b      	eors	r3, r7
 8000960:	469a      	mov	sl, r3
 8000962:	464b      	mov	r3, r9
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d827      	bhi.n	80009b8 <__aeabi_ddiv+0xdc>
 8000968:	4aba      	ldr	r2, [pc, #744]	; (8000c54 <__aeabi_ddiv+0x378>)
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	58d3      	ldr	r3, [r2, r3]
 800096e:	469f      	mov	pc, r3
 8000970:	46b2      	mov	sl, r6
 8000972:	9b00      	ldr	r3, [sp, #0]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d016      	beq.n	80009a6 <__aeabi_ddiv+0xca>
 8000978:	2b03      	cmp	r3, #3
 800097a:	d100      	bne.n	800097e <__aeabi_ddiv+0xa2>
 800097c:	e287      	b.n	8000e8e <__aeabi_ddiv+0x5b2>
 800097e:	2b01      	cmp	r3, #1
 8000980:	d000      	beq.n	8000984 <__aeabi_ddiv+0xa8>
 8000982:	e0d5      	b.n	8000b30 <__aeabi_ddiv+0x254>
 8000984:	2300      	movs	r3, #0
 8000986:	2200      	movs	r2, #0
 8000988:	2500      	movs	r5, #0
 800098a:	051b      	lsls	r3, r3, #20
 800098c:	4313      	orrs	r3, r2
 800098e:	4652      	mov	r2, sl
 8000990:	07d2      	lsls	r2, r2, #31
 8000992:	4313      	orrs	r3, r2
 8000994:	0028      	movs	r0, r5
 8000996:	0019      	movs	r1, r3
 8000998:	b005      	add	sp, #20
 800099a:	bcf0      	pop	{r4, r5, r6, r7}
 800099c:	46bb      	mov	fp, r7
 800099e:	46b2      	mov	sl, r6
 80009a0:	46a9      	mov	r9, r5
 80009a2:	46a0      	mov	r8, r4
 80009a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a6:	2200      	movs	r2, #0
 80009a8:	2500      	movs	r5, #0
 80009aa:	4ba8      	ldr	r3, [pc, #672]	; (8000c4c <__aeabi_ddiv+0x370>)
 80009ac:	e7ed      	b.n	800098a <__aeabi_ddiv+0xae>
 80009ae:	46ba      	mov	sl, r7
 80009b0:	46a0      	mov	r8, r4
 80009b2:	000d      	movs	r5, r1
 80009b4:	9000      	str	r0, [sp, #0]
 80009b6:	e7dc      	b.n	8000972 <__aeabi_ddiv+0x96>
 80009b8:	4544      	cmp	r4, r8
 80009ba:	d200      	bcs.n	80009be <__aeabi_ddiv+0xe2>
 80009bc:	e1c4      	b.n	8000d48 <__aeabi_ddiv+0x46c>
 80009be:	d100      	bne.n	80009c2 <__aeabi_ddiv+0xe6>
 80009c0:	e1bf      	b.n	8000d42 <__aeabi_ddiv+0x466>
 80009c2:	2301      	movs	r3, #1
 80009c4:	425b      	negs	r3, r3
 80009c6:	469c      	mov	ip, r3
 80009c8:	002e      	movs	r6, r5
 80009ca:	4640      	mov	r0, r8
 80009cc:	2500      	movs	r5, #0
 80009ce:	44e3      	add	fp, ip
 80009d0:	0223      	lsls	r3, r4, #8
 80009d2:	0e0c      	lsrs	r4, r1, #24
 80009d4:	431c      	orrs	r4, r3
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	4699      	mov	r9, r3
 80009da:	0423      	lsls	r3, r4, #16
 80009dc:	020a      	lsls	r2, r1, #8
 80009de:	0c1f      	lsrs	r7, r3, #16
 80009e0:	4649      	mov	r1, r9
 80009e2:	9200      	str	r2, [sp, #0]
 80009e4:	9701      	str	r7, [sp, #4]
 80009e6:	f7ff fc13 	bl	8000210 <__aeabi_uidivmod>
 80009ea:	0002      	movs	r2, r0
 80009ec:	437a      	muls	r2, r7
 80009ee:	040b      	lsls	r3, r1, #16
 80009f0:	0c31      	lsrs	r1, r6, #16
 80009f2:	4680      	mov	r8, r0
 80009f4:	4319      	orrs	r1, r3
 80009f6:	428a      	cmp	r2, r1
 80009f8:	d907      	bls.n	8000a0a <__aeabi_ddiv+0x12e>
 80009fa:	2301      	movs	r3, #1
 80009fc:	425b      	negs	r3, r3
 80009fe:	469c      	mov	ip, r3
 8000a00:	1909      	adds	r1, r1, r4
 8000a02:	44e0      	add	r8, ip
 8000a04:	428c      	cmp	r4, r1
 8000a06:	d800      	bhi.n	8000a0a <__aeabi_ddiv+0x12e>
 8000a08:	e201      	b.n	8000e0e <__aeabi_ddiv+0x532>
 8000a0a:	1a88      	subs	r0, r1, r2
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	f7ff fbff 	bl	8000210 <__aeabi_uidivmod>
 8000a12:	9a01      	ldr	r2, [sp, #4]
 8000a14:	0436      	lsls	r6, r6, #16
 8000a16:	4342      	muls	r2, r0
 8000a18:	0409      	lsls	r1, r1, #16
 8000a1a:	0c36      	lsrs	r6, r6, #16
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	430e      	orrs	r6, r1
 8000a20:	42b2      	cmp	r2, r6
 8000a22:	d904      	bls.n	8000a2e <__aeabi_ddiv+0x152>
 8000a24:	1936      	adds	r6, r6, r4
 8000a26:	3b01      	subs	r3, #1
 8000a28:	42b4      	cmp	r4, r6
 8000a2a:	d800      	bhi.n	8000a2e <__aeabi_ddiv+0x152>
 8000a2c:	e1e9      	b.n	8000e02 <__aeabi_ddiv+0x526>
 8000a2e:	1ab0      	subs	r0, r6, r2
 8000a30:	4642      	mov	r2, r8
 8000a32:	9e00      	ldr	r6, [sp, #0]
 8000a34:	0412      	lsls	r2, r2, #16
 8000a36:	431a      	orrs	r2, r3
 8000a38:	0c33      	lsrs	r3, r6, #16
 8000a3a:	001f      	movs	r7, r3
 8000a3c:	0c11      	lsrs	r1, r2, #16
 8000a3e:	4690      	mov	r8, r2
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	0413      	lsls	r3, r2, #16
 8000a44:	0432      	lsls	r2, r6, #16
 8000a46:	0c16      	lsrs	r6, r2, #16
 8000a48:	0032      	movs	r2, r6
 8000a4a:	0c1b      	lsrs	r3, r3, #16
 8000a4c:	435a      	muls	r2, r3
 8000a4e:	9603      	str	r6, [sp, #12]
 8000a50:	437b      	muls	r3, r7
 8000a52:	434e      	muls	r6, r1
 8000a54:	4379      	muls	r1, r7
 8000a56:	0c17      	lsrs	r7, r2, #16
 8000a58:	46bc      	mov	ip, r7
 8000a5a:	199b      	adds	r3, r3, r6
 8000a5c:	4463      	add	r3, ip
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d903      	bls.n	8000a6a <__aeabi_ddiv+0x18e>
 8000a62:	2680      	movs	r6, #128	; 0x80
 8000a64:	0276      	lsls	r6, r6, #9
 8000a66:	46b4      	mov	ip, r6
 8000a68:	4461      	add	r1, ip
 8000a6a:	0c1e      	lsrs	r6, r3, #16
 8000a6c:	1871      	adds	r1, r6, r1
 8000a6e:	0416      	lsls	r6, r2, #16
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	0c36      	lsrs	r6, r6, #16
 8000a74:	199e      	adds	r6, r3, r6
 8000a76:	4288      	cmp	r0, r1
 8000a78:	d302      	bcc.n	8000a80 <__aeabi_ddiv+0x1a4>
 8000a7a:	d112      	bne.n	8000aa2 <__aeabi_ddiv+0x1c6>
 8000a7c:	42b5      	cmp	r5, r6
 8000a7e:	d210      	bcs.n	8000aa2 <__aeabi_ddiv+0x1c6>
 8000a80:	4643      	mov	r3, r8
 8000a82:	1e5a      	subs	r2, r3, #1
 8000a84:	9b00      	ldr	r3, [sp, #0]
 8000a86:	469c      	mov	ip, r3
 8000a88:	4465      	add	r5, ip
 8000a8a:	001f      	movs	r7, r3
 8000a8c:	429d      	cmp	r5, r3
 8000a8e:	419b      	sbcs	r3, r3
 8000a90:	425b      	negs	r3, r3
 8000a92:	191b      	adds	r3, r3, r4
 8000a94:	18c0      	adds	r0, r0, r3
 8000a96:	4284      	cmp	r4, r0
 8000a98:	d200      	bcs.n	8000a9c <__aeabi_ddiv+0x1c0>
 8000a9a:	e19e      	b.n	8000dda <__aeabi_ddiv+0x4fe>
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_ddiv+0x1c4>
 8000a9e:	e199      	b.n	8000dd4 <__aeabi_ddiv+0x4f8>
 8000aa0:	4690      	mov	r8, r2
 8000aa2:	1bae      	subs	r6, r5, r6
 8000aa4:	42b5      	cmp	r5, r6
 8000aa6:	41ad      	sbcs	r5, r5
 8000aa8:	1a40      	subs	r0, r0, r1
 8000aaa:	426d      	negs	r5, r5
 8000aac:	1b40      	subs	r0, r0, r5
 8000aae:	4284      	cmp	r4, r0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_ddiv+0x1d8>
 8000ab2:	e1d2      	b.n	8000e5a <__aeabi_ddiv+0x57e>
 8000ab4:	4649      	mov	r1, r9
 8000ab6:	f7ff fbab 	bl	8000210 <__aeabi_uidivmod>
 8000aba:	9a01      	ldr	r2, [sp, #4]
 8000abc:	040b      	lsls	r3, r1, #16
 8000abe:	4342      	muls	r2, r0
 8000ac0:	0c31      	lsrs	r1, r6, #16
 8000ac2:	0005      	movs	r5, r0
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	d900      	bls.n	8000acc <__aeabi_ddiv+0x1f0>
 8000aca:	e16c      	b.n	8000da6 <__aeabi_ddiv+0x4ca>
 8000acc:	1a88      	subs	r0, r1, r2
 8000ace:	4649      	mov	r1, r9
 8000ad0:	f7ff fb9e 	bl	8000210 <__aeabi_uidivmod>
 8000ad4:	9a01      	ldr	r2, [sp, #4]
 8000ad6:	0436      	lsls	r6, r6, #16
 8000ad8:	4342      	muls	r2, r0
 8000ada:	0409      	lsls	r1, r1, #16
 8000adc:	0c36      	lsrs	r6, r6, #16
 8000ade:	0003      	movs	r3, r0
 8000ae0:	430e      	orrs	r6, r1
 8000ae2:	42b2      	cmp	r2, r6
 8000ae4:	d900      	bls.n	8000ae8 <__aeabi_ddiv+0x20c>
 8000ae6:	e153      	b.n	8000d90 <__aeabi_ddiv+0x4b4>
 8000ae8:	9803      	ldr	r0, [sp, #12]
 8000aea:	1ab6      	subs	r6, r6, r2
 8000aec:	0002      	movs	r2, r0
 8000aee:	042d      	lsls	r5, r5, #16
 8000af0:	431d      	orrs	r5, r3
 8000af2:	9f02      	ldr	r7, [sp, #8]
 8000af4:	042b      	lsls	r3, r5, #16
 8000af6:	0c1b      	lsrs	r3, r3, #16
 8000af8:	435a      	muls	r2, r3
 8000afa:	437b      	muls	r3, r7
 8000afc:	469c      	mov	ip, r3
 8000afe:	0c29      	lsrs	r1, r5, #16
 8000b00:	4348      	muls	r0, r1
 8000b02:	0c13      	lsrs	r3, r2, #16
 8000b04:	4484      	add	ip, r0
 8000b06:	4463      	add	r3, ip
 8000b08:	4379      	muls	r1, r7
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d903      	bls.n	8000b16 <__aeabi_ddiv+0x23a>
 8000b0e:	2080      	movs	r0, #128	; 0x80
 8000b10:	0240      	lsls	r0, r0, #9
 8000b12:	4684      	mov	ip, r0
 8000b14:	4461      	add	r1, ip
 8000b16:	0c18      	lsrs	r0, r3, #16
 8000b18:	0412      	lsls	r2, r2, #16
 8000b1a:	041b      	lsls	r3, r3, #16
 8000b1c:	0c12      	lsrs	r2, r2, #16
 8000b1e:	1840      	adds	r0, r0, r1
 8000b20:	189b      	adds	r3, r3, r2
 8000b22:	4286      	cmp	r6, r0
 8000b24:	d200      	bcs.n	8000b28 <__aeabi_ddiv+0x24c>
 8000b26:	e100      	b.n	8000d2a <__aeabi_ddiv+0x44e>
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x250>
 8000b2a:	e0fb      	b.n	8000d24 <__aeabi_ddiv+0x448>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	431d      	orrs	r5, r3
 8000b30:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <__aeabi_ddiv+0x37c>)
 8000b32:	445b      	add	r3, fp
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dc00      	bgt.n	8000b3a <__aeabi_ddiv+0x25e>
 8000b38:	e0aa      	b.n	8000c90 <__aeabi_ddiv+0x3b4>
 8000b3a:	076a      	lsls	r2, r5, #29
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_ddiv+0x264>
 8000b3e:	e13d      	b.n	8000dbc <__aeabi_ddiv+0x4e0>
 8000b40:	08e9      	lsrs	r1, r5, #3
 8000b42:	4642      	mov	r2, r8
 8000b44:	01d2      	lsls	r2, r2, #7
 8000b46:	d506      	bpl.n	8000b56 <__aeabi_ddiv+0x27a>
 8000b48:	4642      	mov	r2, r8
 8000b4a:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <__aeabi_ddiv+0x380>)
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	4690      	mov	r8, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	445b      	add	r3, fp
 8000b56:	4a42      	ldr	r2, [pc, #264]	; (8000c60 <__aeabi_ddiv+0x384>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_ddiv+0x282>
 8000b5c:	e723      	b.n	80009a6 <__aeabi_ddiv+0xca>
 8000b5e:	4642      	mov	r2, r8
 8000b60:	055b      	lsls	r3, r3, #21
 8000b62:	0755      	lsls	r5, r2, #29
 8000b64:	0252      	lsls	r2, r2, #9
 8000b66:	430d      	orrs	r5, r1
 8000b68:	0b12      	lsrs	r2, r2, #12
 8000b6a:	0d5b      	lsrs	r3, r3, #21
 8000b6c:	e70d      	b.n	800098a <__aeabi_ddiv+0xae>
 8000b6e:	4651      	mov	r1, sl
 8000b70:	4321      	orrs	r1, r4
 8000b72:	d100      	bne.n	8000b76 <__aeabi_ddiv+0x29a>
 8000b74:	e07c      	b.n	8000c70 <__aeabi_ddiv+0x394>
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x2a0>
 8000b7a:	e0fb      	b.n	8000d74 <__aeabi_ddiv+0x498>
 8000b7c:	0020      	movs	r0, r4
 8000b7e:	f001 f8dd 	bl	8001d3c <__clzsi2>
 8000b82:	0002      	movs	r2, r0
 8000b84:	3a0b      	subs	r2, #11
 8000b86:	231d      	movs	r3, #29
 8000b88:	1a9b      	subs	r3, r3, r2
 8000b8a:	4652      	mov	r2, sl
 8000b8c:	0001      	movs	r1, r0
 8000b8e:	40da      	lsrs	r2, r3
 8000b90:	4653      	mov	r3, sl
 8000b92:	3908      	subs	r1, #8
 8000b94:	408b      	lsls	r3, r1
 8000b96:	408c      	lsls	r4, r1
 8000b98:	0019      	movs	r1, r3
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <__aeabi_ddiv+0x388>)
 8000b9e:	4458      	add	r0, fp
 8000ba0:	469b      	mov	fp, r3
 8000ba2:	4483      	add	fp, r0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e6d9      	b.n	800095c <__aeabi_ddiv+0x80>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	4323      	orrs	r3, r4
 8000bac:	4698      	mov	r8, r3
 8000bae:	d044      	beq.n	8000c3a <__aeabi_ddiv+0x35e>
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_ddiv+0x2da>
 8000bb4:	e0cf      	b.n	8000d56 <__aeabi_ddiv+0x47a>
 8000bb6:	0020      	movs	r0, r4
 8000bb8:	f001 f8c0 	bl	8001d3c <__clzsi2>
 8000bbc:	0001      	movs	r1, r0
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	390b      	subs	r1, #11
 8000bc2:	231d      	movs	r3, #29
 8000bc4:	1a5b      	subs	r3, r3, r1
 8000bc6:	4649      	mov	r1, r9
 8000bc8:	0010      	movs	r0, r2
 8000bca:	40d9      	lsrs	r1, r3
 8000bcc:	3808      	subs	r0, #8
 8000bce:	4084      	lsls	r4, r0
 8000bd0:	000b      	movs	r3, r1
 8000bd2:	464d      	mov	r5, r9
 8000bd4:	4323      	orrs	r3, r4
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	4085      	lsls	r5, r0
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <__aeabi_ddiv+0x38c>)
 8000bdc:	1a9b      	subs	r3, r3, r2
 8000bde:	469b      	mov	fp, r3
 8000be0:	2300      	movs	r3, #0
 8000be2:	4699      	mov	r9, r3
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	e69e      	b.n	8000926 <__aeabi_ddiv+0x4a>
 8000be8:	0002      	movs	r2, r0
 8000bea:	4322      	orrs	r2, r4
 8000bec:	4690      	mov	r8, r2
 8000bee:	d11d      	bne.n	8000c2c <__aeabi_ddiv+0x350>
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	469b      	mov	fp, r3
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	4691      	mov	r9, r2
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	e693      	b.n	8000926 <__aeabi_ddiv+0x4a>
 8000bfe:	4651      	mov	r1, sl
 8000c00:	4321      	orrs	r1, r4
 8000c02:	d109      	bne.n	8000c18 <__aeabi_ddiv+0x33c>
 8000c04:	2302      	movs	r3, #2
 8000c06:	464a      	mov	r2, r9
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <__aeabi_ddiv+0x390>)
 8000c0c:	4691      	mov	r9, r2
 8000c0e:	469c      	mov	ip, r3
 8000c10:	2400      	movs	r4, #0
 8000c12:	2002      	movs	r0, #2
 8000c14:	44e3      	add	fp, ip
 8000c16:	e6a1      	b.n	800095c <__aeabi_ddiv+0x80>
 8000c18:	2303      	movs	r3, #3
 8000c1a:	464a      	mov	r2, r9
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <__aeabi_ddiv+0x390>)
 8000c20:	4691      	mov	r9, r2
 8000c22:	469c      	mov	ip, r3
 8000c24:	4651      	mov	r1, sl
 8000c26:	2003      	movs	r0, #3
 8000c28:	44e3      	add	fp, ip
 8000c2a:	e697      	b.n	800095c <__aeabi_ddiv+0x80>
 8000c2c:	220c      	movs	r2, #12
 8000c2e:	469b      	mov	fp, r3
 8000c30:	2303      	movs	r3, #3
 8000c32:	46a0      	mov	r8, r4
 8000c34:	4691      	mov	r9, r2
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	e675      	b.n	8000926 <__aeabi_ddiv+0x4a>
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	4699      	mov	r9, r3
 8000c3e:	2300      	movs	r3, #0
 8000c40:	469b      	mov	fp, r3
 8000c42:	3301      	adds	r3, #1
 8000c44:	2500      	movs	r5, #0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	e66d      	b.n	8000926 <__aeabi_ddiv+0x4a>
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	000007ff 	.word	0x000007ff
 8000c50:	fffffc01 	.word	0xfffffc01
 8000c54:	08008278 	.word	0x08008278
 8000c58:	000003ff 	.word	0x000003ff
 8000c5c:	feffffff 	.word	0xfeffffff
 8000c60:	000007fe 	.word	0x000007fe
 8000c64:	000003f3 	.word	0x000003f3
 8000c68:	fffffc0d 	.word	0xfffffc0d
 8000c6c:	fffff801 	.word	0xfffff801
 8000c70:	464a      	mov	r2, r9
 8000c72:	2301      	movs	r3, #1
 8000c74:	431a      	orrs	r2, r3
 8000c76:	4691      	mov	r9, r2
 8000c78:	2400      	movs	r4, #0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	e66e      	b.n	800095c <__aeabi_ddiv+0x80>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	469a      	mov	sl, r3
 8000c84:	2500      	movs	r5, #0
 8000c86:	4b88      	ldr	r3, [pc, #544]	; (8000ea8 <__aeabi_ddiv+0x5cc>)
 8000c88:	0312      	lsls	r2, r2, #12
 8000c8a:	e67e      	b.n	800098a <__aeabi_ddiv+0xae>
 8000c8c:	2501      	movs	r5, #1
 8000c8e:	426d      	negs	r5, r5
 8000c90:	2201      	movs	r2, #1
 8000c92:	1ad2      	subs	r2, r2, r3
 8000c94:	2a38      	cmp	r2, #56	; 0x38
 8000c96:	dd00      	ble.n	8000c9a <__aeabi_ddiv+0x3be>
 8000c98:	e674      	b.n	8000984 <__aeabi_ddiv+0xa8>
 8000c9a:	2a1f      	cmp	r2, #31
 8000c9c:	dc00      	bgt.n	8000ca0 <__aeabi_ddiv+0x3c4>
 8000c9e:	e0bd      	b.n	8000e1c <__aeabi_ddiv+0x540>
 8000ca0:	211f      	movs	r1, #31
 8000ca2:	4249      	negs	r1, r1
 8000ca4:	1acb      	subs	r3, r1, r3
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	40d9      	lsrs	r1, r3
 8000caa:	000b      	movs	r3, r1
 8000cac:	2a20      	cmp	r2, #32
 8000cae:	d004      	beq.n	8000cba <__aeabi_ddiv+0x3de>
 8000cb0:	4641      	mov	r1, r8
 8000cb2:	4a7e      	ldr	r2, [pc, #504]	; (8000eac <__aeabi_ddiv+0x5d0>)
 8000cb4:	445a      	add	r2, fp
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	430d      	orrs	r5, r1
 8000cba:	0029      	movs	r1, r5
 8000cbc:	1e4a      	subs	r2, r1, #1
 8000cbe:	4191      	sbcs	r1, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	001d      	movs	r5, r3
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	400d      	ands	r5, r1
 8000cca:	420b      	tst	r3, r1
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_ddiv+0x3f4>
 8000cce:	e0d0      	b.n	8000e72 <__aeabi_ddiv+0x596>
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	2a04      	cmp	r2, #4
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_ddiv+0x400>
 8000cda:	e0c7      	b.n	8000e6c <__aeabi_ddiv+0x590>
 8000cdc:	1d0a      	adds	r2, r1, #4
 8000cde:	428a      	cmp	r2, r1
 8000ce0:	4189      	sbcs	r1, r1
 8000ce2:	4249      	negs	r1, r1
 8000ce4:	185b      	adds	r3, r3, r1
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	021a      	lsls	r2, r3, #8
 8000cea:	d400      	bmi.n	8000cee <__aeabi_ddiv+0x412>
 8000cec:	e0be      	b.n	8000e6c <__aeabi_ddiv+0x590>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	e649      	b.n	800098a <__aeabi_ddiv+0xae>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	0312      	lsls	r2, r2, #12
 8000cfc:	4213      	tst	r3, r2
 8000cfe:	d008      	beq.n	8000d12 <__aeabi_ddiv+0x436>
 8000d00:	4214      	tst	r4, r2
 8000d02:	d106      	bne.n	8000d12 <__aeabi_ddiv+0x436>
 8000d04:	4322      	orrs	r2, r4
 8000d06:	0312      	lsls	r2, r2, #12
 8000d08:	46ba      	mov	sl, r7
 8000d0a:	000d      	movs	r5, r1
 8000d0c:	4b66      	ldr	r3, [pc, #408]	; (8000ea8 <__aeabi_ddiv+0x5cc>)
 8000d0e:	0b12      	lsrs	r2, r2, #12
 8000d10:	e63b      	b.n	800098a <__aeabi_ddiv+0xae>
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	4643      	mov	r3, r8
 8000d16:	0312      	lsls	r2, r2, #12
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	0312      	lsls	r2, r2, #12
 8000d1c:	46b2      	mov	sl, r6
 8000d1e:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <__aeabi_ddiv+0x5cc>)
 8000d20:	0b12      	lsrs	r2, r2, #12
 8000d22:	e632      	b.n	800098a <__aeabi_ddiv+0xae>
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_ddiv+0x44e>
 8000d28:	e702      	b.n	8000b30 <__aeabi_ddiv+0x254>
 8000d2a:	19a6      	adds	r6, r4, r6
 8000d2c:	1e6a      	subs	r2, r5, #1
 8000d2e:	42a6      	cmp	r6, r4
 8000d30:	d200      	bcs.n	8000d34 <__aeabi_ddiv+0x458>
 8000d32:	e089      	b.n	8000e48 <__aeabi_ddiv+0x56c>
 8000d34:	4286      	cmp	r6, r0
 8000d36:	d200      	bcs.n	8000d3a <__aeabi_ddiv+0x45e>
 8000d38:	e09f      	b.n	8000e7a <__aeabi_ddiv+0x59e>
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_ddiv+0x462>
 8000d3c:	e0af      	b.n	8000e9e <__aeabi_ddiv+0x5c2>
 8000d3e:	0015      	movs	r5, r2
 8000d40:	e6f4      	b.n	8000b2c <__aeabi_ddiv+0x250>
 8000d42:	42a9      	cmp	r1, r5
 8000d44:	d900      	bls.n	8000d48 <__aeabi_ddiv+0x46c>
 8000d46:	e63c      	b.n	80009c2 <__aeabi_ddiv+0xe6>
 8000d48:	4643      	mov	r3, r8
 8000d4a:	07de      	lsls	r6, r3, #31
 8000d4c:	0858      	lsrs	r0, r3, #1
 8000d4e:	086b      	lsrs	r3, r5, #1
 8000d50:	431e      	orrs	r6, r3
 8000d52:	07ed      	lsls	r5, r5, #31
 8000d54:	e63c      	b.n	80009d0 <__aeabi_ddiv+0xf4>
 8000d56:	f000 fff1 	bl	8001d3c <__clzsi2>
 8000d5a:	0001      	movs	r1, r0
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	3115      	adds	r1, #21
 8000d60:	3220      	adds	r2, #32
 8000d62:	291c      	cmp	r1, #28
 8000d64:	dc00      	bgt.n	8000d68 <__aeabi_ddiv+0x48c>
 8000d66:	e72c      	b.n	8000bc2 <__aeabi_ddiv+0x2e6>
 8000d68:	464b      	mov	r3, r9
 8000d6a:	3808      	subs	r0, #8
 8000d6c:	4083      	lsls	r3, r0
 8000d6e:	2500      	movs	r5, #0
 8000d70:	4698      	mov	r8, r3
 8000d72:	e732      	b.n	8000bda <__aeabi_ddiv+0x2fe>
 8000d74:	f000 ffe2 	bl	8001d3c <__clzsi2>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	3215      	adds	r2, #21
 8000d7e:	3020      	adds	r0, #32
 8000d80:	2a1c      	cmp	r2, #28
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_ddiv+0x4aa>
 8000d84:	e6ff      	b.n	8000b86 <__aeabi_ddiv+0x2aa>
 8000d86:	4654      	mov	r4, sl
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	409c      	lsls	r4, r3
 8000d8e:	e705      	b.n	8000b9c <__aeabi_ddiv+0x2c0>
 8000d90:	1936      	adds	r6, r6, r4
 8000d92:	3b01      	subs	r3, #1
 8000d94:	42b4      	cmp	r4, r6
 8000d96:	d900      	bls.n	8000d9a <__aeabi_ddiv+0x4be>
 8000d98:	e6a6      	b.n	8000ae8 <__aeabi_ddiv+0x20c>
 8000d9a:	42b2      	cmp	r2, r6
 8000d9c:	d800      	bhi.n	8000da0 <__aeabi_ddiv+0x4c4>
 8000d9e:	e6a3      	b.n	8000ae8 <__aeabi_ddiv+0x20c>
 8000da0:	1e83      	subs	r3, r0, #2
 8000da2:	1936      	adds	r6, r6, r4
 8000da4:	e6a0      	b.n	8000ae8 <__aeabi_ddiv+0x20c>
 8000da6:	1909      	adds	r1, r1, r4
 8000da8:	3d01      	subs	r5, #1
 8000daa:	428c      	cmp	r4, r1
 8000dac:	d900      	bls.n	8000db0 <__aeabi_ddiv+0x4d4>
 8000dae:	e68d      	b.n	8000acc <__aeabi_ddiv+0x1f0>
 8000db0:	428a      	cmp	r2, r1
 8000db2:	d800      	bhi.n	8000db6 <__aeabi_ddiv+0x4da>
 8000db4:	e68a      	b.n	8000acc <__aeabi_ddiv+0x1f0>
 8000db6:	1e85      	subs	r5, r0, #2
 8000db8:	1909      	adds	r1, r1, r4
 8000dba:	e687      	b.n	8000acc <__aeabi_ddiv+0x1f0>
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	402a      	ands	r2, r5
 8000dc0:	2a04      	cmp	r2, #4
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x4ea>
 8000dc4:	e6bc      	b.n	8000b40 <__aeabi_ddiv+0x264>
 8000dc6:	1d29      	adds	r1, r5, #4
 8000dc8:	42a9      	cmp	r1, r5
 8000dca:	41ad      	sbcs	r5, r5
 8000dcc:	426d      	negs	r5, r5
 8000dce:	08c9      	lsrs	r1, r1, #3
 8000dd0:	44a8      	add	r8, r5
 8000dd2:	e6b6      	b.n	8000b42 <__aeabi_ddiv+0x266>
 8000dd4:	42af      	cmp	r7, r5
 8000dd6:	d900      	bls.n	8000dda <__aeabi_ddiv+0x4fe>
 8000dd8:	e662      	b.n	8000aa0 <__aeabi_ddiv+0x1c4>
 8000dda:	4281      	cmp	r1, r0
 8000ddc:	d804      	bhi.n	8000de8 <__aeabi_ddiv+0x50c>
 8000dde:	d000      	beq.n	8000de2 <__aeabi_ddiv+0x506>
 8000de0:	e65e      	b.n	8000aa0 <__aeabi_ddiv+0x1c4>
 8000de2:	42ae      	cmp	r6, r5
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x50c>
 8000de6:	e65b      	b.n	8000aa0 <__aeabi_ddiv+0x1c4>
 8000de8:	2302      	movs	r3, #2
 8000dea:	425b      	negs	r3, r3
 8000dec:	469c      	mov	ip, r3
 8000dee:	9b00      	ldr	r3, [sp, #0]
 8000df0:	44e0      	add	r8, ip
 8000df2:	469c      	mov	ip, r3
 8000df4:	4465      	add	r5, ip
 8000df6:	429d      	cmp	r5, r3
 8000df8:	419b      	sbcs	r3, r3
 8000dfa:	425b      	negs	r3, r3
 8000dfc:	191b      	adds	r3, r3, r4
 8000dfe:	18c0      	adds	r0, r0, r3
 8000e00:	e64f      	b.n	8000aa2 <__aeabi_ddiv+0x1c6>
 8000e02:	42b2      	cmp	r2, r6
 8000e04:	d800      	bhi.n	8000e08 <__aeabi_ddiv+0x52c>
 8000e06:	e612      	b.n	8000a2e <__aeabi_ddiv+0x152>
 8000e08:	1e83      	subs	r3, r0, #2
 8000e0a:	1936      	adds	r6, r6, r4
 8000e0c:	e60f      	b.n	8000a2e <__aeabi_ddiv+0x152>
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	d800      	bhi.n	8000e14 <__aeabi_ddiv+0x538>
 8000e12:	e5fa      	b.n	8000a0a <__aeabi_ddiv+0x12e>
 8000e14:	1e83      	subs	r3, r0, #2
 8000e16:	4698      	mov	r8, r3
 8000e18:	1909      	adds	r1, r1, r4
 8000e1a:	e5f6      	b.n	8000a0a <__aeabi_ddiv+0x12e>
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <__aeabi_ddiv+0x5d4>)
 8000e1e:	0028      	movs	r0, r5
 8000e20:	445b      	add	r3, fp
 8000e22:	4641      	mov	r1, r8
 8000e24:	409d      	lsls	r5, r3
 8000e26:	4099      	lsls	r1, r3
 8000e28:	40d0      	lsrs	r0, r2
 8000e2a:	1e6b      	subs	r3, r5, #1
 8000e2c:	419d      	sbcs	r5, r3
 8000e2e:	4643      	mov	r3, r8
 8000e30:	4301      	orrs	r1, r0
 8000e32:	4329      	orrs	r1, r5
 8000e34:	40d3      	lsrs	r3, r2
 8000e36:	074a      	lsls	r2, r1, #29
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x560>
 8000e3a:	e755      	b.n	8000ce8 <__aeabi_ddiv+0x40c>
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	400a      	ands	r2, r1
 8000e40:	2a04      	cmp	r2, #4
 8000e42:	d000      	beq.n	8000e46 <__aeabi_ddiv+0x56a>
 8000e44:	e74a      	b.n	8000cdc <__aeabi_ddiv+0x400>
 8000e46:	e74f      	b.n	8000ce8 <__aeabi_ddiv+0x40c>
 8000e48:	0015      	movs	r5, r2
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_ddiv+0x574>
 8000e4e:	e66d      	b.n	8000b2c <__aeabi_ddiv+0x250>
 8000e50:	9a00      	ldr	r2, [sp, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d000      	beq.n	8000e58 <__aeabi_ddiv+0x57c>
 8000e56:	e669      	b.n	8000b2c <__aeabi_ddiv+0x250>
 8000e58:	e66a      	b.n	8000b30 <__aeabi_ddiv+0x254>
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <__aeabi_ddiv+0x5d8>)
 8000e5c:	445b      	add	r3, fp
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	dc00      	bgt.n	8000e64 <__aeabi_ddiv+0x588>
 8000e62:	e713      	b.n	8000c8c <__aeabi_ddiv+0x3b0>
 8000e64:	2501      	movs	r5, #1
 8000e66:	2100      	movs	r1, #0
 8000e68:	44a8      	add	r8, r5
 8000e6a:	e66a      	b.n	8000b42 <__aeabi_ddiv+0x266>
 8000e6c:	075d      	lsls	r5, r3, #29
 8000e6e:	025b      	lsls	r3, r3, #9
 8000e70:	0b1a      	lsrs	r2, r3, #12
 8000e72:	08c9      	lsrs	r1, r1, #3
 8000e74:	2300      	movs	r3, #0
 8000e76:	430d      	orrs	r5, r1
 8000e78:	e587      	b.n	800098a <__aeabi_ddiv+0xae>
 8000e7a:	9900      	ldr	r1, [sp, #0]
 8000e7c:	3d02      	subs	r5, #2
 8000e7e:	004a      	lsls	r2, r1, #1
 8000e80:	428a      	cmp	r2, r1
 8000e82:	41bf      	sbcs	r7, r7
 8000e84:	427f      	negs	r7, r7
 8000e86:	193f      	adds	r7, r7, r4
 8000e88:	19f6      	adds	r6, r6, r7
 8000e8a:	9200      	str	r2, [sp, #0]
 8000e8c:	e7dd      	b.n	8000e4a <__aeabi_ddiv+0x56e>
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	4643      	mov	r3, r8
 8000e92:	0312      	lsls	r2, r2, #12
 8000e94:	431a      	orrs	r2, r3
 8000e96:	0312      	lsls	r2, r2, #12
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <__aeabi_ddiv+0x5cc>)
 8000e9a:	0b12      	lsrs	r2, r2, #12
 8000e9c:	e575      	b.n	800098a <__aeabi_ddiv+0xae>
 8000e9e:	9900      	ldr	r1, [sp, #0]
 8000ea0:	4299      	cmp	r1, r3
 8000ea2:	d3ea      	bcc.n	8000e7a <__aeabi_ddiv+0x59e>
 8000ea4:	0015      	movs	r5, r2
 8000ea6:	e7d3      	b.n	8000e50 <__aeabi_ddiv+0x574>
 8000ea8:	000007ff 	.word	0x000007ff
 8000eac:	0000043e 	.word	0x0000043e
 8000eb0:	0000041e 	.word	0x0000041e
 8000eb4:	000003ff 	.word	0x000003ff

08000eb8 <__aeabi_dmul>:
 8000eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eba:	4645      	mov	r5, r8
 8000ebc:	46de      	mov	lr, fp
 8000ebe:	4657      	mov	r7, sl
 8000ec0:	464e      	mov	r6, r9
 8000ec2:	b5e0      	push	{r5, r6, r7, lr}
 8000ec4:	001f      	movs	r7, r3
 8000ec6:	030b      	lsls	r3, r1, #12
 8000ec8:	0b1b      	lsrs	r3, r3, #12
 8000eca:	469b      	mov	fp, r3
 8000ecc:	004d      	lsls	r5, r1, #1
 8000ece:	0fcb      	lsrs	r3, r1, #31
 8000ed0:	0004      	movs	r4, r0
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	0d6d      	lsrs	r5, r5, #21
 8000eda:	d100      	bne.n	8000ede <__aeabi_dmul+0x26>
 8000edc:	e1cd      	b.n	800127a <__aeabi_dmul+0x3c2>
 8000ede:	4bce      	ldr	r3, [pc, #824]	; (8001218 <__aeabi_dmul+0x360>)
 8000ee0:	429d      	cmp	r5, r3
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dmul+0x2e>
 8000ee4:	e1e9      	b.n	80012ba <__aeabi_dmul+0x402>
 8000ee6:	465a      	mov	r2, fp
 8000ee8:	0f43      	lsrs	r3, r0, #29
 8000eea:	00d2      	lsls	r2, r2, #3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	0412      	lsls	r2, r2, #16
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	00c3      	lsls	r3, r0, #3
 8000ef6:	469a      	mov	sl, r3
 8000ef8:	4bc8      	ldr	r3, [pc, #800]	; (800121c <__aeabi_dmul+0x364>)
 8000efa:	4693      	mov	fp, r2
 8000efc:	469c      	mov	ip, r3
 8000efe:	2300      	movs	r3, #0
 8000f00:	2600      	movs	r6, #0
 8000f02:	4465      	add	r5, ip
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	033c      	lsls	r4, r7, #12
 8000f08:	007b      	lsls	r3, r7, #1
 8000f0a:	4648      	mov	r0, r9
 8000f0c:	0b24      	lsrs	r4, r4, #12
 8000f0e:	0d5b      	lsrs	r3, r3, #21
 8000f10:	0fff      	lsrs	r7, r7, #31
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dmul+0x60>
 8000f16:	e189      	b.n	800122c <__aeabi_dmul+0x374>
 8000f18:	4abf      	ldr	r2, [pc, #764]	; (8001218 <__aeabi_dmul+0x360>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <__aeabi_dmul+0x9a>
 8000f1e:	0f42      	lsrs	r2, r0, #29
 8000f20:	00e4      	lsls	r4, r4, #3
 8000f22:	4322      	orrs	r2, r4
 8000f24:	2480      	movs	r4, #128	; 0x80
 8000f26:	0424      	lsls	r4, r4, #16
 8000f28:	4314      	orrs	r4, r2
 8000f2a:	4abc      	ldr	r2, [pc, #752]	; (800121c <__aeabi_dmul+0x364>)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4694      	mov	ip, r2
 8000f30:	4642      	mov	r2, r8
 8000f32:	4463      	add	r3, ip
 8000f34:	195b      	adds	r3, r3, r5
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	9b01      	ldr	r3, [sp, #4]
 8000f3a:	407a      	eors	r2, r7
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	00c0      	lsls	r0, r0, #3
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2e0a      	cmp	r6, #10
 8000f46:	dd1c      	ble.n	8000f82 <__aeabi_dmul+0xca>
 8000f48:	003a      	movs	r2, r7
 8000f4a:	2e0b      	cmp	r6, #11
 8000f4c:	d05e      	beq.n	800100c <__aeabi_dmul+0x154>
 8000f4e:	4647      	mov	r7, r8
 8000f50:	e056      	b.n	8001000 <__aeabi_dmul+0x148>
 8000f52:	4649      	mov	r1, r9
 8000f54:	4bb0      	ldr	r3, [pc, #704]	; (8001218 <__aeabi_dmul+0x360>)
 8000f56:	4321      	orrs	r1, r4
 8000f58:	18eb      	adds	r3, r5, r3
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	d12a      	bne.n	8000fb6 <__aeabi_dmul+0xfe>
 8000f60:	2080      	movs	r0, #128	; 0x80
 8000f62:	2202      	movs	r2, #2
 8000f64:	0100      	lsls	r0, r0, #4
 8000f66:	002b      	movs	r3, r5
 8000f68:	4684      	mov	ip, r0
 8000f6a:	4316      	orrs	r6, r2
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	4463      	add	r3, ip
 8000f70:	407a      	eors	r2, r7
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2e0a      	cmp	r6, #10
 8000f78:	dd00      	ble.n	8000f7c <__aeabi_dmul+0xc4>
 8000f7a:	e231      	b.n	80013e0 <__aeabi_dmul+0x528>
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	2400      	movs	r4, #0
 8000f80:	2102      	movs	r1, #2
 8000f82:	2e02      	cmp	r6, #2
 8000f84:	dc26      	bgt.n	8000fd4 <__aeabi_dmul+0x11c>
 8000f86:	3e01      	subs	r6, #1
 8000f88:	2e01      	cmp	r6, #1
 8000f8a:	d852      	bhi.n	8001032 <__aeabi_dmul+0x17a>
 8000f8c:	2902      	cmp	r1, #2
 8000f8e:	d04c      	beq.n	800102a <__aeabi_dmul+0x172>
 8000f90:	2901      	cmp	r1, #1
 8000f92:	d000      	beq.n	8000f96 <__aeabi_dmul+0xde>
 8000f94:	e118      	b.n	80011c8 <__aeabi_dmul+0x310>
 8000f96:	2300      	movs	r3, #0
 8000f98:	2400      	movs	r4, #0
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	051b      	lsls	r3, r3, #20
 8000f9e:	4323      	orrs	r3, r4
 8000fa0:	07d2      	lsls	r2, r2, #31
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0028      	movs	r0, r5
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	b007      	add	sp, #28
 8000faa:	bcf0      	pop	{r4, r5, r6, r7}
 8000fac:	46bb      	mov	fp, r7
 8000fae:	46b2      	mov	sl, r6
 8000fb0:	46a9      	mov	r9, r5
 8000fb2:	46a0      	mov	r8, r4
 8000fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	2203      	movs	r2, #3
 8000fba:	0109      	lsls	r1, r1, #4
 8000fbc:	002b      	movs	r3, r5
 8000fbe:	468c      	mov	ip, r1
 8000fc0:	4316      	orrs	r6, r2
 8000fc2:	4642      	mov	r2, r8
 8000fc4:	4463      	add	r3, ip
 8000fc6:	407a      	eors	r2, r7
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2e0a      	cmp	r6, #10
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_dmul+0x11a>
 8000fd0:	e228      	b.n	8001424 <__aeabi_dmul+0x56c>
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	2501      	movs	r5, #1
 8000fd6:	40b5      	lsls	r5, r6
 8000fd8:	46ac      	mov	ip, r5
 8000fda:	26a6      	movs	r6, #166	; 0xa6
 8000fdc:	4663      	mov	r3, ip
 8000fde:	00f6      	lsls	r6, r6, #3
 8000fe0:	4035      	ands	r5, r6
 8000fe2:	4233      	tst	r3, r6
 8000fe4:	d10b      	bne.n	8000ffe <__aeabi_dmul+0x146>
 8000fe6:	2690      	movs	r6, #144	; 0x90
 8000fe8:	00b6      	lsls	r6, r6, #2
 8000fea:	4233      	tst	r3, r6
 8000fec:	d118      	bne.n	8001020 <__aeabi_dmul+0x168>
 8000fee:	3eb9      	subs	r6, #185	; 0xb9
 8000ff0:	3eff      	subs	r6, #255	; 0xff
 8000ff2:	421e      	tst	r6, r3
 8000ff4:	d01d      	beq.n	8001032 <__aeabi_dmul+0x17a>
 8000ff6:	46a3      	mov	fp, r4
 8000ff8:	4682      	mov	sl, r0
 8000ffa:	9100      	str	r1, [sp, #0]
 8000ffc:	e000      	b.n	8001000 <__aeabi_dmul+0x148>
 8000ffe:	0017      	movs	r7, r2
 8001000:	9900      	ldr	r1, [sp, #0]
 8001002:	003a      	movs	r2, r7
 8001004:	2902      	cmp	r1, #2
 8001006:	d010      	beq.n	800102a <__aeabi_dmul+0x172>
 8001008:	465c      	mov	r4, fp
 800100a:	4650      	mov	r0, sl
 800100c:	2903      	cmp	r1, #3
 800100e:	d1bf      	bne.n	8000f90 <__aeabi_dmul+0xd8>
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	031b      	lsls	r3, r3, #12
 8001014:	431c      	orrs	r4, r3
 8001016:	0324      	lsls	r4, r4, #12
 8001018:	0005      	movs	r5, r0
 800101a:	4b7f      	ldr	r3, [pc, #508]	; (8001218 <__aeabi_dmul+0x360>)
 800101c:	0b24      	lsrs	r4, r4, #12
 800101e:	e7bd      	b.n	8000f9c <__aeabi_dmul+0xe4>
 8001020:	2480      	movs	r4, #128	; 0x80
 8001022:	2200      	movs	r2, #0
 8001024:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <__aeabi_dmul+0x360>)
 8001026:	0324      	lsls	r4, r4, #12
 8001028:	e7b8      	b.n	8000f9c <__aeabi_dmul+0xe4>
 800102a:	2400      	movs	r4, #0
 800102c:	2500      	movs	r5, #0
 800102e:	4b7a      	ldr	r3, [pc, #488]	; (8001218 <__aeabi_dmul+0x360>)
 8001030:	e7b4      	b.n	8000f9c <__aeabi_dmul+0xe4>
 8001032:	4653      	mov	r3, sl
 8001034:	041e      	lsls	r6, r3, #16
 8001036:	0c36      	lsrs	r6, r6, #16
 8001038:	0c1f      	lsrs	r7, r3, #16
 800103a:	0033      	movs	r3, r6
 800103c:	0c01      	lsrs	r1, r0, #16
 800103e:	0400      	lsls	r0, r0, #16
 8001040:	0c00      	lsrs	r0, r0, #16
 8001042:	4343      	muls	r3, r0
 8001044:	4698      	mov	r8, r3
 8001046:	0003      	movs	r3, r0
 8001048:	437b      	muls	r3, r7
 800104a:	4699      	mov	r9, r3
 800104c:	0033      	movs	r3, r6
 800104e:	434b      	muls	r3, r1
 8001050:	469c      	mov	ip, r3
 8001052:	4643      	mov	r3, r8
 8001054:	000d      	movs	r5, r1
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	469a      	mov	sl, r3
 800105a:	437d      	muls	r5, r7
 800105c:	44cc      	add	ip, r9
 800105e:	44d4      	add	ip, sl
 8001060:	9500      	str	r5, [sp, #0]
 8001062:	45e1      	cmp	r9, ip
 8001064:	d904      	bls.n	8001070 <__aeabi_dmul+0x1b8>
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	025b      	lsls	r3, r3, #9
 800106a:	4699      	mov	r9, r3
 800106c:	444d      	add	r5, r9
 800106e:	9500      	str	r5, [sp, #0]
 8001070:	4663      	mov	r3, ip
 8001072:	0c1b      	lsrs	r3, r3, #16
 8001074:	001d      	movs	r5, r3
 8001076:	4663      	mov	r3, ip
 8001078:	041b      	lsls	r3, r3, #16
 800107a:	469c      	mov	ip, r3
 800107c:	4643      	mov	r3, r8
 800107e:	041b      	lsls	r3, r3, #16
 8001080:	0c1b      	lsrs	r3, r3, #16
 8001082:	4698      	mov	r8, r3
 8001084:	4663      	mov	r3, ip
 8001086:	4443      	add	r3, r8
 8001088:	9303      	str	r3, [sp, #12]
 800108a:	0c23      	lsrs	r3, r4, #16
 800108c:	4698      	mov	r8, r3
 800108e:	0033      	movs	r3, r6
 8001090:	0424      	lsls	r4, r4, #16
 8001092:	0c24      	lsrs	r4, r4, #16
 8001094:	4363      	muls	r3, r4
 8001096:	469c      	mov	ip, r3
 8001098:	0023      	movs	r3, r4
 800109a:	437b      	muls	r3, r7
 800109c:	4699      	mov	r9, r3
 800109e:	4643      	mov	r3, r8
 80010a0:	435e      	muls	r6, r3
 80010a2:	435f      	muls	r7, r3
 80010a4:	444e      	add	r6, r9
 80010a6:	4663      	mov	r3, ip
 80010a8:	46b2      	mov	sl, r6
 80010aa:	0c1e      	lsrs	r6, r3, #16
 80010ac:	4456      	add	r6, sl
 80010ae:	45b1      	cmp	r9, r6
 80010b0:	d903      	bls.n	80010ba <__aeabi_dmul+0x202>
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	025b      	lsls	r3, r3, #9
 80010b6:	4699      	mov	r9, r3
 80010b8:	444f      	add	r7, r9
 80010ba:	0c33      	lsrs	r3, r6, #16
 80010bc:	4699      	mov	r9, r3
 80010be:	003b      	movs	r3, r7
 80010c0:	444b      	add	r3, r9
 80010c2:	9305      	str	r3, [sp, #20]
 80010c4:	4663      	mov	r3, ip
 80010c6:	46ac      	mov	ip, r5
 80010c8:	041f      	lsls	r7, r3, #16
 80010ca:	0c3f      	lsrs	r7, r7, #16
 80010cc:	0436      	lsls	r6, r6, #16
 80010ce:	19f6      	adds	r6, r6, r7
 80010d0:	44b4      	add	ip, r6
 80010d2:	4663      	mov	r3, ip
 80010d4:	9304      	str	r3, [sp, #16]
 80010d6:	465b      	mov	r3, fp
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	469c      	mov	ip, r3
 80010dc:	465b      	mov	r3, fp
 80010de:	041f      	lsls	r7, r3, #16
 80010e0:	0c3f      	lsrs	r7, r7, #16
 80010e2:	003b      	movs	r3, r7
 80010e4:	4343      	muls	r3, r0
 80010e6:	4699      	mov	r9, r3
 80010e8:	4663      	mov	r3, ip
 80010ea:	4343      	muls	r3, r0
 80010ec:	469a      	mov	sl, r3
 80010ee:	464b      	mov	r3, r9
 80010f0:	4660      	mov	r0, ip
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	469b      	mov	fp, r3
 80010f6:	4348      	muls	r0, r1
 80010f8:	4379      	muls	r1, r7
 80010fa:	4451      	add	r1, sl
 80010fc:	4459      	add	r1, fp
 80010fe:	458a      	cmp	sl, r1
 8001100:	d903      	bls.n	800110a <__aeabi_dmul+0x252>
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	025b      	lsls	r3, r3, #9
 8001106:	469a      	mov	sl, r3
 8001108:	4450      	add	r0, sl
 800110a:	0c0b      	lsrs	r3, r1, #16
 800110c:	469a      	mov	sl, r3
 800110e:	464b      	mov	r3, r9
 8001110:	041b      	lsls	r3, r3, #16
 8001112:	0c1b      	lsrs	r3, r3, #16
 8001114:	4699      	mov	r9, r3
 8001116:	003b      	movs	r3, r7
 8001118:	4363      	muls	r3, r4
 800111a:	0409      	lsls	r1, r1, #16
 800111c:	4645      	mov	r5, r8
 800111e:	4449      	add	r1, r9
 8001120:	4699      	mov	r9, r3
 8001122:	4663      	mov	r3, ip
 8001124:	435c      	muls	r4, r3
 8001126:	436b      	muls	r3, r5
 8001128:	469c      	mov	ip, r3
 800112a:	464b      	mov	r3, r9
 800112c:	0c1b      	lsrs	r3, r3, #16
 800112e:	4698      	mov	r8, r3
 8001130:	436f      	muls	r7, r5
 8001132:	193f      	adds	r7, r7, r4
 8001134:	4447      	add	r7, r8
 8001136:	4450      	add	r0, sl
 8001138:	42bc      	cmp	r4, r7
 800113a:	d903      	bls.n	8001144 <__aeabi_dmul+0x28c>
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	025b      	lsls	r3, r3, #9
 8001140:	4698      	mov	r8, r3
 8001142:	44c4      	add	ip, r8
 8001144:	9b04      	ldr	r3, [sp, #16]
 8001146:	9d00      	ldr	r5, [sp, #0]
 8001148:	4698      	mov	r8, r3
 800114a:	4445      	add	r5, r8
 800114c:	42b5      	cmp	r5, r6
 800114e:	41b6      	sbcs	r6, r6
 8001150:	4273      	negs	r3, r6
 8001152:	4698      	mov	r8, r3
 8001154:	464b      	mov	r3, r9
 8001156:	041e      	lsls	r6, r3, #16
 8001158:	9b05      	ldr	r3, [sp, #20]
 800115a:	043c      	lsls	r4, r7, #16
 800115c:	4699      	mov	r9, r3
 800115e:	0c36      	lsrs	r6, r6, #16
 8001160:	19a4      	adds	r4, r4, r6
 8001162:	444c      	add	r4, r9
 8001164:	46a1      	mov	r9, r4
 8001166:	4683      	mov	fp, r0
 8001168:	186e      	adds	r6, r5, r1
 800116a:	44c1      	add	r9, r8
 800116c:	428e      	cmp	r6, r1
 800116e:	4189      	sbcs	r1, r1
 8001170:	44cb      	add	fp, r9
 8001172:	465d      	mov	r5, fp
 8001174:	4249      	negs	r1, r1
 8001176:	186d      	adds	r5, r5, r1
 8001178:	429c      	cmp	r4, r3
 800117a:	41a4      	sbcs	r4, r4
 800117c:	45c1      	cmp	r9, r8
 800117e:	419b      	sbcs	r3, r3
 8001180:	4583      	cmp	fp, r0
 8001182:	4180      	sbcs	r0, r0
 8001184:	428d      	cmp	r5, r1
 8001186:	4189      	sbcs	r1, r1
 8001188:	425b      	negs	r3, r3
 800118a:	4264      	negs	r4, r4
 800118c:	431c      	orrs	r4, r3
 800118e:	4240      	negs	r0, r0
 8001190:	9b03      	ldr	r3, [sp, #12]
 8001192:	4249      	negs	r1, r1
 8001194:	4301      	orrs	r1, r0
 8001196:	0270      	lsls	r0, r6, #9
 8001198:	0c3f      	lsrs	r7, r7, #16
 800119a:	4318      	orrs	r0, r3
 800119c:	19e4      	adds	r4, r4, r7
 800119e:	1e47      	subs	r7, r0, #1
 80011a0:	41b8      	sbcs	r0, r7
 80011a2:	1864      	adds	r4, r4, r1
 80011a4:	4464      	add	r4, ip
 80011a6:	0df6      	lsrs	r6, r6, #23
 80011a8:	0261      	lsls	r1, r4, #9
 80011aa:	4330      	orrs	r0, r6
 80011ac:	0dec      	lsrs	r4, r5, #23
 80011ae:	026e      	lsls	r6, r5, #9
 80011b0:	430c      	orrs	r4, r1
 80011b2:	4330      	orrs	r0, r6
 80011b4:	01c9      	lsls	r1, r1, #7
 80011b6:	d400      	bmi.n	80011ba <__aeabi_dmul+0x302>
 80011b8:	e0f1      	b.n	800139e <__aeabi_dmul+0x4e6>
 80011ba:	2101      	movs	r1, #1
 80011bc:	0843      	lsrs	r3, r0, #1
 80011be:	4001      	ands	r1, r0
 80011c0:	430b      	orrs	r3, r1
 80011c2:	07e0      	lsls	r0, r4, #31
 80011c4:	4318      	orrs	r0, r3
 80011c6:	0864      	lsrs	r4, r4, #1
 80011c8:	4915      	ldr	r1, [pc, #84]	; (8001220 <__aeabi_dmul+0x368>)
 80011ca:	9b02      	ldr	r3, [sp, #8]
 80011cc:	468c      	mov	ip, r1
 80011ce:	4463      	add	r3, ip
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	dc00      	bgt.n	80011d6 <__aeabi_dmul+0x31e>
 80011d4:	e097      	b.n	8001306 <__aeabi_dmul+0x44e>
 80011d6:	0741      	lsls	r1, r0, #29
 80011d8:	d009      	beq.n	80011ee <__aeabi_dmul+0x336>
 80011da:	210f      	movs	r1, #15
 80011dc:	4001      	ands	r1, r0
 80011de:	2904      	cmp	r1, #4
 80011e0:	d005      	beq.n	80011ee <__aeabi_dmul+0x336>
 80011e2:	1d01      	adds	r1, r0, #4
 80011e4:	4281      	cmp	r1, r0
 80011e6:	4180      	sbcs	r0, r0
 80011e8:	4240      	negs	r0, r0
 80011ea:	1824      	adds	r4, r4, r0
 80011ec:	0008      	movs	r0, r1
 80011ee:	01e1      	lsls	r1, r4, #7
 80011f0:	d506      	bpl.n	8001200 <__aeabi_dmul+0x348>
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	00c9      	lsls	r1, r1, #3
 80011f6:	468c      	mov	ip, r1
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <__aeabi_dmul+0x36c>)
 80011fa:	401c      	ands	r4, r3
 80011fc:	9b02      	ldr	r3, [sp, #8]
 80011fe:	4463      	add	r3, ip
 8001200:	4909      	ldr	r1, [pc, #36]	; (8001228 <__aeabi_dmul+0x370>)
 8001202:	428b      	cmp	r3, r1
 8001204:	dd00      	ble.n	8001208 <__aeabi_dmul+0x350>
 8001206:	e710      	b.n	800102a <__aeabi_dmul+0x172>
 8001208:	0761      	lsls	r1, r4, #29
 800120a:	08c5      	lsrs	r5, r0, #3
 800120c:	0264      	lsls	r4, r4, #9
 800120e:	055b      	lsls	r3, r3, #21
 8001210:	430d      	orrs	r5, r1
 8001212:	0b24      	lsrs	r4, r4, #12
 8001214:	0d5b      	lsrs	r3, r3, #21
 8001216:	e6c1      	b.n	8000f9c <__aeabi_dmul+0xe4>
 8001218:	000007ff 	.word	0x000007ff
 800121c:	fffffc01 	.word	0xfffffc01
 8001220:	000003ff 	.word	0x000003ff
 8001224:	feffffff 	.word	0xfeffffff
 8001228:	000007fe 	.word	0x000007fe
 800122c:	464b      	mov	r3, r9
 800122e:	4323      	orrs	r3, r4
 8001230:	d059      	beq.n	80012e6 <__aeabi_dmul+0x42e>
 8001232:	2c00      	cmp	r4, #0
 8001234:	d100      	bne.n	8001238 <__aeabi_dmul+0x380>
 8001236:	e0a3      	b.n	8001380 <__aeabi_dmul+0x4c8>
 8001238:	0020      	movs	r0, r4
 800123a:	f000 fd7f 	bl	8001d3c <__clzsi2>
 800123e:	0001      	movs	r1, r0
 8001240:	0003      	movs	r3, r0
 8001242:	390b      	subs	r1, #11
 8001244:	221d      	movs	r2, #29
 8001246:	1a52      	subs	r2, r2, r1
 8001248:	4649      	mov	r1, r9
 800124a:	0018      	movs	r0, r3
 800124c:	40d1      	lsrs	r1, r2
 800124e:	464a      	mov	r2, r9
 8001250:	3808      	subs	r0, #8
 8001252:	4082      	lsls	r2, r0
 8001254:	4084      	lsls	r4, r0
 8001256:	0010      	movs	r0, r2
 8001258:	430c      	orrs	r4, r1
 800125a:	4a74      	ldr	r2, [pc, #464]	; (800142c <__aeabi_dmul+0x574>)
 800125c:	1aeb      	subs	r3, r5, r3
 800125e:	4694      	mov	ip, r2
 8001260:	4642      	mov	r2, r8
 8001262:	4463      	add	r3, ip
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	9b01      	ldr	r3, [sp, #4]
 8001268:	407a      	eors	r2, r7
 800126a:	3301      	adds	r3, #1
 800126c:	2100      	movs	r1, #0
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2e0a      	cmp	r6, #10
 8001274:	dd00      	ble.n	8001278 <__aeabi_dmul+0x3c0>
 8001276:	e667      	b.n	8000f48 <__aeabi_dmul+0x90>
 8001278:	e683      	b.n	8000f82 <__aeabi_dmul+0xca>
 800127a:	465b      	mov	r3, fp
 800127c:	4303      	orrs	r3, r0
 800127e:	469a      	mov	sl, r3
 8001280:	d02a      	beq.n	80012d8 <__aeabi_dmul+0x420>
 8001282:	465b      	mov	r3, fp
 8001284:	2b00      	cmp	r3, #0
 8001286:	d06d      	beq.n	8001364 <__aeabi_dmul+0x4ac>
 8001288:	4658      	mov	r0, fp
 800128a:	f000 fd57 	bl	8001d3c <__clzsi2>
 800128e:	0001      	movs	r1, r0
 8001290:	0003      	movs	r3, r0
 8001292:	390b      	subs	r1, #11
 8001294:	221d      	movs	r2, #29
 8001296:	1a52      	subs	r2, r2, r1
 8001298:	0021      	movs	r1, r4
 800129a:	0018      	movs	r0, r3
 800129c:	465d      	mov	r5, fp
 800129e:	40d1      	lsrs	r1, r2
 80012a0:	3808      	subs	r0, #8
 80012a2:	4085      	lsls	r5, r0
 80012a4:	000a      	movs	r2, r1
 80012a6:	4084      	lsls	r4, r0
 80012a8:	432a      	orrs	r2, r5
 80012aa:	4693      	mov	fp, r2
 80012ac:	46a2      	mov	sl, r4
 80012ae:	4d5f      	ldr	r5, [pc, #380]	; (800142c <__aeabi_dmul+0x574>)
 80012b0:	2600      	movs	r6, #0
 80012b2:	1aed      	subs	r5, r5, r3
 80012b4:	2300      	movs	r3, #0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	e625      	b.n	8000f06 <__aeabi_dmul+0x4e>
 80012ba:	465b      	mov	r3, fp
 80012bc:	4303      	orrs	r3, r0
 80012be:	469a      	mov	sl, r3
 80012c0:	d105      	bne.n	80012ce <__aeabi_dmul+0x416>
 80012c2:	2300      	movs	r3, #0
 80012c4:	469b      	mov	fp, r3
 80012c6:	3302      	adds	r3, #2
 80012c8:	2608      	movs	r6, #8
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	e61b      	b.n	8000f06 <__aeabi_dmul+0x4e>
 80012ce:	2303      	movs	r3, #3
 80012d0:	4682      	mov	sl, r0
 80012d2:	260c      	movs	r6, #12
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	e616      	b.n	8000f06 <__aeabi_dmul+0x4e>
 80012d8:	2300      	movs	r3, #0
 80012da:	469b      	mov	fp, r3
 80012dc:	3301      	adds	r3, #1
 80012de:	2604      	movs	r6, #4
 80012e0:	2500      	movs	r5, #0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	e60f      	b.n	8000f06 <__aeabi_dmul+0x4e>
 80012e6:	4642      	mov	r2, r8
 80012e8:	3301      	adds	r3, #1
 80012ea:	9501      	str	r5, [sp, #4]
 80012ec:	431e      	orrs	r6, r3
 80012ee:	9b01      	ldr	r3, [sp, #4]
 80012f0:	407a      	eors	r2, r7
 80012f2:	3301      	adds	r3, #1
 80012f4:	2400      	movs	r4, #0
 80012f6:	2000      	movs	r0, #0
 80012f8:	2101      	movs	r1, #1
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2e0a      	cmp	r6, #10
 8001300:	dd00      	ble.n	8001304 <__aeabi_dmul+0x44c>
 8001302:	e621      	b.n	8000f48 <__aeabi_dmul+0x90>
 8001304:	e63d      	b.n	8000f82 <__aeabi_dmul+0xca>
 8001306:	2101      	movs	r1, #1
 8001308:	1ac9      	subs	r1, r1, r3
 800130a:	2938      	cmp	r1, #56	; 0x38
 800130c:	dd00      	ble.n	8001310 <__aeabi_dmul+0x458>
 800130e:	e642      	b.n	8000f96 <__aeabi_dmul+0xde>
 8001310:	291f      	cmp	r1, #31
 8001312:	dd47      	ble.n	80013a4 <__aeabi_dmul+0x4ec>
 8001314:	261f      	movs	r6, #31
 8001316:	0025      	movs	r5, r4
 8001318:	4276      	negs	r6, r6
 800131a:	1af3      	subs	r3, r6, r3
 800131c:	40dd      	lsrs	r5, r3
 800131e:	002b      	movs	r3, r5
 8001320:	2920      	cmp	r1, #32
 8001322:	d005      	beq.n	8001330 <__aeabi_dmul+0x478>
 8001324:	4942      	ldr	r1, [pc, #264]	; (8001430 <__aeabi_dmul+0x578>)
 8001326:	9d02      	ldr	r5, [sp, #8]
 8001328:	468c      	mov	ip, r1
 800132a:	4465      	add	r5, ip
 800132c:	40ac      	lsls	r4, r5
 800132e:	4320      	orrs	r0, r4
 8001330:	1e41      	subs	r1, r0, #1
 8001332:	4188      	sbcs	r0, r1
 8001334:	4318      	orrs	r0, r3
 8001336:	2307      	movs	r3, #7
 8001338:	001d      	movs	r5, r3
 800133a:	2400      	movs	r4, #0
 800133c:	4005      	ands	r5, r0
 800133e:	4203      	tst	r3, r0
 8001340:	d04a      	beq.n	80013d8 <__aeabi_dmul+0x520>
 8001342:	230f      	movs	r3, #15
 8001344:	2400      	movs	r4, #0
 8001346:	4003      	ands	r3, r0
 8001348:	2b04      	cmp	r3, #4
 800134a:	d042      	beq.n	80013d2 <__aeabi_dmul+0x51a>
 800134c:	1d03      	adds	r3, r0, #4
 800134e:	4283      	cmp	r3, r0
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1824      	adds	r4, r4, r0
 8001356:	0018      	movs	r0, r3
 8001358:	0223      	lsls	r3, r4, #8
 800135a:	d53a      	bpl.n	80013d2 <__aeabi_dmul+0x51a>
 800135c:	2301      	movs	r3, #1
 800135e:	2400      	movs	r4, #0
 8001360:	2500      	movs	r5, #0
 8001362:	e61b      	b.n	8000f9c <__aeabi_dmul+0xe4>
 8001364:	f000 fcea 	bl	8001d3c <__clzsi2>
 8001368:	0001      	movs	r1, r0
 800136a:	0003      	movs	r3, r0
 800136c:	3115      	adds	r1, #21
 800136e:	3320      	adds	r3, #32
 8001370:	291c      	cmp	r1, #28
 8001372:	dd8f      	ble.n	8001294 <__aeabi_dmul+0x3dc>
 8001374:	3808      	subs	r0, #8
 8001376:	2200      	movs	r2, #0
 8001378:	4084      	lsls	r4, r0
 800137a:	4692      	mov	sl, r2
 800137c:	46a3      	mov	fp, r4
 800137e:	e796      	b.n	80012ae <__aeabi_dmul+0x3f6>
 8001380:	f000 fcdc 	bl	8001d3c <__clzsi2>
 8001384:	0001      	movs	r1, r0
 8001386:	0003      	movs	r3, r0
 8001388:	3115      	adds	r1, #21
 800138a:	3320      	adds	r3, #32
 800138c:	291c      	cmp	r1, #28
 800138e:	dc00      	bgt.n	8001392 <__aeabi_dmul+0x4da>
 8001390:	e758      	b.n	8001244 <__aeabi_dmul+0x38c>
 8001392:	0002      	movs	r2, r0
 8001394:	464c      	mov	r4, r9
 8001396:	3a08      	subs	r2, #8
 8001398:	2000      	movs	r0, #0
 800139a:	4094      	lsls	r4, r2
 800139c:	e75d      	b.n	800125a <__aeabi_dmul+0x3a2>
 800139e:	9b01      	ldr	r3, [sp, #4]
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	e711      	b.n	80011c8 <__aeabi_dmul+0x310>
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <__aeabi_dmul+0x57c>)
 80013a6:	0026      	movs	r6, r4
 80013a8:	469c      	mov	ip, r3
 80013aa:	0003      	movs	r3, r0
 80013ac:	9d02      	ldr	r5, [sp, #8]
 80013ae:	40cb      	lsrs	r3, r1
 80013b0:	4465      	add	r5, ip
 80013b2:	40ae      	lsls	r6, r5
 80013b4:	431e      	orrs	r6, r3
 80013b6:	0003      	movs	r3, r0
 80013b8:	40ab      	lsls	r3, r5
 80013ba:	1e58      	subs	r0, r3, #1
 80013bc:	4183      	sbcs	r3, r0
 80013be:	0030      	movs	r0, r6
 80013c0:	4318      	orrs	r0, r3
 80013c2:	40cc      	lsrs	r4, r1
 80013c4:	0743      	lsls	r3, r0, #29
 80013c6:	d0c7      	beq.n	8001358 <__aeabi_dmul+0x4a0>
 80013c8:	230f      	movs	r3, #15
 80013ca:	4003      	ands	r3, r0
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d1bd      	bne.n	800134c <__aeabi_dmul+0x494>
 80013d0:	e7c2      	b.n	8001358 <__aeabi_dmul+0x4a0>
 80013d2:	0765      	lsls	r5, r4, #29
 80013d4:	0264      	lsls	r4, r4, #9
 80013d6:	0b24      	lsrs	r4, r4, #12
 80013d8:	08c0      	lsrs	r0, r0, #3
 80013da:	2300      	movs	r3, #0
 80013dc:	4305      	orrs	r5, r0
 80013de:	e5dd      	b.n	8000f9c <__aeabi_dmul+0xe4>
 80013e0:	2500      	movs	r5, #0
 80013e2:	2302      	movs	r3, #2
 80013e4:	2e0f      	cmp	r6, #15
 80013e6:	d10c      	bne.n	8001402 <__aeabi_dmul+0x54a>
 80013e8:	2480      	movs	r4, #128	; 0x80
 80013ea:	465b      	mov	r3, fp
 80013ec:	0324      	lsls	r4, r4, #12
 80013ee:	4223      	tst	r3, r4
 80013f0:	d00e      	beq.n	8001410 <__aeabi_dmul+0x558>
 80013f2:	4221      	tst	r1, r4
 80013f4:	d10c      	bne.n	8001410 <__aeabi_dmul+0x558>
 80013f6:	430c      	orrs	r4, r1
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	003a      	movs	r2, r7
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <__aeabi_dmul+0x580>)
 80013fe:	0b24      	lsrs	r4, r4, #12
 8001400:	e5cc      	b.n	8000f9c <__aeabi_dmul+0xe4>
 8001402:	2e0b      	cmp	r6, #11
 8001404:	d000      	beq.n	8001408 <__aeabi_dmul+0x550>
 8001406:	e5a2      	b.n	8000f4e <__aeabi_dmul+0x96>
 8001408:	468b      	mov	fp, r1
 800140a:	46aa      	mov	sl, r5
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	e5f7      	b.n	8001000 <__aeabi_dmul+0x148>
 8001410:	2480      	movs	r4, #128	; 0x80
 8001412:	465b      	mov	r3, fp
 8001414:	0324      	lsls	r4, r4, #12
 8001416:	431c      	orrs	r4, r3
 8001418:	0324      	lsls	r4, r4, #12
 800141a:	4642      	mov	r2, r8
 800141c:	4655      	mov	r5, sl
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <__aeabi_dmul+0x580>)
 8001420:	0b24      	lsrs	r4, r4, #12
 8001422:	e5bb      	b.n	8000f9c <__aeabi_dmul+0xe4>
 8001424:	464d      	mov	r5, r9
 8001426:	0021      	movs	r1, r4
 8001428:	2303      	movs	r3, #3
 800142a:	e7db      	b.n	80013e4 <__aeabi_dmul+0x52c>
 800142c:	fffffc0d 	.word	0xfffffc0d
 8001430:	0000043e 	.word	0x0000043e
 8001434:	0000041e 	.word	0x0000041e
 8001438:	000007ff 	.word	0x000007ff

0800143c <__aeabi_dsub>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4657      	mov	r7, sl
 8001440:	464e      	mov	r6, r9
 8001442:	4645      	mov	r5, r8
 8001444:	46de      	mov	lr, fp
 8001446:	b5e0      	push	{r5, r6, r7, lr}
 8001448:	000d      	movs	r5, r1
 800144a:	0004      	movs	r4, r0
 800144c:	0019      	movs	r1, r3
 800144e:	0010      	movs	r0, r2
 8001450:	032b      	lsls	r3, r5, #12
 8001452:	0a5b      	lsrs	r3, r3, #9
 8001454:	0f62      	lsrs	r2, r4, #29
 8001456:	431a      	orrs	r2, r3
 8001458:	00e3      	lsls	r3, r4, #3
 800145a:	030c      	lsls	r4, r1, #12
 800145c:	0a64      	lsrs	r4, r4, #9
 800145e:	0f47      	lsrs	r7, r0, #29
 8001460:	4327      	orrs	r7, r4
 8001462:	4cd0      	ldr	r4, [pc, #832]	; (80017a4 <__aeabi_dsub+0x368>)
 8001464:	006e      	lsls	r6, r5, #1
 8001466:	4691      	mov	r9, r2
 8001468:	b083      	sub	sp, #12
 800146a:	004a      	lsls	r2, r1, #1
 800146c:	00c0      	lsls	r0, r0, #3
 800146e:	4698      	mov	r8, r3
 8001470:	46a2      	mov	sl, r4
 8001472:	0d76      	lsrs	r6, r6, #21
 8001474:	0fed      	lsrs	r5, r5, #31
 8001476:	0d52      	lsrs	r2, r2, #21
 8001478:	0fc9      	lsrs	r1, r1, #31
 800147a:	9001      	str	r0, [sp, #4]
 800147c:	42a2      	cmp	r2, r4
 800147e:	d100      	bne.n	8001482 <__aeabi_dsub+0x46>
 8001480:	e0b9      	b.n	80015f6 <__aeabi_dsub+0x1ba>
 8001482:	2401      	movs	r4, #1
 8001484:	4061      	eors	r1, r4
 8001486:	468b      	mov	fp, r1
 8001488:	428d      	cmp	r5, r1
 800148a:	d100      	bne.n	800148e <__aeabi_dsub+0x52>
 800148c:	e08d      	b.n	80015aa <__aeabi_dsub+0x16e>
 800148e:	1ab4      	subs	r4, r6, r2
 8001490:	46a4      	mov	ip, r4
 8001492:	2c00      	cmp	r4, #0
 8001494:	dc00      	bgt.n	8001498 <__aeabi_dsub+0x5c>
 8001496:	e0b7      	b.n	8001608 <__aeabi_dsub+0x1cc>
 8001498:	2a00      	cmp	r2, #0
 800149a:	d100      	bne.n	800149e <__aeabi_dsub+0x62>
 800149c:	e0cb      	b.n	8001636 <__aeabi_dsub+0x1fa>
 800149e:	4ac1      	ldr	r2, [pc, #772]	; (80017a4 <__aeabi_dsub+0x368>)
 80014a0:	4296      	cmp	r6, r2
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dsub+0x6a>
 80014a4:	e186      	b.n	80017b4 <__aeabi_dsub+0x378>
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	0412      	lsls	r2, r2, #16
 80014aa:	4317      	orrs	r7, r2
 80014ac:	4662      	mov	r2, ip
 80014ae:	2a38      	cmp	r2, #56	; 0x38
 80014b0:	dd00      	ble.n	80014b4 <__aeabi_dsub+0x78>
 80014b2:	e1a4      	b.n	80017fe <__aeabi_dsub+0x3c2>
 80014b4:	2a1f      	cmp	r2, #31
 80014b6:	dd00      	ble.n	80014ba <__aeabi_dsub+0x7e>
 80014b8:	e21d      	b.n	80018f6 <__aeabi_dsub+0x4ba>
 80014ba:	4661      	mov	r1, ip
 80014bc:	2220      	movs	r2, #32
 80014be:	003c      	movs	r4, r7
 80014c0:	1a52      	subs	r2, r2, r1
 80014c2:	0001      	movs	r1, r0
 80014c4:	4090      	lsls	r0, r2
 80014c6:	4094      	lsls	r4, r2
 80014c8:	1e42      	subs	r2, r0, #1
 80014ca:	4190      	sbcs	r0, r2
 80014cc:	4662      	mov	r2, ip
 80014ce:	46a0      	mov	r8, r4
 80014d0:	4664      	mov	r4, ip
 80014d2:	40d7      	lsrs	r7, r2
 80014d4:	464a      	mov	r2, r9
 80014d6:	40e1      	lsrs	r1, r4
 80014d8:	4644      	mov	r4, r8
 80014da:	1bd2      	subs	r2, r2, r7
 80014dc:	4691      	mov	r9, r2
 80014de:	430c      	orrs	r4, r1
 80014e0:	4304      	orrs	r4, r0
 80014e2:	1b1c      	subs	r4, r3, r4
 80014e4:	42a3      	cmp	r3, r4
 80014e6:	4192      	sbcs	r2, r2
 80014e8:	464b      	mov	r3, r9
 80014ea:	4252      	negs	r2, r2
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	469a      	mov	sl, r3
 80014f0:	4653      	mov	r3, sl
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	d400      	bmi.n	80014f8 <__aeabi_dsub+0xbc>
 80014f6:	e12b      	b.n	8001750 <__aeabi_dsub+0x314>
 80014f8:	4653      	mov	r3, sl
 80014fa:	025a      	lsls	r2, r3, #9
 80014fc:	0a53      	lsrs	r3, r2, #9
 80014fe:	469a      	mov	sl, r3
 8001500:	4653      	mov	r3, sl
 8001502:	2b00      	cmp	r3, #0
 8001504:	d100      	bne.n	8001508 <__aeabi_dsub+0xcc>
 8001506:	e166      	b.n	80017d6 <__aeabi_dsub+0x39a>
 8001508:	4650      	mov	r0, sl
 800150a:	f000 fc17 	bl	8001d3c <__clzsi2>
 800150e:	0003      	movs	r3, r0
 8001510:	3b08      	subs	r3, #8
 8001512:	2220      	movs	r2, #32
 8001514:	0020      	movs	r0, r4
 8001516:	1ad2      	subs	r2, r2, r3
 8001518:	4651      	mov	r1, sl
 800151a:	40d0      	lsrs	r0, r2
 800151c:	4099      	lsls	r1, r3
 800151e:	0002      	movs	r2, r0
 8001520:	409c      	lsls	r4, r3
 8001522:	430a      	orrs	r2, r1
 8001524:	429e      	cmp	r6, r3
 8001526:	dd00      	ble.n	800152a <__aeabi_dsub+0xee>
 8001528:	e164      	b.n	80017f4 <__aeabi_dsub+0x3b8>
 800152a:	1b9b      	subs	r3, r3, r6
 800152c:	1c59      	adds	r1, r3, #1
 800152e:	291f      	cmp	r1, #31
 8001530:	dd00      	ble.n	8001534 <__aeabi_dsub+0xf8>
 8001532:	e0fe      	b.n	8001732 <__aeabi_dsub+0x2f6>
 8001534:	2320      	movs	r3, #32
 8001536:	0010      	movs	r0, r2
 8001538:	0026      	movs	r6, r4
 800153a:	1a5b      	subs	r3, r3, r1
 800153c:	409c      	lsls	r4, r3
 800153e:	4098      	lsls	r0, r3
 8001540:	40ce      	lsrs	r6, r1
 8001542:	40ca      	lsrs	r2, r1
 8001544:	1e63      	subs	r3, r4, #1
 8001546:	419c      	sbcs	r4, r3
 8001548:	4330      	orrs	r0, r6
 800154a:	4692      	mov	sl, r2
 800154c:	2600      	movs	r6, #0
 800154e:	4304      	orrs	r4, r0
 8001550:	0763      	lsls	r3, r4, #29
 8001552:	d009      	beq.n	8001568 <__aeabi_dsub+0x12c>
 8001554:	230f      	movs	r3, #15
 8001556:	4023      	ands	r3, r4
 8001558:	2b04      	cmp	r3, #4
 800155a:	d005      	beq.n	8001568 <__aeabi_dsub+0x12c>
 800155c:	1d23      	adds	r3, r4, #4
 800155e:	42a3      	cmp	r3, r4
 8001560:	41a4      	sbcs	r4, r4
 8001562:	4264      	negs	r4, r4
 8001564:	44a2      	add	sl, r4
 8001566:	001c      	movs	r4, r3
 8001568:	4653      	mov	r3, sl
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	d400      	bmi.n	8001570 <__aeabi_dsub+0x134>
 800156e:	e0f2      	b.n	8001756 <__aeabi_dsub+0x31a>
 8001570:	4b8c      	ldr	r3, [pc, #560]	; (80017a4 <__aeabi_dsub+0x368>)
 8001572:	3601      	adds	r6, #1
 8001574:	429e      	cmp	r6, r3
 8001576:	d100      	bne.n	800157a <__aeabi_dsub+0x13e>
 8001578:	e10f      	b.n	800179a <__aeabi_dsub+0x35e>
 800157a:	4653      	mov	r3, sl
 800157c:	498a      	ldr	r1, [pc, #552]	; (80017a8 <__aeabi_dsub+0x36c>)
 800157e:	08e4      	lsrs	r4, r4, #3
 8001580:	400b      	ands	r3, r1
 8001582:	0019      	movs	r1, r3
 8001584:	075b      	lsls	r3, r3, #29
 8001586:	4323      	orrs	r3, r4
 8001588:	0572      	lsls	r2, r6, #21
 800158a:	024c      	lsls	r4, r1, #9
 800158c:	0b24      	lsrs	r4, r4, #12
 800158e:	0d52      	lsrs	r2, r2, #21
 8001590:	0512      	lsls	r2, r2, #20
 8001592:	4322      	orrs	r2, r4
 8001594:	07ed      	lsls	r5, r5, #31
 8001596:	432a      	orrs	r2, r5
 8001598:	0018      	movs	r0, r3
 800159a:	0011      	movs	r1, r2
 800159c:	b003      	add	sp, #12
 800159e:	bcf0      	pop	{r4, r5, r6, r7}
 80015a0:	46bb      	mov	fp, r7
 80015a2:	46b2      	mov	sl, r6
 80015a4:	46a9      	mov	r9, r5
 80015a6:	46a0      	mov	r8, r4
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015aa:	1ab4      	subs	r4, r6, r2
 80015ac:	46a4      	mov	ip, r4
 80015ae:	2c00      	cmp	r4, #0
 80015b0:	dd59      	ble.n	8001666 <__aeabi_dsub+0x22a>
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dsub+0x17c>
 80015b6:	e0b0      	b.n	800171a <__aeabi_dsub+0x2de>
 80015b8:	4556      	cmp	r6, sl
 80015ba:	d100      	bne.n	80015be <__aeabi_dsub+0x182>
 80015bc:	e0fa      	b.n	80017b4 <__aeabi_dsub+0x378>
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	0412      	lsls	r2, r2, #16
 80015c2:	4317      	orrs	r7, r2
 80015c4:	4662      	mov	r2, ip
 80015c6:	2a38      	cmp	r2, #56	; 0x38
 80015c8:	dd00      	ble.n	80015cc <__aeabi_dsub+0x190>
 80015ca:	e0d4      	b.n	8001776 <__aeabi_dsub+0x33a>
 80015cc:	2a1f      	cmp	r2, #31
 80015ce:	dc00      	bgt.n	80015d2 <__aeabi_dsub+0x196>
 80015d0:	e1c0      	b.n	8001954 <__aeabi_dsub+0x518>
 80015d2:	0039      	movs	r1, r7
 80015d4:	3a20      	subs	r2, #32
 80015d6:	40d1      	lsrs	r1, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	2a20      	cmp	r2, #32
 80015dc:	d006      	beq.n	80015ec <__aeabi_dsub+0x1b0>
 80015de:	4664      	mov	r4, ip
 80015e0:	2240      	movs	r2, #64	; 0x40
 80015e2:	1b12      	subs	r2, r2, r4
 80015e4:	003c      	movs	r4, r7
 80015e6:	4094      	lsls	r4, r2
 80015e8:	4304      	orrs	r4, r0
 80015ea:	9401      	str	r4, [sp, #4]
 80015ec:	9c01      	ldr	r4, [sp, #4]
 80015ee:	1e62      	subs	r2, r4, #1
 80015f0:	4194      	sbcs	r4, r2
 80015f2:	430c      	orrs	r4, r1
 80015f4:	e0c3      	b.n	800177e <__aeabi_dsub+0x342>
 80015f6:	003c      	movs	r4, r7
 80015f8:	4304      	orrs	r4, r0
 80015fa:	d02b      	beq.n	8001654 <__aeabi_dsub+0x218>
 80015fc:	468b      	mov	fp, r1
 80015fe:	428d      	cmp	r5, r1
 8001600:	d02e      	beq.n	8001660 <__aeabi_dsub+0x224>
 8001602:	4c6a      	ldr	r4, [pc, #424]	; (80017ac <__aeabi_dsub+0x370>)
 8001604:	46a4      	mov	ip, r4
 8001606:	44b4      	add	ip, r6
 8001608:	4664      	mov	r4, ip
 800160a:	2c00      	cmp	r4, #0
 800160c:	d05f      	beq.n	80016ce <__aeabi_dsub+0x292>
 800160e:	1b94      	subs	r4, r2, r6
 8001610:	46a4      	mov	ip, r4
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dsub+0x1dc>
 8001616:	e120      	b.n	800185a <__aeabi_dsub+0x41e>
 8001618:	464c      	mov	r4, r9
 800161a:	431c      	orrs	r4, r3
 800161c:	d100      	bne.n	8001620 <__aeabi_dsub+0x1e4>
 800161e:	e1c7      	b.n	80019b0 <__aeabi_dsub+0x574>
 8001620:	4661      	mov	r1, ip
 8001622:	1e4c      	subs	r4, r1, #1
 8001624:	2901      	cmp	r1, #1
 8001626:	d100      	bne.n	800162a <__aeabi_dsub+0x1ee>
 8001628:	e223      	b.n	8001a72 <__aeabi_dsub+0x636>
 800162a:	4d5e      	ldr	r5, [pc, #376]	; (80017a4 <__aeabi_dsub+0x368>)
 800162c:	45ac      	cmp	ip, r5
 800162e:	d100      	bne.n	8001632 <__aeabi_dsub+0x1f6>
 8001630:	e1d8      	b.n	80019e4 <__aeabi_dsub+0x5a8>
 8001632:	46a4      	mov	ip, r4
 8001634:	e11a      	b.n	800186c <__aeabi_dsub+0x430>
 8001636:	003a      	movs	r2, r7
 8001638:	4302      	orrs	r2, r0
 800163a:	d100      	bne.n	800163e <__aeabi_dsub+0x202>
 800163c:	e0e4      	b.n	8001808 <__aeabi_dsub+0x3cc>
 800163e:	0022      	movs	r2, r4
 8001640:	3a01      	subs	r2, #1
 8001642:	2c01      	cmp	r4, #1
 8001644:	d100      	bne.n	8001648 <__aeabi_dsub+0x20c>
 8001646:	e1c3      	b.n	80019d0 <__aeabi_dsub+0x594>
 8001648:	4956      	ldr	r1, [pc, #344]	; (80017a4 <__aeabi_dsub+0x368>)
 800164a:	428c      	cmp	r4, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dsub+0x214>
 800164e:	e0b1      	b.n	80017b4 <__aeabi_dsub+0x378>
 8001650:	4694      	mov	ip, r2
 8001652:	e72b      	b.n	80014ac <__aeabi_dsub+0x70>
 8001654:	2401      	movs	r4, #1
 8001656:	4061      	eors	r1, r4
 8001658:	468b      	mov	fp, r1
 800165a:	428d      	cmp	r5, r1
 800165c:	d000      	beq.n	8001660 <__aeabi_dsub+0x224>
 800165e:	e716      	b.n	800148e <__aeabi_dsub+0x52>
 8001660:	4952      	ldr	r1, [pc, #328]	; (80017ac <__aeabi_dsub+0x370>)
 8001662:	468c      	mov	ip, r1
 8001664:	44b4      	add	ip, r6
 8001666:	4664      	mov	r4, ip
 8001668:	2c00      	cmp	r4, #0
 800166a:	d100      	bne.n	800166e <__aeabi_dsub+0x232>
 800166c:	e0d3      	b.n	8001816 <__aeabi_dsub+0x3da>
 800166e:	1b91      	subs	r1, r2, r6
 8001670:	468c      	mov	ip, r1
 8001672:	2e00      	cmp	r6, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_dsub+0x23c>
 8001676:	e15e      	b.n	8001936 <__aeabi_dsub+0x4fa>
 8001678:	494a      	ldr	r1, [pc, #296]	; (80017a4 <__aeabi_dsub+0x368>)
 800167a:	428a      	cmp	r2, r1
 800167c:	d100      	bne.n	8001680 <__aeabi_dsub+0x244>
 800167e:	e1be      	b.n	80019fe <__aeabi_dsub+0x5c2>
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	464c      	mov	r4, r9
 8001684:	0409      	lsls	r1, r1, #16
 8001686:	430c      	orrs	r4, r1
 8001688:	46a1      	mov	r9, r4
 800168a:	4661      	mov	r1, ip
 800168c:	2938      	cmp	r1, #56	; 0x38
 800168e:	dd00      	ble.n	8001692 <__aeabi_dsub+0x256>
 8001690:	e1ba      	b.n	8001a08 <__aeabi_dsub+0x5cc>
 8001692:	291f      	cmp	r1, #31
 8001694:	dd00      	ble.n	8001698 <__aeabi_dsub+0x25c>
 8001696:	e227      	b.n	8001ae8 <__aeabi_dsub+0x6ac>
 8001698:	2420      	movs	r4, #32
 800169a:	1a64      	subs	r4, r4, r1
 800169c:	4649      	mov	r1, r9
 800169e:	40a1      	lsls	r1, r4
 80016a0:	001e      	movs	r6, r3
 80016a2:	4688      	mov	r8, r1
 80016a4:	4661      	mov	r1, ip
 80016a6:	40a3      	lsls	r3, r4
 80016a8:	40ce      	lsrs	r6, r1
 80016aa:	4641      	mov	r1, r8
 80016ac:	1e5c      	subs	r4, r3, #1
 80016ae:	41a3      	sbcs	r3, r4
 80016b0:	4331      	orrs	r1, r6
 80016b2:	4319      	orrs	r1, r3
 80016b4:	000c      	movs	r4, r1
 80016b6:	4663      	mov	r3, ip
 80016b8:	4649      	mov	r1, r9
 80016ba:	40d9      	lsrs	r1, r3
 80016bc:	187f      	adds	r7, r7, r1
 80016be:	1824      	adds	r4, r4, r0
 80016c0:	4284      	cmp	r4, r0
 80016c2:	419b      	sbcs	r3, r3
 80016c4:	425b      	negs	r3, r3
 80016c6:	469a      	mov	sl, r3
 80016c8:	0016      	movs	r6, r2
 80016ca:	44ba      	add	sl, r7
 80016cc:	e05d      	b.n	800178a <__aeabi_dsub+0x34e>
 80016ce:	4c38      	ldr	r4, [pc, #224]	; (80017b0 <__aeabi_dsub+0x374>)
 80016d0:	1c72      	adds	r2, r6, #1
 80016d2:	4222      	tst	r2, r4
 80016d4:	d000      	beq.n	80016d8 <__aeabi_dsub+0x29c>
 80016d6:	e0df      	b.n	8001898 <__aeabi_dsub+0x45c>
 80016d8:	464a      	mov	r2, r9
 80016da:	431a      	orrs	r2, r3
 80016dc:	2e00      	cmp	r6, #0
 80016de:	d000      	beq.n	80016e2 <__aeabi_dsub+0x2a6>
 80016e0:	e15c      	b.n	800199c <__aeabi_dsub+0x560>
 80016e2:	2a00      	cmp	r2, #0
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dsub+0x2ac>
 80016e6:	e1cf      	b.n	8001a88 <__aeabi_dsub+0x64c>
 80016e8:	003a      	movs	r2, r7
 80016ea:	4302      	orrs	r2, r0
 80016ec:	d100      	bne.n	80016f0 <__aeabi_dsub+0x2b4>
 80016ee:	e17f      	b.n	80019f0 <__aeabi_dsub+0x5b4>
 80016f0:	1a1c      	subs	r4, r3, r0
 80016f2:	464a      	mov	r2, r9
 80016f4:	42a3      	cmp	r3, r4
 80016f6:	4189      	sbcs	r1, r1
 80016f8:	1bd2      	subs	r2, r2, r7
 80016fa:	4249      	negs	r1, r1
 80016fc:	1a52      	subs	r2, r2, r1
 80016fe:	4692      	mov	sl, r2
 8001700:	0212      	lsls	r2, r2, #8
 8001702:	d400      	bmi.n	8001706 <__aeabi_dsub+0x2ca>
 8001704:	e20a      	b.n	8001b1c <__aeabi_dsub+0x6e0>
 8001706:	1ac4      	subs	r4, r0, r3
 8001708:	42a0      	cmp	r0, r4
 800170a:	4180      	sbcs	r0, r0
 800170c:	464b      	mov	r3, r9
 800170e:	4240      	negs	r0, r0
 8001710:	1aff      	subs	r7, r7, r3
 8001712:	1a3b      	subs	r3, r7, r0
 8001714:	469a      	mov	sl, r3
 8001716:	465d      	mov	r5, fp
 8001718:	e71a      	b.n	8001550 <__aeabi_dsub+0x114>
 800171a:	003a      	movs	r2, r7
 800171c:	4302      	orrs	r2, r0
 800171e:	d073      	beq.n	8001808 <__aeabi_dsub+0x3cc>
 8001720:	0022      	movs	r2, r4
 8001722:	3a01      	subs	r2, #1
 8001724:	2c01      	cmp	r4, #1
 8001726:	d100      	bne.n	800172a <__aeabi_dsub+0x2ee>
 8001728:	e0cb      	b.n	80018c2 <__aeabi_dsub+0x486>
 800172a:	4554      	cmp	r4, sl
 800172c:	d042      	beq.n	80017b4 <__aeabi_dsub+0x378>
 800172e:	4694      	mov	ip, r2
 8001730:	e748      	b.n	80015c4 <__aeabi_dsub+0x188>
 8001732:	0010      	movs	r0, r2
 8001734:	3b1f      	subs	r3, #31
 8001736:	40d8      	lsrs	r0, r3
 8001738:	2920      	cmp	r1, #32
 800173a:	d003      	beq.n	8001744 <__aeabi_dsub+0x308>
 800173c:	2340      	movs	r3, #64	; 0x40
 800173e:	1a5b      	subs	r3, r3, r1
 8001740:	409a      	lsls	r2, r3
 8001742:	4314      	orrs	r4, r2
 8001744:	1e63      	subs	r3, r4, #1
 8001746:	419c      	sbcs	r4, r3
 8001748:	2300      	movs	r3, #0
 800174a:	2600      	movs	r6, #0
 800174c:	469a      	mov	sl, r3
 800174e:	4304      	orrs	r4, r0
 8001750:	0763      	lsls	r3, r4, #29
 8001752:	d000      	beq.n	8001756 <__aeabi_dsub+0x31a>
 8001754:	e6fe      	b.n	8001554 <__aeabi_dsub+0x118>
 8001756:	4652      	mov	r2, sl
 8001758:	08e3      	lsrs	r3, r4, #3
 800175a:	0752      	lsls	r2, r2, #29
 800175c:	4313      	orrs	r3, r2
 800175e:	4652      	mov	r2, sl
 8001760:	46b4      	mov	ip, r6
 8001762:	08d2      	lsrs	r2, r2, #3
 8001764:	490f      	ldr	r1, [pc, #60]	; (80017a4 <__aeabi_dsub+0x368>)
 8001766:	458c      	cmp	ip, r1
 8001768:	d02a      	beq.n	80017c0 <__aeabi_dsub+0x384>
 800176a:	0312      	lsls	r2, r2, #12
 800176c:	0b14      	lsrs	r4, r2, #12
 800176e:	4662      	mov	r2, ip
 8001770:	0552      	lsls	r2, r2, #21
 8001772:	0d52      	lsrs	r2, r2, #21
 8001774:	e70c      	b.n	8001590 <__aeabi_dsub+0x154>
 8001776:	003c      	movs	r4, r7
 8001778:	4304      	orrs	r4, r0
 800177a:	1e62      	subs	r2, r4, #1
 800177c:	4194      	sbcs	r4, r2
 800177e:	18e4      	adds	r4, r4, r3
 8001780:	429c      	cmp	r4, r3
 8001782:	4192      	sbcs	r2, r2
 8001784:	4252      	negs	r2, r2
 8001786:	444a      	add	r2, r9
 8001788:	4692      	mov	sl, r2
 800178a:	4653      	mov	r3, sl
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	d5df      	bpl.n	8001750 <__aeabi_dsub+0x314>
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__aeabi_dsub+0x368>)
 8001792:	3601      	adds	r6, #1
 8001794:	429e      	cmp	r6, r3
 8001796:	d000      	beq.n	800179a <__aeabi_dsub+0x35e>
 8001798:	e0a0      	b.n	80018dc <__aeabi_dsub+0x4a0>
 800179a:	0032      	movs	r2, r6
 800179c:	2400      	movs	r4, #0
 800179e:	2300      	movs	r3, #0
 80017a0:	e6f6      	b.n	8001590 <__aeabi_dsub+0x154>
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	000007ff 	.word	0x000007ff
 80017a8:	ff7fffff 	.word	0xff7fffff
 80017ac:	fffff801 	.word	0xfffff801
 80017b0:	000007fe 	.word	0x000007fe
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	464a      	mov	r2, r9
 80017b8:	0752      	lsls	r2, r2, #29
 80017ba:	4313      	orrs	r3, r2
 80017bc:	464a      	mov	r2, r9
 80017be:	08d2      	lsrs	r2, r2, #3
 80017c0:	0019      	movs	r1, r3
 80017c2:	4311      	orrs	r1, r2
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dsub+0x38c>
 80017c6:	e1b5      	b.n	8001b34 <__aeabi_dsub+0x6f8>
 80017c8:	2480      	movs	r4, #128	; 0x80
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	4314      	orrs	r4, r2
 80017ce:	0324      	lsls	r4, r4, #12
 80017d0:	4ad5      	ldr	r2, [pc, #852]	; (8001b28 <__aeabi_dsub+0x6ec>)
 80017d2:	0b24      	lsrs	r4, r4, #12
 80017d4:	e6dc      	b.n	8001590 <__aeabi_dsub+0x154>
 80017d6:	0020      	movs	r0, r4
 80017d8:	f000 fab0 	bl	8001d3c <__clzsi2>
 80017dc:	0003      	movs	r3, r0
 80017de:	3318      	adds	r3, #24
 80017e0:	2b1f      	cmp	r3, #31
 80017e2:	dc00      	bgt.n	80017e6 <__aeabi_dsub+0x3aa>
 80017e4:	e695      	b.n	8001512 <__aeabi_dsub+0xd6>
 80017e6:	0022      	movs	r2, r4
 80017e8:	3808      	subs	r0, #8
 80017ea:	4082      	lsls	r2, r0
 80017ec:	2400      	movs	r4, #0
 80017ee:	429e      	cmp	r6, r3
 80017f0:	dc00      	bgt.n	80017f4 <__aeabi_dsub+0x3b8>
 80017f2:	e69a      	b.n	800152a <__aeabi_dsub+0xee>
 80017f4:	1af6      	subs	r6, r6, r3
 80017f6:	4bcd      	ldr	r3, [pc, #820]	; (8001b2c <__aeabi_dsub+0x6f0>)
 80017f8:	401a      	ands	r2, r3
 80017fa:	4692      	mov	sl, r2
 80017fc:	e6a8      	b.n	8001550 <__aeabi_dsub+0x114>
 80017fe:	003c      	movs	r4, r7
 8001800:	4304      	orrs	r4, r0
 8001802:	1e62      	subs	r2, r4, #1
 8001804:	4194      	sbcs	r4, r2
 8001806:	e66c      	b.n	80014e2 <__aeabi_dsub+0xa6>
 8001808:	464a      	mov	r2, r9
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	0752      	lsls	r2, r2, #29
 800180e:	4313      	orrs	r3, r2
 8001810:	464a      	mov	r2, r9
 8001812:	08d2      	lsrs	r2, r2, #3
 8001814:	e7a6      	b.n	8001764 <__aeabi_dsub+0x328>
 8001816:	4cc6      	ldr	r4, [pc, #792]	; (8001b30 <__aeabi_dsub+0x6f4>)
 8001818:	1c72      	adds	r2, r6, #1
 800181a:	4222      	tst	r2, r4
 800181c:	d000      	beq.n	8001820 <__aeabi_dsub+0x3e4>
 800181e:	e0ac      	b.n	800197a <__aeabi_dsub+0x53e>
 8001820:	464a      	mov	r2, r9
 8001822:	431a      	orrs	r2, r3
 8001824:	2e00      	cmp	r6, #0
 8001826:	d000      	beq.n	800182a <__aeabi_dsub+0x3ee>
 8001828:	e105      	b.n	8001a36 <__aeabi_dsub+0x5fa>
 800182a:	2a00      	cmp	r2, #0
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x3f4>
 800182e:	e156      	b.n	8001ade <__aeabi_dsub+0x6a2>
 8001830:	003a      	movs	r2, r7
 8001832:	4302      	orrs	r2, r0
 8001834:	d100      	bne.n	8001838 <__aeabi_dsub+0x3fc>
 8001836:	e0db      	b.n	80019f0 <__aeabi_dsub+0x5b4>
 8001838:	181c      	adds	r4, r3, r0
 800183a:	429c      	cmp	r4, r3
 800183c:	419b      	sbcs	r3, r3
 800183e:	444f      	add	r7, r9
 8001840:	46ba      	mov	sl, r7
 8001842:	425b      	negs	r3, r3
 8001844:	449a      	add	sl, r3
 8001846:	4653      	mov	r3, sl
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	d400      	bmi.n	800184e <__aeabi_dsub+0x412>
 800184c:	e780      	b.n	8001750 <__aeabi_dsub+0x314>
 800184e:	4652      	mov	r2, sl
 8001850:	4bb6      	ldr	r3, [pc, #728]	; (8001b2c <__aeabi_dsub+0x6f0>)
 8001852:	2601      	movs	r6, #1
 8001854:	401a      	ands	r2, r3
 8001856:	4692      	mov	sl, r2
 8001858:	e77a      	b.n	8001750 <__aeabi_dsub+0x314>
 800185a:	4cb3      	ldr	r4, [pc, #716]	; (8001b28 <__aeabi_dsub+0x6ec>)
 800185c:	42a2      	cmp	r2, r4
 800185e:	d100      	bne.n	8001862 <__aeabi_dsub+0x426>
 8001860:	e0c0      	b.n	80019e4 <__aeabi_dsub+0x5a8>
 8001862:	2480      	movs	r4, #128	; 0x80
 8001864:	464d      	mov	r5, r9
 8001866:	0424      	lsls	r4, r4, #16
 8001868:	4325      	orrs	r5, r4
 800186a:	46a9      	mov	r9, r5
 800186c:	4664      	mov	r4, ip
 800186e:	2c38      	cmp	r4, #56	; 0x38
 8001870:	dc53      	bgt.n	800191a <__aeabi_dsub+0x4de>
 8001872:	4661      	mov	r1, ip
 8001874:	2c1f      	cmp	r4, #31
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0x43e>
 8001878:	e0cd      	b.n	8001a16 <__aeabi_dsub+0x5da>
 800187a:	2520      	movs	r5, #32
 800187c:	001e      	movs	r6, r3
 800187e:	1b2d      	subs	r5, r5, r4
 8001880:	464c      	mov	r4, r9
 8001882:	40ab      	lsls	r3, r5
 8001884:	40ac      	lsls	r4, r5
 8001886:	40ce      	lsrs	r6, r1
 8001888:	1e5d      	subs	r5, r3, #1
 800188a:	41ab      	sbcs	r3, r5
 800188c:	4334      	orrs	r4, r6
 800188e:	4323      	orrs	r3, r4
 8001890:	464c      	mov	r4, r9
 8001892:	40cc      	lsrs	r4, r1
 8001894:	1b3f      	subs	r7, r7, r4
 8001896:	e045      	b.n	8001924 <__aeabi_dsub+0x4e8>
 8001898:	464a      	mov	r2, r9
 800189a:	1a1c      	subs	r4, r3, r0
 800189c:	1bd1      	subs	r1, r2, r7
 800189e:	42a3      	cmp	r3, r4
 80018a0:	4192      	sbcs	r2, r2
 80018a2:	4252      	negs	r2, r2
 80018a4:	4692      	mov	sl, r2
 80018a6:	000a      	movs	r2, r1
 80018a8:	4651      	mov	r1, sl
 80018aa:	1a52      	subs	r2, r2, r1
 80018ac:	4692      	mov	sl, r2
 80018ae:	0212      	lsls	r2, r2, #8
 80018b0:	d500      	bpl.n	80018b4 <__aeabi_dsub+0x478>
 80018b2:	e083      	b.n	80019bc <__aeabi_dsub+0x580>
 80018b4:	4653      	mov	r3, sl
 80018b6:	4323      	orrs	r3, r4
 80018b8:	d000      	beq.n	80018bc <__aeabi_dsub+0x480>
 80018ba:	e621      	b.n	8001500 <__aeabi_dsub+0xc4>
 80018bc:	2200      	movs	r2, #0
 80018be:	2500      	movs	r5, #0
 80018c0:	e753      	b.n	800176a <__aeabi_dsub+0x32e>
 80018c2:	181c      	adds	r4, r3, r0
 80018c4:	429c      	cmp	r4, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	444f      	add	r7, r9
 80018ca:	46ba      	mov	sl, r7
 80018cc:	425b      	negs	r3, r3
 80018ce:	449a      	add	sl, r3
 80018d0:	4653      	mov	r3, sl
 80018d2:	2601      	movs	r6, #1
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	d400      	bmi.n	80018da <__aeabi_dsub+0x49e>
 80018d8:	e73a      	b.n	8001750 <__aeabi_dsub+0x314>
 80018da:	2602      	movs	r6, #2
 80018dc:	4652      	mov	r2, sl
 80018de:	4b93      	ldr	r3, [pc, #588]	; (8001b2c <__aeabi_dsub+0x6f0>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	401a      	ands	r2, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	4021      	ands	r1, r4
 80018e8:	0862      	lsrs	r2, r4, #1
 80018ea:	430a      	orrs	r2, r1
 80018ec:	07dc      	lsls	r4, r3, #31
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	469a      	mov	sl, r3
 80018f2:	4314      	orrs	r4, r2
 80018f4:	e62c      	b.n	8001550 <__aeabi_dsub+0x114>
 80018f6:	0039      	movs	r1, r7
 80018f8:	3a20      	subs	r2, #32
 80018fa:	40d1      	lsrs	r1, r2
 80018fc:	4662      	mov	r2, ip
 80018fe:	2a20      	cmp	r2, #32
 8001900:	d006      	beq.n	8001910 <__aeabi_dsub+0x4d4>
 8001902:	4664      	mov	r4, ip
 8001904:	2240      	movs	r2, #64	; 0x40
 8001906:	1b12      	subs	r2, r2, r4
 8001908:	003c      	movs	r4, r7
 800190a:	4094      	lsls	r4, r2
 800190c:	4304      	orrs	r4, r0
 800190e:	9401      	str	r4, [sp, #4]
 8001910:	9c01      	ldr	r4, [sp, #4]
 8001912:	1e62      	subs	r2, r4, #1
 8001914:	4194      	sbcs	r4, r2
 8001916:	430c      	orrs	r4, r1
 8001918:	e5e3      	b.n	80014e2 <__aeabi_dsub+0xa6>
 800191a:	4649      	mov	r1, r9
 800191c:	4319      	orrs	r1, r3
 800191e:	000b      	movs	r3, r1
 8001920:	1e5c      	subs	r4, r3, #1
 8001922:	41a3      	sbcs	r3, r4
 8001924:	1ac4      	subs	r4, r0, r3
 8001926:	42a0      	cmp	r0, r4
 8001928:	419b      	sbcs	r3, r3
 800192a:	425b      	negs	r3, r3
 800192c:	1afb      	subs	r3, r7, r3
 800192e:	469a      	mov	sl, r3
 8001930:	465d      	mov	r5, fp
 8001932:	0016      	movs	r6, r2
 8001934:	e5dc      	b.n	80014f0 <__aeabi_dsub+0xb4>
 8001936:	4649      	mov	r1, r9
 8001938:	4319      	orrs	r1, r3
 800193a:	d100      	bne.n	800193e <__aeabi_dsub+0x502>
 800193c:	e0ae      	b.n	8001a9c <__aeabi_dsub+0x660>
 800193e:	4661      	mov	r1, ip
 8001940:	4664      	mov	r4, ip
 8001942:	3901      	subs	r1, #1
 8001944:	2c01      	cmp	r4, #1
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x50e>
 8001948:	e0e0      	b.n	8001b0c <__aeabi_dsub+0x6d0>
 800194a:	4c77      	ldr	r4, [pc, #476]	; (8001b28 <__aeabi_dsub+0x6ec>)
 800194c:	45a4      	cmp	ip, r4
 800194e:	d056      	beq.n	80019fe <__aeabi_dsub+0x5c2>
 8001950:	468c      	mov	ip, r1
 8001952:	e69a      	b.n	800168a <__aeabi_dsub+0x24e>
 8001954:	4661      	mov	r1, ip
 8001956:	2220      	movs	r2, #32
 8001958:	003c      	movs	r4, r7
 800195a:	1a52      	subs	r2, r2, r1
 800195c:	4094      	lsls	r4, r2
 800195e:	0001      	movs	r1, r0
 8001960:	4090      	lsls	r0, r2
 8001962:	46a0      	mov	r8, r4
 8001964:	4664      	mov	r4, ip
 8001966:	1e42      	subs	r2, r0, #1
 8001968:	4190      	sbcs	r0, r2
 800196a:	4662      	mov	r2, ip
 800196c:	40e1      	lsrs	r1, r4
 800196e:	4644      	mov	r4, r8
 8001970:	40d7      	lsrs	r7, r2
 8001972:	430c      	orrs	r4, r1
 8001974:	4304      	orrs	r4, r0
 8001976:	44b9      	add	r9, r7
 8001978:	e701      	b.n	800177e <__aeabi_dsub+0x342>
 800197a:	496b      	ldr	r1, [pc, #428]	; (8001b28 <__aeabi_dsub+0x6ec>)
 800197c:	428a      	cmp	r2, r1
 800197e:	d100      	bne.n	8001982 <__aeabi_dsub+0x546>
 8001980:	e70c      	b.n	800179c <__aeabi_dsub+0x360>
 8001982:	1818      	adds	r0, r3, r0
 8001984:	4298      	cmp	r0, r3
 8001986:	419b      	sbcs	r3, r3
 8001988:	444f      	add	r7, r9
 800198a:	425b      	negs	r3, r3
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	07dc      	lsls	r4, r3, #31
 8001990:	0840      	lsrs	r0, r0, #1
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	469a      	mov	sl, r3
 8001996:	0016      	movs	r6, r2
 8001998:	4304      	orrs	r4, r0
 800199a:	e6d9      	b.n	8001750 <__aeabi_dsub+0x314>
 800199c:	2a00      	cmp	r2, #0
 800199e:	d000      	beq.n	80019a2 <__aeabi_dsub+0x566>
 80019a0:	e081      	b.n	8001aa6 <__aeabi_dsub+0x66a>
 80019a2:	003b      	movs	r3, r7
 80019a4:	4303      	orrs	r3, r0
 80019a6:	d11d      	bne.n	80019e4 <__aeabi_dsub+0x5a8>
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	2500      	movs	r5, #0
 80019ac:	0312      	lsls	r2, r2, #12
 80019ae:	e70b      	b.n	80017c8 <__aeabi_dsub+0x38c>
 80019b0:	08c0      	lsrs	r0, r0, #3
 80019b2:	077b      	lsls	r3, r7, #29
 80019b4:	465d      	mov	r5, fp
 80019b6:	4303      	orrs	r3, r0
 80019b8:	08fa      	lsrs	r2, r7, #3
 80019ba:	e6d3      	b.n	8001764 <__aeabi_dsub+0x328>
 80019bc:	1ac4      	subs	r4, r0, r3
 80019be:	42a0      	cmp	r0, r4
 80019c0:	4180      	sbcs	r0, r0
 80019c2:	464b      	mov	r3, r9
 80019c4:	4240      	negs	r0, r0
 80019c6:	1aff      	subs	r7, r7, r3
 80019c8:	1a3b      	subs	r3, r7, r0
 80019ca:	469a      	mov	sl, r3
 80019cc:	465d      	mov	r5, fp
 80019ce:	e597      	b.n	8001500 <__aeabi_dsub+0xc4>
 80019d0:	1a1c      	subs	r4, r3, r0
 80019d2:	464a      	mov	r2, r9
 80019d4:	42a3      	cmp	r3, r4
 80019d6:	419b      	sbcs	r3, r3
 80019d8:	1bd7      	subs	r7, r2, r7
 80019da:	425b      	negs	r3, r3
 80019dc:	1afb      	subs	r3, r7, r3
 80019de:	469a      	mov	sl, r3
 80019e0:	2601      	movs	r6, #1
 80019e2:	e585      	b.n	80014f0 <__aeabi_dsub+0xb4>
 80019e4:	08c0      	lsrs	r0, r0, #3
 80019e6:	077b      	lsls	r3, r7, #29
 80019e8:	465d      	mov	r5, fp
 80019ea:	4303      	orrs	r3, r0
 80019ec:	08fa      	lsrs	r2, r7, #3
 80019ee:	e6e7      	b.n	80017c0 <__aeabi_dsub+0x384>
 80019f0:	464a      	mov	r2, r9
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	0752      	lsls	r2, r2, #29
 80019f6:	4313      	orrs	r3, r2
 80019f8:	464a      	mov	r2, r9
 80019fa:	08d2      	lsrs	r2, r2, #3
 80019fc:	e6b5      	b.n	800176a <__aeabi_dsub+0x32e>
 80019fe:	08c0      	lsrs	r0, r0, #3
 8001a00:	077b      	lsls	r3, r7, #29
 8001a02:	4303      	orrs	r3, r0
 8001a04:	08fa      	lsrs	r2, r7, #3
 8001a06:	e6db      	b.n	80017c0 <__aeabi_dsub+0x384>
 8001a08:	4649      	mov	r1, r9
 8001a0a:	4319      	orrs	r1, r3
 8001a0c:	000b      	movs	r3, r1
 8001a0e:	1e59      	subs	r1, r3, #1
 8001a10:	418b      	sbcs	r3, r1
 8001a12:	001c      	movs	r4, r3
 8001a14:	e653      	b.n	80016be <__aeabi_dsub+0x282>
 8001a16:	464d      	mov	r5, r9
 8001a18:	3c20      	subs	r4, #32
 8001a1a:	40e5      	lsrs	r5, r4
 8001a1c:	2920      	cmp	r1, #32
 8001a1e:	d005      	beq.n	8001a2c <__aeabi_dsub+0x5f0>
 8001a20:	2440      	movs	r4, #64	; 0x40
 8001a22:	1a64      	subs	r4, r4, r1
 8001a24:	4649      	mov	r1, r9
 8001a26:	40a1      	lsls	r1, r4
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	4698      	mov	r8, r3
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	1e5c      	subs	r4, r3, #1
 8001a30:	41a3      	sbcs	r3, r4
 8001a32:	432b      	orrs	r3, r5
 8001a34:	e776      	b.n	8001924 <__aeabi_dsub+0x4e8>
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	d0e1      	beq.n	80019fe <__aeabi_dsub+0x5c2>
 8001a3a:	003a      	movs	r2, r7
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	4302      	orrs	r2, r0
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x608>
 8001a42:	e6b8      	b.n	80017b6 <__aeabi_dsub+0x37a>
 8001a44:	464a      	mov	r2, r9
 8001a46:	0752      	lsls	r2, r2, #29
 8001a48:	2480      	movs	r4, #128	; 0x80
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	0324      	lsls	r4, r4, #12
 8001a50:	08d2      	lsrs	r2, r2, #3
 8001a52:	4222      	tst	r2, r4
 8001a54:	d007      	beq.n	8001a66 <__aeabi_dsub+0x62a>
 8001a56:	08fe      	lsrs	r6, r7, #3
 8001a58:	4226      	tst	r6, r4
 8001a5a:	d104      	bne.n	8001a66 <__aeabi_dsub+0x62a>
 8001a5c:	465d      	mov	r5, fp
 8001a5e:	0032      	movs	r2, r6
 8001a60:	08c3      	lsrs	r3, r0, #3
 8001a62:	077f      	lsls	r7, r7, #29
 8001a64:	433b      	orrs	r3, r7
 8001a66:	0f59      	lsrs	r1, r3, #29
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	0749      	lsls	r1, r1, #29
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	e6a6      	b.n	80017c0 <__aeabi_dsub+0x384>
 8001a72:	1ac4      	subs	r4, r0, r3
 8001a74:	42a0      	cmp	r0, r4
 8001a76:	4180      	sbcs	r0, r0
 8001a78:	464b      	mov	r3, r9
 8001a7a:	4240      	negs	r0, r0
 8001a7c:	1aff      	subs	r7, r7, r3
 8001a7e:	1a3b      	subs	r3, r7, r0
 8001a80:	469a      	mov	sl, r3
 8001a82:	465d      	mov	r5, fp
 8001a84:	2601      	movs	r6, #1
 8001a86:	e533      	b.n	80014f0 <__aeabi_dsub+0xb4>
 8001a88:	003b      	movs	r3, r7
 8001a8a:	4303      	orrs	r3, r0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x654>
 8001a8e:	e715      	b.n	80018bc <__aeabi_dsub+0x480>
 8001a90:	08c0      	lsrs	r0, r0, #3
 8001a92:	077b      	lsls	r3, r7, #29
 8001a94:	465d      	mov	r5, fp
 8001a96:	4303      	orrs	r3, r0
 8001a98:	08fa      	lsrs	r2, r7, #3
 8001a9a:	e666      	b.n	800176a <__aeabi_dsub+0x32e>
 8001a9c:	08c0      	lsrs	r0, r0, #3
 8001a9e:	077b      	lsls	r3, r7, #29
 8001aa0:	4303      	orrs	r3, r0
 8001aa2:	08fa      	lsrs	r2, r7, #3
 8001aa4:	e65e      	b.n	8001764 <__aeabi_dsub+0x328>
 8001aa6:	003a      	movs	r2, r7
 8001aa8:	08db      	lsrs	r3, r3, #3
 8001aaa:	4302      	orrs	r2, r0
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x674>
 8001aae:	e682      	b.n	80017b6 <__aeabi_dsub+0x37a>
 8001ab0:	464a      	mov	r2, r9
 8001ab2:	0752      	lsls	r2, r2, #29
 8001ab4:	2480      	movs	r4, #128	; 0x80
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	464a      	mov	r2, r9
 8001aba:	0324      	lsls	r4, r4, #12
 8001abc:	08d2      	lsrs	r2, r2, #3
 8001abe:	4222      	tst	r2, r4
 8001ac0:	d007      	beq.n	8001ad2 <__aeabi_dsub+0x696>
 8001ac2:	08fe      	lsrs	r6, r7, #3
 8001ac4:	4226      	tst	r6, r4
 8001ac6:	d104      	bne.n	8001ad2 <__aeabi_dsub+0x696>
 8001ac8:	465d      	mov	r5, fp
 8001aca:	0032      	movs	r2, r6
 8001acc:	08c3      	lsrs	r3, r0, #3
 8001ace:	077f      	lsls	r7, r7, #29
 8001ad0:	433b      	orrs	r3, r7
 8001ad2:	0f59      	lsrs	r1, r3, #29
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	0749      	lsls	r1, r1, #29
 8001ada:	430b      	orrs	r3, r1
 8001adc:	e670      	b.n	80017c0 <__aeabi_dsub+0x384>
 8001ade:	08c0      	lsrs	r0, r0, #3
 8001ae0:	077b      	lsls	r3, r7, #29
 8001ae2:	4303      	orrs	r3, r0
 8001ae4:	08fa      	lsrs	r2, r7, #3
 8001ae6:	e640      	b.n	800176a <__aeabi_dsub+0x32e>
 8001ae8:	464c      	mov	r4, r9
 8001aea:	3920      	subs	r1, #32
 8001aec:	40cc      	lsrs	r4, r1
 8001aee:	4661      	mov	r1, ip
 8001af0:	2920      	cmp	r1, #32
 8001af2:	d006      	beq.n	8001b02 <__aeabi_dsub+0x6c6>
 8001af4:	4666      	mov	r6, ip
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	1b89      	subs	r1, r1, r6
 8001afa:	464e      	mov	r6, r9
 8001afc:	408e      	lsls	r6, r1
 8001afe:	4333      	orrs	r3, r6
 8001b00:	4698      	mov	r8, r3
 8001b02:	4643      	mov	r3, r8
 8001b04:	1e59      	subs	r1, r3, #1
 8001b06:	418b      	sbcs	r3, r1
 8001b08:	431c      	orrs	r4, r3
 8001b0a:	e5d8      	b.n	80016be <__aeabi_dsub+0x282>
 8001b0c:	181c      	adds	r4, r3, r0
 8001b0e:	4284      	cmp	r4, r0
 8001b10:	4180      	sbcs	r0, r0
 8001b12:	444f      	add	r7, r9
 8001b14:	46ba      	mov	sl, r7
 8001b16:	4240      	negs	r0, r0
 8001b18:	4482      	add	sl, r0
 8001b1a:	e6d9      	b.n	80018d0 <__aeabi_dsub+0x494>
 8001b1c:	4653      	mov	r3, sl
 8001b1e:	4323      	orrs	r3, r4
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x6e8>
 8001b22:	e6cb      	b.n	80018bc <__aeabi_dsub+0x480>
 8001b24:	e614      	b.n	8001750 <__aeabi_dsub+0x314>
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	ff7fffff 	.word	0xff7fffff
 8001b30:	000007fe 	.word	0x000007fe
 8001b34:	2300      	movs	r3, #0
 8001b36:	4a01      	ldr	r2, [pc, #4]	; (8001b3c <__aeabi_dsub+0x700>)
 8001b38:	001c      	movs	r4, r3
 8001b3a:	e529      	b.n	8001590 <__aeabi_dsub+0x154>
 8001b3c:	000007ff 	.word	0x000007ff

08001b40 <__aeabi_i2d>:
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	2800      	cmp	r0, #0
 8001b44:	d016      	beq.n	8001b74 <__aeabi_i2d+0x34>
 8001b46:	17c3      	asrs	r3, r0, #31
 8001b48:	18c5      	adds	r5, r0, r3
 8001b4a:	405d      	eors	r5, r3
 8001b4c:	0fc4      	lsrs	r4, r0, #31
 8001b4e:	0028      	movs	r0, r5
 8001b50:	f000 f8f4 	bl	8001d3c <__clzsi2>
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <__aeabi_i2d+0x5c>)
 8001b56:	1a1b      	subs	r3, r3, r0
 8001b58:	280a      	cmp	r0, #10
 8001b5a:	dc16      	bgt.n	8001b8a <__aeabi_i2d+0x4a>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	002e      	movs	r6, r5
 8001b60:	3215      	adds	r2, #21
 8001b62:	4096      	lsls	r6, r2
 8001b64:	220b      	movs	r2, #11
 8001b66:	1a12      	subs	r2, r2, r0
 8001b68:	40d5      	lsrs	r5, r2
 8001b6a:	055b      	lsls	r3, r3, #21
 8001b6c:	032d      	lsls	r5, r5, #12
 8001b6e:	0b2d      	lsrs	r5, r5, #12
 8001b70:	0d5b      	lsrs	r3, r3, #21
 8001b72:	e003      	b.n	8001b7c <__aeabi_i2d+0x3c>
 8001b74:	2400      	movs	r4, #0
 8001b76:	2300      	movs	r3, #0
 8001b78:	2500      	movs	r5, #0
 8001b7a:	2600      	movs	r6, #0
 8001b7c:	051b      	lsls	r3, r3, #20
 8001b7e:	432b      	orrs	r3, r5
 8001b80:	07e4      	lsls	r4, r4, #31
 8001b82:	4323      	orrs	r3, r4
 8001b84:	0030      	movs	r0, r6
 8001b86:	0019      	movs	r1, r3
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
 8001b8a:	380b      	subs	r0, #11
 8001b8c:	4085      	lsls	r5, r0
 8001b8e:	055b      	lsls	r3, r3, #21
 8001b90:	032d      	lsls	r5, r5, #12
 8001b92:	2600      	movs	r6, #0
 8001b94:	0b2d      	lsrs	r5, r5, #12
 8001b96:	0d5b      	lsrs	r3, r3, #21
 8001b98:	e7f0      	b.n	8001b7c <__aeabi_i2d+0x3c>
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	0000041e 	.word	0x0000041e

08001ba0 <__aeabi_f2d>:
 8001ba0:	b570      	push	{r4, r5, r6, lr}
 8001ba2:	0242      	lsls	r2, r0, #9
 8001ba4:	0043      	lsls	r3, r0, #1
 8001ba6:	0fc4      	lsrs	r4, r0, #31
 8001ba8:	20fe      	movs	r0, #254	; 0xfe
 8001baa:	0e1b      	lsrs	r3, r3, #24
 8001bac:	1c59      	adds	r1, r3, #1
 8001bae:	0a55      	lsrs	r5, r2, #9
 8001bb0:	4208      	tst	r0, r1
 8001bb2:	d00c      	beq.n	8001bce <__aeabi_f2d+0x2e>
 8001bb4:	21e0      	movs	r1, #224	; 0xe0
 8001bb6:	0089      	lsls	r1, r1, #2
 8001bb8:	468c      	mov	ip, r1
 8001bba:	076d      	lsls	r5, r5, #29
 8001bbc:	0b12      	lsrs	r2, r2, #12
 8001bbe:	4463      	add	r3, ip
 8001bc0:	051b      	lsls	r3, r3, #20
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	07e4      	lsls	r4, r4, #31
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	0028      	movs	r0, r5
 8001bca:	0019      	movs	r1, r3
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d114      	bne.n	8001bfc <__aeabi_f2d+0x5c>
 8001bd2:	2d00      	cmp	r5, #0
 8001bd4:	d01b      	beq.n	8001c0e <__aeabi_f2d+0x6e>
 8001bd6:	0028      	movs	r0, r5
 8001bd8:	f000 f8b0 	bl	8001d3c <__clzsi2>
 8001bdc:	280a      	cmp	r0, #10
 8001bde:	dc1c      	bgt.n	8001c1a <__aeabi_f2d+0x7a>
 8001be0:	230b      	movs	r3, #11
 8001be2:	002a      	movs	r2, r5
 8001be4:	1a1b      	subs	r3, r3, r0
 8001be6:	40da      	lsrs	r2, r3
 8001be8:	0003      	movs	r3, r0
 8001bea:	3315      	adds	r3, #21
 8001bec:	409d      	lsls	r5, r3
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <__aeabi_f2d+0x88>)
 8001bf0:	0312      	lsls	r2, r2, #12
 8001bf2:	1a1b      	subs	r3, r3, r0
 8001bf4:	055b      	lsls	r3, r3, #21
 8001bf6:	0b12      	lsrs	r2, r2, #12
 8001bf8:	0d5b      	lsrs	r3, r3, #21
 8001bfa:	e7e1      	b.n	8001bc0 <__aeabi_f2d+0x20>
 8001bfc:	2d00      	cmp	r5, #0
 8001bfe:	d009      	beq.n	8001c14 <__aeabi_f2d+0x74>
 8001c00:	0b13      	lsrs	r3, r2, #12
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	0312      	lsls	r2, r2, #12
 8001c06:	431a      	orrs	r2, r3
 8001c08:	076d      	lsls	r5, r5, #29
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <__aeabi_f2d+0x8c>)
 8001c0c:	e7d8      	b.n	8001bc0 <__aeabi_f2d+0x20>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2200      	movs	r2, #0
 8001c12:	e7d5      	b.n	8001bc0 <__aeabi_f2d+0x20>
 8001c14:	2200      	movs	r2, #0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <__aeabi_f2d+0x8c>)
 8001c18:	e7d2      	b.n	8001bc0 <__aeabi_f2d+0x20>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	002a      	movs	r2, r5
 8001c1e:	3b0b      	subs	r3, #11
 8001c20:	409a      	lsls	r2, r3
 8001c22:	2500      	movs	r5, #0
 8001c24:	e7e3      	b.n	8001bee <__aeabi_f2d+0x4e>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	00000389 	.word	0x00000389
 8001c2c:	000007ff 	.word	0x000007ff

08001c30 <__aeabi_d2f>:
 8001c30:	0002      	movs	r2, r0
 8001c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c34:	004b      	lsls	r3, r1, #1
 8001c36:	030d      	lsls	r5, r1, #12
 8001c38:	0f40      	lsrs	r0, r0, #29
 8001c3a:	0d5b      	lsrs	r3, r3, #21
 8001c3c:	0fcc      	lsrs	r4, r1, #31
 8001c3e:	0a6d      	lsrs	r5, r5, #9
 8001c40:	493a      	ldr	r1, [pc, #232]	; (8001d2c <__aeabi_d2f+0xfc>)
 8001c42:	4305      	orrs	r5, r0
 8001c44:	1c58      	adds	r0, r3, #1
 8001c46:	00d7      	lsls	r7, r2, #3
 8001c48:	4208      	tst	r0, r1
 8001c4a:	d00a      	beq.n	8001c62 <__aeabi_d2f+0x32>
 8001c4c:	4938      	ldr	r1, [pc, #224]	; (8001d30 <__aeabi_d2f+0x100>)
 8001c4e:	1859      	adds	r1, r3, r1
 8001c50:	29fe      	cmp	r1, #254	; 0xfe
 8001c52:	dd16      	ble.n	8001c82 <__aeabi_d2f+0x52>
 8001c54:	20ff      	movs	r0, #255	; 0xff
 8001c56:	2200      	movs	r2, #0
 8001c58:	05c0      	lsls	r0, r0, #23
 8001c5a:	4310      	orrs	r0, r2
 8001c5c:	07e4      	lsls	r4, r4, #31
 8001c5e:	4320      	orrs	r0, r4
 8001c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <__aeabi_d2f+0x44>
 8001c66:	433d      	orrs	r5, r7
 8001c68:	d026      	beq.n	8001cb8 <__aeabi_d2f+0x88>
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	0192      	lsls	r2, r2, #6
 8001c6e:	0a52      	lsrs	r2, r2, #9
 8001c70:	b2d8      	uxtb	r0, r3
 8001c72:	e7f1      	b.n	8001c58 <__aeabi_d2f+0x28>
 8001c74:	432f      	orrs	r7, r5
 8001c76:	d0ed      	beq.n	8001c54 <__aeabi_d2f+0x24>
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	03d2      	lsls	r2, r2, #15
 8001c7c:	20ff      	movs	r0, #255	; 0xff
 8001c7e:	432a      	orrs	r2, r5
 8001c80:	e7ea      	b.n	8001c58 <__aeabi_d2f+0x28>
 8001c82:	2900      	cmp	r1, #0
 8001c84:	dd1b      	ble.n	8001cbe <__aeabi_d2f+0x8e>
 8001c86:	0192      	lsls	r2, r2, #6
 8001c88:	1e50      	subs	r0, r2, #1
 8001c8a:	4182      	sbcs	r2, r0
 8001c8c:	00ed      	lsls	r5, r5, #3
 8001c8e:	0f7f      	lsrs	r7, r7, #29
 8001c90:	432a      	orrs	r2, r5
 8001c92:	433a      	orrs	r2, r7
 8001c94:	0753      	lsls	r3, r2, #29
 8001c96:	d047      	beq.n	8001d28 <__aeabi_d2f+0xf8>
 8001c98:	230f      	movs	r3, #15
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d000      	beq.n	8001ca2 <__aeabi_d2f+0x72>
 8001ca0:	3204      	adds	r2, #4
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	04db      	lsls	r3, r3, #19
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d03e      	beq.n	8001d28 <__aeabi_d2f+0xf8>
 8001caa:	1c48      	adds	r0, r1, #1
 8001cac:	29fe      	cmp	r1, #254	; 0xfe
 8001cae:	d0d1      	beq.n	8001c54 <__aeabi_d2f+0x24>
 8001cb0:	0192      	lsls	r2, r2, #6
 8001cb2:	0a52      	lsrs	r2, r2, #9
 8001cb4:	b2c0      	uxtb	r0, r0
 8001cb6:	e7cf      	b.n	8001c58 <__aeabi_d2f+0x28>
 8001cb8:	2000      	movs	r0, #0
 8001cba:	2200      	movs	r2, #0
 8001cbc:	e7cc      	b.n	8001c58 <__aeabi_d2f+0x28>
 8001cbe:	000a      	movs	r2, r1
 8001cc0:	3217      	adds	r2, #23
 8001cc2:	db2f      	blt.n	8001d24 <__aeabi_d2f+0xf4>
 8001cc4:	2680      	movs	r6, #128	; 0x80
 8001cc6:	0436      	lsls	r6, r6, #16
 8001cc8:	432e      	orrs	r6, r5
 8001cca:	251e      	movs	r5, #30
 8001ccc:	1a6d      	subs	r5, r5, r1
 8001cce:	2d1f      	cmp	r5, #31
 8001cd0:	dd11      	ble.n	8001cf6 <__aeabi_d2f+0xc6>
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4252      	negs	r2, r2
 8001cd6:	1a52      	subs	r2, r2, r1
 8001cd8:	0031      	movs	r1, r6
 8001cda:	40d1      	lsrs	r1, r2
 8001cdc:	2d20      	cmp	r5, #32
 8001cde:	d004      	beq.n	8001cea <__aeabi_d2f+0xba>
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <__aeabi_d2f+0x104>)
 8001ce2:	4694      	mov	ip, r2
 8001ce4:	4463      	add	r3, ip
 8001ce6:	409e      	lsls	r6, r3
 8001ce8:	4337      	orrs	r7, r6
 8001cea:	003a      	movs	r2, r7
 8001cec:	1e53      	subs	r3, r2, #1
 8001cee:	419a      	sbcs	r2, r3
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	e7ce      	b.n	8001c94 <__aeabi_d2f+0x64>
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <__aeabi_d2f+0x108>)
 8001cf8:	0038      	movs	r0, r7
 8001cfa:	4694      	mov	ip, r2
 8001cfc:	4463      	add	r3, ip
 8001cfe:	4098      	lsls	r0, r3
 8001d00:	003a      	movs	r2, r7
 8001d02:	1e41      	subs	r1, r0, #1
 8001d04:	4188      	sbcs	r0, r1
 8001d06:	409e      	lsls	r6, r3
 8001d08:	40ea      	lsrs	r2, r5
 8001d0a:	4330      	orrs	r0, r6
 8001d0c:	4302      	orrs	r2, r0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	0753      	lsls	r3, r2, #29
 8001d12:	d1c1      	bne.n	8001c98 <__aeabi_d2f+0x68>
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	0013      	movs	r3, r2
 8001d18:	04c9      	lsls	r1, r1, #19
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	400b      	ands	r3, r1
 8001d1e:	420a      	tst	r2, r1
 8001d20:	d1c6      	bne.n	8001cb0 <__aeabi_d2f+0x80>
 8001d22:	e7a3      	b.n	8001c6c <__aeabi_d2f+0x3c>
 8001d24:	2300      	movs	r3, #0
 8001d26:	e7a0      	b.n	8001c6a <__aeabi_d2f+0x3a>
 8001d28:	000b      	movs	r3, r1
 8001d2a:	e79f      	b.n	8001c6c <__aeabi_d2f+0x3c>
 8001d2c:	000007fe 	.word	0x000007fe
 8001d30:	fffffc80 	.word	0xfffffc80
 8001d34:	fffffca2 	.word	0xfffffca2
 8001d38:	fffffc82 	.word	0xfffffc82

08001d3c <__clzsi2>:
 8001d3c:	211c      	movs	r1, #28
 8001d3e:	2301      	movs	r3, #1
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	4298      	cmp	r0, r3
 8001d44:	d301      	bcc.n	8001d4a <__clzsi2+0xe>
 8001d46:	0c00      	lsrs	r0, r0, #16
 8001d48:	3910      	subs	r1, #16
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	4298      	cmp	r0, r3
 8001d4e:	d301      	bcc.n	8001d54 <__clzsi2+0x18>
 8001d50:	0a00      	lsrs	r0, r0, #8
 8001d52:	3908      	subs	r1, #8
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	4298      	cmp	r0, r3
 8001d58:	d301      	bcc.n	8001d5e <__clzsi2+0x22>
 8001d5a:	0900      	lsrs	r0, r0, #4
 8001d5c:	3904      	subs	r1, #4
 8001d5e:	a202      	add	r2, pc, #8	; (adr r2, 8001d68 <__clzsi2+0x2c>)
 8001d60:	5c10      	ldrb	r0, [r2, r0]
 8001d62:	1840      	adds	r0, r0, r1
 8001d64:	4770      	bx	lr
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	02020304 	.word	0x02020304
 8001d6c:	01010101 	.word	0x01010101
	...

08001d78 <getGyroData>:

#define ACCELX_ADJ .242
#define ACCELY_ADJ .0022

void getGyroData(I2C_HandleTypeDef hi2c2, float* angx, float* angy, float* angz)
{
 8001d78:	b084      	sub	sp, #16
 8001d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7c:	b08d      	sub	sp, #52	; 0x34
 8001d7e:	af04      	add	r7, sp, #16
 8001d80:	2530      	movs	r5, #48	; 0x30
 8001d82:	2608      	movs	r6, #8
 8001d84:	19ac      	adds	r4, r5, r6
 8001d86:	19e4      	adds	r4, r4, r7
 8001d88:	6020      	str	r0, [r4, #0]
 8001d8a:	6061      	str	r1, [r4, #4]
 8001d8c:	60a2      	str	r2, [r4, #8]
 8001d8e:	60e3      	str	r3, [r4, #12]
	gyro[0] = (int16_t)((gyroData[1] << 8) | gyroData[0]); // X-axis
	gyro[1] = (int16_t)((gyroData[3] << 8) | gyroData[2]); // Y-axis
	gyro[2] = (int16_t)((gyroData[5] << 8) | gyroData[4]); // Z-axis*/

	uint8_t gyroData[6];
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c2, 212, 0x22, I2C_MEMADD_SIZE_8BIT, gyroData, 6, HAL_MAX_DELAY);
 8001d90:	231f      	movs	r3, #31
 8001d92:	18fc      	adds	r4, r7, r3
 8001d94:	19ab      	adds	r3, r5, r6
 8001d96:	19d8      	adds	r0, r3, r7
 8001d98:	2301      	movs	r3, #1
 8001d9a:	425b      	negs	r3, r3
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2306      	movs	r3, #6
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2508      	movs	r5, #8
 8001da4:	197b      	adds	r3, r7, r5
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2301      	movs	r3, #1
 8001daa:	2222      	movs	r2, #34	; 0x22
 8001dac:	21d4      	movs	r1, #212	; 0xd4
 8001dae:	f002 f895 	bl	8003edc <HAL_I2C_Mem_Read>
 8001db2:	0003      	movs	r3, r0
 8001db4:	7023      	strb	r3, [r4, #0]

	int16_t gyro[3];
	gyro[0] = (int16_t)((gyroData[1] << 8) | gyroData[0]); // X-axis
 8001db6:	0029      	movs	r1, r5
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	003b      	movs	r3, r7
 8001dcc:	801a      	strh	r2, [r3, #0]
	gyro[1] = (int16_t)((gyroData[3] << 8) | gyroData[2]); // Y-axis
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	78db      	ldrb	r3, [r3, #3]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	789b      	ldrb	r3, [r3, #2]
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	003b      	movs	r3, r7
 8001de2:	805a      	strh	r2, [r3, #2]
	gyro[2] = (int16_t)((gyroData[5] << 8) | gyroData[4]); // Z-axis
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	795b      	ldrb	r3, [r3, #5]
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	791b      	ldrb	r3, [r3, #4]
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	b21a      	sxth	r2, r3
 8001df6:	003b      	movs	r3, r7
 8001df8:	809a      	strh	r2, [r3, #4]

	float gyroX = gyro[0] * G_SENSITIVITY / 1000;
 8001dfa:	003b      	movs	r3, r7
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	5e9b      	ldrsh	r3, [r3, r2]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff fe9d 	bl	8001b40 <__aeabi_i2d>
 8001e06:	2200      	movs	r2, #0
 8001e08:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <getGyroData+0x200>)
 8001e0a:	f7ff f855 	bl	8000eb8 <__aeabi_dmul>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	000b      	movs	r3, r1
 8001e12:	0010      	movs	r0, r2
 8001e14:	0019      	movs	r1, r3
 8001e16:	2200      	movs	r2, #0
 8001e18:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <getGyroData+0x204>)
 8001e1a:	f7fe fd5f 	bl	80008dc <__aeabi_ddiv>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	000b      	movs	r3, r1
 8001e22:	0010      	movs	r0, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	f7ff ff03 	bl	8001c30 <__aeabi_d2f>
 8001e2a:	1c03      	adds	r3, r0, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
	float gyroY = gyro[1] * G_SENSITIVITY / 1000;
 8001e2e:	003b      	movs	r3, r7
 8001e30:	2202      	movs	r2, #2
 8001e32:	5e9b      	ldrsh	r3, [r3, r2]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff fe83 	bl	8001b40 <__aeabi_i2d>
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <getGyroData+0x200>)
 8001e3e:	f7ff f83b 	bl	8000eb8 <__aeabi_dmul>
 8001e42:	0002      	movs	r2, r0
 8001e44:	000b      	movs	r3, r1
 8001e46:	0010      	movs	r0, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <getGyroData+0x204>)
 8001e4e:	f7fe fd45 	bl	80008dc <__aeabi_ddiv>
 8001e52:	0002      	movs	r2, r0
 8001e54:	000b      	movs	r3, r1
 8001e56:	0010      	movs	r0, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	f7ff fee9 	bl	8001c30 <__aeabi_d2f>
 8001e5e:	1c03      	adds	r3, r0, #0
 8001e60:	617b      	str	r3, [r7, #20]
	float gyroZ = gyro[2] * G_SENSITIVITY / 1000; //deg/sec
 8001e62:	003b      	movs	r3, r7
 8001e64:	2204      	movs	r2, #4
 8001e66:	5e9b      	ldrsh	r3, [r3, r2]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff fe69 	bl	8001b40 <__aeabi_i2d>
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <getGyroData+0x200>)
 8001e72:	f7ff f821 	bl	8000eb8 <__aeabi_dmul>
 8001e76:	0002      	movs	r2, r0
 8001e78:	000b      	movs	r3, r1
 8001e7a:	0010      	movs	r0, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <getGyroData+0x204>)
 8001e82:	f7fe fd2b 	bl	80008dc <__aeabi_ddiv>
 8001e86:	0002      	movs	r2, r0
 8001e88:	000b      	movs	r3, r1
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	f7ff fecf 	bl	8001c30 <__aeabi_d2f>
 8001e92:	1c03      	adds	r3, r0, #0
 8001e94:	613b      	str	r3, [r7, #16]

	*angx = *angx + (gyroX * 1.0 / 60.0);
 8001e96:	2684      	movs	r6, #132	; 0x84
 8001e98:	2108      	movs	r1, #8
 8001e9a:	1873      	adds	r3, r6, r1
 8001e9c:	19db      	adds	r3, r3, r7
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1c18      	adds	r0, r3, #0
 8001ea4:	f7ff fe7c 	bl	8001ba0 <__aeabi_f2d>
 8001ea8:	0004      	movs	r4, r0
 8001eaa:	000d      	movs	r5, r1
 8001eac:	69b8      	ldr	r0, [r7, #24]
 8001eae:	f7ff fe77 	bl	8001ba0 <__aeabi_f2d>
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <getGyroData+0x208>)
 8001eb6:	f7fe fd11 	bl	80008dc <__aeabi_ddiv>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	000b      	movs	r3, r1
 8001ebe:	0020      	movs	r0, r4
 8001ec0:	0029      	movs	r1, r5
 8001ec2:	f7fe f9ab 	bl	800021c <__aeabi_dadd>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	000b      	movs	r3, r1
 8001eca:	0010      	movs	r0, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	f7ff feaf 	bl	8001c30 <__aeabi_d2f>
 8001ed2:	1c02      	adds	r2, r0, #0
 8001ed4:	2108      	movs	r1, #8
 8001ed6:	1873      	adds	r3, r6, r1
 8001ed8:	19db      	adds	r3, r3, r7
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	601a      	str	r2, [r3, #0]
	*angy = *angy + (gyroY * 1.0 / 60.0);
 8001ede:	2688      	movs	r6, #136	; 0x88
 8001ee0:	1873      	adds	r3, r6, r1
 8001ee2:	19db      	adds	r3, r3, r7
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	1c18      	adds	r0, r3, #0
 8001eea:	f7ff fe59 	bl	8001ba0 <__aeabi_f2d>
 8001eee:	0004      	movs	r4, r0
 8001ef0:	000d      	movs	r5, r1
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff fe54 	bl	8001ba0 <__aeabi_f2d>
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <getGyroData+0x208>)
 8001efc:	f7fe fcee 	bl	80008dc <__aeabi_ddiv>
 8001f00:	0002      	movs	r2, r0
 8001f02:	000b      	movs	r3, r1
 8001f04:	0020      	movs	r0, r4
 8001f06:	0029      	movs	r1, r5
 8001f08:	f7fe f988 	bl	800021c <__aeabi_dadd>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	000b      	movs	r3, r1
 8001f10:	0010      	movs	r0, r2
 8001f12:	0019      	movs	r1, r3
 8001f14:	f7ff fe8c 	bl	8001c30 <__aeabi_d2f>
 8001f18:	1c02      	adds	r2, r0, #0
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	1873      	adds	r3, r6, r1
 8001f1e:	19db      	adds	r3, r3, r7
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	601a      	str	r2, [r3, #0]
	*angz = *angz + (gyroZ * 1.0 / 60.0);
 8001f24:	268c      	movs	r6, #140	; 0x8c
 8001f26:	1873      	adds	r3, r6, r1
 8001f28:	19db      	adds	r3, r3, r7
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1c18      	adds	r0, r3, #0
 8001f30:	f7ff fe36 	bl	8001ba0 <__aeabi_f2d>
 8001f34:	0004      	movs	r4, r0
 8001f36:	000d      	movs	r5, r1
 8001f38:	6938      	ldr	r0, [r7, #16]
 8001f3a:	f7ff fe31 	bl	8001ba0 <__aeabi_f2d>
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <getGyroData+0x208>)
 8001f42:	f7fe fccb 	bl	80008dc <__aeabi_ddiv>
 8001f46:	0002      	movs	r2, r0
 8001f48:	000b      	movs	r3, r1
 8001f4a:	0020      	movs	r0, r4
 8001f4c:	0029      	movs	r1, r5
 8001f4e:	f7fe f965 	bl	800021c <__aeabi_dadd>
 8001f52:	0002      	movs	r2, r0
 8001f54:	000b      	movs	r3, r1
 8001f56:	0010      	movs	r0, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	f7ff fe69 	bl	8001c30 <__aeabi_d2f>
 8001f5e:	1c02      	adds	r2, r0, #0
 8001f60:	2108      	movs	r1, #8
 8001f62:	1873      	adds	r3, r6, r1
 8001f64:	19db      	adds	r3, r3, r7
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	601a      	str	r2, [r3, #0]

	return;
 8001f6a:	46c0      	nop			; (mov r8, r8)
}
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b009      	add	sp, #36	; 0x24
 8001f70:	bcf0      	pop	{r4, r5, r6, r7}
 8001f72:	bc08      	pop	{r3}
 8001f74:	b004      	add	sp, #16
 8001f76:	4718      	bx	r3
 8001f78:	40218000 	.word	0x40218000
 8001f7c:	408f4000 	.word	0x408f4000
 8001f80:	404e0000 	.word	0x404e0000

08001f84 <getAccelData>:

void getAccelData(I2C_HandleTypeDef hi2c2, float* v0x, float* v0y, float* v0z, float* posx, float* posy, float* posz)
{
 8001f84:	b084      	sub	sp, #16
 8001f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f88:	b08d      	sub	sp, #52	; 0x34
 8001f8a:	af04      	add	r7, sp, #16
 8001f8c:	2530      	movs	r5, #48	; 0x30
 8001f8e:	2608      	movs	r6, #8
 8001f90:	19ac      	adds	r4, r5, r6
 8001f92:	19e4      	adds	r4, r4, r7
 8001f94:	6020      	str	r0, [r4, #0]
 8001f96:	6061      	str	r1, [r4, #4]
 8001f98:	60a2      	str	r2, [r4, #8]
 8001f9a:	60e3      	str	r3, [r4, #12]
	uint8_t accelData[6];
	HAL_I2C_Mem_Read(&hi2c2, IMU_ADDRESS, ACCEL_ADDRESS, I2C_MEMADD_SIZE_8BIT, accelData, 6, HAL_MAX_DELAY);
 8001f9c:	19ab      	adds	r3, r5, r6
 8001f9e:	19d8      	adds	r0, r3, r7
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	240c      	movs	r4, #12
 8001fac:	193b      	adds	r3, r7, r4
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	2228      	movs	r2, #40	; 0x28
 8001fb4:	21d4      	movs	r1, #212	; 0xd4
 8001fb6:	f001 ff91 	bl	8003edc <HAL_I2C_Mem_Read>

	int16_t accel[3];
	accel[0] = (int16_t)((accelData[1] << 8) | accelData[0]); // X-axis
 8001fba:	0021      	movs	r1, r4
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b21a      	sxth	r2, r3
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	801a      	strh	r2, [r3, #0]
	accel[1] = (int16_t)((accelData[3] << 8) | accelData[2]); // Y-axis
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	78db      	ldrb	r3, [r3, #3]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	805a      	strh	r2, [r3, #2]
	accel[2] = (int16_t)((accelData[5] << 8) | accelData[4]); // Z-axis
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	795b      	ldrb	r3, [r3, #5]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	187b      	adds	r3, r7, r1
 8001ff2:	791b      	ldrb	r3, [r3, #4]
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b21a      	sxth	r2, r3
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	809a      	strh	r2, [r3, #4]

	float accelX = (accel[0] * A_SENSITIVITY / 1000 * 9.81) - ACCELX_ADJ;
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	5e9b      	ldrsh	r3, [r3, r2]
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff fd9b 	bl	8001b40 <__aeabi_i2d>
 800200a:	4ae1      	ldr	r2, [pc, #900]	; (8002390 <getAccelData+0x40c>)
 800200c:	4be1      	ldr	r3, [pc, #900]	; (8002394 <getAccelData+0x410>)
 800200e:	f7fe ff53 	bl	8000eb8 <__aeabi_dmul>
 8002012:	0002      	movs	r2, r0
 8002014:	000b      	movs	r3, r1
 8002016:	0010      	movs	r0, r2
 8002018:	0019      	movs	r1, r3
 800201a:	2200      	movs	r2, #0
 800201c:	4bde      	ldr	r3, [pc, #888]	; (8002398 <getAccelData+0x414>)
 800201e:	f7fe fc5d 	bl	80008dc <__aeabi_ddiv>
 8002022:	0002      	movs	r2, r0
 8002024:	000b      	movs	r3, r1
 8002026:	0010      	movs	r0, r2
 8002028:	0019      	movs	r1, r3
 800202a:	4adc      	ldr	r2, [pc, #880]	; (800239c <getAccelData+0x418>)
 800202c:	4bdc      	ldr	r3, [pc, #880]	; (80023a0 <getAccelData+0x41c>)
 800202e:	f7fe ff43 	bl	8000eb8 <__aeabi_dmul>
 8002032:	0002      	movs	r2, r0
 8002034:	000b      	movs	r3, r1
 8002036:	0010      	movs	r0, r2
 8002038:	0019      	movs	r1, r3
 800203a:	4ada      	ldr	r2, [pc, #872]	; (80023a4 <getAccelData+0x420>)
 800203c:	4bda      	ldr	r3, [pc, #872]	; (80023a8 <getAccelData+0x424>)
 800203e:	f7ff f9fd 	bl	800143c <__aeabi_dsub>
 8002042:	0002      	movs	r2, r0
 8002044:	000b      	movs	r3, r1
 8002046:	0010      	movs	r0, r2
 8002048:	0019      	movs	r1, r3
 800204a:	f7ff fdf1 	bl	8001c30 <__aeabi_d2f>
 800204e:	1c03      	adds	r3, r0, #0
 8002050:	61fb      	str	r3, [r7, #28]
	float accelY = (accel[1] * A_SENSITIVITY / 1000 * 9.81) - ACCELY_ADJ;
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2202      	movs	r2, #2
 8002056:	5e9b      	ldrsh	r3, [r3, r2]
 8002058:	0018      	movs	r0, r3
 800205a:	f7ff fd71 	bl	8001b40 <__aeabi_i2d>
 800205e:	4acc      	ldr	r2, [pc, #816]	; (8002390 <getAccelData+0x40c>)
 8002060:	4bcc      	ldr	r3, [pc, #816]	; (8002394 <getAccelData+0x410>)
 8002062:	f7fe ff29 	bl	8000eb8 <__aeabi_dmul>
 8002066:	0002      	movs	r2, r0
 8002068:	000b      	movs	r3, r1
 800206a:	0010      	movs	r0, r2
 800206c:	0019      	movs	r1, r3
 800206e:	2200      	movs	r2, #0
 8002070:	4bc9      	ldr	r3, [pc, #804]	; (8002398 <getAccelData+0x414>)
 8002072:	f7fe fc33 	bl	80008dc <__aeabi_ddiv>
 8002076:	0002      	movs	r2, r0
 8002078:	000b      	movs	r3, r1
 800207a:	0010      	movs	r0, r2
 800207c:	0019      	movs	r1, r3
 800207e:	4ac7      	ldr	r2, [pc, #796]	; (800239c <getAccelData+0x418>)
 8002080:	4bc7      	ldr	r3, [pc, #796]	; (80023a0 <getAccelData+0x41c>)
 8002082:	f7fe ff19 	bl	8000eb8 <__aeabi_dmul>
 8002086:	0002      	movs	r2, r0
 8002088:	000b      	movs	r3, r1
 800208a:	0010      	movs	r0, r2
 800208c:	0019      	movs	r1, r3
 800208e:	4ac7      	ldr	r2, [pc, #796]	; (80023ac <getAccelData+0x428>)
 8002090:	4bc7      	ldr	r3, [pc, #796]	; (80023b0 <getAccelData+0x42c>)
 8002092:	f7ff f9d3 	bl	800143c <__aeabi_dsub>
 8002096:	0002      	movs	r2, r0
 8002098:	000b      	movs	r3, r1
 800209a:	0010      	movs	r0, r2
 800209c:	0019      	movs	r1, r3
 800209e:	f7ff fdc7 	bl	8001c30 <__aeabi_d2f>
 80020a2:	1c03      	adds	r3, r0, #0
 80020a4:	61bb      	str	r3, [r7, #24]
	float accelZ = accel[2] * A_SENSITIVITY / 1000 * 9.81; //m/s2
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2204      	movs	r2, #4
 80020aa:	5e9b      	ldrsh	r3, [r3, r2]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff fd47 	bl	8001b40 <__aeabi_i2d>
 80020b2:	4ab7      	ldr	r2, [pc, #732]	; (8002390 <getAccelData+0x40c>)
 80020b4:	4bb7      	ldr	r3, [pc, #732]	; (8002394 <getAccelData+0x410>)
 80020b6:	f7fe feff 	bl	8000eb8 <__aeabi_dmul>
 80020ba:	0002      	movs	r2, r0
 80020bc:	000b      	movs	r3, r1
 80020be:	0010      	movs	r0, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	2200      	movs	r2, #0
 80020c4:	4bb4      	ldr	r3, [pc, #720]	; (8002398 <getAccelData+0x414>)
 80020c6:	f7fe fc09 	bl	80008dc <__aeabi_ddiv>
 80020ca:	0002      	movs	r2, r0
 80020cc:	000b      	movs	r3, r1
 80020ce:	0010      	movs	r0, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	4ab2      	ldr	r2, [pc, #712]	; (800239c <getAccelData+0x418>)
 80020d4:	4bb2      	ldr	r3, [pc, #712]	; (80023a0 <getAccelData+0x41c>)
 80020d6:	f7fe feef 	bl	8000eb8 <__aeabi_dmul>
 80020da:	0002      	movs	r2, r0
 80020dc:	000b      	movs	r3, r1
 80020de:	0010      	movs	r0, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	f7ff fda5 	bl	8001c30 <__aeabi_d2f>
 80020e6:	1c03      	adds	r3, r0, #0
 80020e8:	617b      	str	r3, [r7, #20]

	*posx = *posx + (*v0x * (1.0/60)) + ((accelX * (1.0/60) * (1.0/60)) / 2.0);
 80020ea:	2390      	movs	r3, #144	; 0x90
 80020ec:	199b      	adds	r3, r3, r6
 80020ee:	19da      	adds	r2, r3, r7
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1c18      	adds	r0, r3, #0
 80020f6:	f7ff fd53 	bl	8001ba0 <__aeabi_f2d>
 80020fa:	0004      	movs	r4, r0
 80020fc:	000d      	movs	r5, r1
 80020fe:	2684      	movs	r6, #132	; 0x84
 8002100:	2008      	movs	r0, #8
 8002102:	1833      	adds	r3, r6, r0
 8002104:	19da      	adds	r2, r3, r7
 8002106:	6813      	ldr	r3, [r2, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	1c18      	adds	r0, r3, #0
 800210c:	f7ff fd48 	bl	8001ba0 <__aeabi_f2d>
 8002110:	4aa8      	ldr	r2, [pc, #672]	; (80023b4 <getAccelData+0x430>)
 8002112:	4ba9      	ldr	r3, [pc, #676]	; (80023b8 <getAccelData+0x434>)
 8002114:	f7fe fed0 	bl	8000eb8 <__aeabi_dmul>
 8002118:	0002      	movs	r2, r0
 800211a:	000b      	movs	r3, r1
 800211c:	0020      	movs	r0, r4
 800211e:	0029      	movs	r1, r5
 8002120:	f7fe f87c 	bl	800021c <__aeabi_dadd>
 8002124:	0002      	movs	r2, r0
 8002126:	000b      	movs	r3, r1
 8002128:	0014      	movs	r4, r2
 800212a:	001d      	movs	r5, r3
 800212c:	69f8      	ldr	r0, [r7, #28]
 800212e:	f7ff fd37 	bl	8001ba0 <__aeabi_f2d>
 8002132:	4aa0      	ldr	r2, [pc, #640]	; (80023b4 <getAccelData+0x430>)
 8002134:	4ba0      	ldr	r3, [pc, #640]	; (80023b8 <getAccelData+0x434>)
 8002136:	f7fe febf 	bl	8000eb8 <__aeabi_dmul>
 800213a:	0002      	movs	r2, r0
 800213c:	000b      	movs	r3, r1
 800213e:	0010      	movs	r0, r2
 8002140:	0019      	movs	r1, r3
 8002142:	4a9c      	ldr	r2, [pc, #624]	; (80023b4 <getAccelData+0x430>)
 8002144:	4b9c      	ldr	r3, [pc, #624]	; (80023b8 <getAccelData+0x434>)
 8002146:	f7fe feb7 	bl	8000eb8 <__aeabi_dmul>
 800214a:	0002      	movs	r2, r0
 800214c:	000b      	movs	r3, r1
 800214e:	0010      	movs	r0, r2
 8002150:	0019      	movs	r1, r3
 8002152:	2200      	movs	r2, #0
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	05db      	lsls	r3, r3, #23
 8002158:	f7fe fbc0 	bl	80008dc <__aeabi_ddiv>
 800215c:	0002      	movs	r2, r0
 800215e:	000b      	movs	r3, r1
 8002160:	0020      	movs	r0, r4
 8002162:	0029      	movs	r1, r5
 8002164:	f7fe f85a 	bl	800021c <__aeabi_dadd>
 8002168:	0002      	movs	r2, r0
 800216a:	000b      	movs	r3, r1
 800216c:	0010      	movs	r0, r2
 800216e:	0019      	movs	r1, r3
 8002170:	f7ff fd5e 	bl	8001c30 <__aeabi_d2f>
 8002174:	1c02      	adds	r2, r0, #0
 8002176:	2390      	movs	r3, #144	; 0x90
 8002178:	2008      	movs	r0, #8
 800217a:	181b      	adds	r3, r3, r0
 800217c:	19db      	adds	r3, r3, r7
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	601a      	str	r2, [r3, #0]
	*posy = *posy + (*v0y * (1.0/60)) + ((accelY * (1.0/60) * (1.0/60)) / 2.0);
 8002182:	2394      	movs	r3, #148	; 0x94
 8002184:	181b      	adds	r3, r3, r0
 8002186:	19da      	adds	r2, r3, r7
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	1c18      	adds	r0, r3, #0
 800218e:	f7ff fd07 	bl	8001ba0 <__aeabi_f2d>
 8002192:	0004      	movs	r4, r0
 8002194:	000d      	movs	r5, r1
 8002196:	2388      	movs	r3, #136	; 0x88
 8002198:	2008      	movs	r0, #8
 800219a:	181b      	adds	r3, r3, r0
 800219c:	19da      	adds	r2, r3, r7
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1c18      	adds	r0, r3, #0
 80021a4:	f7ff fcfc 	bl	8001ba0 <__aeabi_f2d>
 80021a8:	4a82      	ldr	r2, [pc, #520]	; (80023b4 <getAccelData+0x430>)
 80021aa:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <getAccelData+0x434>)
 80021ac:	f7fe fe84 	bl	8000eb8 <__aeabi_dmul>
 80021b0:	0002      	movs	r2, r0
 80021b2:	000b      	movs	r3, r1
 80021b4:	0020      	movs	r0, r4
 80021b6:	0029      	movs	r1, r5
 80021b8:	f7fe f830 	bl	800021c <__aeabi_dadd>
 80021bc:	0002      	movs	r2, r0
 80021be:	000b      	movs	r3, r1
 80021c0:	0014      	movs	r4, r2
 80021c2:	001d      	movs	r5, r3
 80021c4:	69b8      	ldr	r0, [r7, #24]
 80021c6:	f7ff fceb 	bl	8001ba0 <__aeabi_f2d>
 80021ca:	4a7a      	ldr	r2, [pc, #488]	; (80023b4 <getAccelData+0x430>)
 80021cc:	4b7a      	ldr	r3, [pc, #488]	; (80023b8 <getAccelData+0x434>)
 80021ce:	f7fe fe73 	bl	8000eb8 <__aeabi_dmul>
 80021d2:	0002      	movs	r2, r0
 80021d4:	000b      	movs	r3, r1
 80021d6:	0010      	movs	r0, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	4a76      	ldr	r2, [pc, #472]	; (80023b4 <getAccelData+0x430>)
 80021dc:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <getAccelData+0x434>)
 80021de:	f7fe fe6b 	bl	8000eb8 <__aeabi_dmul>
 80021e2:	0002      	movs	r2, r0
 80021e4:	000b      	movs	r3, r1
 80021e6:	0010      	movs	r0, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	2200      	movs	r2, #0
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	05db      	lsls	r3, r3, #23
 80021f0:	f7fe fb74 	bl	80008dc <__aeabi_ddiv>
 80021f4:	0002      	movs	r2, r0
 80021f6:	000b      	movs	r3, r1
 80021f8:	0020      	movs	r0, r4
 80021fa:	0029      	movs	r1, r5
 80021fc:	f7fe f80e 	bl	800021c <__aeabi_dadd>
 8002200:	0002      	movs	r2, r0
 8002202:	000b      	movs	r3, r1
 8002204:	0010      	movs	r0, r2
 8002206:	0019      	movs	r1, r3
 8002208:	f7ff fd12 	bl	8001c30 <__aeabi_d2f>
 800220c:	1c02      	adds	r2, r0, #0
 800220e:	2194      	movs	r1, #148	; 0x94
 8002210:	2008      	movs	r0, #8
 8002212:	180b      	adds	r3, r1, r0
 8002214:	19d9      	adds	r1, r3, r7
 8002216:	680b      	ldr	r3, [r1, #0]
 8002218:	601a      	str	r2, [r3, #0]
	*posz = *posz + (*v0z * (1.0/60)) + ((accelZ * (1.0/60) * (1.0/60)) / 2.0);
 800221a:	2298      	movs	r2, #152	; 0x98
 800221c:	1813      	adds	r3, r2, r0
 800221e:	19d8      	adds	r0, r3, r7
 8002220:	6803      	ldr	r3, [r0, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	1c18      	adds	r0, r3, #0
 8002226:	f7ff fcbb 	bl	8001ba0 <__aeabi_f2d>
 800222a:	0004      	movs	r4, r0
 800222c:	000d      	movs	r5, r1
 800222e:	228c      	movs	r2, #140	; 0x8c
 8002230:	2008      	movs	r0, #8
 8002232:	1813      	adds	r3, r2, r0
 8002234:	19d8      	adds	r0, r3, r7
 8002236:	6803      	ldr	r3, [r0, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1c18      	adds	r0, r3, #0
 800223c:	f7ff fcb0 	bl	8001ba0 <__aeabi_f2d>
 8002240:	4a5c      	ldr	r2, [pc, #368]	; (80023b4 <getAccelData+0x430>)
 8002242:	4b5d      	ldr	r3, [pc, #372]	; (80023b8 <getAccelData+0x434>)
 8002244:	f7fe fe38 	bl	8000eb8 <__aeabi_dmul>
 8002248:	0002      	movs	r2, r0
 800224a:	000b      	movs	r3, r1
 800224c:	0020      	movs	r0, r4
 800224e:	0029      	movs	r1, r5
 8002250:	f7fd ffe4 	bl	800021c <__aeabi_dadd>
 8002254:	0002      	movs	r2, r0
 8002256:	000b      	movs	r3, r1
 8002258:	0014      	movs	r4, r2
 800225a:	001d      	movs	r5, r3
 800225c:	6978      	ldr	r0, [r7, #20]
 800225e:	f7ff fc9f 	bl	8001ba0 <__aeabi_f2d>
 8002262:	4a54      	ldr	r2, [pc, #336]	; (80023b4 <getAccelData+0x430>)
 8002264:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <getAccelData+0x434>)
 8002266:	f7fe fe27 	bl	8000eb8 <__aeabi_dmul>
 800226a:	0002      	movs	r2, r0
 800226c:	000b      	movs	r3, r1
 800226e:	0010      	movs	r0, r2
 8002270:	0019      	movs	r1, r3
 8002272:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <getAccelData+0x430>)
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <getAccelData+0x434>)
 8002276:	f7fe fe1f 	bl	8000eb8 <__aeabi_dmul>
 800227a:	0002      	movs	r2, r0
 800227c:	000b      	movs	r3, r1
 800227e:	0010      	movs	r0, r2
 8002280:	0019      	movs	r1, r3
 8002282:	2200      	movs	r2, #0
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	05db      	lsls	r3, r3, #23
 8002288:	f7fe fb28 	bl	80008dc <__aeabi_ddiv>
 800228c:	0002      	movs	r2, r0
 800228e:	000b      	movs	r3, r1
 8002290:	0020      	movs	r0, r4
 8002292:	0029      	movs	r1, r5
 8002294:	f7fd ffc2 	bl	800021c <__aeabi_dadd>
 8002298:	0002      	movs	r2, r0
 800229a:	000b      	movs	r3, r1
 800229c:	0010      	movs	r0, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	f7ff fcc6 	bl	8001c30 <__aeabi_d2f>
 80022a4:	1c02      	adds	r2, r0, #0
 80022a6:	2198      	movs	r1, #152	; 0x98
 80022a8:	2008      	movs	r0, #8
 80022aa:	180b      	adds	r3, r1, r0
 80022ac:	19d9      	adds	r1, r3, r7
 80022ae:	680b      	ldr	r3, [r1, #0]
 80022b0:	601a      	str	r2, [r3, #0]

	*v0x = *v0x + accelX * (1.0/60);
 80022b2:	1833      	adds	r3, r6, r0
 80022b4:	19d9      	adds	r1, r3, r7
 80022b6:	680b      	ldr	r3, [r1, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1c18      	adds	r0, r3, #0
 80022bc:	f7ff fc70 	bl	8001ba0 <__aeabi_f2d>
 80022c0:	0004      	movs	r4, r0
 80022c2:	000d      	movs	r5, r1
 80022c4:	69f8      	ldr	r0, [r7, #28]
 80022c6:	f7ff fc6b 	bl	8001ba0 <__aeabi_f2d>
 80022ca:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <getAccelData+0x430>)
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <getAccelData+0x434>)
 80022ce:	f7fe fdf3 	bl	8000eb8 <__aeabi_dmul>
 80022d2:	0002      	movs	r2, r0
 80022d4:	000b      	movs	r3, r1
 80022d6:	0020      	movs	r0, r4
 80022d8:	0029      	movs	r1, r5
 80022da:	f7fd ff9f 	bl	800021c <__aeabi_dadd>
 80022de:	0002      	movs	r2, r0
 80022e0:	000b      	movs	r3, r1
 80022e2:	0010      	movs	r0, r2
 80022e4:	0019      	movs	r1, r3
 80022e6:	f7ff fca3 	bl	8001c30 <__aeabi_d2f>
 80022ea:	1c02      	adds	r2, r0, #0
 80022ec:	2008      	movs	r0, #8
 80022ee:	1833      	adds	r3, r6, r0
 80022f0:	19d9      	adds	r1, r3, r7
 80022f2:	680b      	ldr	r3, [r1, #0]
 80022f4:	601a      	str	r2, [r3, #0]
	*v0y = *v0y + accelY * (1.0/60);
 80022f6:	2688      	movs	r6, #136	; 0x88
 80022f8:	1833      	adds	r3, r6, r0
 80022fa:	19db      	adds	r3, r3, r7
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1c18      	adds	r0, r3, #0
 8002302:	f7ff fc4d 	bl	8001ba0 <__aeabi_f2d>
 8002306:	0004      	movs	r4, r0
 8002308:	000d      	movs	r5, r1
 800230a:	69b8      	ldr	r0, [r7, #24]
 800230c:	f7ff fc48 	bl	8001ba0 <__aeabi_f2d>
 8002310:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <getAccelData+0x430>)
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <getAccelData+0x434>)
 8002314:	f7fe fdd0 	bl	8000eb8 <__aeabi_dmul>
 8002318:	0002      	movs	r2, r0
 800231a:	000b      	movs	r3, r1
 800231c:	0020      	movs	r0, r4
 800231e:	0029      	movs	r1, r5
 8002320:	f7fd ff7c 	bl	800021c <__aeabi_dadd>
 8002324:	0002      	movs	r2, r0
 8002326:	000b      	movs	r3, r1
 8002328:	0010      	movs	r0, r2
 800232a:	0019      	movs	r1, r3
 800232c:	f7ff fc80 	bl	8001c30 <__aeabi_d2f>
 8002330:	1c02      	adds	r2, r0, #0
 8002332:	2108      	movs	r1, #8
 8002334:	1873      	adds	r3, r6, r1
 8002336:	19db      	adds	r3, r3, r7
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	601a      	str	r2, [r3, #0]
	*v0z = *v0z + accelZ * (1.0/60);
 800233c:	268c      	movs	r6, #140	; 0x8c
 800233e:	1873      	adds	r3, r6, r1
 8002340:	19db      	adds	r3, r3, r7
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c18      	adds	r0, r3, #0
 8002348:	f7ff fc2a 	bl	8001ba0 <__aeabi_f2d>
 800234c:	0004      	movs	r4, r0
 800234e:	000d      	movs	r5, r1
 8002350:	6978      	ldr	r0, [r7, #20]
 8002352:	f7ff fc25 	bl	8001ba0 <__aeabi_f2d>
 8002356:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <getAccelData+0x430>)
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <getAccelData+0x434>)
 800235a:	f7fe fdad 	bl	8000eb8 <__aeabi_dmul>
 800235e:	0002      	movs	r2, r0
 8002360:	000b      	movs	r3, r1
 8002362:	0020      	movs	r0, r4
 8002364:	0029      	movs	r1, r5
 8002366:	f7fd ff59 	bl	800021c <__aeabi_dadd>
 800236a:	0002      	movs	r2, r0
 800236c:	000b      	movs	r3, r1
 800236e:	0010      	movs	r0, r2
 8002370:	0019      	movs	r1, r3
 8002372:	f7ff fc5d 	bl	8001c30 <__aeabi_d2f>
 8002376:	1c02      	adds	r2, r0, #0
 8002378:	2108      	movs	r1, #8
 800237a:	1873      	adds	r3, r6, r1
 800237c:	19db      	adds	r3, r3, r7
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	601a      	str	r2, [r3, #0]

	return;
 8002382:	46c0      	nop			; (mov r8, r8)
}
 8002384:	46bd      	mov	sp, r7
 8002386:	b009      	add	sp, #36	; 0x24
 8002388:	bcf0      	pop	{r4, r5, r6, r7}
 800238a:	bc08      	pop	{r3}
 800238c:	b004      	add	sp, #16
 800238e:	4718      	bx	r3
 8002390:	5a1cac08 	.word	0x5a1cac08
 8002394:	3faf3b64 	.word	0x3faf3b64
 8002398:	408f4000 	.word	0x408f4000
 800239c:	51eb851f 	.word	0x51eb851f
 80023a0:	40239eb8 	.word	0x40239eb8
 80023a4:	22d0e560 	.word	0x22d0e560
 80023a8:	3fcef9db 	.word	0x3fcef9db
 80023ac:	01a36e2f 	.word	0x01a36e2f
 80023b0:	3f6205bc 	.word	0x3f6205bc
 80023b4:	11111111 	.word	0x11111111
 80023b8:	3f911111 	.word	0x3f911111

080023bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023c2:	f000 ff41 	bl	8003248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023c6:	f000 f873 	bl	80024b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ca:	f000 fac9 	bl	8002960 <MX_GPIO_Init>
  MX_DMA_Init();
 80023ce:	f000 fa99 	bl	8002904 <MX_DMA_Init>
  MX_TIM2_Init();
 80023d2:	f000 f905 	bl	80025e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023d6:	f000 f99f 	bl	8002718 <MX_TIM3_Init>
  MX_TIM6_Init();
 80023da:	f000 fa27 	bl	800282c <MX_TIM6_Init>
  MX_I2C2_Init();
 80023de:	f000 f8bf 	bl	8002560 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80023e2:	f000 fa5f 	bl	80028a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <main+0xe4>)
 80023e8:	2100      	movs	r1, #0
 80023ea:	0018      	movs	r0, r3
 80023ec:	f004 f826 	bl	800643c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80023f0:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <main+0xe4>)
 80023f2:	2104      	movs	r1, #4
 80023f4:	0018      	movs	r0, r3
 80023f6:	f004 f821 	bl	800643c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80023fa:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <main+0xe4>)
 80023fc:	2108      	movs	r1, #8
 80023fe:	0018      	movs	r0, r3
 8002400:	f004 f81c 	bl	800643c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <main+0xe4>)
 8002406:	210c      	movs	r1, #12
 8002408:	0018      	movs	r0, r3
 800240a:	f004 f817 	bl	800643c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800240e:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <main+0xe8>)
 8002410:	2100      	movs	r1, #0
 8002412:	0018      	movs	r0, r3
 8002414:	f004 f812 	bl	800643c <HAL_TIM_PWM_Start>

  uint8_t gyro_on = 0b10000000;
 8002418:	1d7b      	adds	r3, r7, #5
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	701a      	strb	r2, [r3, #0]
  uint8_t accel_on = 0b10000000;
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2280      	movs	r2, #128	; 0x80
 8002422:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, 0b1101010, 1, 100);
 8002424:	230f      	movs	r3, #15
 8002426:	18fc      	adds	r4, r7, r3
 8002428:	481f      	ldr	r0, [pc, #124]	; (80024a8 <main+0xec>)
 800242a:	2364      	movs	r3, #100	; 0x64
 800242c:	2201      	movs	r2, #1
 800242e:	216a      	movs	r1, #106	; 0x6a
 8002430:	f001 fe88 	bl	8004144 <HAL_I2C_IsDeviceReady>
 8002434:	0003      	movs	r3, r0
 8002436:	7023      	strb	r3, [r4, #0]
  uint32_t error2 = HAL_I2C_GetError(&hi2c2);
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <main+0xec>)
 800243a:	0018      	movs	r0, r3
 800243c:	f002 f847 	bl	80044ce <HAL_I2C_GetError>
 8002440:	0003      	movs	r3, r0
 8002442:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef ret1 = HAL_I2C_Mem_Write(&hi2c2, 212, 0x11, I2C_MEMADD_SIZE_8BIT, &gyro_on, 1, HAL_MAX_DELAY);
 8002444:	1dfc      	adds	r4, r7, #7
 8002446:	4818      	ldr	r0, [pc, #96]	; (80024a8 <main+0xec>)
 8002448:	2301      	movs	r3, #1
 800244a:	425b      	negs	r3, r3
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	2301      	movs	r3, #1
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	1d7b      	adds	r3, r7, #5
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2301      	movs	r3, #1
 8002458:	2211      	movs	r2, #17
 800245a:	21d4      	movs	r1, #212	; 0xd4
 800245c:	f001 fc10 	bl	8003c80 <HAL_I2C_Mem_Write>
 8002460:	0003      	movs	r3, r0
 8002462:	7023      	strb	r3, [r4, #0]
  HAL_StatusTypeDef ret2 = HAL_I2C_Mem_Write(&hi2c2, 212, 0x10, I2C_MEMADD_SIZE_8BIT, &accel_on, 1, HAL_MAX_DELAY);
 8002464:	1dbc      	adds	r4, r7, #6
 8002466:	4810      	ldr	r0, [pc, #64]	; (80024a8 <main+0xec>)
 8002468:	2301      	movs	r3, #1
 800246a:	425b      	negs	r3, r3
 800246c:	9302      	str	r3, [sp, #8]
 800246e:	2301      	movs	r3, #1
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2301      	movs	r3, #1
 8002478:	2210      	movs	r2, #16
 800247a:	21d4      	movs	r1, #212	; 0xd4
 800247c:	f001 fc00 	bl	8003c80 <HAL_I2C_Mem_Write>
 8002480:	0003      	movs	r3, r0
 8002482:	7023      	strb	r3, [r4, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <main+0xf0>)
 8002486:	0018      	movs	r0, r3
 8002488:	f003 ff2e 	bl	80062e8 <HAL_TIM_Base_Start_IT>
  {
	  //    HAL_Delay(500);
	  //    HAL_UART_Transmit_DMA(&huart1, test_buff, sizeof(test_buff));
	  //HAL_UART_Receive_DMA (&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));

	  motor3_control(CW, 100);
 800248c:	2164      	movs	r1, #100	; 0x64
 800248e:	2001      	movs	r0, #1
 8002490:	f000 fe29 	bl	80030e6 <motor3_control>
	  motor4_control(CW, 100);
 8002494:	2164      	movs	r1, #100	; 0x64
 8002496:	2001      	movs	r0, #1
 8002498:	f000 fe6a 	bl	8003170 <motor4_control>
  {
 800249c:	e7f6      	b.n	800248c <main+0xd0>
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	20000104 	.word	0x20000104
 80024a4:	2000014c 	.word	0x2000014c
 80024a8:	20000028 	.word	0x20000028
 80024ac:	20000194 	.word	0x20000194

080024b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b099      	sub	sp, #100	; 0x64
 80024b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b6:	242c      	movs	r4, #44	; 0x2c
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	0018      	movs	r0, r3
 80024bc:	2334      	movs	r3, #52	; 0x34
 80024be:	001a      	movs	r2, r3
 80024c0:	2100      	movs	r1, #0
 80024c2:	f005 fe97 	bl	80081f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c6:	231c      	movs	r3, #28
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	0018      	movs	r0, r3
 80024cc:	2310      	movs	r3, #16
 80024ce:	001a      	movs	r2, r3
 80024d0:	2100      	movs	r1, #0
 80024d2:	f005 fe8f 	bl	80081f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d6:	003b      	movs	r3, r7
 80024d8:	0018      	movs	r0, r3
 80024da:	231c      	movs	r3, #28
 80024dc:	001a      	movs	r2, r3
 80024de:	2100      	movs	r1, #0
 80024e0:	f005 fe88 	bl	80081f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024e4:	0021      	movs	r1, r4
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2202      	movs	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2201      	movs	r2, #1
 80024f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2210      	movs	r2, #16
 80024f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	0018      	movs	r0, r3
 8002502:	f003 f8af 	bl	8005664 <HAL_RCC_OscConfig>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800250a:	f000 faf3 	bl	8002af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250e:	211c      	movs	r1, #28
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2207      	movs	r2, #7
 8002514:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2200      	movs	r2, #0
 800251a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2100      	movs	r1, #0
 800252c:	0018      	movs	r0, r3
 800252e:	f003 fc1f 	bl	8005d70 <HAL_RCC_ClockConfig>
 8002532:	1e03      	subs	r3, r0, #0
 8002534:	d001      	beq.n	800253a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002536:	f000 fadd 	bl	8002af4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800253a:	003b      	movs	r3, r7
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002540:	003b      	movs	r3, r7
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002546:	003b      	movs	r3, r7
 8002548:	0018      	movs	r0, r3
 800254a:	f003 fd7d 	bl	8006048 <HAL_RCCEx_PeriphCLKConfig>
 800254e:	1e03      	subs	r3, r0, #0
 8002550:	d001      	beq.n	8002556 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002552:	f000 facf 	bl	8002af4 <Error_Handler>
  }
}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	b019      	add	sp, #100	; 0x64
 800255c:	bd90      	pop	{r4, r7, pc}
	...

08002560 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <MX_I2C2_Init+0x74>)
 8002566:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <MX_I2C2_Init+0x78>)
 8002568:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00101D37;
 800256a:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <MX_I2C2_Init+0x74>)
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <MX_I2C2_Init+0x7c>)
 800256e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <MX_I2C2_Init+0x74>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <MX_I2C2_Init+0x74>)
 8002578:	2201      	movs	r2, #1
 800257a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <MX_I2C2_Init+0x74>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <MX_I2C2_Init+0x74>)
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <MX_I2C2_Init+0x74>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <MX_I2C2_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <MX_I2C2_Init+0x74>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <MX_I2C2_Init+0x74>)
 800259c:	0018      	movs	r0, r3
 800259e:	f001 fad9 	bl	8003b54 <HAL_I2C_Init>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80025a6:	f000 faa5 	bl	8002af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <MX_I2C2_Init+0x74>)
 80025ac:	2100      	movs	r1, #0
 80025ae:	0018      	movs	r0, r3
 80025b0:	f002 ffc0 	bl	8005534 <HAL_I2CEx_ConfigAnalogFilter>
 80025b4:	1e03      	subs	r3, r0, #0
 80025b6:	d001      	beq.n	80025bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80025b8:	f000 fa9c 	bl	8002af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <MX_I2C2_Init+0x74>)
 80025be:	2100      	movs	r1, #0
 80025c0:	0018      	movs	r0, r3
 80025c2:	f003 f803 	bl	80055cc <HAL_I2CEx_ConfigDigitalFilter>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d001      	beq.n	80025ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80025ca:	f000 fa93 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000028 	.word	0x20000028
 80025d8:	40005800 	.word	0x40005800
 80025dc:	00101d37 	.word	0x00101d37

080025e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08e      	sub	sp, #56	; 0x38
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e6:	2328      	movs	r3, #40	; 0x28
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	0018      	movs	r0, r3
 80025ec:	2310      	movs	r3, #16
 80025ee:	001a      	movs	r2, r3
 80025f0:	2100      	movs	r1, #0
 80025f2:	f005 fdff 	bl	80081f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f6:	2320      	movs	r3, #32
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	0018      	movs	r0, r3
 80025fc:	2308      	movs	r3, #8
 80025fe:	001a      	movs	r2, r3
 8002600:	2100      	movs	r1, #0
 8002602:	f005 fdf7 	bl	80081f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	0018      	movs	r0, r3
 800260a:	231c      	movs	r3, #28
 800260c:	001a      	movs	r2, r3
 800260e:	2100      	movs	r1, #0
 8002610:	f005 fdf0 	bl	80081f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002614:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <MX_TIM2_Init+0x134>)
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	05d2      	lsls	r2, r2, #23
 800261a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800261c:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <MX_TIM2_Init+0x134>)
 800261e:	2200      	movs	r2, #0
 8002620:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002622:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <MX_TIM2_Init+0x134>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 106;
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <MX_TIM2_Init+0x134>)
 800262a:	226a      	movs	r2, #106	; 0x6a
 800262c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <MX_TIM2_Init+0x134>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b37      	ldr	r3, [pc, #220]	; (8002714 <MX_TIM2_Init+0x134>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <MX_TIM2_Init+0x134>)
 800263c:	0018      	movs	r0, r3
 800263e:	f003 fe03 	bl	8006248 <HAL_TIM_Base_Init>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d001      	beq.n	800264a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002646:	f000 fa55 	bl	8002af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264a:	2128      	movs	r1, #40	; 0x28
 800264c:	187b      	adds	r3, r7, r1
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	0152      	lsls	r2, r2, #5
 8002652:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002654:	187a      	adds	r2, r7, r1
 8002656:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <MX_TIM2_Init+0x134>)
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f004 f982 	bl	8006964 <HAL_TIM_ConfigClockSource>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002664:	f000 fa46 	bl	8002af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <MX_TIM2_Init+0x134>)
 800266a:	0018      	movs	r0, r3
 800266c:	f003 fe8e 	bl	800638c <HAL_TIM_PWM_Init>
 8002670:	1e03      	subs	r3, r0, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002674:	f000 fa3e 	bl	8002af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002678:	2120      	movs	r1, #32
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2200      	movs	r2, #0
 8002684:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002686:	187a      	adds	r2, r7, r1
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <MX_TIM2_Init+0x134>)
 800268a:	0011      	movs	r1, r2
 800268c:	0018      	movs	r0, r3
 800268e:	f004 fd97 	bl	80071c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d001      	beq.n	800269a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8002696:	f000 fa2d 	bl	8002af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	2260      	movs	r2, #96	; 0x60
 800269e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	2200      	movs	r2, #0
 80026a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026b2:	1d39      	adds	r1, r7, #4
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <MX_TIM2_Init+0x134>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	0018      	movs	r0, r3
 80026ba:	f004 f88d 	bl	80067d8 <HAL_TIM_PWM_ConfigChannel>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80026c2:	f000 fa17 	bl	8002af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026c6:	1d39      	adds	r1, r7, #4
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_TIM2_Init+0x134>)
 80026ca:	2204      	movs	r2, #4
 80026cc:	0018      	movs	r0, r3
 80026ce:	f004 f883 	bl	80067d8 <HAL_TIM_PWM_ConfigChannel>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80026d6:	f000 fa0d 	bl	8002af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026da:	1d39      	adds	r1, r7, #4
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <MX_TIM2_Init+0x134>)
 80026de:	2208      	movs	r2, #8
 80026e0:	0018      	movs	r0, r3
 80026e2:	f004 f879 	bl	80067d8 <HAL_TIM_PWM_ConfigChannel>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 80026ea:	f000 fa03 	bl	8002af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026ee:	1d39      	adds	r1, r7, #4
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <MX_TIM2_Init+0x134>)
 80026f2:	220c      	movs	r2, #12
 80026f4:	0018      	movs	r0, r3
 80026f6:	f004 f86f 	bl	80067d8 <HAL_TIM_PWM_ConfigChannel>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 80026fe:	f000 f9f9 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <MX_TIM2_Init+0x134>)
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fb41 	bl	8002d8c <HAL_TIM_MspPostInit>

}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b00e      	add	sp, #56	; 0x38
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	20000104 	.word	0x20000104

08002718 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08e      	sub	sp, #56	; 0x38
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271e:	2328      	movs	r3, #40	; 0x28
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	0018      	movs	r0, r3
 8002724:	2310      	movs	r3, #16
 8002726:	001a      	movs	r2, r3
 8002728:	2100      	movs	r1, #0
 800272a:	f005 fd63 	bl	80081f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272e:	2320      	movs	r3, #32
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	0018      	movs	r0, r3
 8002734:	2308      	movs	r3, #8
 8002736:	001a      	movs	r2, r3
 8002738:	2100      	movs	r1, #0
 800273a:	f005 fd5b 	bl	80081f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	0018      	movs	r0, r3
 8002742:	231c      	movs	r3, #28
 8002744:	001a      	movs	r2, r3
 8002746:	2100      	movs	r1, #0
 8002748:	f005 fd54 	bl	80081f4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800274c:	4b34      	ldr	r3, [pc, #208]	; (8002820 <MX_TIM3_Init+0x108>)
 800274e:	4a35      	ldr	r2, [pc, #212]	; (8002824 <MX_TIM3_Init+0x10c>)
 8002750:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8002752:	4b33      	ldr	r3, [pc, #204]	; (8002820 <MX_TIM3_Init+0x108>)
 8002754:	2207      	movs	r2, #7
 8002756:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002758:	4b31      	ldr	r3, [pc, #196]	; (8002820 <MX_TIM3_Init+0x108>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800275e:	4b30      	ldr	r3, [pc, #192]	; (8002820 <MX_TIM3_Init+0x108>)
 8002760:	4a31      	ldr	r2, [pc, #196]	; (8002828 <MX_TIM3_Init+0x110>)
 8002762:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002764:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <MX_TIM3_Init+0x108>)
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276a:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <MX_TIM3_Init+0x108>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <MX_TIM3_Init+0x108>)
 8002772:	0018      	movs	r0, r3
 8002774:	f003 fd68 	bl	8006248 <HAL_TIM_Base_Init>
 8002778:	1e03      	subs	r3, r0, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800277c:	f000 f9ba 	bl	8002af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002780:	2128      	movs	r1, #40	; 0x28
 8002782:	187b      	adds	r3, r7, r1
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	0152      	lsls	r2, r2, #5
 8002788:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800278a:	187a      	adds	r2, r7, r1
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <MX_TIM3_Init+0x108>)
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f004 f8e7 	bl	8006964 <HAL_TIM_ConfigClockSource>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800279a:	f000 f9ab 	bl	8002af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <MX_TIM3_Init+0x108>)
 80027a0:	0018      	movs	r0, r3
 80027a2:	f003 fdf3 	bl	800638c <HAL_TIM_PWM_Init>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80027aa:	f000 f9a3 	bl	8002af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ae:	2120      	movs	r1, #32
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2200      	movs	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027bc:	187a      	adds	r2, r7, r1
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <MX_TIM3_Init+0x108>)
 80027c0:	0011      	movs	r1, r2
 80027c2:	0018      	movs	r0, r3
 80027c4:	f004 fcfc 	bl	80071c0 <HAL_TIMEx_MasterConfigSynchronization>
 80027c8:	1e03      	subs	r3, r0, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80027cc:	f000 f992 	bl	8002af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2260      	movs	r2, #96	; 0x60
 80027d4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e8:	1d39      	adds	r1, r7, #4
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <MX_TIM3_Init+0x108>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	0018      	movs	r0, r3
 80027f0:	f003 fff2 	bl	80067d8 <HAL_TIM_PWM_ConfigChannel>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80027f8:	f000 f97c 	bl	8002af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027fc:	1d39      	adds	r1, r7, #4
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <MX_TIM3_Init+0x108>)
 8002800:	2204      	movs	r2, #4
 8002802:	0018      	movs	r0, r3
 8002804:	f003 ffe8 	bl	80067d8 <HAL_TIM_PWM_ConfigChannel>
 8002808:	1e03      	subs	r3, r0, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 800280c:	f000 f972 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <MX_TIM3_Init+0x108>)
 8002812:	0018      	movs	r0, r3
 8002814:	f000 faba 	bl	8002d8c <HAL_TIM_MspPostInit>

}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b00e      	add	sp, #56	; 0x38
 800281e:	bd80      	pop	{r7, pc}
 8002820:	2000014c 	.word	0x2000014c
 8002824:	40000400 	.word	0x40000400
 8002828:	00004e1f 	.word	0x00004e1f

0800282c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002832:	003b      	movs	r3, r7
 8002834:	0018      	movs	r0, r3
 8002836:	2308      	movs	r3, #8
 8002838:	001a      	movs	r2, r3
 800283a:	2100      	movs	r1, #0
 800283c:	f005 fcda 	bl	80081f4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <MX_TIM6_Init+0x6c>)
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <MX_TIM6_Init+0x70>)
 8002844:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <MX_TIM6_Init+0x6c>)
 8002848:	2207      	movs	r2, #7
 800284a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <MX_TIM6_Init+0x6c>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1947;
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MX_TIM6_Init+0x6c>)
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <MX_TIM6_Init+0x74>)
 8002856:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <MX_TIM6_Init+0x6c>)
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MX_TIM6_Init+0x6c>)
 8002860:	0018      	movs	r0, r3
 8002862:	f003 fcf1 	bl	8006248 <HAL_TIM_Base_Init>
 8002866:	1e03      	subs	r3, r0, #0
 8002868:	d001      	beq.n	800286e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800286a:	f000 f943 	bl	8002af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800286e:	003b      	movs	r3, r7
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002874:	003b      	movs	r3, r7
 8002876:	2200      	movs	r2, #0
 8002878:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800287a:	003a      	movs	r2, r7
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_TIM6_Init+0x6c>)
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f004 fc9d 	bl	80071c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800288a:	f000 f933 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	20000194 	.word	0x20000194
 800289c:	40001000 	.word	0x40001000
 80028a0:	0000079b 	.word	0x0000079b

080028a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <MX_USART1_UART_Init+0x5c>)
 80028ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028b0:	22e1      	movs	r2, #225	; 0xe1
 80028b2:	0252      	lsls	r2, r2, #9
 80028b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028ca:	220c      	movs	r2, #12
 80028cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028e8:	0018      	movs	r0, r3
 80028ea:	f004 fcd7 	bl	800729c <HAL_UART_Init>
 80028ee:	1e03      	subs	r3, r0, #0
 80028f0:	d001      	beq.n	80028f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80028f2:	f000 f8ff 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	200001dc 	.word	0x200001dc
 8002900:	40013800 	.word	0x40013800

08002904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <MX_DMA_Init+0x58>)
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <MX_DMA_Init+0x58>)
 8002910:	2101      	movs	r1, #1
 8002912:	430a      	orrs	r2, r1
 8002914:	615a      	str	r2, [r3, #20]
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <MX_DMA_Init+0x58>)
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	2201      	movs	r2, #1
 800291c:	4013      	ands	r3, r2
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	2009      	movs	r0, #9
 8002928:	f000 fd9e 	bl	8003468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 800292c:	2009      	movs	r0, #9
 800292e:	f000 fdb0 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	200a      	movs	r0, #10
 8002938:	f000 fd96 	bl	8003468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 800293c:	200a      	movs	r0, #10
 800293e:	f000 fda8 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	200b      	movs	r0, #11
 8002948:	f000 fd8e 	bl	8003468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 800294c:	200b      	movs	r0, #11
 800294e:	f000 fda0 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	b002      	add	sp, #8
 8002958:	bd80      	pop	{r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	40021000 	.word	0x40021000

08002960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b08b      	sub	sp, #44	; 0x2c
 8002964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002966:	2414      	movs	r4, #20
 8002968:	193b      	adds	r3, r7, r4
 800296a:	0018      	movs	r0, r3
 800296c:	2314      	movs	r3, #20
 800296e:	001a      	movs	r2, r3
 8002970:	2100      	movs	r1, #0
 8002972:	f005 fc3f 	bl	80081f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <MX_GPIO_Init+0xf4>)
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <MX_GPIO_Init+0xf4>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	03c9      	lsls	r1, r1, #15
 8002980:	430a      	orrs	r2, r1
 8002982:	615a      	str	r2, [r3, #20]
 8002984:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <MX_GPIO_Init+0xf4>)
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	03db      	lsls	r3, r3, #15
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002992:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <MX_GPIO_Init+0xf4>)
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <MX_GPIO_Init+0xf4>)
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0309      	lsls	r1, r1, #12
 800299c:	430a      	orrs	r2, r1
 800299e:	615a      	str	r2, [r3, #20]
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	031b      	lsls	r3, r3, #12
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	0289      	lsls	r1, r1, #10
 80029b8:	430a      	orrs	r2, r1
 80029ba:	615a      	str	r2, [r3, #20]
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	029b      	lsls	r3, r3, #10
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	02c9      	lsls	r1, r1, #11
 80029d4:	430a      	orrs	r2, r1
 80029d6:	615a      	str	r2, [r3, #20]
 80029d8:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	02db      	lsls	r3, r3, #11
 80029e0:	4013      	ands	r3, r2
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80029e6:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <MX_GPIO_Init+0xf8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	213f      	movs	r1, #63	; 0x3f
 80029ec:	0018      	movs	r0, r3
 80029ee:	f001 f893 	bl	8003b18 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80029f2:	2390      	movs	r3, #144	; 0x90
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	2200      	movs	r2, #0
 80029f8:	2130      	movs	r1, #48	; 0x30
 80029fa:	0018      	movs	r0, r3
 80029fc:	f001 f88c 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	223f      	movs	r2, #63	; 0x3f
 8002a04:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2201      	movs	r2, #1
 8002a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	2200      	movs	r2, #0
 8002a16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <MX_GPIO_Init+0xf8>)
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	0010      	movs	r0, r2
 8002a20:	f000 ff02 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a24:	0021      	movs	r1, r4
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	2230      	movs	r2, #48	; 0x30
 8002a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2c:	187b      	adds	r3, r7, r1
 8002a2e:	2201      	movs	r2, #1
 8002a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	187b      	adds	r3, r7, r1
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	187a      	adds	r2, r7, r1
 8002a40:	2390      	movs	r3, #144	; 0x90
 8002a42:	05db      	lsls	r3, r3, #23
 8002a44:	0011      	movs	r1, r2
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 feee 	bl	8003828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b00b      	add	sp, #44	; 0x2c
 8002a52:	bd90      	pop	{r4, r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	48000800 	.word	0x48000800

08002a5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b09b      	sub	sp, #108	; 0x6c
 8002a60:	af18      	add	r7, sp, #96	; 0x60
 8002a62:	6078      	str	r0, [r7, #4]
	getGyroData(hi2c2, &angx, &angy, &angz);
 8002a64:	4c19      	ldr	r4, [pc, #100]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a68:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a6c:	9312      	str	r3, [sp, #72]	; 0x48
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a70:	9311      	str	r3, [sp, #68]	; 0x44
 8002a72:	466b      	mov	r3, sp
 8002a74:	0018      	movs	r0, r3
 8002a76:	0023      	movs	r3, r4
 8002a78:	3310      	adds	r3, #16
 8002a7a:	2244      	movs	r2, #68	; 0x44
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	f005 fbe5 	bl	800824c <memcpy>
 8002a82:	6820      	ldr	r0, [r4, #0]
 8002a84:	6861      	ldr	r1, [r4, #4]
 8002a86:	68a2      	ldr	r2, [r4, #8]
 8002a88:	68e3      	ldr	r3, [r4, #12]
 8002a8a:	f7ff f975 	bl	8001d78 <getGyroData>
	getAccelData(hi2c2, &v0x, &v0y, &v0z, &posx, &posy, &posz);
 8002a8e:	4c0f      	ldr	r4, [pc, #60]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a92:	9316      	str	r3, [sp, #88]	; 0x58
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002a96:	9315      	str	r3, [sp, #84]	; 0x54
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002a9a:	9314      	str	r3, [sp, #80]	; 0x50
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002a9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002aa6:	9311      	str	r3, [sp, #68]	; 0x44
 8002aa8:	466b      	mov	r3, sp
 8002aaa:	0018      	movs	r0, r3
 8002aac:	0023      	movs	r3, r4
 8002aae:	3310      	adds	r3, #16
 8002ab0:	2244      	movs	r2, #68	; 0x44
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	f005 fbca 	bl	800824c <memcpy>
 8002ab8:	6820      	ldr	r0, [r4, #0]
 8002aba:	6861      	ldr	r1, [r4, #4]
 8002abc:	68a2      	ldr	r2, [r4, #8]
 8002abe:	68e3      	ldr	r3, [r4, #12]
 8002ac0:	f7ff fa60 	bl	8001f84 <getAccelData>
	int16_t gyroDataZ = (int16_t)((gyroData[5] << 8) | gyroData[4]); // Z-axis

	int16_t accelDataX = (int16_t)((accelData[1] << 8) | accelData[0]); // X-axis
	int16_t accelDataY = (int16_t)((accelData[3] << 8) | accelData[2]); // Y-axis
	int16_t accelDataZ = (int16_t)((accelData[5] << 8) | accelData[4]); // Z-axis*/
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b003      	add	sp, #12
 8002aca:	bd90      	pop	{r4, r7, pc}
 8002acc:	20000028 	.word	0x20000028
 8002ad0:	2000030c 	.word	0x2000030c
 8002ad4:	20000308 	.word	0x20000308
 8002ad8:	20000304 	.word	0x20000304
 8002adc:	20000300 	.word	0x20000300
 8002ae0:	200002fc 	.word	0x200002fc
 8002ae4:	200002f8 	.word	0x200002f8
 8002ae8:	200002f4 	.word	0x200002f4
 8002aec:	200002f0 	.word	0x200002f0
 8002af0:	200002ec 	.word	0x200002ec

08002af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
}
 8002afa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002afc:	e7fe      	b.n	8002afc <Error_Handler+0x8>
	...

08002b00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <HAL_MspInit+0x44>)
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <HAL_MspInit+0x44>)
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	619a      	str	r2, [r3, #24]
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_MspInit+0x44>)
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_MspInit+0x44>)
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_MspInit+0x44>)
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0549      	lsls	r1, r1, #21
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_MspInit+0x44>)
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	055b      	lsls	r3, r3, #21
 8002b34:	4013      	ands	r3, r2
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b08b      	sub	sp, #44	; 0x2c
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	2414      	movs	r4, #20
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	0018      	movs	r0, r3
 8002b56:	2314      	movs	r3, #20
 8002b58:	001a      	movs	r2, r3
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	f005 fb4a 	bl	80081f4 <memset>
  if(hi2c->Instance==I2C2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a59      	ldr	r2, [pc, #356]	; (8002ccc <HAL_I2C_MspInit+0x184>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d000      	beq.n	8002b6c <HAL_I2C_MspInit+0x24>
 8002b6a:	e0aa      	b.n	8002cc2 <HAL_I2C_MspInit+0x17a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6c:	4b58      	ldr	r3, [pc, #352]	; (8002cd0 <HAL_I2C_MspInit+0x188>)
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <HAL_I2C_MspInit+0x188>)
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	02c9      	lsls	r1, r1, #11
 8002b76:	430a      	orrs	r2, r1
 8002b78:	615a      	str	r2, [r3, #20]
 8002b7a:	4b55      	ldr	r3, [pc, #340]	; (8002cd0 <HAL_I2C_MspInit+0x188>)
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	02db      	lsls	r3, r3, #11
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b88:	193b      	adds	r3, r7, r4
 8002b8a:	22c0      	movs	r2, #192	; 0xc0
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b90:	0021      	movs	r1, r4
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2212      	movs	r2, #18
 8002b96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	4a49      	ldr	r2, [pc, #292]	; (8002cd4 <HAL_I2C_MspInit+0x18c>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f000 fe39 	bl	8003828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bb6:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <HAL_I2C_MspInit+0x188>)
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	4b45      	ldr	r3, [pc, #276]	; (8002cd0 <HAL_I2C_MspInit+0x188>)
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	03c9      	lsls	r1, r1, #15
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	61da      	str	r2, [r3, #28]
 8002bc4:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <HAL_I2C_MspInit+0x188>)
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	03db      	lsls	r3, r3, #15
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002bd4:	4a41      	ldr	r2, [pc, #260]	; (8002cdc <HAL_I2C_MspInit+0x194>)
 8002bd6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002be4:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf0:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002bf6:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	0192      	lsls	r2, r2, #6
 8002c02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002c04:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 fc60 	bl	80034cc <HAL_DMA_Init>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002c10:	f7ff ff70 	bl	8002af4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH5_I2C2_RX);
 8002c14:	4a32      	ldr	r2, [pc, #200]	; (8002ce0 <HAL_I2C_MspInit+0x198>)
 8002c16:	23a8      	movs	r3, #168	; 0xa8
 8002c18:	58d3      	ldr	r3, [r2, r3]
 8002c1a:	4931      	ldr	r1, [pc, #196]	; (8002ce0 <HAL_I2C_MspInit+0x198>)
 8002c1c:	4a31      	ldr	r2, [pc, #196]	; (8002ce4 <HAL_I2C_MspInit+0x19c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	22a8      	movs	r2, #168	; 0xa8
 8002c22:	508b      	str	r3, [r1, r2]
 8002c24:	4a2e      	ldr	r2, [pc, #184]	; (8002ce0 <HAL_I2C_MspInit+0x198>)
 8002c26:	23a8      	movs	r3, #168	; 0xa8
 8002c28:	58d3      	ldr	r3, [r2, r3]
 8002c2a:	492d      	ldr	r1, [pc, #180]	; (8002ce0 <HAL_I2C_MspInit+0x198>)
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	0292      	lsls	r2, r2, #10
 8002c30:	4313      	orrs	r3, r2
 8002c32:	22a8      	movs	r2, #168	; 0xa8
 8002c34:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002c3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c3c:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_I2C_MspInit+0x190>)
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8002c42:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002c44:	4a29      	ldr	r2, [pc, #164]	; (8002cec <HAL_I2C_MspInit+0x1a4>)
 8002c46:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	0192      	lsls	r2, r2, #6
 8002c72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 fc28 	bl	80034cc <HAL_DMA_Init>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 8002c80:	f7ff ff38 	bl	8002af4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_I2C2_TX);
 8002c84:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_I2C_MspInit+0x198>)
 8002c86:	23a8      	movs	r3, #168	; 0xa8
 8002c88:	58d3      	ldr	r3, [r2, r3]
 8002c8a:	4915      	ldr	r1, [pc, #84]	; (8002ce0 <HAL_I2C_MspInit+0x198>)
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_I2C_MspInit+0x1a8>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	22a8      	movs	r2, #168	; 0xa8
 8002c92:	508b      	str	r3, [r1, r2]
 8002c94:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <HAL_I2C_MspInit+0x198>)
 8002c96:	23a8      	movs	r3, #168	; 0xa8
 8002c98:	58d3      	ldr	r3, [r2, r3]
 8002c9a:	4911      	ldr	r1, [pc, #68]	; (8002ce0 <HAL_I2C_MspInit+0x198>)
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	0192      	lsls	r2, r2, #6
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	22a8      	movs	r2, #168	; 0xa8
 8002ca4:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_I2C_MspInit+0x1a0>)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	2018      	movs	r0, #24
 8002cb8:	f000 fbd6 	bl	8003468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8002cbc:	2018      	movs	r0, #24
 8002cbe:	f000 fbe8 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b00b      	add	sp, #44	; 0x2c
 8002cc8:	bd90      	pop	{r4, r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	40005800 	.word	0x40005800
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	48000400 	.word	0x48000400
 8002cd8:	2000007c 	.word	0x2000007c
 8002cdc:	40020058 	.word	0x40020058
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	fff0ffff 	.word	0xfff0ffff
 8002ce8:	200000c0 	.word	0x200000c0
 8002cec:	40020044 	.word	0x40020044
 8002cf0:	ffff0fff 	.word	0xffff0fff

08002cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	05db      	lsls	r3, r3, #23
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d10c      	bne.n	8002d22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_TIM_Base_MspInit+0x8c>)
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_TIM_Base_MspInit+0x8c>)
 8002d0e:	2101      	movs	r1, #1
 8002d10:	430a      	orrs	r2, r1
 8002d12:	61da      	str	r2, [r3, #28]
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_TIM_Base_MspInit+0x8c>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002d20:	e02a      	b.n	8002d78 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_TIM_Base_MspInit+0x90>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d10c      	bne.n	8002d46 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_TIM_Base_MspInit+0x8c>)
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <HAL_TIM_Base_MspInit+0x8c>)
 8002d32:	2102      	movs	r1, #2
 8002d34:	430a      	orrs	r2, r1
 8002d36:	61da      	str	r2, [r3, #28]
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_TIM_Base_MspInit+0x8c>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]
}
 8002d44:	e018      	b.n	8002d78 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM6)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_TIM_Base_MspInit+0x94>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d113      	bne.n	8002d78 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_TIM_Base_MspInit+0x8c>)
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_TIM_Base_MspInit+0x8c>)
 8002d56:	2110      	movs	r1, #16
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	61da      	str	r2, [r3, #28]
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_TIM_Base_MspInit+0x8c>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2210      	movs	r2, #16
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2011      	movs	r0, #17
 8002d6e:	f000 fb7b 	bl	8003468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d72:	2011      	movs	r0, #17
 8002d74:	f000 fb8d 	bl	8003492 <HAL_NVIC_EnableIRQ>
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40001000 	.word	0x40001000

08002d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b08b      	sub	sp, #44	; 0x2c
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	2414      	movs	r4, #20
 8002d96:	193b      	adds	r3, r7, r4
 8002d98:	0018      	movs	r0, r3
 8002d9a:	2314      	movs	r3, #20
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f005 fa28 	bl	80081f4 <memset>
  if(htim->Instance==TIM2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	05db      	lsls	r3, r3, #23
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d125      	bne.n	8002dfc <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_TIM_MspPostInit+0xcc>)
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_TIM_MspPostInit+0xcc>)
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	0289      	lsls	r1, r1, #10
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	615a      	str	r2, [r3, #20]
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <HAL_TIM_MspPostInit+0xcc>)
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002dcc:	0021      	movs	r1, r4
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2202      	movs	r2, #2
 8002dea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dec:	187a      	adds	r2, r7, r1
 8002dee:	2390      	movs	r3, #144	; 0x90
 8002df0:	05db      	lsls	r3, r3, #23
 8002df2:	0011      	movs	r1, r2
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 fd17 	bl	8003828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002dfa:	e029      	b.n	8002e50 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <HAL_TIM_MspPostInit+0xd0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d124      	bne.n	8002e50 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_TIM_MspPostInit+0xcc>)
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_TIM_MspPostInit+0xcc>)
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0289      	lsls	r1, r1, #10
 8002e10:	430a      	orrs	r2, r1
 8002e12:	615a      	str	r2, [r3, #20]
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_TIM_MspPostInit+0xcc>)
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	029b      	lsls	r3, r3, #10
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e22:	2114      	movs	r1, #20
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	22c0      	movs	r2, #192	; 0xc0
 8002e28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	2201      	movs	r2, #1
 8002e40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	187a      	adds	r2, r7, r1
 8002e44:	2390      	movs	r3, #144	; 0x90
 8002e46:	05db      	lsls	r3, r3, #23
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fcec 	bl	8003828 <HAL_GPIO_Init>
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b00b      	add	sp, #44	; 0x2c
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40000400 	.word	0x40000400

08002e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b08b      	sub	sp, #44	; 0x2c
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	2414      	movs	r4, #20
 8002e6a:	193b      	adds	r3, r7, r4
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	2314      	movs	r3, #20
 8002e70:	001a      	movs	r2, r3
 8002e72:	2100      	movs	r1, #0
 8002e74:	f005 f9be 	bl	80081f4 <memset>
  if(huart->Instance==USART1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a57      	ldr	r2, [pc, #348]	; (8002fdc <HAL_UART_MspInit+0x17c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d000      	beq.n	8002e84 <HAL_UART_MspInit+0x24>
 8002e82:	e0a7      	b.n	8002fd4 <HAL_UART_MspInit+0x174>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e84:	4b56      	ldr	r3, [pc, #344]	; (8002fe0 <HAL_UART_MspInit+0x180>)
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <HAL_UART_MspInit+0x180>)
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	01c9      	lsls	r1, r1, #7
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	619a      	str	r2, [r3, #24]
 8002e92:	4b53      	ldr	r3, [pc, #332]	; (8002fe0 <HAL_UART_MspInit+0x180>)
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	01db      	lsls	r3, r3, #7
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_UART_MspInit+0x180>)
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <HAL_UART_MspInit+0x180>)
 8002ea6:	2180      	movs	r1, #128	; 0x80
 8002ea8:	0289      	lsls	r1, r1, #10
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	615a      	str	r2, [r3, #20]
 8002eae:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <HAL_UART_MspInit+0x180>)
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	029b      	lsls	r3, r3, #10
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	22c0      	movs	r2, #192	; 0xc0
 8002ec0:	00d2      	lsls	r2, r2, #3
 8002ec2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	0021      	movs	r1, r4
 8002ec6:	187b      	adds	r3, r7, r1
 8002ec8:	2202      	movs	r2, #2
 8002eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	187b      	adds	r3, r7, r1
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	2201      	movs	r2, #1
 8002edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ede:	187a      	adds	r2, r7, r1
 8002ee0:	2390      	movs	r3, #144	; 0x90
 8002ee2:	05db      	lsls	r3, r3, #23
 8002ee4:	0011      	movs	r1, r2
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fc9e 	bl	8003828 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002eec:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002eee:	4a3e      	ldr	r2, [pc, #248]	; (8002fe8 <HAL_UART_MspInit+0x188>)
 8002ef0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ef2:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002efe:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f04:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f0a:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002f12:	2220      	movs	r2, #32
 8002f14:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f16:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f1c:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 fad4 	bl	80034cc <HAL_DMA_Init>
 8002f24:	1e03      	subs	r3, r0, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002f28:	f7ff fde4 	bl	8002af4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8002f2c:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <HAL_UART_MspInit+0x18c>)
 8002f2e:	23a8      	movs	r3, #168	; 0xa8
 8002f30:	58d3      	ldr	r3, [r2, r3]
 8002f32:	492e      	ldr	r1, [pc, #184]	; (8002fec <HAL_UART_MspInit+0x18c>)
 8002f34:	220f      	movs	r2, #15
 8002f36:	4393      	bics	r3, r2
 8002f38:	22a8      	movs	r2, #168	; 0xa8
 8002f3a:	508b      	str	r3, [r1, r2]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	; (8002fec <HAL_UART_MspInit+0x18c>)
 8002f3e:	23a8      	movs	r3, #168	; 0xa8
 8002f40:	58d3      	ldr	r3, [r2, r3]
 8002f42:	492a      	ldr	r1, [pc, #168]	; (8002fec <HAL_UART_MspInit+0x18c>)
 8002f44:	2208      	movs	r2, #8
 8002f46:	4313      	orrs	r3, r2
 8002f48:	22a8      	movs	r2, #168	; 0xa8
 8002f4a:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a25      	ldr	r2, [pc, #148]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002f50:	675a      	str	r2, [r3, #116]	; 0x74
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_UART_MspInit+0x184>)
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f5a:	4a26      	ldr	r2, [pc, #152]	; (8002ff4 <HAL_UART_MspInit+0x194>)
 8002f5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f60:	2210      	movs	r2, #16
 8002f62:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 fa9e 	bl	80034cc <HAL_DMA_Init>
 8002f90:	1e03      	subs	r3, r0, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002f94:	f7ff fdae 	bl	8002af4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_UART_MspInit+0x18c>)
 8002f9a:	23a8      	movs	r3, #168	; 0xa8
 8002f9c:	58d3      	ldr	r3, [r2, r3]
 8002f9e:	4913      	ldr	r1, [pc, #76]	; (8002fec <HAL_UART_MspInit+0x18c>)
 8002fa0:	22f0      	movs	r2, #240	; 0xf0
 8002fa2:	4393      	bics	r3, r2
 8002fa4:	22a8      	movs	r2, #168	; 0xa8
 8002fa6:	508b      	str	r3, [r1, r2]
 8002fa8:	4a10      	ldr	r2, [pc, #64]	; (8002fec <HAL_UART_MspInit+0x18c>)
 8002faa:	23a8      	movs	r3, #168	; 0xa8
 8002fac:	58d3      	ldr	r3, [r2, r3]
 8002fae:	490f      	ldr	r1, [pc, #60]	; (8002fec <HAL_UART_MspInit+0x18c>)
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	22a8      	movs	r2, #168	; 0xa8
 8002fb6:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002fbc:	671a      	str	r2, [r3, #112]	; 0x70
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_UART_MspInit+0x190>)
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	201b      	movs	r0, #27
 8002fca:	f000 fa4d 	bl	8003468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fce:	201b      	movs	r0, #27
 8002fd0:	f000 fa5f 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b00b      	add	sp, #44	; 0x2c
 8002fda:	bd90      	pop	{r4, r7, pc}
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	20000264 	.word	0x20000264
 8002fe8:	40020008 	.word	0x40020008
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	200002a8 	.word	0x200002a8
 8002ff4:	4002001c 	.word	0x4002001c

08002ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ffc:	e7fe      	b.n	8002ffc <NMI_Handler+0x4>

08002ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003002:	e7fe      	b.n	8003002 <HardFault_Handler+0x4>

08003004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800301c:	f000 f95c 	bl	80032d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <DMA1_Ch1_IRQHandler+0x14>)
 800302e:	0018      	movs	r0, r3
 8003030:	f000 fb11 	bl	8003656 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	20000264 	.word	0x20000264

08003040 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8003046:	0018      	movs	r0, r3
 8003048:	f000 fb05 	bl	8003656 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	200002a8 	.word	0x200002a8

08003058 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x1c>)
 800305e:	0018      	movs	r0, r3
 8003060:	f000 faf9 	bl	8003656 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x20>)
 8003066:	0018      	movs	r0, r3
 8003068:	f000 faf5 	bl	8003656 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	200000c0 	.word	0x200000c0
 8003078:	2000007c 	.word	0x2000007c

0800307c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <TIM6_DAC_IRQHandler+0x14>)
 8003082:	0018      	movs	r0, r3
 8003084:	f003 fa92 	bl	80065ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	20000194 	.word	0x20000194

08003094 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <I2C2_IRQHandler+0x2c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	23e0      	movs	r3, #224	; 0xe0
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4013      	ands	r3, r2
 80030a4:	d004      	beq.n	80030b0 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <I2C2_IRQHandler+0x2c>)
 80030a8:	0018      	movs	r0, r3
 80030aa:	f001 f97f 	bl	80043ac <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80030ae:	e003      	b.n	80030b8 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <I2C2_IRQHandler+0x2c>)
 80030b2:	0018      	movs	r0, r3
 80030b4:	f001 f960 	bl	8004378 <HAL_I2C_EV_IRQHandler>
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	20000028 	.word	0x20000028

080030c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <USART1_IRQHandler+0x14>)
 80030ca:	0018      	movs	r0, r3
 80030cc:	f004 f93a 	bl	8007344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	200001dc 	.word	0x200001dc

080030dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <motor3_control>:

	return;
}

void motor3_control(uint8_t direction, uint8_t speed)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	0002      	movs	r2, r0
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	1dbb      	adds	r3, r7, #6
 80030f4:	1c0a      	adds	r2, r1, #0
 80030f6:	701a      	strb	r2, [r3, #0]
	if(!speed)
 80030f8:	1dbb      	adds	r3, r7, #6
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d107      	bne.n	8003110 <motor3_control+0x2a>
	{
		HAL_GPIO_WritePin(GPIOA, M3IN1 | M3IN2, GPIO_PIN_RESET);
 8003100:	2390      	movs	r3, #144	; 0x90
 8003102:	05db      	lsls	r3, r3, #23
 8003104:	2200      	movs	r2, #0
 8003106:	2130      	movs	r1, #48	; 0x30
 8003108:	0018      	movs	r0, r3
 800310a:	f000 fd05 	bl	8003b18 <HAL_GPIO_WritePin>
		return;
 800310e:	e02b      	b.n	8003168 <motor3_control+0x82>
	}

	if(direction)
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <motor3_control+0x5a>
	{
		HAL_GPIO_WritePin(GPIOA, M3IN1, GPIO_PIN_SET);
 8003118:	2390      	movs	r3, #144	; 0x90
 800311a:	05db      	lsls	r3, r3, #23
 800311c:	2201      	movs	r2, #1
 800311e:	2110      	movs	r1, #16
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fcf9 	bl	8003b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, M3IN2, GPIO_PIN_RESET);
 8003126:	2390      	movs	r3, #144	; 0x90
 8003128:	05db      	lsls	r3, r3, #23
 800312a:	2200      	movs	r2, #0
 800312c:	2120      	movs	r1, #32
 800312e:	0018      	movs	r0, r3
 8003130:	f000 fcf2 	bl	8003b18 <HAL_GPIO_WritePin>
		TIM2->CCR3 = speed;
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	05db      	lsls	r3, r3, #23
 8003138:	1dba      	adds	r2, r7, #6
 800313a:	7812      	ldrb	r2, [r2, #0]
 800313c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, M3IN1, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, M3IN2, GPIO_PIN_SET);
		TIM2->CCR3 = speed;
	}

	return;
 800313e:	e012      	b.n	8003166 <motor3_control+0x80>
		HAL_GPIO_WritePin(GPIOA, M3IN1, GPIO_PIN_RESET);
 8003140:	2390      	movs	r3, #144	; 0x90
 8003142:	05db      	lsls	r3, r3, #23
 8003144:	2200      	movs	r2, #0
 8003146:	2110      	movs	r1, #16
 8003148:	0018      	movs	r0, r3
 800314a:	f000 fce5 	bl	8003b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, M3IN2, GPIO_PIN_SET);
 800314e:	2390      	movs	r3, #144	; 0x90
 8003150:	05db      	lsls	r3, r3, #23
 8003152:	2201      	movs	r2, #1
 8003154:	2120      	movs	r1, #32
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fcde 	bl	8003b18 <HAL_GPIO_WritePin>
		TIM2->CCR3 = speed;
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	05db      	lsls	r3, r3, #23
 8003160:	1dba      	adds	r2, r7, #6
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	63da      	str	r2, [r3, #60]	; 0x3c
	return;
 8003166:	46c0      	nop			; (mov r8, r8)
}
 8003168:	46bd      	mov	sp, r7
 800316a:	b002      	add	sp, #8
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <motor4_control>:

void motor4_control(uint8_t direction, uint8_t speed)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	0002      	movs	r2, r0
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	1dbb      	adds	r3, r7, #6
 800317e:	1c0a      	adds	r2, r1, #0
 8003180:	701a      	strb	r2, [r3, #0]
	if(!speed)
 8003182:	1dbb      	adds	r3, r7, #6
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <motor4_control+0x28>
	{
		HAL_GPIO_WritePin(GPIOC, M4IN1 | M4IN2, GPIO_PIN_RESET);
 800318a:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <motor4_control+0x80>)
 800318c:	2200      	movs	r2, #0
 800318e:	2130      	movs	r1, #48	; 0x30
 8003190:	0018      	movs	r0, r3
 8003192:	f000 fcc1 	bl	8003b18 <HAL_GPIO_WritePin>
		return;
 8003196:	e027      	b.n	80031e8 <motor4_control+0x78>
	}

	if(direction)
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d011      	beq.n	80031c4 <motor4_control+0x54>
	{
		HAL_GPIO_WritePin(GPIOC, M4IN1, GPIO_PIN_SET);
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <motor4_control+0x80>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	2110      	movs	r1, #16
 80031a6:	0018      	movs	r0, r3
 80031a8:	f000 fcb6 	bl	8003b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, M4IN2, GPIO_PIN_RESET);
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <motor4_control+0x80>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	2120      	movs	r1, #32
 80031b2:	0018      	movs	r0, r3
 80031b4:	f000 fcb0 	bl	8003b18 <HAL_GPIO_WritePin>
		TIM2->CCR4 = speed;
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	05db      	lsls	r3, r3, #23
 80031bc:	1dba      	adds	r2, r7, #6
 80031be:	7812      	ldrb	r2, [r2, #0]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOC, M4IN1, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, M4IN2, GPIO_PIN_SET);
		TIM2->CCR4 = speed;
	}

	return;
 80031c2:	e010      	b.n	80031e6 <motor4_control+0x76>
		HAL_GPIO_WritePin(GPIOC, M4IN1, GPIO_PIN_RESET);
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <motor4_control+0x80>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	2110      	movs	r1, #16
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 fca4 	bl	8003b18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, M4IN2, GPIO_PIN_SET);
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <motor4_control+0x80>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	2120      	movs	r1, #32
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 fc9e 	bl	8003b18 <HAL_GPIO_WritePin>
		TIM2->CCR4 = speed;
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	05db      	lsls	r3, r3, #23
 80031e0:	1dba      	adds	r2, r7, #6
 80031e2:	7812      	ldrb	r2, [r2, #0]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
	return;
 80031e6:	46c0      	nop			; (mov r8, r8)
}
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b002      	add	sp, #8
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	48000800 	.word	0x48000800

080031f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031f4:	480d      	ldr	r0, [pc, #52]	; (800322c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031f8:	f7ff ff70 	bl	80030dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031fc:	480c      	ldr	r0, [pc, #48]	; (8003230 <LoopForever+0x6>)
  ldr r1, =_edata
 80031fe:	490d      	ldr	r1, [pc, #52]	; (8003234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <LoopForever+0xe>)
  movs r3, #0
 8003202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003204:	e002      	b.n	800320c <LoopCopyDataInit>

08003206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800320a:	3304      	adds	r3, #4

0800320c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800320c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800320e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003210:	d3f9      	bcc.n	8003206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003214:	4c0a      	ldr	r4, [pc, #40]	; (8003240 <LoopForever+0x16>)
  movs r3, #0
 8003216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003218:	e001      	b.n	800321e <LoopFillZerobss>

0800321a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800321a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800321c:	3204      	adds	r2, #4

0800321e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800321e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003220:	d3fb      	bcc.n	800321a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003222:	f004 ffef 	bl	8008204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003226:	f7ff f8c9 	bl	80023bc <main>

0800322a <LoopForever>:

LoopForever:
    b LoopForever
 800322a:	e7fe      	b.n	800322a <LoopForever>
  ldr   r0, =_estack
 800322c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003234:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003238:	080082f8 	.word	0x080082f8
  ldr r2, =_sbss
 800323c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003240:	20000314 	.word	0x20000314

08003244 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003244:	e7fe      	b.n	8003244 <ADC1_COMP_IRQHandler>
	...

08003248 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_Init+0x24>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_Init+0x24>)
 8003252:	2110      	movs	r1, #16
 8003254:	430a      	orrs	r2, r1
 8003256:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003258:	2003      	movs	r0, #3
 800325a:	f000 f809 	bl	8003270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800325e:	f7ff fc4f 	bl	8002b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	0018      	movs	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	40022000 	.word	0x40022000

08003270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_InitTick+0x5c>)
 800327a:	681c      	ldr	r4, [r3, #0]
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_InitTick+0x60>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	0019      	movs	r1, r3
 8003282:	23fa      	movs	r3, #250	; 0xfa
 8003284:	0098      	lsls	r0, r3, #2
 8003286:	f7fc ff3d 	bl	8000104 <__udivsi3>
 800328a:	0003      	movs	r3, r0
 800328c:	0019      	movs	r1, r3
 800328e:	0020      	movs	r0, r4
 8003290:	f7fc ff38 	bl	8000104 <__udivsi3>
 8003294:	0003      	movs	r3, r0
 8003296:	0018      	movs	r0, r3
 8003298:	f000 f90b 	bl	80034b2 <HAL_SYSTICK_Config>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d001      	beq.n	80032a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e00f      	b.n	80032c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d80b      	bhi.n	80032c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	2301      	movs	r3, #1
 80032ae:	425b      	negs	r3, r3
 80032b0:	2200      	movs	r2, #0
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f8d8 	bl	8003468 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_InitTick+0x64>)
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b003      	add	sp, #12
 80032ca:	bd90      	pop	{r4, r7, pc}
 80032cc:	20000000 	.word	0x20000000
 80032d0:	20000008 	.word	0x20000008
 80032d4:	20000004 	.word	0x20000004

080032d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_IncTick+0x1c>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	001a      	movs	r2, r3
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_IncTick+0x20>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	18d2      	adds	r2, r2, r3
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_IncTick+0x20>)
 80032ea:	601a      	str	r2, [r3, #0]
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	20000008 	.word	0x20000008
 80032f8:	20000310 	.word	0x20000310

080032fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003300:	4b02      	ldr	r3, [pc, #8]	; (800330c <HAL_GetTick+0x10>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	20000310 	.word	0x20000310

08003310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	0002      	movs	r2, r0
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800331c:	1dfb      	adds	r3, r7, #7
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b7f      	cmp	r3, #127	; 0x7f
 8003322:	d809      	bhi.n	8003338 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	001a      	movs	r2, r3
 800332a:	231f      	movs	r3, #31
 800332c:	401a      	ands	r2, r3
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <__NVIC_EnableIRQ+0x30>)
 8003330:	2101      	movs	r1, #1
 8003332:	4091      	lsls	r1, r2
 8003334:	000a      	movs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
  }
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}
 8003340:	e000e100 	.word	0xe000e100

08003344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	0002      	movs	r2, r0
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b7f      	cmp	r3, #127	; 0x7f
 8003358:	d828      	bhi.n	80033ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800335a:	4a2f      	ldr	r2, [pc, #188]	; (8003418 <__NVIC_SetPriority+0xd4>)
 800335c:	1dfb      	adds	r3, r7, #7
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b25b      	sxtb	r3, r3
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	33c0      	adds	r3, #192	; 0xc0
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	589b      	ldr	r3, [r3, r2]
 800336a:	1dfa      	adds	r2, r7, #7
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	0011      	movs	r1, r2
 8003370:	2203      	movs	r2, #3
 8003372:	400a      	ands	r2, r1
 8003374:	00d2      	lsls	r2, r2, #3
 8003376:	21ff      	movs	r1, #255	; 0xff
 8003378:	4091      	lsls	r1, r2
 800337a:	000a      	movs	r2, r1
 800337c:	43d2      	mvns	r2, r2
 800337e:	401a      	ands	r2, r3
 8003380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	019b      	lsls	r3, r3, #6
 8003386:	22ff      	movs	r2, #255	; 0xff
 8003388:	401a      	ands	r2, r3
 800338a:	1dfb      	adds	r3, r7, #7
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	0018      	movs	r0, r3
 8003390:	2303      	movs	r3, #3
 8003392:	4003      	ands	r3, r0
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003398:	481f      	ldr	r0, [pc, #124]	; (8003418 <__NVIC_SetPriority+0xd4>)
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	430a      	orrs	r2, r1
 80033a4:	33c0      	adds	r3, #192	; 0xc0
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033aa:	e031      	b.n	8003410 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <__NVIC_SetPriority+0xd8>)
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	0019      	movs	r1, r3
 80033b4:	230f      	movs	r3, #15
 80033b6:	400b      	ands	r3, r1
 80033b8:	3b08      	subs	r3, #8
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	3306      	adds	r3, #6
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	18d3      	adds	r3, r2, r3
 80033c2:	3304      	adds	r3, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1dfa      	adds	r2, r7, #7
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	0011      	movs	r1, r2
 80033cc:	2203      	movs	r2, #3
 80033ce:	400a      	ands	r2, r1
 80033d0:	00d2      	lsls	r2, r2, #3
 80033d2:	21ff      	movs	r1, #255	; 0xff
 80033d4:	4091      	lsls	r1, r2
 80033d6:	000a      	movs	r2, r1
 80033d8:	43d2      	mvns	r2, r2
 80033da:	401a      	ands	r2, r3
 80033dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	401a      	ands	r2, r3
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	0018      	movs	r0, r3
 80033ec:	2303      	movs	r3, #3
 80033ee:	4003      	ands	r3, r0
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f4:	4809      	ldr	r0, [pc, #36]	; (800341c <__NVIC_SetPriority+0xd8>)
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	001c      	movs	r4, r3
 80033fc:	230f      	movs	r3, #15
 80033fe:	4023      	ands	r3, r4
 8003400:	3b08      	subs	r3, #8
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	430a      	orrs	r2, r1
 8003406:	3306      	adds	r3, #6
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	18c3      	adds	r3, r0, r3
 800340c:	3304      	adds	r3, #4
 800340e:	601a      	str	r2, [r3, #0]
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b003      	add	sp, #12
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	e000e100 	.word	0xe000e100
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	1e5a      	subs	r2, r3, #1
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	045b      	lsls	r3, r3, #17
 8003430:	429a      	cmp	r2, r3
 8003432:	d301      	bcc.n	8003438 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003434:	2301      	movs	r3, #1
 8003436:	e010      	b.n	800345a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <SysTick_Config+0x44>)
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	3a01      	subs	r2, #1
 800343e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003440:	2301      	movs	r3, #1
 8003442:	425b      	negs	r3, r3
 8003444:	2103      	movs	r1, #3
 8003446:	0018      	movs	r0, r3
 8003448:	f7ff ff7c 	bl	8003344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <SysTick_Config+0x44>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <SysTick_Config+0x44>)
 8003454:	2207      	movs	r2, #7
 8003456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b002      	add	sp, #8
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	e000e010 	.word	0xe000e010

08003468 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	210f      	movs	r1, #15
 8003474:	187b      	adds	r3, r7, r1
 8003476:	1c02      	adds	r2, r0, #0
 8003478:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	187b      	adds	r3, r7, r1
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b25b      	sxtb	r3, r3
 8003482:	0011      	movs	r1, r2
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff ff5d 	bl	8003344 <__NVIC_SetPriority>
}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b004      	add	sp, #16
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	0002      	movs	r2, r0
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349e:	1dfb      	adds	r3, r7, #7
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff ff33 	bl	8003310 <__NVIC_EnableIRQ>
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	0018      	movs	r0, r3
 80034be:	f7ff ffaf 	bl	8003420 <SysTick_Config>
 80034c2:	0003      	movs	r3, r0
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e036      	b.n	8003550 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2221      	movs	r2, #33	; 0x21
 80034e6:	2102      	movs	r1, #2
 80034e8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_DMA_Init+0x8c>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003502:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0018      	movs	r0, r3
 8003534:	f000 f93e 	bl	80037b4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2221      	movs	r2, #33	; 0x21
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	2100      	movs	r1, #0
 800354c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	b004      	add	sp, #16
 8003556:	bd80      	pop	{r7, pc}
 8003558:	ffffc00f 	.word	0xffffc00f

0800355c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2221      	movs	r2, #33	; 0x21
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d008      	beq.n	8003582 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2204      	movs	r2, #4
 8003574:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	2100      	movs	r1, #0
 800357c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e020      	b.n	80035c4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	210e      	movs	r1, #14
 800358e:	438a      	bics	r2, r1
 8003590:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	438a      	bics	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	2101      	movs	r1, #1
 80035ac:	4091      	lsls	r1, r2
 80035ae:	000a      	movs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2221      	movs	r2, #33	; 0x21
 80035b6:	2101      	movs	r1, #1
 80035b8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	2100      	movs	r1, #0
 80035c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	210f      	movs	r1, #15
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2221      	movs	r2, #33	; 0x21
 80035e0:	5c9b      	ldrb	r3, [r3, r2]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d006      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2204      	movs	r2, #4
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	2201      	movs	r2, #1
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e028      	b.n	8003648 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	210e      	movs	r1, #14
 8003602:	438a      	bics	r2, r1
 8003604:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2101      	movs	r1, #1
 8003612:	438a      	bics	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	2101      	movs	r1, #1
 8003620:	4091      	lsls	r1, r2
 8003622:	000a      	movs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2221      	movs	r2, #33	; 0x21
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	0010      	movs	r0, r2
 8003646:	4798      	blx	r3
    }
  }
  return status;
 8003648:	230f      	movs	r3, #15
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	781b      	ldrb	r3, [r3, #0]
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b004      	add	sp, #16
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2204      	movs	r2, #4
 8003674:	409a      	lsls	r2, r3
 8003676:	0013      	movs	r3, r2
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4013      	ands	r3, r2
 800367c:	d024      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x72>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2204      	movs	r2, #4
 8003682:	4013      	ands	r3, r2
 8003684:	d020      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2220      	movs	r2, #32
 800368e:	4013      	ands	r3, r2
 8003690:	d107      	bne.n	80036a2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2104      	movs	r1, #4
 800369e:	438a      	bics	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	2104      	movs	r1, #4
 80036ac:	4091      	lsls	r1, r2
 80036ae:	000a      	movs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d100      	bne.n	80036bc <HAL_DMA_IRQHandler+0x66>
 80036ba:	e06a      	b.n	8003792 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	0010      	movs	r0, r2
 80036c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036c6:	e064      	b.n	8003792 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2202      	movs	r2, #2
 80036ce:	409a      	lsls	r2, r3
 80036d0:	0013      	movs	r3, r2
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	d02b      	beq.n	8003730 <HAL_DMA_IRQHandler+0xda>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d027      	beq.n	8003730 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2220      	movs	r2, #32
 80036e8:	4013      	ands	r3, r2
 80036ea:	d10b      	bne.n	8003704 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	210a      	movs	r1, #10
 80036f8:	438a      	bics	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2221      	movs	r2, #33	; 0x21
 8003700:	2101      	movs	r1, #1
 8003702:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	2102      	movs	r1, #2
 800370e:	4091      	lsls	r1, r2
 8003710:	000a      	movs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	d036      	beq.n	8003792 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	0010      	movs	r0, r2
 800372c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800372e:	e030      	b.n	8003792 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	2208      	movs	r2, #8
 8003736:	409a      	lsls	r2, r3
 8003738:	0013      	movs	r3, r2
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	d028      	beq.n	8003792 <HAL_DMA_IRQHandler+0x13c>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2208      	movs	r2, #8
 8003744:	4013      	ands	r3, r2
 8003746:	d024      	beq.n	8003792 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	210e      	movs	r1, #14
 8003754:	438a      	bics	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	2101      	movs	r1, #1
 8003762:	4091      	lsls	r1, r2
 8003764:	000a      	movs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2221      	movs	r2, #33	; 0x21
 8003772:	2101      	movs	r1, #1
 8003774:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	2100      	movs	r1, #0
 800377c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	0010      	movs	r0, r2
 800378e:	4798      	blx	r3
    }
  }
}
 8003790:	e7ff      	b.n	8003792 <HAL_DMA_IRQHandler+0x13c>
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b004      	add	sp, #16
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2221      	movs	r2, #33	; 0x21
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	b2db      	uxtb	r3, r3
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b002      	add	sp, #8
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	001a      	movs	r2, r3
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <DMA_CalcBaseAndBitshift+0x60>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d810      	bhi.n	80037ea <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a12      	ldr	r2, [pc, #72]	; (8003818 <DMA_CalcBaseAndBitshift+0x64>)
 80037ce:	4694      	mov	ip, r2
 80037d0:	4463      	add	r3, ip
 80037d2:	2114      	movs	r1, #20
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7fc fc95 	bl	8000104 <__udivsi3>
 80037da:	0003      	movs	r3, r0
 80037dc:	009a      	lsls	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <DMA_CalcBaseAndBitshift+0x68>)
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80037e8:	e00f      	b.n	800380a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <DMA_CalcBaseAndBitshift+0x6c>)
 80037f0:	4694      	mov	ip, r2
 80037f2:	4463      	add	r3, ip
 80037f4:	2114      	movs	r1, #20
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7fc fc84 	bl	8000104 <__udivsi3>
 80037fc:	0003      	movs	r3, r0
 80037fe:	009a      	lsls	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a07      	ldr	r2, [pc, #28]	; (8003824 <DMA_CalcBaseAndBitshift+0x70>)
 8003808:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	40020407 	.word	0x40020407
 8003818:	bffdfff8 	.word	0xbffdfff8
 800381c:	40020000 	.word	0x40020000
 8003820:	bffdfbf8 	.word	0xbffdfbf8
 8003824:	40020400 	.word	0x40020400

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003836:	e155      	b.n	8003ae4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2101      	movs	r1, #1
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4091      	lsls	r1, r2
 8003842:	000a      	movs	r2, r1
 8003844:	4013      	ands	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d100      	bne.n	8003850 <HAL_GPIO_Init+0x28>
 800384e:	e146      	b.n	8003ade <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2203      	movs	r2, #3
 8003856:	4013      	ands	r3, r2
 8003858:	2b01      	cmp	r3, #1
 800385a:	d005      	beq.n	8003868 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2203      	movs	r2, #3
 8003862:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003864:	2b02      	cmp	r3, #2
 8003866:	d130      	bne.n	80038ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	2203      	movs	r2, #3
 8003874:	409a      	lsls	r2, r3
 8003876:	0013      	movs	r3, r2
 8003878:	43da      	mvns	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	409a      	lsls	r2, r3
 800388a:	0013      	movs	r3, r2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800389e:	2201      	movs	r2, #1
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	409a      	lsls	r2, r3
 80038a4:	0013      	movs	r3, r2
 80038a6:	43da      	mvns	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	2201      	movs	r2, #1
 80038b6:	401a      	ands	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	409a      	lsls	r2, r3
 80038bc:	0013      	movs	r3, r2
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2203      	movs	r2, #3
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d017      	beq.n	8003906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	2203      	movs	r2, #3
 80038e2:	409a      	lsls	r2, r3
 80038e4:	0013      	movs	r3, r2
 80038e6:	43da      	mvns	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	409a      	lsls	r2, r3
 80038f8:	0013      	movs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2203      	movs	r2, #3
 800390c:	4013      	ands	r3, r2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d123      	bne.n	800395a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	08da      	lsrs	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3208      	adds	r2, #8
 800391a:	0092      	lsls	r2, r2, #2
 800391c:	58d3      	ldr	r3, [r2, r3]
 800391e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2207      	movs	r2, #7
 8003924:	4013      	ands	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	220f      	movs	r2, #15
 800392a:	409a      	lsls	r2, r3
 800392c:	0013      	movs	r3, r2
 800392e:	43da      	mvns	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2107      	movs	r1, #7
 800393e:	400b      	ands	r3, r1
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	409a      	lsls	r2, r3
 8003944:	0013      	movs	r3, r2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	08da      	lsrs	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3208      	adds	r2, #8
 8003954:	0092      	lsls	r2, r2, #2
 8003956:	6939      	ldr	r1, [r7, #16]
 8003958:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	2203      	movs	r2, #3
 8003966:	409a      	lsls	r2, r3
 8003968:	0013      	movs	r3, r2
 800396a:	43da      	mvns	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4013      	ands	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2203      	movs	r2, #3
 8003978:	401a      	ands	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	409a      	lsls	r2, r3
 8003980:	0013      	movs	r3, r2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	23c0      	movs	r3, #192	; 0xc0
 8003994:	029b      	lsls	r3, r3, #10
 8003996:	4013      	ands	r3, r2
 8003998:	d100      	bne.n	800399c <HAL_GPIO_Init+0x174>
 800399a:	e0a0      	b.n	8003ade <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399c:	4b57      	ldr	r3, [pc, #348]	; (8003afc <HAL_GPIO_Init+0x2d4>)
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	4b56      	ldr	r3, [pc, #344]	; (8003afc <HAL_GPIO_Init+0x2d4>)
 80039a2:	2101      	movs	r1, #1
 80039a4:	430a      	orrs	r2, r1
 80039a6:	619a      	str	r2, [r3, #24]
 80039a8:	4b54      	ldr	r3, [pc, #336]	; (8003afc <HAL_GPIO_Init+0x2d4>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2201      	movs	r2, #1
 80039ae:	4013      	ands	r3, r2
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039b4:	4a52      	ldr	r2, [pc, #328]	; (8003b00 <HAL_GPIO_Init+0x2d8>)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	089b      	lsrs	r3, r3, #2
 80039ba:	3302      	adds	r3, #2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	589b      	ldr	r3, [r3, r2]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2203      	movs	r2, #3
 80039c6:	4013      	ands	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	220f      	movs	r2, #15
 80039cc:	409a      	lsls	r2, r3
 80039ce:	0013      	movs	r3, r2
 80039d0:	43da      	mvns	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	2390      	movs	r3, #144	; 0x90
 80039dc:	05db      	lsls	r3, r3, #23
 80039de:	429a      	cmp	r2, r3
 80039e0:	d019      	beq.n	8003a16 <HAL_GPIO_Init+0x1ee>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a47      	ldr	r2, [pc, #284]	; (8003b04 <HAL_GPIO_Init+0x2dc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_GPIO_Init+0x1ea>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a46      	ldr	r2, [pc, #280]	; (8003b08 <HAL_GPIO_Init+0x2e0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00d      	beq.n	8003a0e <HAL_GPIO_Init+0x1e6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a45      	ldr	r2, [pc, #276]	; (8003b0c <HAL_GPIO_Init+0x2e4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <HAL_GPIO_Init+0x1e2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a44      	ldr	r2, [pc, #272]	; (8003b10 <HAL_GPIO_Init+0x2e8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_GPIO_Init+0x1de>
 8003a02:	2304      	movs	r3, #4
 8003a04:	e008      	b.n	8003a18 <HAL_GPIO_Init+0x1f0>
 8003a06:	2305      	movs	r3, #5
 8003a08:	e006      	b.n	8003a18 <HAL_GPIO_Init+0x1f0>
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e004      	b.n	8003a18 <HAL_GPIO_Init+0x1f0>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e002      	b.n	8003a18 <HAL_GPIO_Init+0x1f0>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_GPIO_Init+0x1f0>
 8003a16:	2300      	movs	r3, #0
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	4093      	lsls	r3, r2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a28:	4935      	ldr	r1, [pc, #212]	; (8003b00 <HAL_GPIO_Init+0x2d8>)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a36:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <HAL_GPIO_Init+0x2ec>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	035b      	lsls	r3, r3, #13
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <HAL_GPIO_Init+0x2ec>)
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a60:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <HAL_GPIO_Init+0x2ec>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	039b      	lsls	r3, r3, #14
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a84:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <HAL_GPIO_Init+0x2ec>)
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_GPIO_Init+0x2ec>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	43da      	mvns	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	029b      	lsls	r3, r3, #10
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003aae:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_GPIO_Init+0x2ec>)
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_GPIO_Init+0x2ec>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	025b      	lsls	r3, r3, #9
 8003acc:	4013      	ands	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_GPIO_Init+0x2ec>)
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	40da      	lsrs	r2, r3
 8003aec:	1e13      	subs	r3, r2, #0
 8003aee:	d000      	beq.n	8003af2 <HAL_GPIO_Init+0x2ca>
 8003af0:	e6a2      	b.n	8003838 <HAL_GPIO_Init+0x10>
  } 
}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b006      	add	sp, #24
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40010000 	.word	0x40010000
 8003b04:	48000400 	.word	0x48000400
 8003b08:	48000800 	.word	0x48000800
 8003b0c:	48000c00 	.word	0x48000c00
 8003b10:	48001000 	.word	0x48001000
 8003b14:	40010400 	.word	0x40010400

08003b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	0008      	movs	r0, r1
 8003b22:	0011      	movs	r1, r2
 8003b24:	1cbb      	adds	r3, r7, #2
 8003b26:	1c02      	adds	r2, r0, #0
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	1c7b      	adds	r3, r7, #1
 8003b2c:	1c0a      	adds	r2, r1, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b30:	1c7b      	adds	r3, r7, #1
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b38:	1cbb      	adds	r3, r7, #2
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b40:	e003      	b.n	8003b4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b42:	1cbb      	adds	r3, r7, #2
 8003b44:	881a      	ldrh	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e082      	b.n	8003c6c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2241      	movs	r2, #65	; 0x41
 8003b6a:	5c9b      	ldrb	r3, [r3, r2]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2240      	movs	r2, #64	; 0x40
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7fe ffe3 	bl	8002b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2241      	movs	r2, #65	; 0x41
 8003b86:	2124      	movs	r1, #36	; 0x24
 8003b88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	438a      	bics	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4934      	ldr	r1, [pc, #208]	; (8003c74 <HAL_I2C_Init+0x120>)
 8003ba4:	400a      	ands	r2, r1
 8003ba6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4931      	ldr	r1, [pc, #196]	; (8003c78 <HAL_I2C_Init+0x124>)
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d108      	bne.n	8003bd2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2180      	movs	r1, #128	; 0x80
 8003bca:	0209      	lsls	r1, r1, #8
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	e007      	b.n	8003be2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2184      	movs	r1, #132	; 0x84
 8003bdc:	0209      	lsls	r1, r1, #8
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d104      	bne.n	8003bf4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	491f      	ldr	r1, [pc, #124]	; (8003c7c <HAL_I2C_Init+0x128>)
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	491a      	ldr	r1, [pc, #104]	; (8003c78 <HAL_I2C_Init+0x124>)
 8003c10:	400a      	ands	r2, r1
 8003c12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69d9      	ldr	r1, [r3, #28]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2241      	movs	r2, #65	; 0x41
 8003c58:	2120      	movs	r1, #32
 8003c5a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2242      	movs	r2, #66	; 0x42
 8003c66:	2100      	movs	r1, #0
 8003c68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	f0ffffff 	.word	0xf0ffffff
 8003c78:	ffff7fff 	.word	0xffff7fff
 8003c7c:	02008000 	.word	0x02008000

08003c80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b089      	sub	sp, #36	; 0x24
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	000c      	movs	r4, r1
 8003c8a:	0010      	movs	r0, r2
 8003c8c:	0019      	movs	r1, r3
 8003c8e:	230a      	movs	r3, #10
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	1c22      	adds	r2, r4, #0
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	2308      	movs	r3, #8
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	1c02      	adds	r2, r0, #0
 8003c9c:	801a      	strh	r2, [r3, #0]
 8003c9e:	1dbb      	adds	r3, r7, #6
 8003ca0:	1c0a      	adds	r2, r1, #0
 8003ca2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2241      	movs	r2, #65	; 0x41
 8003ca8:	5c9b      	ldrb	r3, [r3, r2]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d000      	beq.n	8003cb2 <HAL_I2C_Mem_Write+0x32>
 8003cb0:	e10c      	b.n	8003ecc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_I2C_Mem_Write+0x42>
 8003cb8:	232c      	movs	r3, #44	; 0x2c
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0ff      	b.n	8003ece <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2240      	movs	r2, #64	; 0x40
 8003cd2:	5c9b      	ldrb	r3, [r3, r2]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_I2C_Mem_Write+0x5c>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e0f8      	b.n	8003ece <HAL_I2C_Mem_Write+0x24e>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2240      	movs	r2, #64	; 0x40
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ce4:	f7ff fb0a 	bl	80032fc <HAL_GetTick>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	0219      	lsls	r1, r3, #8
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2319      	movs	r3, #25
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f001 f9a5 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 8003cfe:	1e03      	subs	r3, r0, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0e3      	b.n	8003ece <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2241      	movs	r2, #65	; 0x41
 8003d0a:	2121      	movs	r1, #33	; 0x21
 8003d0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2242      	movs	r2, #66	; 0x42
 8003d12:	2140      	movs	r1, #64	; 0x40
 8003d14:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	222c      	movs	r2, #44	; 0x2c
 8003d26:	18ba      	adds	r2, r7, r2
 8003d28:	8812      	ldrh	r2, [r2, #0]
 8003d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d32:	1dbb      	adds	r3, r7, #6
 8003d34:	881c      	ldrh	r4, [r3, #0]
 8003d36:	2308      	movs	r3, #8
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	881a      	ldrh	r2, [r3, #0]
 8003d3c:	230a      	movs	r3, #10
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	8819      	ldrh	r1, [r3, #0]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	0023      	movs	r3, r4
 8003d4e:	f000 fcc9 	bl	80046e4 <I2C_RequestMemoryWrite>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2240      	movs	r2, #64	; 0x40
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0b5      	b.n	8003ece <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2bff      	cmp	r3, #255	; 0xff
 8003d6a:	d911      	bls.n	8003d90 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	22ff      	movs	r2, #255	; 0xff
 8003d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	045c      	lsls	r4, r3, #17
 8003d7c:	230a      	movs	r3, #10
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	8819      	ldrh	r1, [r3, #0]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	2300      	movs	r3, #0
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	0023      	movs	r3, r4
 8003d8a:	f001 fb35 	bl	80053f8 <I2C_TransferConfig>
 8003d8e:	e012      	b.n	8003db6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	049c      	lsls	r4, r3, #18
 8003da4:	230a      	movs	r3, #10
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	8819      	ldrh	r1, [r3, #0]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	2300      	movs	r3, #0
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	0023      	movs	r3, r4
 8003db2:	f001 fb21 	bl	80053f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f001 f991 	bl	80050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc2:	1e03      	subs	r3, r0, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e081      	b.n	8003ece <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03a      	beq.n	8003e7a <HAL_I2C_Mem_Write+0x1fa>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d136      	bne.n	8003e7a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	0013      	movs	r3, r2
 8003e16:	2200      	movs	r2, #0
 8003e18:	2180      	movs	r1, #128	; 0x80
 8003e1a:	f001 f915 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e053      	b.n	8003ece <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2bff      	cmp	r3, #255	; 0xff
 8003e2e:	d911      	bls.n	8003e54 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	22ff      	movs	r2, #255	; 0xff
 8003e34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	045c      	lsls	r4, r3, #17
 8003e40:	230a      	movs	r3, #10
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	8819      	ldrh	r1, [r3, #0]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	0023      	movs	r3, r4
 8003e4e:	f001 fad3 	bl	80053f8 <I2C_TransferConfig>
 8003e52:	e012      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	049c      	lsls	r4, r3, #18
 8003e68:	230a      	movs	r3, #10
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	8819      	ldrh	r1, [r3, #0]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	2300      	movs	r3, #0
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	0023      	movs	r3, r4
 8003e76:	f001 fabf 	bl	80053f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d198      	bne.n	8003db6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f001 f970 	bl	8005170 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e01a      	b.n	8003ece <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	490b      	ldr	r1, [pc, #44]	; (8003ed8 <HAL_I2C_Mem_Write+0x258>)
 8003eac:	400a      	ands	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2241      	movs	r2, #65	; 0x41
 8003eb4:	2120      	movs	r1, #32
 8003eb6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2242      	movs	r2, #66	; 0x42
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2240      	movs	r2, #64	; 0x40
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e000      	b.n	8003ece <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
  }
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b007      	add	sp, #28
 8003ed4:	bd90      	pop	{r4, r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	fe00e800 	.word	0xfe00e800

08003edc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	000c      	movs	r4, r1
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	230a      	movs	r3, #10
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	1c22      	adds	r2, r4, #0
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	1c02      	adds	r2, r0, #0
 8003ef8:	801a      	strh	r2, [r3, #0]
 8003efa:	1dbb      	adds	r3, r7, #6
 8003efc:	1c0a      	adds	r2, r1, #0
 8003efe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2241      	movs	r2, #65	; 0x41
 8003f04:	5c9b      	ldrb	r3, [r3, r2]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d000      	beq.n	8003f0e <HAL_I2C_Mem_Read+0x32>
 8003f0c:	e110      	b.n	8004130 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d004      	beq.n	8003f1e <HAL_I2C_Mem_Read+0x42>
 8003f14:	232c      	movs	r3, #44	; 0x2c
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	0092      	lsls	r2, r2, #2
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e103      	b.n	8004132 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2240      	movs	r2, #64	; 0x40
 8003f2e:	5c9b      	ldrb	r3, [r3, r2]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2C_Mem_Read+0x5c>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e0fc      	b.n	8004132 <HAL_I2C_Mem_Read+0x256>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f40:	f7ff f9dc 	bl	80032fc <HAL_GetTick>
 8003f44:	0003      	movs	r3, r0
 8003f46:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	0219      	lsls	r1, r3, #8
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	2319      	movs	r3, #25
 8003f54:	2201      	movs	r2, #1
 8003f56:	f001 f877 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0e7      	b.n	8004132 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2241      	movs	r2, #65	; 0x41
 8003f66:	2122      	movs	r1, #34	; 0x22
 8003f68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2242      	movs	r2, #66	; 0x42
 8003f6e:	2140      	movs	r1, #64	; 0x40
 8003f70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	222c      	movs	r2, #44	; 0x2c
 8003f82:	18ba      	adds	r2, r7, r2
 8003f84:	8812      	ldrh	r2, [r2, #0]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f8e:	1dbb      	adds	r3, r7, #6
 8003f90:	881c      	ldrh	r4, [r3, #0]
 8003f92:	2308      	movs	r3, #8
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	230a      	movs	r3, #10
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	8819      	ldrh	r1, [r3, #0]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	0023      	movs	r3, r4
 8003faa:	f000 fbff 	bl	80047ac <I2C_RequestMemoryRead>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2240      	movs	r2, #64	; 0x40
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0b9      	b.n	8004132 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2bff      	cmp	r3, #255	; 0xff
 8003fc6:	d911      	bls.n	8003fec <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	22ff      	movs	r2, #255	; 0xff
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	045c      	lsls	r4, r3, #17
 8003fd8:	230a      	movs	r3, #10
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	8819      	ldrh	r1, [r3, #0]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	4b56      	ldr	r3, [pc, #344]	; (800413c <HAL_I2C_Mem_Read+0x260>)
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	0023      	movs	r3, r4
 8003fe6:	f001 fa07 	bl	80053f8 <I2C_TransferConfig>
 8003fea:	e012      	b.n	8004012 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	049c      	lsls	r4, r3, #18
 8004000:	230a      	movs	r3, #10
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	8819      	ldrh	r1, [r3, #0]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	4b4c      	ldr	r3, [pc, #304]	; (800413c <HAL_I2C_Mem_Read+0x260>)
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	0023      	movs	r3, r4
 800400e:	f001 f9f3 	bl	80053f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	0013      	movs	r3, r2
 800401c:	2200      	movs	r2, #0
 800401e:	2104      	movs	r1, #4
 8004020:	f001 f812 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 8004024:	1e03      	subs	r3, r0, #0
 8004026:	d001      	beq.n	800402c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e082      	b.n	8004132 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d03a      	beq.n	80040de <HAL_I2C_Mem_Read+0x202>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d136      	bne.n	80040de <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	0013      	movs	r3, r2
 800407a:	2200      	movs	r2, #0
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	f000 ffe3 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 8004082:	1e03      	subs	r3, r0, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e053      	b.n	8004132 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	2bff      	cmp	r3, #255	; 0xff
 8004092:	d911      	bls.n	80040b8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	22ff      	movs	r2, #255	; 0xff
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	045c      	lsls	r4, r3, #17
 80040a4:	230a      	movs	r3, #10
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	8819      	ldrh	r1, [r3, #0]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	2300      	movs	r3, #0
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	0023      	movs	r3, r4
 80040b2:	f001 f9a1 	bl	80053f8 <I2C_TransferConfig>
 80040b6:	e012      	b.n	80040de <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	049c      	lsls	r4, r3, #18
 80040cc:	230a      	movs	r3, #10
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	8819      	ldrh	r1, [r3, #0]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	2300      	movs	r3, #0
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	0023      	movs	r3, r4
 80040da:	f001 f98d 	bl	80053f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d194      	bne.n	8004012 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	0018      	movs	r0, r3
 80040f0:	f001 f83e 	bl	8005170 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e01a      	b.n	8004132 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2220      	movs	r2, #32
 8004102:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	490c      	ldr	r1, [pc, #48]	; (8004140 <HAL_I2C_Mem_Read+0x264>)
 8004110:	400a      	ands	r2, r1
 8004112:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2241      	movs	r2, #65	; 0x41
 8004118:	2120      	movs	r1, #32
 800411a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2242      	movs	r2, #66	; 0x42
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2240      	movs	r2, #64	; 0x40
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	e000      	b.n	8004132 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004130:	2302      	movs	r3, #2
  }
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b007      	add	sp, #28
 8004138:	bd90      	pop	{r4, r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	80002400 	.word	0x80002400
 8004140:	fe00e800 	.word	0xfe00e800

08004144 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	230a      	movs	r3, #10
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	1c0a      	adds	r2, r1, #0
 8004156:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2241      	movs	r2, #65	; 0x41
 8004160:	5c9b      	ldrb	r3, [r3, r2]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b20      	cmp	r3, #32
 8004166:	d000      	beq.n	800416a <HAL_I2C_IsDeviceReady+0x26>
 8004168:	e0fd      	b.n	8004366 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	401a      	ands	r2, r3
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	429a      	cmp	r2, r3
 800417c:	d101      	bne.n	8004182 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
 8004180:	e0f2      	b.n	8004368 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2240      	movs	r2, #64	; 0x40
 8004186:	5c9b      	ldrb	r3, [r3, r2]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_I2C_IsDeviceReady+0x4c>
 800418c:	2302      	movs	r3, #2
 800418e:	e0eb      	b.n	8004368 <HAL_I2C_IsDeviceReady+0x224>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2240      	movs	r2, #64	; 0x40
 8004194:	2101      	movs	r1, #1
 8004196:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2241      	movs	r2, #65	; 0x41
 800419c:	2124      	movs	r1, #36	; 0x24
 800419e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d107      	bne.n	80041be <HAL_I2C_IsDeviceReady+0x7a>
 80041ae:	230a      	movs	r3, #10
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	059b      	lsls	r3, r3, #22
 80041b6:	0d9b      	lsrs	r3, r3, #22
 80041b8:	4a6d      	ldr	r2, [pc, #436]	; (8004370 <HAL_I2C_IsDeviceReady+0x22c>)
 80041ba:	431a      	orrs	r2, r3
 80041bc:	e006      	b.n	80041cc <HAL_I2C_IsDeviceReady+0x88>
 80041be:	230a      	movs	r3, #10
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	059b      	lsls	r3, r3, #22
 80041c6:	0d9b      	lsrs	r3, r3, #22
 80041c8:	4a6a      	ldr	r2, [pc, #424]	; (8004374 <HAL_I2C_IsDeviceReady+0x230>)
 80041ca:	431a      	orrs	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80041d2:	f7ff f893 	bl	80032fc <HAL_GetTick>
 80041d6:	0003      	movs	r3, r0
 80041d8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2220      	movs	r2, #32
 80041e2:	4013      	ands	r3, r2
 80041e4:	3b20      	subs	r3, #32
 80041e6:	425a      	negs	r2, r3
 80041e8:	4153      	adcs	r3, r2
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	231f      	movs	r3, #31
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2210      	movs	r2, #16
 80041fa:	4013      	ands	r3, r2
 80041fc:	3b10      	subs	r3, #16
 80041fe:	425a      	negs	r2, r3
 8004200:	4153      	adcs	r3, r2
 8004202:	b2da      	uxtb	r2, r3
 8004204:	231e      	movs	r3, #30
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800420a:	e035      	b.n	8004278 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	d01a      	beq.n	8004248 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7ff f873 	bl	80032fc <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <HAL_I2C_IsDeviceReady+0xe4>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10f      	bne.n	8004248 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2241      	movs	r2, #65	; 0x41
 800422c:	2120      	movs	r1, #32
 800422e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	2220      	movs	r2, #32
 8004236:	431a      	orrs	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2240      	movs	r2, #64	; 0x40
 8004240:	2100      	movs	r1, #0
 8004242:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e08f      	b.n	8004368 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2220      	movs	r2, #32
 8004250:	4013      	ands	r3, r2
 8004252:	3b20      	subs	r3, #32
 8004254:	425a      	negs	r2, r3
 8004256:	4153      	adcs	r3, r2
 8004258:	b2da      	uxtb	r2, r3
 800425a:	231f      	movs	r3, #31
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2210      	movs	r2, #16
 8004268:	4013      	ands	r3, r2
 800426a:	3b10      	subs	r3, #16
 800426c:	425a      	negs	r2, r3
 800426e:	4153      	adcs	r3, r2
 8004270:	b2da      	uxtb	r2, r3
 8004272:	231e      	movs	r3, #30
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004278:	231f      	movs	r3, #31
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d104      	bne.n	800428c <HAL_I2C_IsDeviceReady+0x148>
 8004282:	231e      	movs	r3, #30
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0bf      	beq.n	800420c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2210      	movs	r2, #16
 8004294:	4013      	ands	r3, r2
 8004296:	2b10      	cmp	r3, #16
 8004298:	d01a      	beq.n	80042d0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	0013      	movs	r3, r2
 80042a4:	2200      	movs	r2, #0
 80042a6:	2120      	movs	r1, #32
 80042a8:	f000 fece 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 80042ac:	1e03      	subs	r3, r0, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e059      	b.n	8004368 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2220      	movs	r2, #32
 80042ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2241      	movs	r2, #65	; 0x41
 80042c0:	2120      	movs	r1, #32
 80042c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2240      	movs	r2, #64	; 0x40
 80042c8:	2100      	movs	r1, #0
 80042ca:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e04b      	b.n	8004368 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	0013      	movs	r3, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	2120      	movs	r1, #32
 80042de:	f000 feb3 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 80042e2:	1e03      	subs	r3, r0, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e03e      	b.n	8004368 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2210      	movs	r2, #16
 80042f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2220      	movs	r2, #32
 80042f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d119      	bne.n	8004336 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2180      	movs	r1, #128	; 0x80
 800430e:	01c9      	lsls	r1, r1, #7
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	0013      	movs	r3, r2
 800431e:	2200      	movs	r2, #0
 8004320:	2120      	movs	r1, #32
 8004322:	f000 fe91 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 8004326:	1e03      	subs	r3, r0, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e01c      	b.n	8004368 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2220      	movs	r2, #32
 8004334:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3301      	adds	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	429a      	cmp	r2, r3
 8004342:	d900      	bls.n	8004346 <HAL_I2C_IsDeviceReady+0x202>
 8004344:	e72f      	b.n	80041a6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2241      	movs	r2, #65	; 0x41
 800434a:	2120      	movs	r1, #32
 800434c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	2220      	movs	r2, #32
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2240      	movs	r2, #64	; 0x40
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b008      	add	sp, #32
 800436e:	bd80      	pop	{r7, pc}
 8004370:	02002000 	.word	0x02002000
 8004374:	02002800 	.word	0x02002800

08004378 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	68f9      	ldr	r1, [r7, #12]
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
  }
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b004      	add	sp, #16
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4013      	ands	r3, r2
 80043cc:	d00e      	beq.n	80043ec <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2280      	movs	r2, #128	; 0x80
 80043d2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80043d4:	d00a      	beq.n	80043ec <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	2201      	movs	r2, #1
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2280      	movs	r2, #128	; 0x80
 80043e8:	0052      	lsls	r2, r2, #1
 80043ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4013      	ands	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2280      	movs	r2, #128	; 0x80
 80043fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80043fc:	d00a      	beq.n	8004414 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	2208      	movs	r2, #8
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	00d2      	lsls	r2, r2, #3
 8004412:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4013      	ands	r3, r2
 800441c:	d00e      	beq.n	800443c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2280      	movs	r2, #128	; 0x80
 8004422:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004424:	d00a      	beq.n	800443c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	2202      	movs	r2, #2
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	0092      	lsls	r2, r2, #2
 800443a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	220b      	movs	r2, #11
 8004446:	4013      	ands	r3, r2
 8004448:	d005      	beq.n	8004456 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	0011      	movs	r1, r2
 8004450:	0018      	movs	r0, r3
 8004452:	f000 fc8d 	bl	8004d70 <I2C_ITError>
  }
}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	b006      	add	sp, #24
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	46bd      	mov	sp, r7
 800446a:	b002      	add	sp, #8
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b002      	add	sp, #8
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	0008      	movs	r0, r1
 8004488:	0011      	movs	r1, r2
 800448a:	1cfb      	adds	r3, r7, #3
 800448c:	1c02      	adds	r2, r0, #0
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	003b      	movs	r3, r7
 8004492:	1c0a      	adds	r2, r1, #0
 8004494:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b002      	add	sp, #8
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b002      	add	sp, #8
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b002      	add	sp, #8
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b002      	add	sp, #8
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2240      	movs	r2, #64	; 0x40
 80044fe:	5c9b      	ldrb	r3, [r3, r2]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <I2C_Slave_ISR_IT+0x24>
 8004504:	2302      	movs	r3, #2
 8004506:	e0e6      	b.n	80046d6 <I2C_Slave_ISR_IT+0x1f2>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2240      	movs	r2, #64	; 0x40
 800450c:	2101      	movs	r1, #1
 800450e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2220      	movs	r2, #32
 8004514:	4013      	ands	r3, r2
 8004516:	d009      	beq.n	800452c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800451e:	d005      	beq.n	800452c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	0011      	movs	r1, r2
 8004526:	0018      	movs	r0, r3
 8004528:	f000 faaa 	bl	8004a80 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2210      	movs	r2, #16
 8004530:	4013      	ands	r3, r2
 8004532:	d052      	beq.n	80045da <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2210      	movs	r2, #16
 8004538:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800453a:	d04e      	beq.n	80045da <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d12d      	bne.n	80045a2 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2241      	movs	r2, #65	; 0x41
 800454a:	5c9b      	ldrb	r3, [r3, r2]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b28      	cmp	r3, #40	; 0x28
 8004550:	d10b      	bne.n	800456a <I2C_Slave_ISR_IT+0x86>
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	049b      	lsls	r3, r3, #18
 8004558:	429a      	cmp	r2, r3
 800455a:	d106      	bne.n	800456a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	0011      	movs	r1, r2
 8004562:	0018      	movs	r0, r3
 8004564:	f000 fbac 	bl	8004cc0 <I2C_ITListenCplt>
 8004568:	e036      	b.n	80045d8 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2241      	movs	r2, #65	; 0x41
 800456e:	5c9b      	ldrb	r3, [r3, r2]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b29      	cmp	r3, #41	; 0x29
 8004574:	d110      	bne.n	8004598 <I2C_Slave_ISR_IT+0xb4>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	4a59      	ldr	r2, [pc, #356]	; (80046e0 <I2C_Slave_ISR_IT+0x1fc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00c      	beq.n	8004598 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2210      	movs	r2, #16
 8004584:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 fd1c 	bl	8004fc6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	0018      	movs	r0, r3
 8004592:	f000 fa11 	bl	80049b8 <I2C_ITSlaveSeqCplt>
 8004596:	e01f      	b.n	80045d8 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2210      	movs	r2, #16
 800459e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80045a0:	e091      	b.n	80046c6 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2210      	movs	r2, #16
 80045a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	2204      	movs	r2, #4
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <I2C_Slave_ISR_IT+0xe4>
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	045b      	lsls	r3, r3, #17
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d000      	beq.n	80045c8 <I2C_Slave_ISR_IT+0xe4>
 80045c6:	e07e      	b.n	80046c6 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	0011      	movs	r1, r2
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 fbcd 	bl	8004d70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80045d6:	e076      	b.n	80046c6 <I2C_Slave_ISR_IT+0x1e2>
 80045d8:	e075      	b.n	80046c6 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2204      	movs	r2, #4
 80045de:	4013      	ands	r3, r2
 80045e0:	d02f      	beq.n	8004642 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80045e8:	d02b      	beq.n	8004642 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d018      	beq.n	8004626 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d14c      	bne.n	80046ca <I2C_Slave_ISR_IT+0x1e6>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	4a2b      	ldr	r2, [pc, #172]	; (80046e0 <I2C_Slave_ISR_IT+0x1fc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d048      	beq.n	80046ca <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	0018      	movs	r0, r3
 800463c:	f000 f9bc 	bl	80049b8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004640:	e043      	b.n	80046ca <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2208      	movs	r2, #8
 8004646:	4013      	ands	r3, r2
 8004648:	d00a      	beq.n	8004660 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2208      	movs	r2, #8
 800464e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004650:	d006      	beq.n	8004660 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	0011      	movs	r1, r2
 8004658:	0018      	movs	r0, r3
 800465a:	f000 f909 	bl	8004870 <I2C_ITAddrCplt>
 800465e:	e035      	b.n	80046cc <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2202      	movs	r2, #2
 8004664:	4013      	ands	r3, r2
 8004666:	d031      	beq.n	80046cc <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800466e:	d02d      	beq.n	80046cc <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	781a      	ldrb	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
 80046aa:	e00f      	b.n	80046cc <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	045b      	lsls	r3, r3, #17
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d002      	beq.n	80046bc <I2C_Slave_ISR_IT+0x1d8>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d107      	bne.n	80046cc <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 f97a 	bl	80049b8 <I2C_ITSlaveSeqCplt>
 80046c4:	e002      	b.n	80046cc <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	e000      	b.n	80046cc <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80046ca:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2240      	movs	r2, #64	; 0x40
 80046d0:	2100      	movs	r1, #0
 80046d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b006      	add	sp, #24
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	ffff0000 	.word	0xffff0000

080046e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80046e4:	b5b0      	push	{r4, r5, r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	000c      	movs	r4, r1
 80046ee:	0010      	movs	r0, r2
 80046f0:	0019      	movs	r1, r3
 80046f2:	250a      	movs	r5, #10
 80046f4:	197b      	adds	r3, r7, r5
 80046f6:	1c22      	adds	r2, r4, #0
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	2308      	movs	r3, #8
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	1c02      	adds	r2, r0, #0
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	1dbb      	adds	r3, r7, #6
 8004704:	1c0a      	adds	r2, r1, #0
 8004706:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004708:	1dbb      	adds	r3, r7, #6
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	045c      	lsls	r4, r3, #17
 8004712:	197b      	adds	r3, r7, r5
 8004714:	8819      	ldrh	r1, [r3, #0]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <I2C_RequestMemoryWrite+0xc4>)
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	0023      	movs	r3, r4
 800471e:	f000 fe6b 	bl	80053f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004724:	6a39      	ldr	r1, [r7, #32]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 fcdb 	bl	80050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800472e:	1e03      	subs	r3, r0, #0
 8004730:	d001      	beq.n	8004736 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e033      	b.n	800479e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004736:	1dbb      	adds	r3, r7, #6
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d107      	bne.n	800474e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800473e:	2308      	movs	r3, #8
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	629a      	str	r2, [r3, #40]	; 0x28
 800474c:	e019      	b.n	8004782 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800474e:	2308      	movs	r3, #8
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	b29b      	uxth	r3, r3
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	6a39      	ldr	r1, [r7, #32]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	0018      	movs	r0, r3
 8004768:	f000 fcbc 	bl	80050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d001      	beq.n	8004774 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e014      	b.n	800479e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004774:	2308      	movs	r3, #8
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	0013      	movs	r3, r2
 800478c:	2200      	movs	r2, #0
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	f000 fc5a 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 8004794:	1e03      	subs	r3, r0, #0
 8004796:	d001      	beq.n	800479c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b004      	add	sp, #16
 80047a4:	bdb0      	pop	{r4, r5, r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	80002000 	.word	0x80002000

080047ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80047ac:	b5b0      	push	{r4, r5, r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	000c      	movs	r4, r1
 80047b6:	0010      	movs	r0, r2
 80047b8:	0019      	movs	r1, r3
 80047ba:	250a      	movs	r5, #10
 80047bc:	197b      	adds	r3, r7, r5
 80047be:	1c22      	adds	r2, r4, #0
 80047c0:	801a      	strh	r2, [r3, #0]
 80047c2:	2308      	movs	r3, #8
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	1c02      	adds	r2, r0, #0
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	1dbb      	adds	r3, r7, #6
 80047cc:	1c0a      	adds	r2, r1, #0
 80047ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047d0:	1dbb      	adds	r3, r7, #6
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	197b      	adds	r3, r7, r5
 80047d8:	8819      	ldrh	r1, [r3, #0]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	4b23      	ldr	r3, [pc, #140]	; (800486c <I2C_RequestMemoryRead+0xc0>)
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	2300      	movs	r3, #0
 80047e2:	f000 fe09 	bl	80053f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e8:	6a39      	ldr	r1, [r7, #32]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f000 fc79 	bl	80050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80047f2:	1e03      	subs	r3, r0, #0
 80047f4:	d001      	beq.n	80047fa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e033      	b.n	8004862 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047fa:	1dbb      	adds	r3, r7, #6
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d107      	bne.n	8004812 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004802:	2308      	movs	r3, #8
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28
 8004810:	e019      	b.n	8004846 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004812:	2308      	movs	r3, #8
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	b29b      	uxth	r3, r3
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	6a39      	ldr	r1, [r7, #32]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	0018      	movs	r0, r3
 800482c:	f000 fc5a 	bl	80050e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004830:	1e03      	subs	r3, r0, #0
 8004832:	d001      	beq.n	8004838 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e014      	b.n	8004862 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004838:	2308      	movs	r3, #8
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004846:	6a3a      	ldr	r2, [r7, #32]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	0013      	movs	r3, r2
 8004850:	2200      	movs	r2, #0
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	f000 fbf8 	bl	8005048 <I2C_WaitOnFlagUntilTimeout>
 8004858:	1e03      	subs	r3, r0, #0
 800485a:	d001      	beq.n	8004860 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	0018      	movs	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	b004      	add	sp, #16
 8004868:	bdb0      	pop	{r4, r5, r7, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	80002000 	.word	0x80002000

08004870 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004870:	b5b0      	push	{r4, r5, r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2241      	movs	r2, #65	; 0x41
 800487e:	5c9b      	ldrb	r3, [r3, r2]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	001a      	movs	r2, r3
 8004884:	2328      	movs	r3, #40	; 0x28
 8004886:	4013      	ands	r3, r2
 8004888:	2b28      	cmp	r3, #40	; 0x28
 800488a:	d000      	beq.n	800488e <I2C_ITAddrCplt+0x1e>
 800488c:	e088      	b.n	80049a0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	b2da      	uxtb	r2, r3
 8004898:	250f      	movs	r5, #15
 800489a:	197b      	adds	r3, r7, r5
 800489c:	2101      	movs	r1, #1
 800489e:	400a      	ands	r2, r1
 80048a0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	200c      	movs	r0, #12
 80048ae:	183b      	adds	r3, r7, r0
 80048b0:	21fe      	movs	r1, #254	; 0xfe
 80048b2:	400a      	ands	r2, r1
 80048b4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	b29a      	uxth	r2, r3
 80048be:	240a      	movs	r4, #10
 80048c0:	193b      	adds	r3, r7, r4
 80048c2:	0592      	lsls	r2, r2, #22
 80048c4:	0d92      	lsrs	r2, r2, #22
 80048c6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	2308      	movs	r3, #8
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	21fe      	movs	r1, #254	; 0xfe
 80048d6:	400a      	ands	r2, r1
 80048d8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d148      	bne.n	8004974 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80048e2:	0021      	movs	r1, r4
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	09db      	lsrs	r3, r3, #7
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	183b      	adds	r3, r7, r0
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	4053      	eors	r3, r2
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	001a      	movs	r2, r3
 80048f6:	2306      	movs	r3, #6
 80048f8:	4013      	ands	r3, r2
 80048fa:	d120      	bne.n	800493e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80048fc:	183b      	adds	r3, r7, r0
 80048fe:	187a      	adds	r2, r7, r1
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004912:	2b02      	cmp	r3, #2
 8004914:	d14c      	bne.n	80049b0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2208      	movs	r2, #8
 8004922:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	2100      	movs	r1, #0
 800492a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800492c:	183b      	adds	r3, r7, r0
 800492e:	881a      	ldrh	r2, [r3, #0]
 8004930:	197b      	adds	r3, r7, r5
 8004932:	7819      	ldrb	r1, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	0018      	movs	r0, r3
 8004938:	f7ff fda1 	bl	800447e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800493c:	e038      	b.n	80049b0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800493e:	240c      	movs	r4, #12
 8004940:	193b      	adds	r3, r7, r4
 8004942:	2208      	movs	r2, #8
 8004944:	18ba      	adds	r2, r7, r2
 8004946:	8812      	ldrh	r2, [r2, #0]
 8004948:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	021a      	lsls	r2, r3, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0011      	movs	r1, r2
 8004952:	0018      	movs	r0, r3
 8004954:	f000 fd8a 	bl	800546c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2240      	movs	r2, #64	; 0x40
 800495c:	2100      	movs	r1, #0
 800495e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004960:	193b      	adds	r3, r7, r4
 8004962:	881a      	ldrh	r2, [r3, #0]
 8004964:	230f      	movs	r3, #15
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	7819      	ldrb	r1, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f7ff fd86 	bl	800447e <HAL_I2C_AddrCallback>
}
 8004972:	e01d      	b.n	80049b0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	021a      	lsls	r2, r3, #8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	0011      	movs	r1, r2
 800497c:	0018      	movs	r0, r3
 800497e:	f000 fd75 	bl	800546c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2240      	movs	r2, #64	; 0x40
 8004986:	2100      	movs	r1, #0
 8004988:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800498a:	230c      	movs	r3, #12
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	881a      	ldrh	r2, [r3, #0]
 8004990:	230f      	movs	r3, #15
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	7819      	ldrb	r1, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0018      	movs	r0, r3
 800499a:	f7ff fd70 	bl	800447e <HAL_I2C_AddrCallback>
}
 800499e:	e007      	b.n	80049b0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2208      	movs	r2, #8
 80049a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	2100      	movs	r1, #0
 80049ae:	5499      	strb	r1, [r3, r2]
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b004      	add	sp, #16
 80049b6:	bdb0      	pop	{r4, r5, r7, pc}

080049b8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2242      	movs	r2, #66	; 0x42
 80049cc:	2100      	movs	r1, #0
 80049ce:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	01db      	lsls	r3, r3, #7
 80049d6:	4013      	ands	r3, r2
 80049d8:	d008      	beq.n	80049ec <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4924      	ldr	r1, [pc, #144]	; (8004a78 <I2C_ITSlaveSeqCplt+0xc0>)
 80049e6:	400a      	ands	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e00c      	b.n	8004a06 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	4013      	ands	r3, r2
 80049f4:	d007      	beq.n	8004a06 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	491e      	ldr	r1, [pc, #120]	; (8004a7c <I2C_ITSlaveSeqCplt+0xc4>)
 8004a02:	400a      	ands	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2241      	movs	r2, #65	; 0x41
 8004a0a:	5c9b      	ldrb	r3, [r3, r2]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b29      	cmp	r3, #41	; 0x29
 8004a10:	d114      	bne.n	8004a3c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2241      	movs	r2, #65	; 0x41
 8004a16:	2128      	movs	r1, #40	; 0x28
 8004a18:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2221      	movs	r2, #33	; 0x21
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2101      	movs	r1, #1
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 fd21 	bl	800546c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2240      	movs	r2, #64	; 0x40
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7ff fd12 	bl	800445e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a3a:	e019      	b.n	8004a70 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2241      	movs	r2, #65	; 0x41
 8004a40:	5c9b      	ldrb	r3, [r3, r2]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b2a      	cmp	r3, #42	; 0x2a
 8004a46:	d113      	bne.n	8004a70 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2241      	movs	r2, #65	; 0x41
 8004a4c:	2128      	movs	r1, #40	; 0x28
 8004a4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2222      	movs	r2, #34	; 0x22
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2102      	movs	r1, #2
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f000 fd06 	bl	800546c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2240      	movs	r2, #64	; 0x40
 8004a64:	2100      	movs	r1, #0
 8004a66:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7ff fcff 	bl	800446e <HAL_I2C_SlaveRxCpltCallback>
}
 8004a70:	46c0      	nop			; (mov r8, r8)
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b004      	add	sp, #16
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	ffffbfff 	.word	0xffffbfff
 8004a7c:	ffff7fff 	.word	0xffff7fff

08004a80 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a96:	200f      	movs	r0, #15
 8004a98:	183b      	adds	r3, r7, r0
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	2141      	movs	r1, #65	; 0x41
 8004a9e:	5c52      	ldrb	r2, [r2, r1]
 8004aa0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004aaa:	183b      	adds	r3, r7, r0
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b21      	cmp	r3, #33	; 0x21
 8004ab0:	d003      	beq.n	8004aba <I2C_ITSlaveCplt+0x3a>
 8004ab2:	183b      	adds	r3, r7, r0
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b29      	cmp	r3, #41	; 0x29
 8004ab8:	d109      	bne.n	8004ace <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004aba:	4a7b      	ldr	r2, [pc, #492]	; (8004ca8 <I2C_ITSlaveCplt+0x228>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	0011      	movs	r1, r2
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 fcd3 	bl	800546c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2221      	movs	r2, #33	; 0x21
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
 8004acc:	e011      	b.n	8004af2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ace:	220f      	movs	r2, #15
 8004ad0:	18bb      	adds	r3, r7, r2
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b22      	cmp	r3, #34	; 0x22
 8004ad6:	d003      	beq.n	8004ae0 <I2C_ITSlaveCplt+0x60>
 8004ad8:	18bb      	adds	r3, r7, r2
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ade:	d108      	bne.n	8004af2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ae0:	4a72      	ldr	r2, [pc, #456]	; (8004cac <I2C_ITSlaveCplt+0x22c>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	0011      	movs	r1, r2
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 fcc0 	bl	800546c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2222      	movs	r2, #34	; 0x22
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2180      	movs	r1, #128	; 0x80
 8004afe:	0209      	lsls	r1, r1, #8
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4968      	ldr	r1, [pc, #416]	; (8004cb0 <I2C_ITSlaveCplt+0x230>)
 8004b10:	400a      	ands	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	0018      	movs	r0, r3
 8004b18:	f000 fa55 	bl	8004fc6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	01db      	lsls	r3, r3, #7
 8004b22:	4013      	ands	r3, r2
 8004b24:	d013      	beq.n	8004b4e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4960      	ldr	r1, [pc, #384]	; (8004cb4 <I2C_ITSlaveCplt+0x234>)
 8004b32:	400a      	ands	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01f      	beq.n	8004b7e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b4c:	e017      	b.n	8004b7e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	4013      	ands	r3, r2
 8004b56:	d012      	beq.n	8004b7e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4955      	ldr	r1, [pc, #340]	; (8004cb8 <I2C_ITSlaveCplt+0x238>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d006      	beq.n	8004b7e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2204      	movs	r2, #4
 8004b82:	4013      	ands	r3, r2
 8004b84:	d020      	beq.n	8004bc8 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	4393      	bics	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00c      	beq.n	8004bc8 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2242      	movs	r2, #66	; 0x42
 8004be2:	2100      	movs	r1, #0
 8004be4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d013      	beq.n	8004c1c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	0011      	movs	r1, r2
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f000 f8b7 	bl	8004d70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2241      	movs	r2, #65	; 0x41
 8004c06:	5c9b      	ldrb	r3, [r3, r2]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b28      	cmp	r3, #40	; 0x28
 8004c0c:	d147      	bne.n	8004c9e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	0011      	movs	r1, r2
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 f853 	bl	8004cc0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c1a:	e040      	b.n	8004c9e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4a26      	ldr	r2, [pc, #152]	; (8004cbc <I2C_ITSlaveCplt+0x23c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d016      	beq.n	8004c54 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff fec5 	bl	80049b8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <I2C_ITSlaveCplt+0x23c>)
 8004c32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2241      	movs	r2, #65	; 0x41
 8004c38:	2120      	movs	r1, #32
 8004c3a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2240      	movs	r2, #64	; 0x40
 8004c46:	2100      	movs	r1, #0
 8004c48:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7ff fc26 	bl	800449e <HAL_I2C_ListenCpltCallback>
}
 8004c52:	e024      	b.n	8004c9e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2241      	movs	r2, #65	; 0x41
 8004c58:	5c9b      	ldrb	r3, [r3, r2]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b22      	cmp	r3, #34	; 0x22
 8004c5e:	d10f      	bne.n	8004c80 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2241      	movs	r2, #65	; 0x41
 8004c64:	2120      	movs	r1, #32
 8004c66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2240      	movs	r2, #64	; 0x40
 8004c72:	2100      	movs	r1, #0
 8004c74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7ff fbf8 	bl	800446e <HAL_I2C_SlaveRxCpltCallback>
}
 8004c7e:	e00e      	b.n	8004c9e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2241      	movs	r2, #65	; 0x41
 8004c84:	2120      	movs	r1, #32
 8004c86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2240      	movs	r2, #64	; 0x40
 8004c92:	2100      	movs	r1, #0
 8004c94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff fbe0 	bl	800445e <HAL_I2C_SlaveTxCpltCallback>
}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b006      	add	sp, #24
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	00008001 	.word	0x00008001
 8004cac:	00008002 	.word	0x00008002
 8004cb0:	fe00e800 	.word	0xfe00e800
 8004cb4:	ffffbfff 	.word	0xffffbfff
 8004cb8:	ffff7fff 	.word	0xffff7fff
 8004cbc:	ffff0000 	.word	0xffff0000

08004cc0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <I2C_ITListenCplt+0xa8>)
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2241      	movs	r2, #65	; 0x41
 8004cda:	2120      	movs	r1, #32
 8004cdc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2242      	movs	r2, #66	; 0x42
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2204      	movs	r2, #4
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d012      	beq.n	8004d3a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	2204      	movs	r2, #4
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d3a:	4a0c      	ldr	r2, [pc, #48]	; (8004d6c <I2C_ITListenCplt+0xac>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	0011      	movs	r1, r2
 8004d40:	0018      	movs	r0, r3
 8004d42:	f000 fb93 	bl	800546c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2240      	movs	r2, #64	; 0x40
 8004d52:	2100      	movs	r1, #0
 8004d54:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7ff fba0 	bl	800449e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b002      	add	sp, #8
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	ffff0000 	.word	0xffff0000
 8004d6c:	00008003 	.word	0x00008003

08004d70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d7a:	200f      	movs	r0, #15
 8004d7c:	183b      	adds	r3, r7, r0
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	2141      	movs	r1, #65	; 0x41
 8004d82:	5c52      	ldrb	r2, [r2, r1]
 8004d84:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2242      	movs	r2, #66	; 0x42
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a72      	ldr	r2, [pc, #456]	; (8004f5c <I2C_ITError+0x1ec>)
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004da6:	183b      	adds	r3, r7, r0
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b28      	cmp	r3, #40	; 0x28
 8004dac:	d007      	beq.n	8004dbe <I2C_ITError+0x4e>
 8004dae:	183b      	adds	r3, r7, r0
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b29      	cmp	r3, #41	; 0x29
 8004db4:	d003      	beq.n	8004dbe <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004db6:	183b      	adds	r3, r7, r0
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b2a      	cmp	r3, #42	; 0x2a
 8004dbc:	d10c      	bne.n	8004dd8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2103      	movs	r1, #3
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 fb52 	bl	800546c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2241      	movs	r2, #65	; 0x41
 8004dcc:	2128      	movs	r1, #40	; 0x28
 8004dce:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a63      	ldr	r2, [pc, #396]	; (8004f60 <I2C_ITError+0x1f0>)
 8004dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8004dd6:	e032      	b.n	8004e3e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004dd8:	4a62      	ldr	r2, [pc, #392]	; (8004f64 <I2C_ITError+0x1f4>)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	0011      	movs	r1, r2
 8004dde:	0018      	movs	r0, r3
 8004de0:	f000 fb44 	bl	800546c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	0018      	movs	r0, r3
 8004de8:	f000 f8ed 	bl	8004fc6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2241      	movs	r2, #65	; 0x41
 8004df0:	5c9b      	ldrb	r3, [r3, r2]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b60      	cmp	r3, #96	; 0x60
 8004df6:	d01f      	beq.n	8004e38 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2241      	movs	r2, #65	; 0x41
 8004dfc:	2120      	movs	r1, #32
 8004dfe:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2220      	movs	r2, #32
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d114      	bne.n	8004e38 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	2210      	movs	r2, #16
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d109      	bne.n	8004e30 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2210      	movs	r2, #16
 8004e22:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	2204      	movs	r2, #4
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2220      	movs	r2, #32
 8004e36:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d03b      	beq.n	8004ec4 <I2C_ITError+0x154>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b11      	cmp	r3, #17
 8004e50:	d002      	beq.n	8004e58 <I2C_ITError+0xe8>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b21      	cmp	r3, #33	; 0x21
 8004e56:	d135      	bne.n	8004ec4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	01db      	lsls	r3, r3, #7
 8004e62:	401a      	ands	r2, r3
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	01db      	lsls	r3, r3, #7
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d107      	bne.n	8004e7c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	493c      	ldr	r1, [pc, #240]	; (8004f68 <I2C_ITError+0x1f8>)
 8004e78:	400a      	ands	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	0018      	movs	r0, r3
 8004e82:	f7fe fc8a 	bl	800379a <HAL_DMA_GetState>
 8004e86:	0003      	movs	r3, r0
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d016      	beq.n	8004eba <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	4a36      	ldr	r2, [pc, #216]	; (8004f6c <I2C_ITError+0x1fc>)
 8004e92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2240      	movs	r2, #64	; 0x40
 8004e98:	2100      	movs	r1, #0
 8004e9a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fe fb93 	bl	80035cc <HAL_DMA_Abort_IT>
 8004ea6:	1e03      	subs	r3, r0, #0
 8004ea8:	d051      	beq.n	8004f4e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eb8:	e049      	b.n	8004f4e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f000 f859 	bl	8004f74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ec2:	e044      	b.n	8004f4e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d03b      	beq.n	8004f44 <I2C_ITError+0x1d4>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b12      	cmp	r3, #18
 8004ed0:	d002      	beq.n	8004ed8 <I2C_ITError+0x168>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b22      	cmp	r3, #34	; 0x22
 8004ed6:	d135      	bne.n	8004f44 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d107      	bne.n	8004efc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	491e      	ldr	r1, [pc, #120]	; (8004f70 <I2C_ITError+0x200>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7fe fc4a 	bl	800379a <HAL_DMA_GetState>
 8004f06:	0003      	movs	r3, r0
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d016      	beq.n	8004f3a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <I2C_ITError+0x1fc>)
 8004f12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	2100      	movs	r1, #0
 8004f1a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7fe fb53 	bl	80035cc <HAL_DMA_Abort_IT>
 8004f26:	1e03      	subs	r3, r0, #0
 8004f28:	d013      	beq.n	8004f52 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	0018      	movs	r0, r3
 8004f36:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f38:	e00b      	b.n	8004f52 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f000 f819 	bl	8004f74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f42:	e006      	b.n	8004f52 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f000 f814 	bl	8004f74 <I2C_TreatErrorCallback>
  }
}
 8004f4c:	e002      	b.n	8004f54 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	e000      	b.n	8004f54 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f52:	46c0      	nop			; (mov r8, r8)
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b004      	add	sp, #16
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	ffff0000 	.word	0xffff0000
 8004f60:	080044e5 	.word	0x080044e5
 8004f64:	00008003 	.word	0x00008003
 8004f68:	ffffbfff 	.word	0xffffbfff
 8004f6c:	0800500b 	.word	0x0800500b
 8004f70:	ffff7fff 	.word	0xffff7fff

08004f74 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2241      	movs	r2, #65	; 0x41
 8004f80:	5c9b      	ldrb	r3, [r3, r2]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b60      	cmp	r3, #96	; 0x60
 8004f86:	d10f      	bne.n	8004fa8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2241      	movs	r2, #65	; 0x41
 8004f8c:	2120      	movs	r1, #32
 8004f8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2240      	movs	r2, #64	; 0x40
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7ff fa8c 	bl	80044be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fa6:	e00a      	b.n	8004fbe <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2240      	movs	r2, #64	; 0x40
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7ff fa78 	bl	80044ae <HAL_I2C_ErrorCallback>
}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b002      	add	sp, #8
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d103      	bne.n	8004fe4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2201      	movs	r2, #1
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d007      	beq.n	8005002 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	430a      	orrs	r2, r1
 8005000:	619a      	str	r2, [r3, #24]
  }
}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}

0800500a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	2200      	movs	r2, #0
 8005026:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005034:	2200      	movs	r2, #0
 8005036:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	0018      	movs	r0, r3
 800503c:	f7ff ff9a 	bl	8004f74 <I2C_TreatErrorCallback>
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b004      	add	sp, #16
 8005046:	bd80      	pop	{r7, pc}

08005048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	1dfb      	adds	r3, r7, #7
 8005056:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005058:	e030      	b.n	80050bc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	d02d      	beq.n	80050bc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005060:	f7fe f94c 	bl	80032fc <HAL_GetTick>
 8005064:	0002      	movs	r2, r0
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d302      	bcc.n	8005076 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d122      	bne.n	80050bc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	425a      	negs	r2, r3
 8005086:	4153      	adcs	r3, r2
 8005088:	b2db      	uxtb	r3, r3
 800508a:	001a      	movs	r2, r3
 800508c:	1dfb      	adds	r3, r7, #7
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d113      	bne.n	80050bc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	2220      	movs	r2, #32
 800509a:	431a      	orrs	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2241      	movs	r2, #65	; 0x41
 80050a4:	2120      	movs	r1, #32
 80050a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2242      	movs	r2, #66	; 0x42
 80050ac:	2100      	movs	r1, #0
 80050ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2240      	movs	r2, #64	; 0x40
 80050b4:	2100      	movs	r1, #0
 80050b6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e00f      	b.n	80050dc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4013      	ands	r3, r2
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	425a      	negs	r2, r3
 80050cc:	4153      	adcs	r3, r2
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	001a      	movs	r2, r3
 80050d2:	1dfb      	adds	r3, r7, #7
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d0bf      	beq.n	800505a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	0018      	movs	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	b004      	add	sp, #16
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050f0:	e032      	b.n	8005158 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	0018      	movs	r0, r3
 80050fa:	f000 f87d 	bl	80051f8 <I2C_IsErrorOccurred>
 80050fe:	1e03      	subs	r3, r0, #0
 8005100:	d001      	beq.n	8005106 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e030      	b.n	8005168 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	3301      	adds	r3, #1
 800510a:	d025      	beq.n	8005158 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510c:	f7fe f8f6 	bl	80032fc <HAL_GetTick>
 8005110:	0002      	movs	r2, r0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	429a      	cmp	r2, r3
 800511a:	d302      	bcc.n	8005122 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11a      	bne.n	8005158 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2202      	movs	r2, #2
 800512a:	4013      	ands	r3, r2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d013      	beq.n	8005158 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	2220      	movs	r2, #32
 8005136:	431a      	orrs	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2241      	movs	r2, #65	; 0x41
 8005140:	2120      	movs	r1, #32
 8005142:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2242      	movs	r2, #66	; 0x42
 8005148:	2100      	movs	r1, #0
 800514a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2240      	movs	r2, #64	; 0x40
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e007      	b.n	8005168 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2202      	movs	r2, #2
 8005160:	4013      	ands	r3, r2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d1c5      	bne.n	80050f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	0018      	movs	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	b004      	add	sp, #16
 800516e:	bd80      	pop	{r7, pc}

08005170 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800517c:	e02f      	b.n	80051de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	0018      	movs	r0, r3
 8005186:	f000 f837 	bl	80051f8 <I2C_IsErrorOccurred>
 800518a:	1e03      	subs	r3, r0, #0
 800518c:	d001      	beq.n	8005192 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e02d      	b.n	80051ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005192:	f7fe f8b3 	bl	80032fc <HAL_GetTick>
 8005196:	0002      	movs	r2, r0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d302      	bcc.n	80051a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11a      	bne.n	80051de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2220      	movs	r2, #32
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d013      	beq.n	80051de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	2220      	movs	r2, #32
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2241      	movs	r2, #65	; 0x41
 80051c6:	2120      	movs	r1, #32
 80051c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2242      	movs	r2, #66	; 0x42
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2240      	movs	r2, #64	; 0x40
 80051d6:	2100      	movs	r1, #0
 80051d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e007      	b.n	80051ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2220      	movs	r2, #32
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d1c8      	bne.n	800517e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	0018      	movs	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b08b      	sub	sp, #44	; 0x2c
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005204:	2327      	movs	r3, #39	; 0x27
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2210      	movs	r2, #16
 8005220:	4013      	ands	r3, r2
 8005222:	d100      	bne.n	8005226 <I2C_IsErrorOccurred+0x2e>
 8005224:	e082      	b.n	800532c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2210      	movs	r2, #16
 800522c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800522e:	e060      	b.n	80052f2 <I2C_IsErrorOccurred+0xfa>
 8005230:	2427      	movs	r4, #39	; 0x27
 8005232:	193b      	adds	r3, r7, r4
 8005234:	193a      	adds	r2, r7, r4
 8005236:	7812      	ldrb	r2, [r2, #0]
 8005238:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	3301      	adds	r3, #1
 800523e:	d058      	beq.n	80052f2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005240:	f7fe f85c 	bl	80032fc <HAL_GetTick>
 8005244:	0002      	movs	r2, r0
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	429a      	cmp	r2, r3
 800524e:	d306      	bcc.n	800525e <I2C_IsErrorOccurred+0x66>
 8005250:	193b      	adds	r3, r7, r4
 8005252:	193a      	adds	r2, r7, r4
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d149      	bne.n	80052f2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	01db      	lsls	r3, r3, #7
 8005268:	4013      	ands	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800526c:	2013      	movs	r0, #19
 800526e:	183b      	adds	r3, r7, r0
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	2142      	movs	r1, #66	; 0x42
 8005274:	5c52      	ldrb	r2, [r2, r1]
 8005276:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	401a      	ands	r2, r3
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	429a      	cmp	r2, r3
 800528a:	d126      	bne.n	80052da <I2C_IsErrorOccurred+0xe2>
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	01db      	lsls	r3, r3, #7
 8005292:	429a      	cmp	r2, r3
 8005294:	d021      	beq.n	80052da <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8005296:	183b      	adds	r3, r7, r0
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b20      	cmp	r3, #32
 800529c:	d01d      	beq.n	80052da <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	01c9      	lsls	r1, r1, #7
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80052b0:	f7fe f824 	bl	80032fc <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052b8:	e00f      	b.n	80052da <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052ba:	f7fe f81f 	bl	80032fc <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b19      	cmp	r3, #25
 80052c6:	d908      	bls.n	80052da <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2220      	movs	r2, #32
 80052cc:	4313      	orrs	r3, r2
 80052ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80052d0:	2327      	movs	r3, #39	; 0x27
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]

              break;
 80052d8:	e00b      	b.n	80052f2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2220      	movs	r2, #32
 80052e2:	4013      	ands	r3, r2
 80052e4:	2127      	movs	r1, #39	; 0x27
 80052e6:	187a      	adds	r2, r7, r1
 80052e8:	1879      	adds	r1, r7, r1
 80052ea:	7809      	ldrb	r1, [r1, #0]
 80052ec:	7011      	strb	r1, [r2, #0]
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d1e3      	bne.n	80052ba <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2220      	movs	r2, #32
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d004      	beq.n	800530a <I2C_IsErrorOccurred+0x112>
 8005300:	2327      	movs	r3, #39	; 0x27
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d092      	beq.n	8005230 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800530a:	2327      	movs	r3, #39	; 0x27
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d103      	bne.n	800531c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2220      	movs	r2, #32
 800531a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2204      	movs	r2, #4
 8005320:	4313      	orrs	r3, r2
 8005322:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005324:	2327      	movs	r3, #39	; 0x27
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	2380      	movs	r3, #128	; 0x80
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4013      	ands	r3, r2
 800533c:	d00c      	beq.n	8005358 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	2201      	movs	r2, #1
 8005342:	4313      	orrs	r3, r2
 8005344:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2280      	movs	r2, #128	; 0x80
 800534c:	0052      	lsls	r2, r2, #1
 800534e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005350:	2327      	movs	r3, #39	; 0x27
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4013      	ands	r3, r2
 8005360:	d00c      	beq.n	800537c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	2208      	movs	r2, #8
 8005366:	4313      	orrs	r3, r2
 8005368:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	00d2      	lsls	r2, r2, #3
 8005372:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005374:	2327      	movs	r3, #39	; 0x27
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	2201      	movs	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4013      	ands	r3, r2
 8005384:	d00c      	beq.n	80053a0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	2202      	movs	r2, #2
 800538a:	4313      	orrs	r3, r2
 800538c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	0092      	lsls	r2, r2, #2
 8005396:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005398:	2327      	movs	r3, #39	; 0x27
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2201      	movs	r2, #1
 800539e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80053a0:	2327      	movs	r3, #39	; 0x27
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01d      	beq.n	80053e6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7ff fe0a 	bl	8004fc6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	490d      	ldr	r1, [pc, #52]	; (80053f4 <I2C_IsErrorOccurred+0x1fc>)
 80053be:	400a      	ands	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2241      	movs	r2, #65	; 0x41
 80053d2:	2120      	movs	r1, #32
 80053d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2242      	movs	r2, #66	; 0x42
 80053da:	2100      	movs	r1, #0
 80053dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2240      	movs	r2, #64	; 0x40
 80053e2:	2100      	movs	r1, #0
 80053e4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80053e6:	2327      	movs	r3, #39	; 0x27
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	781b      	ldrb	r3, [r3, #0]
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b00b      	add	sp, #44	; 0x2c
 80053f2:	bd90      	pop	{r4, r7, pc}
 80053f4:	fe00e800 	.word	0xfe00e800

080053f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	0008      	movs	r0, r1
 8005402:	0011      	movs	r1, r2
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	240a      	movs	r4, #10
 8005408:	193b      	adds	r3, r7, r4
 800540a:	1c02      	adds	r2, r0, #0
 800540c:	801a      	strh	r2, [r3, #0]
 800540e:	2009      	movs	r0, #9
 8005410:	183b      	adds	r3, r7, r0
 8005412:	1c0a      	adds	r2, r1, #0
 8005414:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005416:	193b      	adds	r3, r7, r4
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	059b      	lsls	r3, r3, #22
 800541c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800541e:	183b      	adds	r3, r7, r0
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	0419      	lsls	r1, r3, #16
 8005424:	23ff      	movs	r3, #255	; 0xff
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800542a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	4313      	orrs	r3, r2
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005442:	0d51      	lsrs	r1, r2, #21
 8005444:	2280      	movs	r2, #128	; 0x80
 8005446:	00d2      	lsls	r2, r2, #3
 8005448:	400a      	ands	r2, r1
 800544a:	4907      	ldr	r1, [pc, #28]	; (8005468 <I2C_TransferConfig+0x70>)
 800544c:	430a      	orrs	r2, r1
 800544e:	43d2      	mvns	r2, r2
 8005450:	401a      	ands	r2, r3
 8005452:	0011      	movs	r1, r2
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	46bd      	mov	sp, r7
 8005462:	b007      	add	sp, #28
 8005464:	bd90      	pop	{r4, r7, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	03ff63ff 	.word	0x03ff63ff

0800546c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	000a      	movs	r2, r1
 8005476:	1cbb      	adds	r3, r7, #2
 8005478:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800547e:	1cbb      	adds	r3, r7, #2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	2201      	movs	r2, #1
 8005484:	4013      	ands	r3, r2
 8005486:	d010      	beq.n	80054aa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2242      	movs	r2, #66	; 0x42
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2241      	movs	r2, #65	; 0x41
 8005494:	5c9b      	ldrb	r3, [r3, r2]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	001a      	movs	r2, r3
 800549a:	2328      	movs	r3, #40	; 0x28
 800549c:	4013      	ands	r3, r2
 800549e:	2b28      	cmp	r3, #40	; 0x28
 80054a0:	d003      	beq.n	80054aa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	22b0      	movs	r2, #176	; 0xb0
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80054aa:	1cbb      	adds	r3, r7, #2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	2202      	movs	r2, #2
 80054b0:	4013      	ands	r3, r2
 80054b2:	d010      	beq.n	80054d6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2244      	movs	r2, #68	; 0x44
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2241      	movs	r2, #65	; 0x41
 80054c0:	5c9b      	ldrb	r3, [r3, r2]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	001a      	movs	r2, r3
 80054c6:	2328      	movs	r3, #40	; 0x28
 80054c8:	4013      	ands	r3, r2
 80054ca:	2b28      	cmp	r3, #40	; 0x28
 80054cc:	d003      	beq.n	80054d6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	22b0      	movs	r2, #176	; 0xb0
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80054d6:	1cbb      	adds	r3, r7, #2
 80054d8:	2200      	movs	r2, #0
 80054da:	5e9b      	ldrsh	r3, [r3, r2]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	da03      	bge.n	80054e8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	22b8      	movs	r2, #184	; 0xb8
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80054e8:	1cbb      	adds	r3, r7, #2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d103      	bne.n	80054f8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2290      	movs	r2, #144	; 0x90
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80054f8:	1cbb      	adds	r3, r7, #2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d103      	bne.n	8005508 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005508:	1cbb      	adds	r3, r7, #2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d103      	bne.n	8005518 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2240      	movs	r2, #64	; 0x40
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	43d9      	mvns	r1, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	400a      	ands	r2, r1
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b004      	add	sp, #16
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2241      	movs	r2, #65	; 0x41
 8005542:	5c9b      	ldrb	r3, [r3, r2]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b20      	cmp	r3, #32
 8005548:	d138      	bne.n	80055bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	5c9b      	ldrb	r3, [r3, r2]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005554:	2302      	movs	r3, #2
 8005556:	e032      	b.n	80055be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2240      	movs	r2, #64	; 0x40
 800555c:	2101      	movs	r1, #1
 800555e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2241      	movs	r2, #65	; 0x41
 8005564:	2124      	movs	r1, #36	; 0x24
 8005566:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2101      	movs	r1, #1
 8005574:	438a      	bics	r2, r1
 8005576:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4911      	ldr	r1, [pc, #68]	; (80055c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005584:	400a      	ands	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2101      	movs	r1, #1
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2241      	movs	r2, #65	; 0x41
 80055ac:	2120      	movs	r1, #32
 80055ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2240      	movs	r2, #64	; 0x40
 80055b4:	2100      	movs	r1, #0
 80055b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e000      	b.n	80055be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055bc:	2302      	movs	r3, #2
  }
}
 80055be:	0018      	movs	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b002      	add	sp, #8
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	ffffefff 	.word	0xffffefff

080055cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2241      	movs	r2, #65	; 0x41
 80055da:	5c9b      	ldrb	r3, [r3, r2]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d139      	bne.n	8005656 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2240      	movs	r2, #64	; 0x40
 80055e6:	5c9b      	ldrb	r3, [r3, r2]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e033      	b.n	8005658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2240      	movs	r2, #64	; 0x40
 80055f4:	2101      	movs	r1, #1
 80055f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2241      	movs	r2, #65	; 0x41
 80055fc:	2124      	movs	r1, #36	; 0x24
 80055fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2101      	movs	r1, #1
 800560c:	438a      	bics	r2, r1
 800560e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a11      	ldr	r2, [pc, #68]	; (8005660 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2101      	movs	r1, #1
 800563e:	430a      	orrs	r2, r1
 8005640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2241      	movs	r2, #65	; 0x41
 8005646:	2120      	movs	r1, #32
 8005648:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2240      	movs	r2, #64	; 0x40
 800564e:	2100      	movs	r1, #0
 8005650:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	e000      	b.n	8005658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
  }
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b004      	add	sp, #16
 800565e:	bd80      	pop	{r7, pc}
 8005660:	fffff0ff 	.word	0xfffff0ff

08005664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f000 fb76 	bl	8005d64 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2201      	movs	r2, #1
 800567e:	4013      	ands	r3, r2
 8005680:	d100      	bne.n	8005684 <HAL_RCC_OscConfig+0x20>
 8005682:	e08e      	b.n	80057a2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005684:	4bc5      	ldr	r3, [pc, #788]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	220c      	movs	r2, #12
 800568a:	4013      	ands	r3, r2
 800568c:	2b04      	cmp	r3, #4
 800568e:	d00e      	beq.n	80056ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005690:	4bc2      	ldr	r3, [pc, #776]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	220c      	movs	r2, #12
 8005696:	4013      	ands	r3, r2
 8005698:	2b08      	cmp	r3, #8
 800569a:	d117      	bne.n	80056cc <HAL_RCC_OscConfig+0x68>
 800569c:	4bbf      	ldr	r3, [pc, #764]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	23c0      	movs	r3, #192	; 0xc0
 80056a2:	025b      	lsls	r3, r3, #9
 80056a4:	401a      	ands	r2, r3
 80056a6:	2380      	movs	r3, #128	; 0x80
 80056a8:	025b      	lsls	r3, r3, #9
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d10e      	bne.n	80056cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ae:	4bbb      	ldr	r3, [pc, #748]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	029b      	lsls	r3, r3, #10
 80056b6:	4013      	ands	r3, r2
 80056b8:	d100      	bne.n	80056bc <HAL_RCC_OscConfig+0x58>
 80056ba:	e071      	b.n	80057a0 <HAL_RCC_OscConfig+0x13c>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d000      	beq.n	80056c6 <HAL_RCC_OscConfig+0x62>
 80056c4:	e06c      	b.n	80057a0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f000 fb4c 	bl	8005d64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d107      	bne.n	80056e4 <HAL_RCC_OscConfig+0x80>
 80056d4:	4bb1      	ldr	r3, [pc, #708]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4bb0      	ldr	r3, [pc, #704]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80056da:	2180      	movs	r1, #128	; 0x80
 80056dc:	0249      	lsls	r1, r1, #9
 80056de:	430a      	orrs	r2, r1
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e02f      	b.n	8005744 <HAL_RCC_OscConfig+0xe0>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10c      	bne.n	8005706 <HAL_RCC_OscConfig+0xa2>
 80056ec:	4bab      	ldr	r3, [pc, #684]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	4baa      	ldr	r3, [pc, #680]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80056f2:	49ab      	ldr	r1, [pc, #684]	; (80059a0 <HAL_RCC_OscConfig+0x33c>)
 80056f4:	400a      	ands	r2, r1
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	4ba8      	ldr	r3, [pc, #672]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	4ba7      	ldr	r3, [pc, #668]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80056fe:	49a9      	ldr	r1, [pc, #676]	; (80059a4 <HAL_RCC_OscConfig+0x340>)
 8005700:	400a      	ands	r2, r1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e01e      	b.n	8005744 <HAL_RCC_OscConfig+0xe0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b05      	cmp	r3, #5
 800570c:	d10e      	bne.n	800572c <HAL_RCC_OscConfig+0xc8>
 800570e:	4ba3      	ldr	r3, [pc, #652]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4ba2      	ldr	r3, [pc, #648]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005714:	2180      	movs	r1, #128	; 0x80
 8005716:	02c9      	lsls	r1, r1, #11
 8005718:	430a      	orrs	r2, r1
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	4b9f      	ldr	r3, [pc, #636]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b9e      	ldr	r3, [pc, #632]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005722:	2180      	movs	r1, #128	; 0x80
 8005724:	0249      	lsls	r1, r1, #9
 8005726:	430a      	orrs	r2, r1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e00b      	b.n	8005744 <HAL_RCC_OscConfig+0xe0>
 800572c:	4b9b      	ldr	r3, [pc, #620]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b9a      	ldr	r3, [pc, #616]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005732:	499b      	ldr	r1, [pc, #620]	; (80059a0 <HAL_RCC_OscConfig+0x33c>)
 8005734:	400a      	ands	r2, r1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	4b98      	ldr	r3, [pc, #608]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b97      	ldr	r3, [pc, #604]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800573e:	4999      	ldr	r1, [pc, #612]	; (80059a4 <HAL_RCC_OscConfig+0x340>)
 8005740:	400a      	ands	r2, r1
 8005742:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d014      	beq.n	8005776 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7fd fdd6 	bl	80032fc <HAL_GetTick>
 8005750:	0003      	movs	r3, r0
 8005752:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005756:	f7fd fdd1 	bl	80032fc <HAL_GetTick>
 800575a:	0002      	movs	r2, r0
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b64      	cmp	r3, #100	; 0x64
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e2fd      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005768:	4b8c      	ldr	r3, [pc, #560]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	029b      	lsls	r3, r3, #10
 8005770:	4013      	ands	r3, r2
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0xf2>
 8005774:	e015      	b.n	80057a2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005776:	f7fd fdc1 	bl	80032fc <HAL_GetTick>
 800577a:	0003      	movs	r3, r0
 800577c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005780:	f7fd fdbc 	bl	80032fc <HAL_GetTick>
 8005784:	0002      	movs	r2, r0
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	; 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e2e8      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005792:	4b82      	ldr	r3, [pc, #520]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	029b      	lsls	r3, r3, #10
 800579a:	4013      	ands	r3, r2
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x11c>
 800579e:	e000      	b.n	80057a2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2202      	movs	r2, #2
 80057a8:	4013      	ands	r3, r2
 80057aa:	d100      	bne.n	80057ae <HAL_RCC_OscConfig+0x14a>
 80057ac:	e06c      	b.n	8005888 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80057ae:	4b7b      	ldr	r3, [pc, #492]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	220c      	movs	r2, #12
 80057b4:	4013      	ands	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80057b8:	4b78      	ldr	r3, [pc, #480]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	220c      	movs	r2, #12
 80057be:	4013      	ands	r3, r2
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d11f      	bne.n	8005804 <HAL_RCC_OscConfig+0x1a0>
 80057c4:	4b75      	ldr	r3, [pc, #468]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	23c0      	movs	r3, #192	; 0xc0
 80057ca:	025b      	lsls	r3, r3, #9
 80057cc:	401a      	ands	r2, r3
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d116      	bne.n	8005804 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d6:	4b71      	ldr	r3, [pc, #452]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2202      	movs	r2, #2
 80057dc:	4013      	ands	r3, r2
 80057de:	d005      	beq.n	80057ec <HAL_RCC_OscConfig+0x188>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e2bb      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ec:	4b6b      	ldr	r3, [pc, #428]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	22f8      	movs	r2, #248	; 0xf8
 80057f2:	4393      	bics	r3, r2
 80057f4:	0019      	movs	r1, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	00da      	lsls	r2, r3, #3
 80057fc:	4b67      	ldr	r3, [pc, #412]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80057fe:	430a      	orrs	r2, r1
 8005800:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005802:	e041      	b.n	8005888 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d024      	beq.n	8005856 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800580c:	4b63      	ldr	r3, [pc, #396]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4b62      	ldr	r3, [pc, #392]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005812:	2101      	movs	r1, #1
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fd fd70 	bl	80032fc <HAL_GetTick>
 800581c:	0003      	movs	r3, r0
 800581e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005822:	f7fd fd6b 	bl	80032fc <HAL_GetTick>
 8005826:	0002      	movs	r2, r0
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e297      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005834:	4b59      	ldr	r3, [pc, #356]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2202      	movs	r2, #2
 800583a:	4013      	ands	r3, r2
 800583c:	d0f1      	beq.n	8005822 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583e:	4b57      	ldr	r3, [pc, #348]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	22f8      	movs	r2, #248	; 0xf8
 8005844:	4393      	bics	r3, r2
 8005846:	0019      	movs	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	00da      	lsls	r2, r3, #3
 800584e:	4b53      	ldr	r3, [pc, #332]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005850:	430a      	orrs	r2, r1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e018      	b.n	8005888 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005856:	4b51      	ldr	r3, [pc, #324]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b50      	ldr	r3, [pc, #320]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800585c:	2101      	movs	r1, #1
 800585e:	438a      	bics	r2, r1
 8005860:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005862:	f7fd fd4b 	bl	80032fc <HAL_GetTick>
 8005866:	0003      	movs	r3, r0
 8005868:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800586c:	f7fd fd46 	bl	80032fc <HAL_GetTick>
 8005870:	0002      	movs	r2, r0
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e272      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587e:	4b47      	ldr	r3, [pc, #284]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2202      	movs	r2, #2
 8005884:	4013      	ands	r3, r2
 8005886:	d1f1      	bne.n	800586c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2208      	movs	r2, #8
 800588e:	4013      	ands	r3, r2
 8005890:	d036      	beq.n	8005900 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d019      	beq.n	80058ce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800589a:	4b40      	ldr	r3, [pc, #256]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800589c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800589e:	4b3f      	ldr	r3, [pc, #252]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80058a0:	2101      	movs	r1, #1
 80058a2:	430a      	orrs	r2, r1
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a6:	f7fd fd29 	bl	80032fc <HAL_GetTick>
 80058aa:	0003      	movs	r3, r0
 80058ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b0:	f7fd fd24 	bl	80032fc <HAL_GetTick>
 80058b4:	0002      	movs	r2, r0
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e250      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c2:	4b36      	ldr	r3, [pc, #216]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2202      	movs	r2, #2
 80058c8:	4013      	ands	r3, r2
 80058ca:	d0f1      	beq.n	80058b0 <HAL_RCC_OscConfig+0x24c>
 80058cc:	e018      	b.n	8005900 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ce:	4b33      	ldr	r3, [pc, #204]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80058d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d2:	4b32      	ldr	r3, [pc, #200]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80058d4:	2101      	movs	r1, #1
 80058d6:	438a      	bics	r2, r1
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058da:	f7fd fd0f 	bl	80032fc <HAL_GetTick>
 80058de:	0003      	movs	r3, r0
 80058e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e4:	f7fd fd0a 	bl	80032fc <HAL_GetTick>
 80058e8:	0002      	movs	r2, r0
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e236      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f6:	4b29      	ldr	r3, [pc, #164]	; (800599c <HAL_RCC_OscConfig+0x338>)
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2202      	movs	r2, #2
 80058fc:	4013      	ands	r3, r2
 80058fe:	d1f1      	bne.n	80058e4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2204      	movs	r2, #4
 8005906:	4013      	ands	r3, r2
 8005908:	d100      	bne.n	800590c <HAL_RCC_OscConfig+0x2a8>
 800590a:	e0b5      	b.n	8005a78 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590c:	201f      	movs	r0, #31
 800590e:	183b      	adds	r3, r7, r0
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005914:	4b21      	ldr	r3, [pc, #132]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	055b      	lsls	r3, r3, #21
 800591c:	4013      	ands	r3, r2
 800591e:	d110      	bne.n	8005942 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005920:	4b1e      	ldr	r3, [pc, #120]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	4b1d      	ldr	r3, [pc, #116]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005926:	2180      	movs	r1, #128	; 0x80
 8005928:	0549      	lsls	r1, r1, #21
 800592a:	430a      	orrs	r2, r1
 800592c:	61da      	str	r2, [r3, #28]
 800592e:	4b1b      	ldr	r3, [pc, #108]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005930:	69da      	ldr	r2, [r3, #28]
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	055b      	lsls	r3, r3, #21
 8005936:	4013      	ands	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800593c:	183b      	adds	r3, r7, r0
 800593e:	2201      	movs	r2, #1
 8005940:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005942:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <HAL_RCC_OscConfig+0x344>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	2380      	movs	r3, #128	; 0x80
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	4013      	ands	r3, r2
 800594c:	d11a      	bne.n	8005984 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800594e:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <HAL_RCC_OscConfig+0x344>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <HAL_RCC_OscConfig+0x344>)
 8005954:	2180      	movs	r1, #128	; 0x80
 8005956:	0049      	lsls	r1, r1, #1
 8005958:	430a      	orrs	r2, r1
 800595a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800595c:	f7fd fcce 	bl	80032fc <HAL_GetTick>
 8005960:	0003      	movs	r3, r0
 8005962:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005966:	f7fd fcc9 	bl	80032fc <HAL_GetTick>
 800596a:	0002      	movs	r2, r0
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b64      	cmp	r3, #100	; 0x64
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e1f5      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005978:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <HAL_RCC_OscConfig+0x344>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	4013      	ands	r3, r2
 8005982:	d0f0      	beq.n	8005966 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d10f      	bne.n	80059ac <HAL_RCC_OscConfig+0x348>
 800598c:	4b03      	ldr	r3, [pc, #12]	; (800599c <HAL_RCC_OscConfig+0x338>)
 800598e:	6a1a      	ldr	r2, [r3, #32]
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <HAL_RCC_OscConfig+0x338>)
 8005992:	2101      	movs	r1, #1
 8005994:	430a      	orrs	r2, r1
 8005996:	621a      	str	r2, [r3, #32]
 8005998:	e036      	b.n	8005a08 <HAL_RCC_OscConfig+0x3a4>
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	40021000 	.word	0x40021000
 80059a0:	fffeffff 	.word	0xfffeffff
 80059a4:	fffbffff 	.word	0xfffbffff
 80059a8:	40007000 	.word	0x40007000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10c      	bne.n	80059ce <HAL_RCC_OscConfig+0x36a>
 80059b4:	4bca      	ldr	r3, [pc, #808]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	4bc9      	ldr	r3, [pc, #804]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059ba:	2101      	movs	r1, #1
 80059bc:	438a      	bics	r2, r1
 80059be:	621a      	str	r2, [r3, #32]
 80059c0:	4bc7      	ldr	r3, [pc, #796]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	4bc6      	ldr	r3, [pc, #792]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059c6:	2104      	movs	r1, #4
 80059c8:	438a      	bics	r2, r1
 80059ca:	621a      	str	r2, [r3, #32]
 80059cc:	e01c      	b.n	8005a08 <HAL_RCC_OscConfig+0x3a4>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCC_OscConfig+0x38c>
 80059d6:	4bc2      	ldr	r3, [pc, #776]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059d8:	6a1a      	ldr	r2, [r3, #32]
 80059da:	4bc1      	ldr	r3, [pc, #772]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059dc:	2104      	movs	r1, #4
 80059de:	430a      	orrs	r2, r1
 80059e0:	621a      	str	r2, [r3, #32]
 80059e2:	4bbf      	ldr	r3, [pc, #764]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059e4:	6a1a      	ldr	r2, [r3, #32]
 80059e6:	4bbe      	ldr	r3, [pc, #760]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059e8:	2101      	movs	r1, #1
 80059ea:	430a      	orrs	r2, r1
 80059ec:	621a      	str	r2, [r3, #32]
 80059ee:	e00b      	b.n	8005a08 <HAL_RCC_OscConfig+0x3a4>
 80059f0:	4bbb      	ldr	r3, [pc, #748]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059f2:	6a1a      	ldr	r2, [r3, #32]
 80059f4:	4bba      	ldr	r3, [pc, #744]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059f6:	2101      	movs	r1, #1
 80059f8:	438a      	bics	r2, r1
 80059fa:	621a      	str	r2, [r3, #32]
 80059fc:	4bb8      	ldr	r3, [pc, #736]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 80059fe:	6a1a      	ldr	r2, [r3, #32]
 8005a00:	4bb7      	ldr	r3, [pc, #732]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005a02:	2104      	movs	r1, #4
 8005a04:	438a      	bics	r2, r1
 8005a06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d014      	beq.n	8005a3a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a10:	f7fd fc74 	bl	80032fc <HAL_GetTick>
 8005a14:	0003      	movs	r3, r0
 8005a16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a18:	e009      	b.n	8005a2e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a1a:	f7fd fc6f 	bl	80032fc <HAL_GetTick>
 8005a1e:	0002      	movs	r2, r0
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	4aaf      	ldr	r2, [pc, #700]	; (8005ce4 <HAL_RCC_OscConfig+0x680>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e19a      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a2e:	4bac      	ldr	r3, [pc, #688]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	2202      	movs	r2, #2
 8005a34:	4013      	ands	r3, r2
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCC_OscConfig+0x3b6>
 8005a38:	e013      	b.n	8005a62 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a3a:	f7fd fc5f 	bl	80032fc <HAL_GetTick>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a42:	e009      	b.n	8005a58 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a44:	f7fd fc5a 	bl	80032fc <HAL_GetTick>
 8005a48:	0002      	movs	r2, r0
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	4aa5      	ldr	r2, [pc, #660]	; (8005ce4 <HAL_RCC_OscConfig+0x680>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e185      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a58:	4ba1      	ldr	r3, [pc, #644]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a62:	231f      	movs	r3, #31
 8005a64:	18fb      	adds	r3, r7, r3
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d105      	bne.n	8005a78 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6c:	4b9c      	ldr	r3, [pc, #624]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	4b9b      	ldr	r3, [pc, #620]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005a72:	499d      	ldr	r1, [pc, #628]	; (8005ce8 <HAL_RCC_OscConfig+0x684>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2210      	movs	r2, #16
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d063      	beq.n	8005b4a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d12a      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005a8a:	4b95      	ldr	r3, [pc, #596]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a8e:	4b94      	ldr	r3, [pc, #592]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005a90:	2104      	movs	r1, #4
 8005a92:	430a      	orrs	r2, r1
 8005a94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005a96:	4b92      	ldr	r3, [pc, #584]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a9a:	4b91      	ldr	r3, [pc, #580]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aa2:	f7fd fc2b 	bl	80032fc <HAL_GetTick>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005aac:	f7fd fc26 	bl	80032fc <HAL_GetTick>
 8005ab0:	0002      	movs	r2, r0
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e152      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005abe:	4b88      	ldr	r3, [pc, #544]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d0f1      	beq.n	8005aac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005ac8:	4b85      	ldr	r3, [pc, #532]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005acc:	22f8      	movs	r2, #248	; 0xf8
 8005ace:	4393      	bics	r3, r2
 8005ad0:	0019      	movs	r1, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	00da      	lsls	r2, r3, #3
 8005ad8:	4b81      	ldr	r3, [pc, #516]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005ada:	430a      	orrs	r2, r1
 8005adc:	635a      	str	r2, [r3, #52]	; 0x34
 8005ade:	e034      	b.n	8005b4a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	3305      	adds	r3, #5
 8005ae6:	d111      	bne.n	8005b0c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005ae8:	4b7d      	ldr	r3, [pc, #500]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aec:	4b7c      	ldr	r3, [pc, #496]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005aee:	2104      	movs	r1, #4
 8005af0:	438a      	bics	r2, r1
 8005af2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005af4:	4b7a      	ldr	r3, [pc, #488]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af8:	22f8      	movs	r2, #248	; 0xf8
 8005afa:	4393      	bics	r3, r2
 8005afc:	0019      	movs	r1, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	00da      	lsls	r2, r3, #3
 8005b04:	4b76      	ldr	r3, [pc, #472]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b06:	430a      	orrs	r2, r1
 8005b08:	635a      	str	r2, [r3, #52]	; 0x34
 8005b0a:	e01e      	b.n	8005b4a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005b0c:	4b74      	ldr	r3, [pc, #464]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b10:	4b73      	ldr	r3, [pc, #460]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b12:	2104      	movs	r1, #4
 8005b14:	430a      	orrs	r2, r1
 8005b16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005b18:	4b71      	ldr	r3, [pc, #452]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1c:	4b70      	ldr	r3, [pc, #448]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b1e:	2101      	movs	r1, #1
 8005b20:	438a      	bics	r2, r1
 8005b22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b24:	f7fd fbea 	bl	80032fc <HAL_GetTick>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005b2e:	f7fd fbe5 	bl	80032fc <HAL_GetTick>
 8005b32:	0002      	movs	r2, r0
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e111      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005b40:	4b67      	ldr	r3, [pc, #412]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b44:	2202      	movs	r2, #2
 8005b46:	4013      	ands	r3, r2
 8005b48:	d1f1      	bne.n	8005b2e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	4013      	ands	r3, r2
 8005b52:	d05c      	beq.n	8005c0e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005b54:	4b62      	ldr	r3, [pc, #392]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	220c      	movs	r2, #12
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	2b0c      	cmp	r3, #12
 8005b5e:	d00e      	beq.n	8005b7e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005b60:	4b5f      	ldr	r3, [pc, #380]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	220c      	movs	r2, #12
 8005b66:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d114      	bne.n	8005b96 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005b6c:	4b5c      	ldr	r3, [pc, #368]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	23c0      	movs	r3, #192	; 0xc0
 8005b72:	025b      	lsls	r3, r3, #9
 8005b74:	401a      	ands	r2, r3
 8005b76:	23c0      	movs	r3, #192	; 0xc0
 8005b78:	025b      	lsls	r3, r3, #9
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d10b      	bne.n	8005b96 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005b7e:	4b58      	ldr	r3, [pc, #352]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b82:	2380      	movs	r3, #128	; 0x80
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	4013      	ands	r3, r2
 8005b88:	d040      	beq.n	8005c0c <HAL_RCC_OscConfig+0x5a8>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d03c      	beq.n	8005c0c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e0e6      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d01b      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005b9e:	4b50      	ldr	r3, [pc, #320]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba2:	4b4f      	ldr	r3, [pc, #316]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005ba4:	2180      	movs	r1, #128	; 0x80
 8005ba6:	0249      	lsls	r1, r1, #9
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bac:	f7fd fba6 	bl	80032fc <HAL_GetTick>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bb6:	f7fd fba1 	bl	80032fc <HAL_GetTick>
 8005bba:	0002      	movs	r2, r0
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e0cd      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005bc8:	4b45      	ldr	r3, [pc, #276]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	029b      	lsls	r3, r3, #10
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d0f0      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x552>
 8005bd4:	e01b      	b.n	8005c0e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005bd6:	4b42      	ldr	r3, [pc, #264]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bda:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005bdc:	4943      	ldr	r1, [pc, #268]	; (8005cec <HAL_RCC_OscConfig+0x688>)
 8005bde:	400a      	ands	r2, r1
 8005be0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be2:	f7fd fb8b 	bl	80032fc <HAL_GetTick>
 8005be6:	0003      	movs	r3, r0
 8005be8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bec:	f7fd fb86 	bl	80032fc <HAL_GetTick>
 8005bf0:	0002      	movs	r2, r0
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e0b2      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005bfe:	4b38      	ldr	r3, [pc, #224]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	029b      	lsls	r3, r3, #10
 8005c06:	4013      	ands	r3, r2
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x588>
 8005c0a:	e000      	b.n	8005c0e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005c0c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d100      	bne.n	8005c18 <HAL_RCC_OscConfig+0x5b4>
 8005c16:	e0a4      	b.n	8005d62 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c18:	4b31      	ldr	r3, [pc, #196]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	220c      	movs	r2, #12
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d100      	bne.n	8005c26 <HAL_RCC_OscConfig+0x5c2>
 8005c24:	e078      	b.n	8005d18 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d14c      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c34:	492e      	ldr	r1, [pc, #184]	; (8005cf0 <HAL_RCC_OscConfig+0x68c>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3a:	f7fd fb5f 	bl	80032fc <HAL_GetTick>
 8005c3e:	0003      	movs	r3, r0
 8005c40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c44:	f7fd fb5a 	bl	80032fc <HAL_GetTick>
 8005c48:	0002      	movs	r2, r0
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e086      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c56:	4b22      	ldr	r3, [pc, #136]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	049b      	lsls	r3, r3, #18
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c62:	4b1f      	ldr	r3, [pc, #124]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	220f      	movs	r2, #15
 8005c68:	4393      	bics	r3, r2
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c70:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c72:	430a      	orrs	r2, r1
 8005c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c76:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	; (8005cf4 <HAL_RCC_OscConfig+0x690>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	0019      	movs	r1, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c90:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005c96:	2180      	movs	r1, #128	; 0x80
 8005c98:	0449      	lsls	r1, r1, #17
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9e:	f7fd fb2d 	bl	80032fc <HAL_GetTick>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7fd fb28 	bl	80032fc <HAL_GetTick>
 8005cac:	0002      	movs	r2, r0
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e054      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	2380      	movs	r3, #128	; 0x80
 8005cc0:	049b      	lsls	r3, r3, #18
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x644>
 8005cc6:	e04c      	b.n	8005d62 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc8:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <HAL_RCC_OscConfig+0x67c>)
 8005cce:	4908      	ldr	r1, [pc, #32]	; (8005cf0 <HAL_RCC_OscConfig+0x68c>)
 8005cd0:	400a      	ands	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd4:	f7fd fb12 	bl	80032fc <HAL_GetTick>
 8005cd8:	0003      	movs	r3, r0
 8005cda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cdc:	e015      	b.n	8005d0a <HAL_RCC_OscConfig+0x6a6>
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	00001388 	.word	0x00001388
 8005ce8:	efffffff 	.word	0xefffffff
 8005cec:	fffeffff 	.word	0xfffeffff
 8005cf0:	feffffff 	.word	0xfeffffff
 8005cf4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf8:	f7fd fb00 	bl	80032fc <HAL_GetTick>
 8005cfc:	0002      	movs	r2, r0
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e02c      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d0a:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <HAL_RCC_OscConfig+0x708>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	049b      	lsls	r3, r3, #18
 8005d12:	4013      	ands	r3, r2
 8005d14:	d1f0      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x694>
 8005d16:	e024      	b.n	8005d62 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e01f      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005d24:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <HAL_RCC_OscConfig+0x708>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005d2a:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <HAL_RCC_OscConfig+0x708>)
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	23c0      	movs	r3, #192	; 0xc0
 8005d34:	025b      	lsls	r3, r3, #9
 8005d36:	401a      	ands	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d10e      	bne.n	8005d5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	220f      	movs	r2, #15
 8005d44:	401a      	ands	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	23f0      	movs	r3, #240	; 0xf0
 8005d52:	039b      	lsls	r3, r3, #14
 8005d54:	401a      	ands	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d001      	beq.n	8005d62 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	0018      	movs	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b008      	add	sp, #32
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40021000 	.word	0x40021000

08005d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0bf      	b.n	8005f04 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d84:	4b61      	ldr	r3, [pc, #388]	; (8005f0c <HAL_RCC_ClockConfig+0x19c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d911      	bls.n	8005db6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d92:	4b5e      	ldr	r3, [pc, #376]	; (8005f0c <HAL_RCC_ClockConfig+0x19c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2201      	movs	r2, #1
 8005d98:	4393      	bics	r3, r2
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	4b5b      	ldr	r3, [pc, #364]	; (8005f0c <HAL_RCC_ClockConfig+0x19c>)
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da4:	4b59      	ldr	r3, [pc, #356]	; (8005f0c <HAL_RCC_ClockConfig+0x19c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2201      	movs	r2, #1
 8005daa:	4013      	ands	r3, r2
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d001      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e0a6      	b.n	8005f04 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d015      	beq.n	8005dec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d006      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005dca:	4b51      	ldr	r3, [pc, #324]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	4b50      	ldr	r3, [pc, #320]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005dd0:	21e0      	movs	r1, #224	; 0xe0
 8005dd2:	00c9      	lsls	r1, r1, #3
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd8:	4b4d      	ldr	r3, [pc, #308]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	22f0      	movs	r2, #240	; 0xf0
 8005dde:	4393      	bics	r3, r2
 8005de0:	0019      	movs	r1, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	4b4a      	ldr	r3, [pc, #296]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2201      	movs	r2, #1
 8005df2:	4013      	ands	r3, r2
 8005df4:	d04c      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d107      	bne.n	8005e0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfe:	4b44      	ldr	r3, [pc, #272]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	2380      	movs	r3, #128	; 0x80
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	4013      	ands	r3, r2
 8005e08:	d120      	bne.n	8005e4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e07a      	b.n	8005f04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d107      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e16:	4b3e      	ldr	r3, [pc, #248]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	2380      	movs	r3, #128	; 0x80
 8005e1c:	049b      	lsls	r3, r3, #18
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d114      	bne.n	8005e4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e06e      	b.n	8005f04 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005e2e:	4b38      	ldr	r3, [pc, #224]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	029b      	lsls	r3, r3, #10
 8005e36:	4013      	ands	r3, r2
 8005e38:	d108      	bne.n	8005e4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e062      	b.n	8005f04 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e3e:	4b34      	ldr	r3, [pc, #208]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2202      	movs	r2, #2
 8005e44:	4013      	ands	r3, r2
 8005e46:	d101      	bne.n	8005e4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e05b      	b.n	8005f04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e4c:	4b30      	ldr	r3, [pc, #192]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2203      	movs	r2, #3
 8005e52:	4393      	bics	r3, r2
 8005e54:	0019      	movs	r1, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e60:	f7fd fa4c 	bl	80032fc <HAL_GetTick>
 8005e64:	0003      	movs	r3, r0
 8005e66:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e68:	e009      	b.n	8005e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e6a:	f7fd fa47 	bl	80032fc <HAL_GetTick>
 8005e6e:	0002      	movs	r2, r0
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	4a27      	ldr	r2, [pc, #156]	; (8005f14 <HAL_RCC_ClockConfig+0x1a4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e042      	b.n	8005f04 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	220c      	movs	r2, #12
 8005e84:	401a      	ands	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d1ec      	bne.n	8005e6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e90:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <HAL_RCC_ClockConfig+0x19c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2201      	movs	r2, #1
 8005e96:	4013      	ands	r3, r2
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d211      	bcs.n	8005ec2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9e:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <HAL_RCC_ClockConfig+0x19c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4393      	bics	r3, r2
 8005ea6:	0019      	movs	r1, r3
 8005ea8:	4b18      	ldr	r3, [pc, #96]	; (8005f0c <HAL_RCC_ClockConfig+0x19c>)
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb0:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <HAL_RCC_ClockConfig+0x19c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d001      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e020      	b.n	8005f04 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d009      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	4a11      	ldr	r2, [pc, #68]	; (8005f18 <HAL_RCC_ClockConfig+0x1a8>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	0019      	movs	r1, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005edc:	430a      	orrs	r2, r1
 8005ede:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ee0:	f000 f820 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8005ee4:	0001      	movs	r1, r0
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <HAL_RCC_ClockConfig+0x1a0>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	091b      	lsrs	r3, r3, #4
 8005eec:	220f      	movs	r2, #15
 8005eee:	4013      	ands	r3, r2
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <HAL_RCC_ClockConfig+0x1ac>)
 8005ef2:	5cd3      	ldrb	r3, [r2, r3]
 8005ef4:	000a      	movs	r2, r1
 8005ef6:	40da      	lsrs	r2, r3
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <HAL_RCC_ClockConfig+0x1b0>)
 8005efa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005efc:	2003      	movs	r0, #3
 8005efe:	f7fd f9b7 	bl	8003270 <HAL_InitTick>
  
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b004      	add	sp, #16
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40022000 	.word	0x40022000
 8005f10:	40021000 	.word	0x40021000
 8005f14:	00001388 	.word	0x00001388
 8005f18:	fffff8ff 	.word	0xfffff8ff
 8005f1c:	080082b8 	.word	0x080082b8
 8005f20:	20000000 	.word	0x20000000

08005f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005f3e:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	220c      	movs	r2, #12
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b0c      	cmp	r3, #12
 8005f4c:	d046      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0xb8>
 8005f4e:	d848      	bhi.n	8005fe2 <HAL_RCC_GetSysClockFreq+0xbe>
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d002      	beq.n	8005f5a <HAL_RCC_GetSysClockFreq+0x36>
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d003      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0x3c>
 8005f58:	e043      	b.n	8005fe2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f5a:	4b27      	ldr	r3, [pc, #156]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f5c:	613b      	str	r3, [r7, #16]
      break;
 8005f5e:	e043      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	0c9b      	lsrs	r3, r3, #18
 8005f64:	220f      	movs	r2, #15
 8005f66:	4013      	ands	r3, r2
 8005f68:	4a24      	ldr	r2, [pc, #144]	; (8005ffc <HAL_RCC_GetSysClockFreq+0xd8>)
 8005f6a:	5cd3      	ldrb	r3, [r2, r3]
 8005f6c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005f6e:	4b21      	ldr	r3, [pc, #132]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	220f      	movs	r2, #15
 8005f74:	4013      	ands	r3, r2
 8005f76:	4a22      	ldr	r2, [pc, #136]	; (8006000 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005f78:	5cd3      	ldrb	r3, [r2, r3]
 8005f7a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	23c0      	movs	r3, #192	; 0xc0
 8005f80:	025b      	lsls	r3, r3, #9
 8005f82:	401a      	ands	r2, r3
 8005f84:	2380      	movs	r3, #128	; 0x80
 8005f86:	025b      	lsls	r3, r3, #9
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	481a      	ldr	r0, [pc, #104]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f90:	f7fa f8b8 	bl	8000104 <__udivsi3>
 8005f94:	0003      	movs	r3, r0
 8005f96:	001a      	movs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4353      	muls	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	e01a      	b.n	8005fd6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	23c0      	movs	r3, #192	; 0xc0
 8005fa4:	025b      	lsls	r3, r3, #9
 8005fa6:	401a      	ands	r2, r3
 8005fa8:	23c0      	movs	r3, #192	; 0xc0
 8005faa:	025b      	lsls	r3, r3, #9
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d109      	bne.n	8005fc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4814      	ldr	r0, [pc, #80]	; (8006004 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005fb4:	f7fa f8a6 	bl	8000104 <__udivsi3>
 8005fb8:	0003      	movs	r3, r0
 8005fba:	001a      	movs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4353      	muls	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	480c      	ldr	r0, [pc, #48]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005fc8:	f7fa f89c 	bl	8000104 <__udivsi3>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	001a      	movs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4353      	muls	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	613b      	str	r3, [r7, #16]
      break;
 8005fda:	e005      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005fde:	613b      	str	r3, [r7, #16]
      break;
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005fe4:	613b      	str	r3, [r7, #16]
      break;
 8005fe6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005fe8:	693b      	ldr	r3, [r7, #16]
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b006      	add	sp, #24
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	007a1200 	.word	0x007a1200
 8005ffc:	080082d0 	.word	0x080082d0
 8006000:	080082e0 	.word	0x080082e0
 8006004:	02dc6c00 	.word	0x02dc6c00

08006008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800600c:	4b02      	ldr	r3, [pc, #8]	; (8006018 <HAL_RCC_GetHCLKFreq+0x10>)
 800600e:	681b      	ldr	r3, [r3, #0]
}
 8006010:	0018      	movs	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	20000000 	.word	0x20000000

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006020:	f7ff fff2 	bl	8006008 <HAL_RCC_GetHCLKFreq>
 8006024:	0001      	movs	r1, r0
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	0a1b      	lsrs	r3, r3, #8
 800602c:	2207      	movs	r2, #7
 800602e:	4013      	ands	r3, r2
 8006030:	4a04      	ldr	r2, [pc, #16]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006032:	5cd3      	ldrb	r3, [r2, r3]
 8006034:	40d9      	lsrs	r1, r3
 8006036:	000b      	movs	r3, r1
}    
 8006038:	0018      	movs	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	40021000 	.word	0x40021000
 8006044:	080082c8 	.word	0x080082c8

08006048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	025b      	lsls	r3, r3, #9
 8006060:	4013      	ands	r3, r2
 8006062:	d100      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006064:	e08e      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006066:	2017      	movs	r0, #23
 8006068:	183b      	adds	r3, r7, r0
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800606e:	4b6e      	ldr	r3, [pc, #440]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	055b      	lsls	r3, r3, #21
 8006076:	4013      	ands	r3, r2
 8006078:	d110      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800607a:	4b6b      	ldr	r3, [pc, #428]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800607c:	69da      	ldr	r2, [r3, #28]
 800607e:	4b6a      	ldr	r3, [pc, #424]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006080:	2180      	movs	r1, #128	; 0x80
 8006082:	0549      	lsls	r1, r1, #21
 8006084:	430a      	orrs	r2, r1
 8006086:	61da      	str	r2, [r3, #28]
 8006088:	4b67      	ldr	r3, [pc, #412]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	2380      	movs	r3, #128	; 0x80
 800608e:	055b      	lsls	r3, r3, #21
 8006090:	4013      	ands	r3, r2
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006096:	183b      	adds	r3, r7, r0
 8006098:	2201      	movs	r2, #1
 800609a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609c:	4b63      	ldr	r3, [pc, #396]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	2380      	movs	r3, #128	; 0x80
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4013      	ands	r3, r2
 80060a6:	d11a      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060a8:	4b60      	ldr	r3, [pc, #384]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4b5f      	ldr	r3, [pc, #380]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	0049      	lsls	r1, r1, #1
 80060b2:	430a      	orrs	r2, r1
 80060b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b6:	f7fd f921 	bl	80032fc <HAL_GetTick>
 80060ba:	0003      	movs	r3, r0
 80060bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060be:	e008      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c0:	f7fd f91c 	bl	80032fc <HAL_GetTick>
 80060c4:	0002      	movs	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b64      	cmp	r3, #100	; 0x64
 80060cc:	d901      	bls.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e0a6      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d2:	4b56      	ldr	r3, [pc, #344]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	4013      	ands	r3, r2
 80060dc:	d0f0      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060de:	4b52      	ldr	r3, [pc, #328]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060e0:	6a1a      	ldr	r2, [r3, #32]
 80060e2:	23c0      	movs	r3, #192	; 0xc0
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4013      	ands	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d034      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	23c0      	movs	r3, #192	; 0xc0
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4013      	ands	r3, r2
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d02c      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006100:	4b49      	ldr	r3, [pc, #292]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	4a4a      	ldr	r2, [pc, #296]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006106:	4013      	ands	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800610a:	4b47      	ldr	r3, [pc, #284]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	4b46      	ldr	r3, [pc, #280]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006110:	2180      	movs	r1, #128	; 0x80
 8006112:	0249      	lsls	r1, r1, #9
 8006114:	430a      	orrs	r2, r1
 8006116:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006118:	4b43      	ldr	r3, [pc, #268]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	4b42      	ldr	r3, [pc, #264]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800611e:	4945      	ldr	r1, [pc, #276]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006120:	400a      	ands	r2, r1
 8006122:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006124:	4b40      	ldr	r3, [pc, #256]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	4013      	ands	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006132:	f7fd f8e3 	bl	80032fc <HAL_GetTick>
 8006136:	0003      	movs	r3, r0
 8006138:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613a:	e009      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613c:	f7fd f8de 	bl	80032fc <HAL_GetTick>
 8006140:	0002      	movs	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d901      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e067      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006150:	4b35      	ldr	r3, [pc, #212]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	2202      	movs	r2, #2
 8006156:	4013      	ands	r3, r2
 8006158:	d0f0      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800615a:	4b33      	ldr	r3, [pc, #204]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	4a34      	ldr	r2, [pc, #208]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006160:	4013      	ands	r3, r2
 8006162:	0019      	movs	r1, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	4b2f      	ldr	r3, [pc, #188]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800616a:	430a      	orrs	r2, r1
 800616c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800616e:	2317      	movs	r3, #23
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d105      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006178:	4b2b      	ldr	r3, [pc, #172]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800617e:	492f      	ldr	r1, [pc, #188]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006180:	400a      	ands	r2, r1
 8006182:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2201      	movs	r2, #1
 800618a:	4013      	ands	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800618e:	4b26      	ldr	r3, [pc, #152]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	2203      	movs	r2, #3
 8006194:	4393      	bics	r3, r2
 8006196:	0019      	movs	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	4b22      	ldr	r3, [pc, #136]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800619e:	430a      	orrs	r2, r1
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2202      	movs	r2, #2
 80061a8:	4013      	ands	r3, r2
 80061aa:	d009      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061ac:	4b1e      	ldr	r3, [pc, #120]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	4a23      	ldr	r2, [pc, #140]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	0019      	movs	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061bc:	430a      	orrs	r2, r1
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	2380      	movs	r3, #128	; 0x80
 80061c6:	02db      	lsls	r3, r3, #11
 80061c8:	4013      	ands	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061cc:	4b16      	ldr	r3, [pc, #88]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	4a1c      	ldr	r2, [pc, #112]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	0019      	movs	r1, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	4b13      	ldr	r3, [pc, #76]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061dc:	430a      	orrs	r2, r1
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2220      	movs	r2, #32
 80061e6:	4013      	ands	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	2210      	movs	r2, #16
 80061f0:	4393      	bics	r3, r2
 80061f2:	0019      	movs	r1, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061fa:	430a      	orrs	r2, r1
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4013      	ands	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	2240      	movs	r2, #64	; 0x40
 8006210:	4393      	bics	r3, r2
 8006212:	0019      	movs	r1, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699a      	ldr	r2, [r3, #24]
 8006218:	4b03      	ldr	r3, [pc, #12]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800621a:	430a      	orrs	r2, r1
 800621c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	b006      	add	sp, #24
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40021000 	.word	0x40021000
 800622c:	40007000 	.word	0x40007000
 8006230:	fffffcff 	.word	0xfffffcff
 8006234:	fffeffff 	.word	0xfffeffff
 8006238:	00001388 	.word	0x00001388
 800623c:	efffffff 	.word	0xefffffff
 8006240:	fffcffff 	.word	0xfffcffff
 8006244:	fff3ffff 	.word	0xfff3ffff

08006248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e042      	b.n	80062e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	223d      	movs	r2, #61	; 0x3d
 800625e:	5c9b      	ldrb	r3, [r3, r2]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d107      	bne.n	8006276 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	223c      	movs	r2, #60	; 0x3c
 800626a:	2100      	movs	r1, #0
 800626c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0018      	movs	r0, r3
 8006272:	f7fc fd3f 	bl	8002cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	223d      	movs	r2, #61	; 0x3d
 800627a:	2102      	movs	r1, #2
 800627c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3304      	adds	r3, #4
 8006286:	0019      	movs	r1, r3
 8006288:	0010      	movs	r0, r2
 800628a:	f000 fc5f 	bl	8006b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2246      	movs	r2, #70	; 0x46
 8006292:	2101      	movs	r1, #1
 8006294:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	223e      	movs	r2, #62	; 0x3e
 800629a:	2101      	movs	r1, #1
 800629c:	5499      	strb	r1, [r3, r2]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	223f      	movs	r2, #63	; 0x3f
 80062a2:	2101      	movs	r1, #1
 80062a4:	5499      	strb	r1, [r3, r2]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2240      	movs	r2, #64	; 0x40
 80062aa:	2101      	movs	r1, #1
 80062ac:	5499      	strb	r1, [r3, r2]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2241      	movs	r2, #65	; 0x41
 80062b2:	2101      	movs	r1, #1
 80062b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2242      	movs	r2, #66	; 0x42
 80062ba:	2101      	movs	r1, #1
 80062bc:	5499      	strb	r1, [r3, r2]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2243      	movs	r2, #67	; 0x43
 80062c2:	2101      	movs	r1, #1
 80062c4:	5499      	strb	r1, [r3, r2]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2244      	movs	r2, #68	; 0x44
 80062ca:	2101      	movs	r1, #1
 80062cc:	5499      	strb	r1, [r3, r2]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2245      	movs	r2, #69	; 0x45
 80062d2:	2101      	movs	r1, #1
 80062d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	223d      	movs	r2, #61	; 0x3d
 80062da:	2101      	movs	r1, #1
 80062dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b002      	add	sp, #8
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	223d      	movs	r2, #61	; 0x3d
 80062f4:	5c9b      	ldrb	r3, [r3, r2]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d001      	beq.n	8006300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e03b      	b.n	8006378 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	223d      	movs	r2, #61	; 0x3d
 8006304:	2102      	movs	r1, #2
 8006306:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2101      	movs	r1, #1
 8006314:	430a      	orrs	r2, r1
 8006316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a18      	ldr	r2, [pc, #96]	; (8006380 <HAL_TIM_Base_Start_IT+0x98>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00f      	beq.n	8006342 <HAL_TIM_Base_Start_IT+0x5a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	2380      	movs	r3, #128	; 0x80
 8006328:	05db      	lsls	r3, r3, #23
 800632a:	429a      	cmp	r2, r3
 800632c:	d009      	beq.n	8006342 <HAL_TIM_Base_Start_IT+0x5a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a14      	ldr	r2, [pc, #80]	; (8006384 <HAL_TIM_Base_Start_IT+0x9c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_TIM_Base_Start_IT+0x5a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a12      	ldr	r2, [pc, #72]	; (8006388 <HAL_TIM_Base_Start_IT+0xa0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d111      	bne.n	8006366 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2207      	movs	r2, #7
 800634a:	4013      	ands	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b06      	cmp	r3, #6
 8006352:	d010      	beq.n	8006376 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2101      	movs	r1, #1
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006364:	e007      	b.n	8006376 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2101      	movs	r1, #1
 8006372:	430a      	orrs	r2, r1
 8006374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	0018      	movs	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	b004      	add	sp, #16
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40012c00 	.word	0x40012c00
 8006384:	40000400 	.word	0x40000400
 8006388:	40014000 	.word	0x40014000

0800638c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e042      	b.n	8006424 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	223d      	movs	r2, #61	; 0x3d
 80063a2:	5c9b      	ldrb	r3, [r3, r2]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d107      	bne.n	80063ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	223c      	movs	r2, #60	; 0x3c
 80063ae:	2100      	movs	r1, #0
 80063b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f000 f839 	bl	800642c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	223d      	movs	r2, #61	; 0x3d
 80063be:	2102      	movs	r1, #2
 80063c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3304      	adds	r3, #4
 80063ca:	0019      	movs	r1, r3
 80063cc:	0010      	movs	r0, r2
 80063ce:	f000 fbbd 	bl	8006b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2246      	movs	r2, #70	; 0x46
 80063d6:	2101      	movs	r1, #1
 80063d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	223e      	movs	r2, #62	; 0x3e
 80063de:	2101      	movs	r1, #1
 80063e0:	5499      	strb	r1, [r3, r2]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	223f      	movs	r2, #63	; 0x3f
 80063e6:	2101      	movs	r1, #1
 80063e8:	5499      	strb	r1, [r3, r2]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2240      	movs	r2, #64	; 0x40
 80063ee:	2101      	movs	r1, #1
 80063f0:	5499      	strb	r1, [r3, r2]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2241      	movs	r2, #65	; 0x41
 80063f6:	2101      	movs	r1, #1
 80063f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2242      	movs	r2, #66	; 0x42
 80063fe:	2101      	movs	r1, #1
 8006400:	5499      	strb	r1, [r3, r2]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2243      	movs	r2, #67	; 0x43
 8006406:	2101      	movs	r1, #1
 8006408:	5499      	strb	r1, [r3, r2]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2244      	movs	r2, #68	; 0x44
 800640e:	2101      	movs	r1, #1
 8006410:	5499      	strb	r1, [r3, r2]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2245      	movs	r2, #69	; 0x45
 8006416:	2101      	movs	r1, #1
 8006418:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	223d      	movs	r2, #61	; 0x3d
 800641e:	2101      	movs	r1, #1
 8006420:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	0018      	movs	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	b002      	add	sp, #8
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006434:	46c0      	nop			; (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	b002      	add	sp, #8
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d108      	bne.n	800645e <HAL_TIM_PWM_Start+0x22>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	223e      	movs	r2, #62	; 0x3e
 8006450:	5c9b      	ldrb	r3, [r3, r2]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	1e5a      	subs	r2, r3, #1
 8006458:	4193      	sbcs	r3, r2
 800645a:	b2db      	uxtb	r3, r3
 800645c:	e01f      	b.n	800649e <HAL_TIM_PWM_Start+0x62>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d108      	bne.n	8006476 <HAL_TIM_PWM_Start+0x3a>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	223f      	movs	r2, #63	; 0x3f
 8006468:	5c9b      	ldrb	r3, [r3, r2]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	1e5a      	subs	r2, r3, #1
 8006470:	4193      	sbcs	r3, r2
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e013      	b.n	800649e <HAL_TIM_PWM_Start+0x62>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b08      	cmp	r3, #8
 800647a:	d108      	bne.n	800648e <HAL_TIM_PWM_Start+0x52>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2240      	movs	r2, #64	; 0x40
 8006480:	5c9b      	ldrb	r3, [r3, r2]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	1e5a      	subs	r2, r3, #1
 8006488:	4193      	sbcs	r3, r2
 800648a:	b2db      	uxtb	r3, r3
 800648c:	e007      	b.n	800649e <HAL_TIM_PWM_Start+0x62>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2241      	movs	r2, #65	; 0x41
 8006492:	5c9b      	ldrb	r3, [r3, r2]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	1e5a      	subs	r2, r3, #1
 800649a:	4193      	sbcs	r3, r2
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e074      	b.n	8006590 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0x7a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	223e      	movs	r2, #62	; 0x3e
 80064b0:	2102      	movs	r1, #2
 80064b2:	5499      	strb	r1, [r3, r2]
 80064b4:	e013      	b.n	80064de <HAL_TIM_PWM_Start+0xa2>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start+0x8a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	223f      	movs	r2, #63	; 0x3f
 80064c0:	2102      	movs	r1, #2
 80064c2:	5499      	strb	r1, [r3, r2]
 80064c4:	e00b      	b.n	80064de <HAL_TIM_PWM_Start+0xa2>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d104      	bne.n	80064d6 <HAL_TIM_PWM_Start+0x9a>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2240      	movs	r2, #64	; 0x40
 80064d0:	2102      	movs	r1, #2
 80064d2:	5499      	strb	r1, [r3, r2]
 80064d4:	e003      	b.n	80064de <HAL_TIM_PWM_Start+0xa2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2241      	movs	r2, #65	; 0x41
 80064da:	2102      	movs	r1, #2
 80064dc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	2201      	movs	r2, #1
 80064e6:	0018      	movs	r0, r3
 80064e8:	f000 fe46 	bl	8007178 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a29      	ldr	r2, [pc, #164]	; (8006598 <HAL_TIM_PWM_Start+0x15c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00e      	beq.n	8006514 <HAL_TIM_PWM_Start+0xd8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a28      	ldr	r2, [pc, #160]	; (800659c <HAL_TIM_PWM_Start+0x160>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d009      	beq.n	8006514 <HAL_TIM_PWM_Start+0xd8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a26      	ldr	r2, [pc, #152]	; (80065a0 <HAL_TIM_PWM_Start+0x164>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_TIM_PWM_Start+0xd8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a25      	ldr	r2, [pc, #148]	; (80065a4 <HAL_TIM_PWM_Start+0x168>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d101      	bne.n	8006518 <HAL_TIM_PWM_Start+0xdc>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <HAL_TIM_PWM_Start+0xde>
 8006518:	2300      	movs	r3, #0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2180      	movs	r1, #128	; 0x80
 800652a:	0209      	lsls	r1, r1, #8
 800652c:	430a      	orrs	r2, r1
 800652e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a18      	ldr	r2, [pc, #96]	; (8006598 <HAL_TIM_PWM_Start+0x15c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00f      	beq.n	800655a <HAL_TIM_PWM_Start+0x11e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	05db      	lsls	r3, r3, #23
 8006542:	429a      	cmp	r2, r3
 8006544:	d009      	beq.n	800655a <HAL_TIM_PWM_Start+0x11e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <HAL_TIM_PWM_Start+0x16c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_TIM_PWM_Start+0x11e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a11      	ldr	r2, [pc, #68]	; (800659c <HAL_TIM_PWM_Start+0x160>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d111      	bne.n	800657e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2207      	movs	r2, #7
 8006562:	4013      	ands	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b06      	cmp	r3, #6
 800656a:	d010      	beq.n	800658e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2101      	movs	r1, #1
 8006578:	430a      	orrs	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657c:	e007      	b.n	800658e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2101      	movs	r1, #1
 800658a:	430a      	orrs	r2, r1
 800658c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	0018      	movs	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	b004      	add	sp, #16
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800
 80065a8:	40000400 	.word	0x40000400

080065ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2202      	movs	r2, #2
 80065bc:	4013      	ands	r3, r2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d124      	bne.n	800660c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2202      	movs	r2, #2
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d11d      	bne.n	800660c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2203      	movs	r2, #3
 80065d6:	4252      	negs	r2, r2
 80065d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2203      	movs	r2, #3
 80065e8:	4013      	ands	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	0018      	movs	r0, r3
 80065f0:	f000 fa94 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 80065f4:	e007      	b.n	8006606 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f000 fa87 	bl	8006b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	0018      	movs	r0, r3
 8006602:	f000 fa93 	bl	8006b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2204      	movs	r2, #4
 8006614:	4013      	ands	r3, r2
 8006616:	2b04      	cmp	r3, #4
 8006618:	d125      	bne.n	8006666 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	2204      	movs	r2, #4
 8006622:	4013      	ands	r3, r2
 8006624:	2b04      	cmp	r3, #4
 8006626:	d11e      	bne.n	8006666 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2205      	movs	r2, #5
 800662e:	4252      	negs	r2, r2
 8006630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	23c0      	movs	r3, #192	; 0xc0
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4013      	ands	r3, r2
 8006644:	d004      	beq.n	8006650 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	0018      	movs	r0, r3
 800664a:	f000 fa67 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 800664e:	e007      	b.n	8006660 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	0018      	movs	r0, r3
 8006654:	f000 fa5a 	bl	8006b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	0018      	movs	r0, r3
 800665c:	f000 fa66 	bl	8006b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2208      	movs	r2, #8
 800666e:	4013      	ands	r3, r2
 8006670:	2b08      	cmp	r3, #8
 8006672:	d124      	bne.n	80066be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	2208      	movs	r2, #8
 800667c:	4013      	ands	r3, r2
 800667e:	2b08      	cmp	r3, #8
 8006680:	d11d      	bne.n	80066be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2209      	movs	r2, #9
 8006688:	4252      	negs	r2, r2
 800668a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2204      	movs	r2, #4
 8006690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	2203      	movs	r2, #3
 800669a:	4013      	ands	r3, r2
 800669c:	d004      	beq.n	80066a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 fa3b 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 80066a6:	e007      	b.n	80066b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 fa2e 	bl	8006b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	0018      	movs	r0, r3
 80066b4:	f000 fa3a 	bl	8006b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2210      	movs	r2, #16
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d125      	bne.n	8006718 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	2210      	movs	r2, #16
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b10      	cmp	r3, #16
 80066d8:	d11e      	bne.n	8006718 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2211      	movs	r2, #17
 80066e0:	4252      	negs	r2, r2
 80066e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2208      	movs	r2, #8
 80066e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	23c0      	movs	r3, #192	; 0xc0
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4013      	ands	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	0018      	movs	r0, r3
 80066fc:	f000 fa0e 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 8006700:	e007      	b.n	8006712 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	0018      	movs	r0, r3
 8006706:	f000 fa01 	bl	8006b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0018      	movs	r0, r3
 800670e:	f000 fa0d 	bl	8006b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2201      	movs	r2, #1
 8006720:	4013      	ands	r3, r2
 8006722:	2b01      	cmp	r3, #1
 8006724:	d10f      	bne.n	8006746 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	4013      	ands	r3, r2
 8006730:	2b01      	cmp	r3, #1
 8006732:	d108      	bne.n	8006746 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2202      	movs	r2, #2
 800673a:	4252      	negs	r2, r2
 800673c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	0018      	movs	r0, r3
 8006742:	f7fc f98b 	bl	8002a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2280      	movs	r2, #128	; 0x80
 800674e:	4013      	ands	r3, r2
 8006750:	2b80      	cmp	r3, #128	; 0x80
 8006752:	d10f      	bne.n	8006774 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	4013      	ands	r3, r2
 800675e:	2b80      	cmp	r3, #128	; 0x80
 8006760:	d108      	bne.n	8006774 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2281      	movs	r2, #129	; 0x81
 8006768:	4252      	negs	r2, r2
 800676a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	0018      	movs	r0, r3
 8006770:	f000 fd8c 	bl	800728c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2240      	movs	r2, #64	; 0x40
 800677c:	4013      	ands	r3, r2
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d10f      	bne.n	80067a2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2240      	movs	r2, #64	; 0x40
 800678a:	4013      	ands	r3, r2
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d108      	bne.n	80067a2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2241      	movs	r2, #65	; 0x41
 8006796:	4252      	negs	r2, r2
 8006798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0018      	movs	r0, r3
 800679e:	f000 f9cd 	bl	8006b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2220      	movs	r2, #32
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d10f      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d108      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2221      	movs	r2, #33	; 0x21
 80067c4:	4252      	negs	r2, r2
 80067c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	0018      	movs	r0, r3
 80067cc:	f000 fd56 	bl	800727c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067d0:	46c0      	nop			; (mov r8, r8)
 80067d2:	46bd      	mov	sp, r7
 80067d4:	b002      	add	sp, #8
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e4:	2317      	movs	r3, #23
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	223c      	movs	r2, #60	; 0x3c
 80067f0:	5c9b      	ldrb	r3, [r3, r2]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x22>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e0ad      	b.n	8006956 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	223c      	movs	r2, #60	; 0x3c
 80067fe:	2101      	movs	r1, #1
 8006800:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b0c      	cmp	r3, #12
 8006806:	d100      	bne.n	800680a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006808:	e076      	b.n	80068f8 <HAL_TIM_PWM_ConfigChannel+0x120>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b0c      	cmp	r3, #12
 800680e:	d900      	bls.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006810:	e095      	b.n	800693e <HAL_TIM_PWM_ConfigChannel+0x166>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b08      	cmp	r3, #8
 8006816:	d04e      	beq.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b08      	cmp	r3, #8
 800681c:	d900      	bls.n	8006820 <HAL_TIM_PWM_ConfigChannel+0x48>
 800681e:	e08e      	b.n	800693e <HAL_TIM_PWM_ConfigChannel+0x166>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_TIM_PWM_ConfigChannel+0x56>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b04      	cmp	r3, #4
 800682a:	d021      	beq.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x98>
 800682c:	e087      	b.n	800693e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	0011      	movs	r1, r2
 8006836:	0018      	movs	r0, r3
 8006838:	f000 fa08 	bl	8006c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699a      	ldr	r2, [r3, #24]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2108      	movs	r1, #8
 8006848:	430a      	orrs	r2, r1
 800684a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2104      	movs	r1, #4
 8006858:	438a      	bics	r2, r1
 800685a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6999      	ldr	r1, [r3, #24]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	619a      	str	r2, [r3, #24]
      break;
 800686e:	e06b      	b.n	8006948 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	0011      	movs	r1, r2
 8006878:	0018      	movs	r0, r3
 800687a:	f000 fa6f 	bl	8006d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	0109      	lsls	r1, r1, #4
 800688c:	430a      	orrs	r2, r1
 800688e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4931      	ldr	r1, [pc, #196]	; (8006960 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800689c:	400a      	ands	r2, r1
 800689e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6999      	ldr	r1, [r3, #24]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	021a      	lsls	r2, r3, #8
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	619a      	str	r2, [r3, #24]
      break;
 80068b4:	e048      	b.n	8006948 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	0011      	movs	r1, r2
 80068be:	0018      	movs	r0, r3
 80068c0:	f000 fad0 	bl	8006e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69da      	ldr	r2, [r3, #28]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2108      	movs	r1, #8
 80068d0:	430a      	orrs	r2, r1
 80068d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69da      	ldr	r2, [r3, #28]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2104      	movs	r1, #4
 80068e0:	438a      	bics	r2, r1
 80068e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69d9      	ldr	r1, [r3, #28]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	61da      	str	r2, [r3, #28]
      break;
 80068f6:	e027      	b.n	8006948 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	0011      	movs	r1, r2
 8006900:	0018      	movs	r0, r3
 8006902:	f000 fb35 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2180      	movs	r1, #128	; 0x80
 8006912:	0109      	lsls	r1, r1, #4
 8006914:	430a      	orrs	r2, r1
 8006916:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	69da      	ldr	r2, [r3, #28]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	490f      	ldr	r1, [pc, #60]	; (8006960 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006924:	400a      	ands	r2, r1
 8006926:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69d9      	ldr	r1, [r3, #28]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	021a      	lsls	r2, r3, #8
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	61da      	str	r2, [r3, #28]
      break;
 800693c:	e004      	b.n	8006948 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800693e:	2317      	movs	r3, #23
 8006940:	18fb      	adds	r3, r7, r3
 8006942:	2201      	movs	r2, #1
 8006944:	701a      	strb	r2, [r3, #0]
      break;
 8006946:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	223c      	movs	r2, #60	; 0x3c
 800694c:	2100      	movs	r1, #0
 800694e:	5499      	strb	r1, [r3, r2]

  return status;
 8006950:	2317      	movs	r3, #23
 8006952:	18fb      	adds	r3, r7, r3
 8006954:	781b      	ldrb	r3, [r3, #0]
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b006      	add	sp, #24
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	fffffbff 	.word	0xfffffbff

08006964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800696e:	230f      	movs	r3, #15
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	223c      	movs	r2, #60	; 0x3c
 800697a:	5c9b      	ldrb	r3, [r3, r2]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_TIM_ConfigClockSource+0x20>
 8006980:	2302      	movs	r3, #2
 8006982:	e0bc      	b.n	8006afe <HAL_TIM_ConfigClockSource+0x19a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	223c      	movs	r2, #60	; 0x3c
 8006988:	2101      	movs	r1, #1
 800698a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	223d      	movs	r2, #61	; 0x3d
 8006990:	2102      	movs	r1, #2
 8006992:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2277      	movs	r2, #119	; 0x77
 80069a0:	4393      	bics	r3, r2
 80069a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4a58      	ldr	r2, [pc, #352]	; (8006b08 <HAL_TIM_ConfigClockSource+0x1a4>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2280      	movs	r2, #128	; 0x80
 80069ba:	0192      	lsls	r2, r2, #6
 80069bc:	4293      	cmp	r3, r2
 80069be:	d040      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0xde>
 80069c0:	2280      	movs	r2, #128	; 0x80
 80069c2:	0192      	lsls	r2, r2, #6
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d900      	bls.n	80069ca <HAL_TIM_ConfigClockSource+0x66>
 80069c8:	e088      	b.n	8006adc <HAL_TIM_ConfigClockSource+0x178>
 80069ca:	2280      	movs	r2, #128	; 0x80
 80069cc:	0152      	lsls	r2, r2, #5
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d100      	bne.n	80069d4 <HAL_TIM_ConfigClockSource+0x70>
 80069d2:	e088      	b.n	8006ae6 <HAL_TIM_ConfigClockSource+0x182>
 80069d4:	2280      	movs	r2, #128	; 0x80
 80069d6:	0152      	lsls	r2, r2, #5
 80069d8:	4293      	cmp	r3, r2
 80069da:	d900      	bls.n	80069de <HAL_TIM_ConfigClockSource+0x7a>
 80069dc:	e07e      	b.n	8006adc <HAL_TIM_ConfigClockSource+0x178>
 80069de:	2b70      	cmp	r3, #112	; 0x70
 80069e0:	d018      	beq.n	8006a14 <HAL_TIM_ConfigClockSource+0xb0>
 80069e2:	d900      	bls.n	80069e6 <HAL_TIM_ConfigClockSource+0x82>
 80069e4:	e07a      	b.n	8006adc <HAL_TIM_ConfigClockSource+0x178>
 80069e6:	2b60      	cmp	r3, #96	; 0x60
 80069e8:	d04f      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x126>
 80069ea:	d900      	bls.n	80069ee <HAL_TIM_ConfigClockSource+0x8a>
 80069ec:	e076      	b.n	8006adc <HAL_TIM_ConfigClockSource+0x178>
 80069ee:	2b50      	cmp	r3, #80	; 0x50
 80069f0:	d03b      	beq.n	8006a6a <HAL_TIM_ConfigClockSource+0x106>
 80069f2:	d900      	bls.n	80069f6 <HAL_TIM_ConfigClockSource+0x92>
 80069f4:	e072      	b.n	8006adc <HAL_TIM_ConfigClockSource+0x178>
 80069f6:	2b40      	cmp	r3, #64	; 0x40
 80069f8:	d057      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x146>
 80069fa:	d900      	bls.n	80069fe <HAL_TIM_ConfigClockSource+0x9a>
 80069fc:	e06e      	b.n	8006adc <HAL_TIM_ConfigClockSource+0x178>
 80069fe:	2b30      	cmp	r3, #48	; 0x30
 8006a00:	d063      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x166>
 8006a02:	d86b      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x178>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d060      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x166>
 8006a08:	d868      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x178>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d05d      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x166>
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d05b      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x166>
 8006a12:	e063      	b.n	8006adc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a24:	f000 fb88 	bl	8007138 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2277      	movs	r2, #119	; 0x77
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	609a      	str	r2, [r3, #8]
      break;
 8006a40:	e052      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a52:	f000 fb71 	bl	8007138 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2180      	movs	r1, #128	; 0x80
 8006a62:	01c9      	lsls	r1, r1, #7
 8006a64:	430a      	orrs	r2, r1
 8006a66:	609a      	str	r2, [r3, #8]
      break;
 8006a68:	e03e      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a76:	001a      	movs	r2, r3
 8006a78:	f000 fae4 	bl	8007044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2150      	movs	r1, #80	; 0x50
 8006a82:	0018      	movs	r0, r3
 8006a84:	f000 fb3e 	bl	8007104 <TIM_ITRx_SetConfig>
      break;
 8006a88:	e02e      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a96:	001a      	movs	r2, r3
 8006a98:	f000 fb02 	bl	80070a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2160      	movs	r1, #96	; 0x60
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f000 fb2e 	bl	8007104 <TIM_ITRx_SetConfig>
      break;
 8006aa8:	e01e      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	f000 fac4 	bl	8007044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2140      	movs	r1, #64	; 0x40
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f000 fb1e 	bl	8007104 <TIM_ITRx_SetConfig>
      break;
 8006ac8:	e00e      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	0019      	movs	r1, r3
 8006ad4:	0010      	movs	r0, r2
 8006ad6:	f000 fb15 	bl	8007104 <TIM_ITRx_SetConfig>
      break;
 8006ada:	e005      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006adc:	230f      	movs	r3, #15
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	701a      	strb	r2, [r3, #0]
      break;
 8006ae4:	e000      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006ae6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	223d      	movs	r2, #61	; 0x3d
 8006aec:	2101      	movs	r1, #1
 8006aee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	223c      	movs	r2, #60	; 0x3c
 8006af4:	2100      	movs	r1, #0
 8006af6:	5499      	strb	r1, [r3, r2]

  return status;
 8006af8:	230f      	movs	r3, #15
 8006afa:	18fb      	adds	r3, r7, r3
 8006afc:	781b      	ldrb	r3, [r3, #0]
}
 8006afe:	0018      	movs	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b004      	add	sp, #16
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	ffff00ff 	.word	0xffff00ff

08006b0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b002      	add	sp, #8
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b24:	46c0      	nop			; (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b002      	add	sp, #8
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b44:	46c0      	nop			; (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a34      	ldr	r2, [pc, #208]	; (8006c30 <TIM_Base_SetConfig+0xe4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d008      	beq.n	8006b76 <TIM_Base_SetConfig+0x2a>
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	2380      	movs	r3, #128	; 0x80
 8006b68:	05db      	lsls	r3, r3, #23
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d003      	beq.n	8006b76 <TIM_Base_SetConfig+0x2a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a30      	ldr	r2, [pc, #192]	; (8006c34 <TIM_Base_SetConfig+0xe8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d108      	bne.n	8006b88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2270      	movs	r2, #112	; 0x70
 8006b7a:	4393      	bics	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a29      	ldr	r2, [pc, #164]	; (8006c30 <TIM_Base_SetConfig+0xe4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d018      	beq.n	8006bc2 <TIM_Base_SetConfig+0x76>
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	2380      	movs	r3, #128	; 0x80
 8006b94:	05db      	lsls	r3, r3, #23
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d013      	beq.n	8006bc2 <TIM_Base_SetConfig+0x76>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a25      	ldr	r2, [pc, #148]	; (8006c34 <TIM_Base_SetConfig+0xe8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00f      	beq.n	8006bc2 <TIM_Base_SetConfig+0x76>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a24      	ldr	r2, [pc, #144]	; (8006c38 <TIM_Base_SetConfig+0xec>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00b      	beq.n	8006bc2 <TIM_Base_SetConfig+0x76>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a23      	ldr	r2, [pc, #140]	; (8006c3c <TIM_Base_SetConfig+0xf0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d007      	beq.n	8006bc2 <TIM_Base_SetConfig+0x76>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a22      	ldr	r2, [pc, #136]	; (8006c40 <TIM_Base_SetConfig+0xf4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d003      	beq.n	8006bc2 <TIM_Base_SetConfig+0x76>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <TIM_Base_SetConfig+0xf8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d108      	bne.n	8006bd4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4a20      	ldr	r2, [pc, #128]	; (8006c48 <TIM_Base_SetConfig+0xfc>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2280      	movs	r2, #128	; 0x80
 8006bd8:	4393      	bics	r3, r2
 8006bda:	001a      	movs	r2, r3
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <TIM_Base_SetConfig+0xe4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00b      	beq.n	8006c1a <TIM_Base_SetConfig+0xce>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <TIM_Base_SetConfig+0xf0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d007      	beq.n	8006c1a <TIM_Base_SetConfig+0xce>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a0c      	ldr	r2, [pc, #48]	; (8006c40 <TIM_Base_SetConfig+0xf4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_Base_SetConfig+0xce>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a0b      	ldr	r2, [pc, #44]	; (8006c44 <TIM_Base_SetConfig+0xf8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d103      	bne.n	8006c22 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	615a      	str	r2, [r3, #20]
}
 8006c28:	46c0      	nop			; (mov r8, r8)
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b004      	add	sp, #16
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40002000 	.word	0x40002000
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800
 8006c48:	fffffcff 	.word	0xfffffcff

08006c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	4393      	bics	r3, r2
 8006c5e:	001a      	movs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2270      	movs	r2, #112	; 0x70
 8006c7a:	4393      	bics	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2203      	movs	r2, #3
 8006c82:	4393      	bics	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2202      	movs	r2, #2
 8006c94:	4393      	bics	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a27      	ldr	r2, [pc, #156]	; (8006d44 <TIM_OC1_SetConfig+0xf8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00b      	beq.n	8006cc2 <TIM_OC1_SetConfig+0x76>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a26      	ldr	r2, [pc, #152]	; (8006d48 <TIM_OC1_SetConfig+0xfc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d007      	beq.n	8006cc2 <TIM_OC1_SetConfig+0x76>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a25      	ldr	r2, [pc, #148]	; (8006d4c <TIM_OC1_SetConfig+0x100>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <TIM_OC1_SetConfig+0x76>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a24      	ldr	r2, [pc, #144]	; (8006d50 <TIM_OC1_SetConfig+0x104>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10c      	bne.n	8006cdc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	4393      	bics	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	4393      	bics	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a19      	ldr	r2, [pc, #100]	; (8006d44 <TIM_OC1_SetConfig+0xf8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00b      	beq.n	8006cfc <TIM_OC1_SetConfig+0xb0>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <TIM_OC1_SetConfig+0xfc>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d007      	beq.n	8006cfc <TIM_OC1_SetConfig+0xb0>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a17      	ldr	r2, [pc, #92]	; (8006d4c <TIM_OC1_SetConfig+0x100>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_OC1_SetConfig+0xb0>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a16      	ldr	r2, [pc, #88]	; (8006d50 <TIM_OC1_SetConfig+0x104>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d111      	bne.n	8006d20 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <TIM_OC1_SetConfig+0x108>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <TIM_OC1_SetConfig+0x10c>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	b006      	add	sp, #24
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	40012c00 	.word	0x40012c00
 8006d48:	40014000 	.word	0x40014000
 8006d4c:	40014400 	.word	0x40014400
 8006d50:	40014800 	.word	0x40014800
 8006d54:	fffffeff 	.word	0xfffffeff
 8006d58:	fffffdff 	.word	0xfffffdff

08006d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	4393      	bics	r3, r2
 8006d6e:	001a      	movs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4a2e      	ldr	r2, [pc, #184]	; (8006e44 <TIM_OC2_SetConfig+0xe8>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4a2d      	ldr	r2, [pc, #180]	; (8006e48 <TIM_OC2_SetConfig+0xec>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2220      	movs	r2, #32
 8006da6:	4393      	bics	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a24      	ldr	r2, [pc, #144]	; (8006e4c <TIM_OC2_SetConfig+0xf0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d10d      	bne.n	8006dda <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2280      	movs	r2, #128	; 0x80
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2240      	movs	r2, #64	; 0x40
 8006dd6:	4393      	bics	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <TIM_OC2_SetConfig+0xf0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00b      	beq.n	8006dfa <TIM_OC2_SetConfig+0x9e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <TIM_OC2_SetConfig+0xf4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d007      	beq.n	8006dfa <TIM_OC2_SetConfig+0x9e>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <TIM_OC2_SetConfig+0xf8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC2_SetConfig+0x9e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <TIM_OC2_SetConfig+0xfc>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d113      	bne.n	8006e22 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	4a17      	ldr	r2, [pc, #92]	; (8006e5c <TIM_OC2_SetConfig+0x100>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	4a16      	ldr	r2, [pc, #88]	; (8006e60 <TIM_OC2_SetConfig+0x104>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	46c0      	nop			; (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b006      	add	sp, #24
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	ffff8fff 	.word	0xffff8fff
 8006e48:	fffffcff 	.word	0xfffffcff
 8006e4c:	40012c00 	.word	0x40012c00
 8006e50:	40014000 	.word	0x40014000
 8006e54:	40014400 	.word	0x40014400
 8006e58:	40014800 	.word	0x40014800
 8006e5c:	fffffbff 	.word	0xfffffbff
 8006e60:	fffff7ff 	.word	0xfffff7ff

08006e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	4a35      	ldr	r2, [pc, #212]	; (8006f48 <TIM_OC3_SetConfig+0xe4>)
 8006e74:	401a      	ands	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2270      	movs	r2, #112	; 0x70
 8006e90:	4393      	bics	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2203      	movs	r2, #3
 8006e98:	4393      	bics	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	4a28      	ldr	r2, [pc, #160]	; (8006f4c <TIM_OC3_SetConfig+0xe8>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a24      	ldr	r2, [pc, #144]	; (8006f50 <TIM_OC3_SetConfig+0xec>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10d      	bne.n	8006ede <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	4a23      	ldr	r2, [pc, #140]	; (8006f54 <TIM_OC3_SetConfig+0xf0>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	4a1f      	ldr	r2, [pc, #124]	; (8006f58 <TIM_OC3_SetConfig+0xf4>)
 8006eda:	4013      	ands	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <TIM_OC3_SetConfig+0xec>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00b      	beq.n	8006efe <TIM_OC3_SetConfig+0x9a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a1c      	ldr	r2, [pc, #112]	; (8006f5c <TIM_OC3_SetConfig+0xf8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d007      	beq.n	8006efe <TIM_OC3_SetConfig+0x9a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <TIM_OC3_SetConfig+0xfc>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_OC3_SetConfig+0x9a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <TIM_OC3_SetConfig+0x100>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d113      	bne.n	8006f26 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <TIM_OC3_SetConfig+0x104>)
 8006f02:	4013      	ands	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <TIM_OC3_SetConfig+0x108>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	621a      	str	r2, [r3, #32]
}
 8006f40:	46c0      	nop			; (mov r8, r8)
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b006      	add	sp, #24
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	fffffeff 	.word	0xfffffeff
 8006f4c:	fffffdff 	.word	0xfffffdff
 8006f50:	40012c00 	.word	0x40012c00
 8006f54:	fffff7ff 	.word	0xfffff7ff
 8006f58:	fffffbff 	.word	0xfffffbff
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800
 8006f68:	ffffefff 	.word	0xffffefff
 8006f6c:	ffffdfff 	.word	0xffffdfff

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	4a28      	ldr	r2, [pc, #160]	; (8007020 <TIM_OC4_SetConfig+0xb0>)
 8006f80:	401a      	ands	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4a22      	ldr	r2, [pc, #136]	; (8007024 <TIM_OC4_SetConfig+0xb4>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4a21      	ldr	r2, [pc, #132]	; (8007028 <TIM_OC4_SetConfig+0xb8>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	4a1d      	ldr	r2, [pc, #116]	; (800702c <TIM_OC4_SetConfig+0xbc>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	031b      	lsls	r3, r3, #12
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a19      	ldr	r2, [pc, #100]	; (8007030 <TIM_OC4_SetConfig+0xc0>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00b      	beq.n	8006fe8 <TIM_OC4_SetConfig+0x78>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a18      	ldr	r2, [pc, #96]	; (8007034 <TIM_OC4_SetConfig+0xc4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d007      	beq.n	8006fe8 <TIM_OC4_SetConfig+0x78>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <TIM_OC4_SetConfig+0xc8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC4_SetConfig+0x78>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a16      	ldr	r2, [pc, #88]	; (800703c <TIM_OC4_SetConfig+0xcc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d109      	bne.n	8006ffc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	4a15      	ldr	r2, [pc, #84]	; (8007040 <TIM_OC4_SetConfig+0xd0>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	019b      	lsls	r3, r3, #6
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	46bd      	mov	sp, r7
 800701a:	b006      	add	sp, #24
 800701c:	bd80      	pop	{r7, pc}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	ffffefff 	.word	0xffffefff
 8007024:	ffff8fff 	.word	0xffff8fff
 8007028:	fffffcff 	.word	0xfffffcff
 800702c:	ffffdfff 	.word	0xffffdfff
 8007030:	40012c00 	.word	0x40012c00
 8007034:	40014000 	.word	0x40014000
 8007038:	40014400 	.word	0x40014400
 800703c:	40014800 	.word	0x40014800
 8007040:	ffffbfff 	.word	0xffffbfff

08007044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	2201      	movs	r2, #1
 800705c:	4393      	bics	r3, r2
 800705e:	001a      	movs	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	22f0      	movs	r2, #240	; 0xf0
 800706e:	4393      	bics	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	220a      	movs	r2, #10
 8007080:	4393      	bics	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	621a      	str	r2, [r3, #32]
}
 8007098:	46c0      	nop			; (mov r8, r8)
 800709a:	46bd      	mov	sp, r7
 800709c:	b006      	add	sp, #24
 800709e:	bd80      	pop	{r7, pc}

080070a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	2210      	movs	r2, #16
 80070b2:	4393      	bics	r3, r2
 80070b4:	001a      	movs	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	4a0d      	ldr	r2, [pc, #52]	; (8007100 <TIM_TI2_ConfigInputStage+0x60>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	031b      	lsls	r3, r3, #12
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	22a0      	movs	r2, #160	; 0xa0
 80070dc:	4393      	bics	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	621a      	str	r2, [r3, #32]
}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	46bd      	mov	sp, r7
 80070fa:	b006      	add	sp, #24
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	ffff0fff 	.word	0xffff0fff

08007104 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2270      	movs	r2, #112	; 0x70
 8007118:	4393      	bics	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	2207      	movs	r2, #7
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	609a      	str	r2, [r3, #8]
}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	46bd      	mov	sp, r7
 8007132:	b004      	add	sp, #16
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	4a09      	ldr	r2, [pc, #36]	; (8007174 <TIM_ETR_SetConfig+0x3c>)
 8007150:	4013      	ands	r3, r2
 8007152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	021a      	lsls	r2, r3, #8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	431a      	orrs	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4313      	orrs	r3, r2
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	609a      	str	r2, [r3, #8]
}
 800716c:	46c0      	nop			; (mov r8, r8)
 800716e:	46bd      	mov	sp, r7
 8007170:	b006      	add	sp, #24
 8007172:	bd80      	pop	{r7, pc}
 8007174:	ffff00ff 	.word	0xffff00ff

08007178 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	221f      	movs	r2, #31
 8007188:	4013      	ands	r3, r2
 800718a:	2201      	movs	r2, #1
 800718c:	409a      	lsls	r2, r3
 800718e:	0013      	movs	r3, r2
 8007190:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	43d2      	mvns	r2, r2
 800719a:	401a      	ands	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a1a      	ldr	r2, [r3, #32]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	211f      	movs	r1, #31
 80071a8:	400b      	ands	r3, r1
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	4099      	lsls	r1, r3
 80071ae:	000b      	movs	r3, r1
 80071b0:	431a      	orrs	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b006      	add	sp, #24
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	223c      	movs	r2, #60	; 0x3c
 80071ce:	5c9b      	ldrb	r3, [r3, r2]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e047      	b.n	8007268 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	223c      	movs	r2, #60	; 0x3c
 80071dc:	2101      	movs	r1, #1
 80071de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	223d      	movs	r2, #61	; 0x3d
 80071e4:	2102      	movs	r1, #2
 80071e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2270      	movs	r2, #112	; 0x70
 80071fc:	4393      	bics	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a16      	ldr	r2, [pc, #88]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00f      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	2380      	movs	r3, #128	; 0x80
 8007222:	05db      	lsls	r3, r3, #23
 8007224:	429a      	cmp	r2, r3
 8007226:	d009      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a11      	ldr	r2, [pc, #68]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d004      	beq.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a10      	ldr	r2, [pc, #64]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d10c      	bne.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2280      	movs	r2, #128	; 0x80
 8007240:	4393      	bics	r3, r2
 8007242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	4313      	orrs	r3, r2
 800724c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	223d      	movs	r2, #61	; 0x3d
 800725a:	2101      	movs	r1, #1
 800725c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	223c      	movs	r2, #60	; 0x3c
 8007262:	2100      	movs	r1, #0
 8007264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b004      	add	sp, #16
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40012c00 	.word	0x40012c00
 8007274:	40000400 	.word	0x40000400
 8007278:	40014000 	.word	0x40014000

0800727c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007284:	46c0      	nop			; (mov r8, r8)
 8007286:	46bd      	mov	sp, r7
 8007288:	b002      	add	sp, #8
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007294:	46c0      	nop			; (mov r8, r8)
 8007296:	46bd      	mov	sp, r7
 8007298:	b002      	add	sp, #8
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e044      	b.n	8007338 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d107      	bne.n	80072c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2278      	movs	r2, #120	; 0x78
 80072ba:	2100      	movs	r1, #0
 80072bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	0018      	movs	r0, r3
 80072c2:	f7fb fdcd 	bl	8002e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2224      	movs	r2, #36	; 0x24
 80072ca:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2101      	movs	r1, #1
 80072d8:	438a      	bics	r2, r1
 80072da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	0018      	movs	r0, r3
 80072e0:	f000 fb2c 	bl	800793c <UART_SetConfig>
 80072e4:	0003      	movs	r3, r0
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e024      	b.n	8007338 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	0018      	movs	r0, r3
 80072fa:	f000 fd07 	bl	8007d0c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	490d      	ldr	r1, [pc, #52]	; (8007340 <HAL_UART_Init+0xa4>)
 800730a:	400a      	ands	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	212a      	movs	r1, #42	; 0x2a
 800731a:	438a      	bics	r2, r1
 800731c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2101      	movs	r1, #1
 800732a:	430a      	orrs	r2, r1
 800732c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	0018      	movs	r0, r3
 8007332:	f000 fd9f 	bl	8007e74 <UART_CheckIdleState>
 8007336:	0003      	movs	r3, r0
}
 8007338:	0018      	movs	r0, r3
 800733a:	46bd      	mov	sp, r7
 800733c:	b002      	add	sp, #8
 800733e:	bd80      	pop	{r7, pc}
 8007340:	ffffb7ff 	.word	0xffffb7ff

08007344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007344:	b590      	push	{r4, r7, lr}
 8007346:	b0ab      	sub	sp, #172	; 0xac
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	22a4      	movs	r2, #164	; 0xa4
 8007354:	18b9      	adds	r1, r7, r2
 8007356:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	20a0      	movs	r0, #160	; 0xa0
 8007360:	1839      	adds	r1, r7, r0
 8007362:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	219c      	movs	r1, #156	; 0x9c
 800736c:	1879      	adds	r1, r7, r1
 800736e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007370:	0011      	movs	r1, r2
 8007372:	18bb      	adds	r3, r7, r2
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a99      	ldr	r2, [pc, #612]	; (80075dc <HAL_UART_IRQHandler+0x298>)
 8007378:	4013      	ands	r3, r2
 800737a:	2298      	movs	r2, #152	; 0x98
 800737c:	18bc      	adds	r4, r7, r2
 800737e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007380:	18bb      	adds	r3, r7, r2
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d114      	bne.n	80073b2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007388:	187b      	adds	r3, r7, r1
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2220      	movs	r2, #32
 800738e:	4013      	ands	r3, r2
 8007390:	d00f      	beq.n	80073b2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007392:	183b      	adds	r3, r7, r0
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2220      	movs	r2, #32
 8007398:	4013      	ands	r3, r2
 800739a:	d00a      	beq.n	80073b2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d100      	bne.n	80073a6 <HAL_UART_IRQHandler+0x62>
 80073a4:	e29e      	b.n	80078e4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	0010      	movs	r0, r2
 80073ae:	4798      	blx	r3
      }
      return;
 80073b0:	e298      	b.n	80078e4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073b2:	2398      	movs	r3, #152	; 0x98
 80073b4:	18fb      	adds	r3, r7, r3
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d100      	bne.n	80073be <HAL_UART_IRQHandler+0x7a>
 80073bc:	e114      	b.n	80075e8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80073be:	239c      	movs	r3, #156	; 0x9c
 80073c0:	18fb      	adds	r3, r7, r3
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2201      	movs	r2, #1
 80073c6:	4013      	ands	r3, r2
 80073c8:	d106      	bne.n	80073d8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80073ca:	23a0      	movs	r3, #160	; 0xa0
 80073cc:	18fb      	adds	r3, r7, r3
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a83      	ldr	r2, [pc, #524]	; (80075e0 <HAL_UART_IRQHandler+0x29c>)
 80073d2:	4013      	ands	r3, r2
 80073d4:	d100      	bne.n	80073d8 <HAL_UART_IRQHandler+0x94>
 80073d6:	e107      	b.n	80075e8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073d8:	23a4      	movs	r3, #164	; 0xa4
 80073da:	18fb      	adds	r3, r7, r3
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2201      	movs	r2, #1
 80073e0:	4013      	ands	r3, r2
 80073e2:	d012      	beq.n	800740a <HAL_UART_IRQHandler+0xc6>
 80073e4:	23a0      	movs	r3, #160	; 0xa0
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	2380      	movs	r3, #128	; 0x80
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	4013      	ands	r3, r2
 80073f0:	d00b      	beq.n	800740a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2201      	movs	r2, #1
 80073f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2284      	movs	r2, #132	; 0x84
 80073fe:	589b      	ldr	r3, [r3, r2]
 8007400:	2201      	movs	r2, #1
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2184      	movs	r1, #132	; 0x84
 8007408:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800740a:	23a4      	movs	r3, #164	; 0xa4
 800740c:	18fb      	adds	r3, r7, r3
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2202      	movs	r2, #2
 8007412:	4013      	ands	r3, r2
 8007414:	d011      	beq.n	800743a <HAL_UART_IRQHandler+0xf6>
 8007416:	239c      	movs	r3, #156	; 0x9c
 8007418:	18fb      	adds	r3, r7, r3
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2201      	movs	r2, #1
 800741e:	4013      	ands	r3, r2
 8007420:	d00b      	beq.n	800743a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2202      	movs	r2, #2
 8007428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2284      	movs	r2, #132	; 0x84
 800742e:	589b      	ldr	r3, [r3, r2]
 8007430:	2204      	movs	r2, #4
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2184      	movs	r1, #132	; 0x84
 8007438:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800743a:	23a4      	movs	r3, #164	; 0xa4
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2204      	movs	r2, #4
 8007442:	4013      	ands	r3, r2
 8007444:	d011      	beq.n	800746a <HAL_UART_IRQHandler+0x126>
 8007446:	239c      	movs	r3, #156	; 0x9c
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2201      	movs	r2, #1
 800744e:	4013      	ands	r3, r2
 8007450:	d00b      	beq.n	800746a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2204      	movs	r2, #4
 8007458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2284      	movs	r2, #132	; 0x84
 800745e:	589b      	ldr	r3, [r3, r2]
 8007460:	2202      	movs	r2, #2
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2184      	movs	r1, #132	; 0x84
 8007468:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800746a:	23a4      	movs	r3, #164	; 0xa4
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2208      	movs	r2, #8
 8007472:	4013      	ands	r3, r2
 8007474:	d017      	beq.n	80074a6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007476:	23a0      	movs	r3, #160	; 0xa0
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2220      	movs	r2, #32
 800747e:	4013      	ands	r3, r2
 8007480:	d105      	bne.n	800748e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007482:	239c      	movs	r3, #156	; 0x9c
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2201      	movs	r2, #1
 800748a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800748c:	d00b      	beq.n	80074a6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2208      	movs	r2, #8
 8007494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2284      	movs	r2, #132	; 0x84
 800749a:	589b      	ldr	r3, [r3, r2]
 800749c:	2208      	movs	r2, #8
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2184      	movs	r1, #132	; 0x84
 80074a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074a6:	23a4      	movs	r3, #164	; 0xa4
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	2380      	movs	r3, #128	; 0x80
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	4013      	ands	r3, r2
 80074b2:	d013      	beq.n	80074dc <HAL_UART_IRQHandler+0x198>
 80074b4:	23a0      	movs	r3, #160	; 0xa0
 80074b6:	18fb      	adds	r3, r7, r3
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	2380      	movs	r3, #128	; 0x80
 80074bc:	04db      	lsls	r3, r3, #19
 80074be:	4013      	ands	r3, r2
 80074c0:	d00c      	beq.n	80074dc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2280      	movs	r2, #128	; 0x80
 80074c8:	0112      	lsls	r2, r2, #4
 80074ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2284      	movs	r2, #132	; 0x84
 80074d0:	589b      	ldr	r3, [r3, r2]
 80074d2:	2220      	movs	r2, #32
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2184      	movs	r1, #132	; 0x84
 80074da:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2284      	movs	r2, #132	; 0x84
 80074e0:	589b      	ldr	r3, [r3, r2]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d100      	bne.n	80074e8 <HAL_UART_IRQHandler+0x1a4>
 80074e6:	e1ff      	b.n	80078e8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80074e8:	23a4      	movs	r3, #164	; 0xa4
 80074ea:	18fb      	adds	r3, r7, r3
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2220      	movs	r2, #32
 80074f0:	4013      	ands	r3, r2
 80074f2:	d00e      	beq.n	8007512 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074f4:	23a0      	movs	r3, #160	; 0xa0
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2220      	movs	r2, #32
 80074fc:	4013      	ands	r3, r2
 80074fe:	d008      	beq.n	8007512 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007504:	2b00      	cmp	r3, #0
 8007506:	d004      	beq.n	8007512 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	0010      	movs	r0, r2
 8007510:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2284      	movs	r2, #132	; 0x84
 8007516:	589b      	ldr	r3, [r3, r2]
 8007518:	2194      	movs	r1, #148	; 0x94
 800751a:	187a      	adds	r2, r7, r1
 800751c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2240      	movs	r2, #64	; 0x40
 8007526:	4013      	ands	r3, r2
 8007528:	2b40      	cmp	r3, #64	; 0x40
 800752a:	d004      	beq.n	8007536 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800752c:	187b      	adds	r3, r7, r1
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2228      	movs	r2, #40	; 0x28
 8007532:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007534:	d047      	beq.n	80075c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	0018      	movs	r0, r3
 800753a:	f000 fdad 	bl	8008098 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	2240      	movs	r2, #64	; 0x40
 8007546:	4013      	ands	r3, r2
 8007548:	2b40      	cmp	r3, #64	; 0x40
 800754a:	d137      	bne.n	80075bc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754c:	f3ef 8310 	mrs	r3, PRIMASK
 8007550:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007554:	2090      	movs	r0, #144	; 0x90
 8007556:	183a      	adds	r2, r7, r0
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	2301      	movs	r3, #1
 800755c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007560:	f383 8810 	msr	PRIMASK, r3
}
 8007564:	46c0      	nop			; (mov r8, r8)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2140      	movs	r1, #64	; 0x40
 8007572:	438a      	bics	r2, r1
 8007574:	609a      	str	r2, [r3, #8]
 8007576:	183b      	adds	r3, r7, r0
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800757c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800757e:	f383 8810 	msr	PRIMASK, r3
}
 8007582:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007588:	2b00      	cmp	r3, #0
 800758a:	d012      	beq.n	80075b2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007590:	4a14      	ldr	r2, [pc, #80]	; (80075e4 <HAL_UART_IRQHandler+0x2a0>)
 8007592:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007598:	0018      	movs	r0, r3
 800759a:	f7fc f817 	bl	80035cc <HAL_DMA_Abort_IT>
 800759e:	1e03      	subs	r3, r0, #0
 80075a0:	d01a      	beq.n	80075d8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ac:	0018      	movs	r0, r3
 80075ae:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b0:	e012      	b.n	80075d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f000 f9ad 	bl	8007914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ba:	e00d      	b.n	80075d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	0018      	movs	r0, r3
 80075c0:	f000 f9a8 	bl	8007914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c4:	e008      	b.n	80075d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	0018      	movs	r0, r3
 80075ca:	f000 f9a3 	bl	8007914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2284      	movs	r2, #132	; 0x84
 80075d2:	2100      	movs	r1, #0
 80075d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80075d6:	e187      	b.n	80078e8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d8:	46c0      	nop			; (mov r8, r8)
    return;
 80075da:	e185      	b.n	80078e8 <HAL_UART_IRQHandler+0x5a4>
 80075dc:	0000080f 	.word	0x0000080f
 80075e0:	04000120 	.word	0x04000120
 80075e4:	08008161 	.word	0x08008161

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d000      	beq.n	80075f2 <HAL_UART_IRQHandler+0x2ae>
 80075f0:	e139      	b.n	8007866 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075f2:	23a4      	movs	r3, #164	; 0xa4
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2210      	movs	r2, #16
 80075fa:	4013      	ands	r3, r2
 80075fc:	d100      	bne.n	8007600 <HAL_UART_IRQHandler+0x2bc>
 80075fe:	e132      	b.n	8007866 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007600:	23a0      	movs	r3, #160	; 0xa0
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2210      	movs	r2, #16
 8007608:	4013      	ands	r3, r2
 800760a:	d100      	bne.n	800760e <HAL_UART_IRQHandler+0x2ca>
 800760c:	e12b      	b.n	8007866 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2210      	movs	r2, #16
 8007614:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2240      	movs	r2, #64	; 0x40
 800761e:	4013      	ands	r3, r2
 8007620:	2b40      	cmp	r3, #64	; 0x40
 8007622:	d000      	beq.n	8007626 <HAL_UART_IRQHandler+0x2e2>
 8007624:	e09f      	b.n	8007766 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	217e      	movs	r1, #126	; 0x7e
 8007630:	187b      	adds	r3, r7, r1
 8007632:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007634:	187b      	adds	r3, r7, r1
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d100      	bne.n	800763e <HAL_UART_IRQHandler+0x2fa>
 800763c:	e156      	b.n	80078ec <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2258      	movs	r2, #88	; 0x58
 8007642:	5a9b      	ldrh	r3, [r3, r2]
 8007644:	187a      	adds	r2, r7, r1
 8007646:	8812      	ldrh	r2, [r2, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d300      	bcc.n	800764e <HAL_UART_IRQHandler+0x30a>
 800764c:	e14e      	b.n	80078ec <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	187a      	adds	r2, r7, r1
 8007652:	215a      	movs	r1, #90	; 0x5a
 8007654:	8812      	ldrh	r2, [r2, #0]
 8007656:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	2b20      	cmp	r3, #32
 8007660:	d06f      	beq.n	8007742 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007662:	f3ef 8310 	mrs	r3, PRIMASK
 8007666:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800766a:	67bb      	str	r3, [r7, #120]	; 0x78
 800766c:	2301      	movs	r3, #1
 800766e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007672:	f383 8810 	msr	PRIMASK, r3
}
 8007676:	46c0      	nop			; (mov r8, r8)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	499e      	ldr	r1, [pc, #632]	; (80078fc <HAL_UART_IRQHandler+0x5b8>)
 8007684:	400a      	ands	r2, r1
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800768a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	f383 8810 	msr	PRIMASK, r3
}
 8007692:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007694:	f3ef 8310 	mrs	r3, PRIMASK
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769c:	677b      	str	r3, [r7, #116]	; 0x74
 800769e:	2301      	movs	r3, #1
 80076a0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a4:	f383 8810 	msr	PRIMASK, r3
}
 80076a8:	46c0      	nop			; (mov r8, r8)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2101      	movs	r1, #1
 80076b6:	438a      	bics	r2, r1
 80076b8:	609a      	str	r2, [r3, #8]
 80076ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076bc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c0:	f383 8810 	msr	PRIMASK, r3
}
 80076c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c6:	f3ef 8310 	mrs	r3, PRIMASK
 80076ca:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80076cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ce:	673b      	str	r3, [r7, #112]	; 0x70
 80076d0:	2301      	movs	r3, #1
 80076d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d6:	f383 8810 	msr	PRIMASK, r3
}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2140      	movs	r1, #64	; 0x40
 80076e8:	438a      	bics	r2, r1
 80076ea:	609a      	str	r2, [r3, #8]
 80076ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076ee:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f2:	f383 8810 	msr	PRIMASK, r3
}
 80076f6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2280      	movs	r2, #128	; 0x80
 80076fc:	2120      	movs	r1, #32
 80076fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007706:	f3ef 8310 	mrs	r3, PRIMASK
 800770a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800770c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007710:	2301      	movs	r3, #1
 8007712:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007716:	f383 8810 	msr	PRIMASK, r3
}
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2110      	movs	r1, #16
 8007728:	438a      	bics	r2, r1
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007732:	f383 8810 	msr	PRIMASK, r3
}
 8007736:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773c:	0018      	movs	r0, r3
 800773e:	f7fb ff0d 	bl	800355c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2202      	movs	r2, #2
 8007746:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2258      	movs	r2, #88	; 0x58
 800774c:	5a9a      	ldrh	r2, [r3, r2]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	215a      	movs	r1, #90	; 0x5a
 8007752:	5a5b      	ldrh	r3, [r3, r1]
 8007754:	b29b      	uxth	r3, r3
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	0011      	movs	r1, r2
 800775e:	0018      	movs	r0, r3
 8007760:	f000 f8e0 	bl	8007924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007764:	e0c2      	b.n	80078ec <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2258      	movs	r2, #88	; 0x58
 800776a:	5a99      	ldrh	r1, [r3, r2]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	225a      	movs	r2, #90	; 0x5a
 8007770:	5a9b      	ldrh	r3, [r3, r2]
 8007772:	b29a      	uxth	r2, r3
 8007774:	208e      	movs	r0, #142	; 0x8e
 8007776:	183b      	adds	r3, r7, r0
 8007778:	1a8a      	subs	r2, r1, r2
 800777a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	225a      	movs	r2, #90	; 0x5a
 8007780:	5a9b      	ldrh	r3, [r3, r2]
 8007782:	b29b      	uxth	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d100      	bne.n	800778a <HAL_UART_IRQHandler+0x446>
 8007788:	e0b2      	b.n	80078f0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800778a:	183b      	adds	r3, r7, r0
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d100      	bne.n	8007794 <HAL_UART_IRQHandler+0x450>
 8007792:	e0ad      	b.n	80078f0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007794:	f3ef 8310 	mrs	r3, PRIMASK
 8007798:	60fb      	str	r3, [r7, #12]
  return(result);
 800779a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800779c:	2488      	movs	r4, #136	; 0x88
 800779e:	193a      	adds	r2, r7, r4
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	2301      	movs	r3, #1
 80077a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f383 8810 	msr	PRIMASK, r3
}
 80077ac:	46c0      	nop			; (mov r8, r8)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4951      	ldr	r1, [pc, #324]	; (8007900 <HAL_UART_IRQHandler+0x5bc>)
 80077ba:	400a      	ands	r2, r1
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	193b      	adds	r3, r7, r4
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f383 8810 	msr	PRIMASK, r3
}
 80077ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077cc:	f3ef 8310 	mrs	r3, PRIMASK
 80077d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80077d2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d4:	2484      	movs	r4, #132	; 0x84
 80077d6:	193a      	adds	r2, r7, r4
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	2301      	movs	r3, #1
 80077dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f383 8810 	msr	PRIMASK, r3
}
 80077e4:	46c0      	nop			; (mov r8, r8)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2101      	movs	r1, #1
 80077f2:	438a      	bics	r2, r1
 80077f4:	609a      	str	r2, [r3, #8]
 80077f6:	193b      	adds	r3, r7, r4
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	f383 8810 	msr	PRIMASK, r3
}
 8007802:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2280      	movs	r2, #128	; 0x80
 8007808:	2120      	movs	r1, #32
 800780a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007818:	f3ef 8310 	mrs	r3, PRIMASK
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007820:	2480      	movs	r4, #128	; 0x80
 8007822:	193a      	adds	r2, r7, r4
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	2301      	movs	r3, #1
 8007828:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	f383 8810 	msr	PRIMASK, r3
}
 8007830:	46c0      	nop			; (mov r8, r8)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2110      	movs	r1, #16
 800783e:	438a      	bics	r2, r1
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	193b      	adds	r3, r7, r4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	f383 8810 	msr	PRIMASK, r3
}
 800784e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007856:	183b      	adds	r3, r7, r0
 8007858:	881a      	ldrh	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	0011      	movs	r1, r2
 800785e:	0018      	movs	r0, r3
 8007860:	f000 f860 	bl	8007924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007864:	e044      	b.n	80078f0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007866:	23a4      	movs	r3, #164	; 0xa4
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	2380      	movs	r3, #128	; 0x80
 800786e:	035b      	lsls	r3, r3, #13
 8007870:	4013      	ands	r3, r2
 8007872:	d010      	beq.n	8007896 <HAL_UART_IRQHandler+0x552>
 8007874:	239c      	movs	r3, #156	; 0x9c
 8007876:	18fb      	adds	r3, r7, r3
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	2380      	movs	r3, #128	; 0x80
 800787c:	03db      	lsls	r3, r3, #15
 800787e:	4013      	ands	r3, r2
 8007880:	d009      	beq.n	8007896 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2280      	movs	r2, #128	; 0x80
 8007888:	0352      	lsls	r2, r2, #13
 800788a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	0018      	movs	r0, r3
 8007890:	f000 fca8 	bl	80081e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007894:	e02f      	b.n	80078f6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007896:	23a4      	movs	r3, #164	; 0xa4
 8007898:	18fb      	adds	r3, r7, r3
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2280      	movs	r2, #128	; 0x80
 800789e:	4013      	ands	r3, r2
 80078a0:	d00f      	beq.n	80078c2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078a2:	23a0      	movs	r3, #160	; 0xa0
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2280      	movs	r2, #128	; 0x80
 80078aa:	4013      	ands	r3, r2
 80078ac:	d009      	beq.n	80078c2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01e      	beq.n	80078f4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	0010      	movs	r0, r2
 80078be:	4798      	blx	r3
    }
    return;
 80078c0:	e018      	b.n	80078f4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078c2:	23a4      	movs	r3, #164	; 0xa4
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2240      	movs	r2, #64	; 0x40
 80078ca:	4013      	ands	r3, r2
 80078cc:	d013      	beq.n	80078f6 <HAL_UART_IRQHandler+0x5b2>
 80078ce:	23a0      	movs	r3, #160	; 0xa0
 80078d0:	18fb      	adds	r3, r7, r3
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2240      	movs	r2, #64	; 0x40
 80078d6:	4013      	ands	r3, r2
 80078d8:	d00d      	beq.n	80078f6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	0018      	movs	r0, r3
 80078de:	f000 fc56 	bl	800818e <UART_EndTransmit_IT>
    return;
 80078e2:	e008      	b.n	80078f6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	e006      	b.n	80078f6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80078e8:	46c0      	nop			; (mov r8, r8)
 80078ea:	e004      	b.n	80078f6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80078ec:	46c0      	nop			; (mov r8, r8)
 80078ee:	e002      	b.n	80078f6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80078f0:	46c0      	nop			; (mov r8, r8)
 80078f2:	e000      	b.n	80078f6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80078f4:	46c0      	nop			; (mov r8, r8)
  }

}
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b02b      	add	sp, #172	; 0xac
 80078fa:	bd90      	pop	{r4, r7, pc}
 80078fc:	fffffeff 	.word	0xfffffeff
 8007900:	fffffedf 	.word	0xfffffedf

08007904 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	46bd      	mov	sp, r7
 8007910:	b002      	add	sp, #8
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800791c:	46c0      	nop			; (mov r8, r8)
 800791e:	46bd      	mov	sp, r7
 8007920:	b002      	add	sp, #8
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	000a      	movs	r2, r1
 800792e:	1cbb      	adds	r3, r7, #2
 8007930:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	46bd      	mov	sp, r7
 8007936:	b002      	add	sp, #8
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b088      	sub	sp, #32
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007944:	231e      	movs	r3, #30
 8007946:	18fb      	adds	r3, r7, r3
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	431a      	orrs	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4abe      	ldr	r2, [pc, #760]	; (8007c64 <UART_SetConfig+0x328>)
 800796c:	4013      	ands	r3, r2
 800796e:	0019      	movs	r1, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	430a      	orrs	r2, r1
 8007978:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	4ab9      	ldr	r2, [pc, #740]	; (8007c68 <UART_SetConfig+0x32c>)
 8007982:	4013      	ands	r3, r2
 8007984:	0019      	movs	r1, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	4ab0      	ldr	r2, [pc, #704]	; (8007c6c <UART_SetConfig+0x330>)
 80079aa:	4013      	ands	r3, r2
 80079ac:	0019      	movs	r1, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4aac      	ldr	r2, [pc, #688]	; (8007c70 <UART_SetConfig+0x334>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d127      	bne.n	8007a12 <UART_SetConfig+0xd6>
 80079c2:	4bac      	ldr	r3, [pc, #688]	; (8007c74 <UART_SetConfig+0x338>)
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	2203      	movs	r2, #3
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d00d      	beq.n	80079ea <UART_SetConfig+0xae>
 80079ce:	d81b      	bhi.n	8007a08 <UART_SetConfig+0xcc>
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d014      	beq.n	80079fe <UART_SetConfig+0xc2>
 80079d4:	d818      	bhi.n	8007a08 <UART_SetConfig+0xcc>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <UART_SetConfig+0xa4>
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d00a      	beq.n	80079f4 <UART_SetConfig+0xb8>
 80079de:	e013      	b.n	8007a08 <UART_SetConfig+0xcc>
 80079e0:	231f      	movs	r3, #31
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
 80079e8:	e0bd      	b.n	8007b66 <UART_SetConfig+0x22a>
 80079ea:	231f      	movs	r3, #31
 80079ec:	18fb      	adds	r3, r7, r3
 80079ee:	2202      	movs	r2, #2
 80079f0:	701a      	strb	r2, [r3, #0]
 80079f2:	e0b8      	b.n	8007b66 <UART_SetConfig+0x22a>
 80079f4:	231f      	movs	r3, #31
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	2204      	movs	r2, #4
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	e0b3      	b.n	8007b66 <UART_SetConfig+0x22a>
 80079fe:	231f      	movs	r3, #31
 8007a00:	18fb      	adds	r3, r7, r3
 8007a02:	2208      	movs	r2, #8
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e0ae      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007a08:	231f      	movs	r3, #31
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	2210      	movs	r2, #16
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e0a9      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a98      	ldr	r2, [pc, #608]	; (8007c78 <UART_SetConfig+0x33c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d134      	bne.n	8007a86 <UART_SetConfig+0x14a>
 8007a1c:	4b95      	ldr	r3, [pc, #596]	; (8007c74 <UART_SetConfig+0x338>)
 8007a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a20:	23c0      	movs	r3, #192	; 0xc0
 8007a22:	029b      	lsls	r3, r3, #10
 8007a24:	4013      	ands	r3, r2
 8007a26:	22c0      	movs	r2, #192	; 0xc0
 8007a28:	0292      	lsls	r2, r2, #10
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d017      	beq.n	8007a5e <UART_SetConfig+0x122>
 8007a2e:	22c0      	movs	r2, #192	; 0xc0
 8007a30:	0292      	lsls	r2, r2, #10
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d822      	bhi.n	8007a7c <UART_SetConfig+0x140>
 8007a36:	2280      	movs	r2, #128	; 0x80
 8007a38:	0292      	lsls	r2, r2, #10
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d019      	beq.n	8007a72 <UART_SetConfig+0x136>
 8007a3e:	2280      	movs	r2, #128	; 0x80
 8007a40:	0292      	lsls	r2, r2, #10
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d81a      	bhi.n	8007a7c <UART_SetConfig+0x140>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <UART_SetConfig+0x118>
 8007a4a:	2280      	movs	r2, #128	; 0x80
 8007a4c:	0252      	lsls	r2, r2, #9
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00a      	beq.n	8007a68 <UART_SetConfig+0x12c>
 8007a52:	e013      	b.n	8007a7c <UART_SetConfig+0x140>
 8007a54:	231f      	movs	r3, #31
 8007a56:	18fb      	adds	r3, r7, r3
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e083      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007a5e:	231f      	movs	r3, #31
 8007a60:	18fb      	adds	r3, r7, r3
 8007a62:	2202      	movs	r2, #2
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	e07e      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007a68:	231f      	movs	r3, #31
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	2204      	movs	r2, #4
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	e079      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007a72:	231f      	movs	r3, #31
 8007a74:	18fb      	adds	r3, r7, r3
 8007a76:	2208      	movs	r2, #8
 8007a78:	701a      	strb	r2, [r3, #0]
 8007a7a:	e074      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007a7c:	231f      	movs	r3, #31
 8007a7e:	18fb      	adds	r3, r7, r3
 8007a80:	2210      	movs	r2, #16
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e06f      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a7c      	ldr	r2, [pc, #496]	; (8007c7c <UART_SetConfig+0x340>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d134      	bne.n	8007afa <UART_SetConfig+0x1be>
 8007a90:	4b78      	ldr	r3, [pc, #480]	; (8007c74 <UART_SetConfig+0x338>)
 8007a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a94:	23c0      	movs	r3, #192	; 0xc0
 8007a96:	031b      	lsls	r3, r3, #12
 8007a98:	4013      	ands	r3, r2
 8007a9a:	22c0      	movs	r2, #192	; 0xc0
 8007a9c:	0312      	lsls	r2, r2, #12
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d017      	beq.n	8007ad2 <UART_SetConfig+0x196>
 8007aa2:	22c0      	movs	r2, #192	; 0xc0
 8007aa4:	0312      	lsls	r2, r2, #12
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d822      	bhi.n	8007af0 <UART_SetConfig+0x1b4>
 8007aaa:	2280      	movs	r2, #128	; 0x80
 8007aac:	0312      	lsls	r2, r2, #12
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d019      	beq.n	8007ae6 <UART_SetConfig+0x1aa>
 8007ab2:	2280      	movs	r2, #128	; 0x80
 8007ab4:	0312      	lsls	r2, r2, #12
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d81a      	bhi.n	8007af0 <UART_SetConfig+0x1b4>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d004      	beq.n	8007ac8 <UART_SetConfig+0x18c>
 8007abe:	2280      	movs	r2, #128	; 0x80
 8007ac0:	02d2      	lsls	r2, r2, #11
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00a      	beq.n	8007adc <UART_SetConfig+0x1a0>
 8007ac6:	e013      	b.n	8007af0 <UART_SetConfig+0x1b4>
 8007ac8:	231f      	movs	r3, #31
 8007aca:	18fb      	adds	r3, r7, r3
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e049      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007ad2:	231f      	movs	r3, #31
 8007ad4:	18fb      	adds	r3, r7, r3
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e044      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007adc:	231f      	movs	r3, #31
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e03f      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007ae6:	231f      	movs	r3, #31
 8007ae8:	18fb      	adds	r3, r7, r3
 8007aea:	2208      	movs	r2, #8
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e03a      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007af0:	231f      	movs	r3, #31
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	2210      	movs	r2, #16
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	e035      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a60      	ldr	r2, [pc, #384]	; (8007c80 <UART_SetConfig+0x344>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d104      	bne.n	8007b0e <UART_SetConfig+0x1d2>
 8007b04:	231f      	movs	r3, #31
 8007b06:	18fb      	adds	r3, r7, r3
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	e02b      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a5c      	ldr	r2, [pc, #368]	; (8007c84 <UART_SetConfig+0x348>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d104      	bne.n	8007b22 <UART_SetConfig+0x1e6>
 8007b18:	231f      	movs	r3, #31
 8007b1a:	18fb      	adds	r3, r7, r3
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	e021      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a58      	ldr	r2, [pc, #352]	; (8007c88 <UART_SetConfig+0x34c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d104      	bne.n	8007b36 <UART_SetConfig+0x1fa>
 8007b2c:	231f      	movs	r3, #31
 8007b2e:	18fb      	adds	r3, r7, r3
 8007b30:	2200      	movs	r2, #0
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	e017      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a54      	ldr	r2, [pc, #336]	; (8007c8c <UART_SetConfig+0x350>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d104      	bne.n	8007b4a <UART_SetConfig+0x20e>
 8007b40:	231f      	movs	r3, #31
 8007b42:	18fb      	adds	r3, r7, r3
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	e00d      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a50      	ldr	r2, [pc, #320]	; (8007c90 <UART_SetConfig+0x354>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d104      	bne.n	8007b5e <UART_SetConfig+0x222>
 8007b54:	231f      	movs	r3, #31
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	2200      	movs	r2, #0
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	e003      	b.n	8007b66 <UART_SetConfig+0x22a>
 8007b5e:	231f      	movs	r3, #31
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	2210      	movs	r2, #16
 8007b64:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69da      	ldr	r2, [r3, #28]
 8007b6a:	2380      	movs	r3, #128	; 0x80
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d15c      	bne.n	8007c2c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8007b72:	231f      	movs	r3, #31
 8007b74:	18fb      	adds	r3, r7, r3
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d015      	beq.n	8007ba8 <UART_SetConfig+0x26c>
 8007b7c:	dc18      	bgt.n	8007bb0 <UART_SetConfig+0x274>
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d00d      	beq.n	8007b9e <UART_SetConfig+0x262>
 8007b82:	dc15      	bgt.n	8007bb0 <UART_SetConfig+0x274>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <UART_SetConfig+0x252>
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d005      	beq.n	8007b98 <UART_SetConfig+0x25c>
 8007b8c:	e010      	b.n	8007bb0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b8e:	f7fe fa45 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007b92:	0003      	movs	r3, r0
 8007b94:	61bb      	str	r3, [r7, #24]
        break;
 8007b96:	e012      	b.n	8007bbe <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b98:	4b3e      	ldr	r3, [pc, #248]	; (8007c94 <UART_SetConfig+0x358>)
 8007b9a:	61bb      	str	r3, [r7, #24]
        break;
 8007b9c:	e00f      	b.n	8007bbe <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b9e:	f7fe f9c1 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8007ba2:	0003      	movs	r3, r0
 8007ba4:	61bb      	str	r3, [r7, #24]
        break;
 8007ba6:	e00a      	b.n	8007bbe <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	021b      	lsls	r3, r3, #8
 8007bac:	61bb      	str	r3, [r7, #24]
        break;
 8007bae:	e006      	b.n	8007bbe <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007bb4:	231e      	movs	r3, #30
 8007bb6:	18fb      	adds	r3, r7, r3
 8007bb8:	2201      	movs	r2, #1
 8007bba:	701a      	strb	r2, [r3, #0]
        break;
 8007bbc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d100      	bne.n	8007bc6 <UART_SetConfig+0x28a>
 8007bc4:	e095      	b.n	8007cf2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	005a      	lsls	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	18d2      	adds	r2, r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	0019      	movs	r1, r3
 8007bd8:	0010      	movs	r0, r2
 8007bda:	f7f8 fa93 	bl	8000104 <__udivsi3>
 8007bde:	0003      	movs	r3, r0
 8007be0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	2b0f      	cmp	r3, #15
 8007be6:	d91c      	bls.n	8007c22 <UART_SetConfig+0x2e6>
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	2380      	movs	r3, #128	; 0x80
 8007bec:	025b      	lsls	r3, r3, #9
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d217      	bcs.n	8007c22 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	200e      	movs	r0, #14
 8007bf8:	183b      	adds	r3, r7, r0
 8007bfa:	210f      	movs	r1, #15
 8007bfc:	438a      	bics	r2, r1
 8007bfe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2207      	movs	r2, #7
 8007c08:	4013      	ands	r3, r2
 8007c0a:	b299      	uxth	r1, r3
 8007c0c:	183b      	adds	r3, r7, r0
 8007c0e:	183a      	adds	r2, r7, r0
 8007c10:	8812      	ldrh	r2, [r2, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	183a      	adds	r2, r7, r0
 8007c1c:	8812      	ldrh	r2, [r2, #0]
 8007c1e:	60da      	str	r2, [r3, #12]
 8007c20:	e067      	b.n	8007cf2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007c22:	231e      	movs	r3, #30
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	2201      	movs	r2, #1
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	e062      	b.n	8007cf2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c2c:	231f      	movs	r3, #31
 8007c2e:	18fb      	adds	r3, r7, r3
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d030      	beq.n	8007c98 <UART_SetConfig+0x35c>
 8007c36:	dc33      	bgt.n	8007ca0 <UART_SetConfig+0x364>
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d00d      	beq.n	8007c58 <UART_SetConfig+0x31c>
 8007c3c:	dc30      	bgt.n	8007ca0 <UART_SetConfig+0x364>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <UART_SetConfig+0x30c>
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d005      	beq.n	8007c52 <UART_SetConfig+0x316>
 8007c46:	e02b      	b.n	8007ca0 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c48:	f7fe f9e8 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007c4c:	0003      	movs	r3, r0
 8007c4e:	61bb      	str	r3, [r7, #24]
        break;
 8007c50:	e02d      	b.n	8007cae <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c52:	4b10      	ldr	r3, [pc, #64]	; (8007c94 <UART_SetConfig+0x358>)
 8007c54:	61bb      	str	r3, [r7, #24]
        break;
 8007c56:	e02a      	b.n	8007cae <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c58:	f7fe f964 	bl	8005f24 <HAL_RCC_GetSysClockFreq>
 8007c5c:	0003      	movs	r3, r0
 8007c5e:	61bb      	str	r3, [r7, #24]
        break;
 8007c60:	e025      	b.n	8007cae <UART_SetConfig+0x372>
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	efff69f3 	.word	0xefff69f3
 8007c68:	ffffcfff 	.word	0xffffcfff
 8007c6c:	fffff4ff 	.word	0xfffff4ff
 8007c70:	40013800 	.word	0x40013800
 8007c74:	40021000 	.word	0x40021000
 8007c78:	40004400 	.word	0x40004400
 8007c7c:	40004800 	.word	0x40004800
 8007c80:	40004c00 	.word	0x40004c00
 8007c84:	40005000 	.word	0x40005000
 8007c88:	40011400 	.word	0x40011400
 8007c8c:	40011800 	.word	0x40011800
 8007c90:	40011c00 	.word	0x40011c00
 8007c94:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	61bb      	str	r3, [r7, #24]
        break;
 8007c9e:	e006      	b.n	8007cae <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ca4:	231e      	movs	r3, #30
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	2201      	movs	r2, #1
 8007caa:	701a      	strb	r2, [r3, #0]
        break;
 8007cac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01e      	beq.n	8007cf2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	085a      	lsrs	r2, r3, #1
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	18d2      	adds	r2, r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	0019      	movs	r1, r3
 8007cc4:	0010      	movs	r0, r2
 8007cc6:	f7f8 fa1d 	bl	8000104 <__udivsi3>
 8007cca:	0003      	movs	r3, r0
 8007ccc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b0f      	cmp	r3, #15
 8007cd2:	d90a      	bls.n	8007cea <UART_SetConfig+0x3ae>
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	2380      	movs	r3, #128	; 0x80
 8007cd8:	025b      	lsls	r3, r3, #9
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d205      	bcs.n	8007cea <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60da      	str	r2, [r3, #12]
 8007ce8:	e003      	b.n	8007cf2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007cea:	231e      	movs	r3, #30
 8007cec:	18fb      	adds	r3, r7, r3
 8007cee:	2201      	movs	r2, #1
 8007cf0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007cfe:	231e      	movs	r3, #30
 8007d00:	18fb      	adds	r3, r7, r3
 8007d02:	781b      	ldrb	r3, [r3, #0]
}
 8007d04:	0018      	movs	r0, r3
 8007d06:	46bd      	mov	sp, r7
 8007d08:	b008      	add	sp, #32
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	d00b      	beq.n	8007d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	4a4a      	ldr	r2, [pc, #296]	; (8007e50 <UART_AdvFeatureConfig+0x144>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	0019      	movs	r1, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d00b      	beq.n	8007d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	4a43      	ldr	r2, [pc, #268]	; (8007e54 <UART_AdvFeatureConfig+0x148>)
 8007d48:	4013      	ands	r3, r2
 8007d4a:	0019      	movs	r1, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	4013      	ands	r3, r2
 8007d60:	d00b      	beq.n	8007d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4a3b      	ldr	r2, [pc, #236]	; (8007e58 <UART_AdvFeatureConfig+0x14c>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	0019      	movs	r1, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	2208      	movs	r2, #8
 8007d80:	4013      	ands	r3, r2
 8007d82:	d00b      	beq.n	8007d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	4a34      	ldr	r2, [pc, #208]	; (8007e5c <UART_AdvFeatureConfig+0x150>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	0019      	movs	r1, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	2210      	movs	r2, #16
 8007da2:	4013      	ands	r3, r2
 8007da4:	d00b      	beq.n	8007dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	4a2c      	ldr	r2, [pc, #176]	; (8007e60 <UART_AdvFeatureConfig+0x154>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	0019      	movs	r1, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	d00b      	beq.n	8007de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	4a25      	ldr	r2, [pc, #148]	; (8007e64 <UART_AdvFeatureConfig+0x158>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	0019      	movs	r1, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	2240      	movs	r2, #64	; 0x40
 8007de6:	4013      	ands	r3, r2
 8007de8:	d01d      	beq.n	8007e26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4a1d      	ldr	r2, [pc, #116]	; (8007e68 <UART_AdvFeatureConfig+0x15c>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	0019      	movs	r1, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e06:	2380      	movs	r3, #128	; 0x80
 8007e08:	035b      	lsls	r3, r3, #13
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d10b      	bne.n	8007e26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	4a15      	ldr	r2, [pc, #84]	; (8007e6c <UART_AdvFeatureConfig+0x160>)
 8007e16:	4013      	ands	r3, r2
 8007e18:	0019      	movs	r1, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2280      	movs	r2, #128	; 0x80
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	d00b      	beq.n	8007e48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	4a0e      	ldr	r2, [pc, #56]	; (8007e70 <UART_AdvFeatureConfig+0x164>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	0019      	movs	r1, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	430a      	orrs	r2, r1
 8007e46:	605a      	str	r2, [r3, #4]
  }
}
 8007e48:	46c0      	nop			; (mov r8, r8)
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	b002      	add	sp, #8
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	fffdffff 	.word	0xfffdffff
 8007e54:	fffeffff 	.word	0xfffeffff
 8007e58:	fffbffff 	.word	0xfffbffff
 8007e5c:	ffff7fff 	.word	0xffff7fff
 8007e60:	ffffefff 	.word	0xffffefff
 8007e64:	ffffdfff 	.word	0xffffdfff
 8007e68:	ffefffff 	.word	0xffefffff
 8007e6c:	ff9fffff 	.word	0xff9fffff
 8007e70:	fff7ffff 	.word	0xfff7ffff

08007e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b092      	sub	sp, #72	; 0x48
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2284      	movs	r2, #132	; 0x84
 8007e80:	2100      	movs	r1, #0
 8007e82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e84:	f7fb fa3a 	bl	80032fc <HAL_GetTick>
 8007e88:	0003      	movs	r3, r0
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2208      	movs	r2, #8
 8007e94:	4013      	ands	r3, r2
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d12c      	bne.n	8007ef4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9c:	2280      	movs	r2, #128	; 0x80
 8007e9e:	0391      	lsls	r1, r2, #14
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4a46      	ldr	r2, [pc, #280]	; (8007fbc <UART_CheckIdleState+0x148>)
 8007ea4:	9200      	str	r2, [sp, #0]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f000 f88c 	bl	8007fc4 <UART_WaitOnFlagUntilTimeout>
 8007eac:	1e03      	subs	r3, r0, #0
 8007eae:	d021      	beq.n	8007ef4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eba:	2301      	movs	r3, #1
 8007ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	f383 8810 	msr	PRIMASK, r3
}
 8007ec4:	46c0      	nop			; (mov r8, r8)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2180      	movs	r1, #128	; 0x80
 8007ed2:	438a      	bics	r2, r1
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	f383 8810 	msr	PRIMASK, r3
}
 8007ee0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2278      	movs	r2, #120	; 0x78
 8007eec:	2100      	movs	r1, #0
 8007eee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e05f      	b.n	8007fb4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2204      	movs	r2, #4
 8007efc:	4013      	ands	r3, r2
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d146      	bne.n	8007f90 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f04:	2280      	movs	r2, #128	; 0x80
 8007f06:	03d1      	lsls	r1, r2, #15
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	4a2c      	ldr	r2, [pc, #176]	; (8007fbc <UART_CheckIdleState+0x148>)
 8007f0c:	9200      	str	r2, [sp, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f000 f858 	bl	8007fc4 <UART_WaitOnFlagUntilTimeout>
 8007f14:	1e03      	subs	r3, r0, #0
 8007f16:	d03b      	beq.n	8007f90 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f18:	f3ef 8310 	mrs	r3, PRIMASK
 8007f1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f20:	637b      	str	r3, [r7, #52]	; 0x34
 8007f22:	2301      	movs	r3, #1
 8007f24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f383 8810 	msr	PRIMASK, r3
}
 8007f2c:	46c0      	nop			; (mov r8, r8)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4921      	ldr	r1, [pc, #132]	; (8007fc0 <UART_CheckIdleState+0x14c>)
 8007f3a:	400a      	ands	r2, r1
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f383 8810 	msr	PRIMASK, r3
}
 8007f48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f50:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f52:	633b      	str	r3, [r7, #48]	; 0x30
 8007f54:	2301      	movs	r3, #1
 8007f56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f383 8810 	msr	PRIMASK, r3
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	438a      	bics	r2, r1
 8007f6e:	609a      	str	r2, [r3, #8]
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	f383 8810 	msr	PRIMASK, r3
}
 8007f7a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2280      	movs	r2, #128	; 0x80
 8007f80:	2120      	movs	r1, #32
 8007f82:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2278      	movs	r2, #120	; 0x78
 8007f88:	2100      	movs	r1, #0
 8007f8a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e011      	b.n	8007fb4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2220      	movs	r2, #32
 8007f94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2280      	movs	r2, #128	; 0x80
 8007f9a:	2120      	movs	r1, #32
 8007f9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2278      	movs	r2, #120	; 0x78
 8007fae:	2100      	movs	r1, #0
 8007fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	0018      	movs	r0, r3
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	b010      	add	sp, #64	; 0x40
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	01ffffff 	.word	0x01ffffff
 8007fc0:	fffffedf 	.word	0xfffffedf

08007fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	1dfb      	adds	r3, r7, #7
 8007fd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd4:	e04b      	b.n	800806e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	d048      	beq.n	800806e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fdc:	f7fb f98e 	bl	80032fc <HAL_GetTick>
 8007fe0:	0002      	movs	r2, r0
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d302      	bcc.n	8007ff2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e04b      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	4013      	ands	r3, r2
 8008000:	d035      	beq.n	800806e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	2208      	movs	r2, #8
 800800a:	4013      	ands	r3, r2
 800800c:	2b08      	cmp	r3, #8
 800800e:	d111      	bne.n	8008034 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2208      	movs	r2, #8
 8008016:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	0018      	movs	r0, r3
 800801c:	f000 f83c 	bl	8008098 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2284      	movs	r2, #132	; 0x84
 8008024:	2108      	movs	r1, #8
 8008026:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2278      	movs	r2, #120	; 0x78
 800802c:	2100      	movs	r1, #0
 800802e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e02c      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69da      	ldr	r2, [r3, #28]
 800803a:	2380      	movs	r3, #128	; 0x80
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	401a      	ands	r2, r3
 8008040:	2380      	movs	r3, #128	; 0x80
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	429a      	cmp	r2, r3
 8008046:	d112      	bne.n	800806e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2280      	movs	r2, #128	; 0x80
 800804e:	0112      	lsls	r2, r2, #4
 8008050:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	0018      	movs	r0, r3
 8008056:	f000 f81f 	bl	8008098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2284      	movs	r2, #132	; 0x84
 800805e:	2120      	movs	r1, #32
 8008060:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2278      	movs	r2, #120	; 0x78
 8008066:	2100      	movs	r1, #0
 8008068:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e00f      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	4013      	ands	r3, r2
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	425a      	negs	r2, r3
 800807e:	4153      	adcs	r3, r2
 8008080:	b2db      	uxtb	r3, r3
 8008082:	001a      	movs	r2, r3
 8008084:	1dfb      	adds	r3, r7, #7
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d0a4      	beq.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	0018      	movs	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	b004      	add	sp, #16
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b08e      	sub	sp, #56	; 0x38
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080a0:	f3ef 8310 	mrs	r3, PRIMASK
 80080a4:	617b      	str	r3, [r7, #20]
  return(result);
 80080a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34
 80080aa:	2301      	movs	r3, #1
 80080ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f383 8810 	msr	PRIMASK, r3
}
 80080b4:	46c0      	nop			; (mov r8, r8)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4926      	ldr	r1, [pc, #152]	; (800815c <UART_EndRxTransfer+0xc4>)
 80080c2:	400a      	ands	r2, r1
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	f383 8810 	msr	PRIMASK, r3
}
 80080d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080d2:	f3ef 8310 	mrs	r3, PRIMASK
 80080d6:	623b      	str	r3, [r7, #32]
  return(result);
 80080d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080da:	633b      	str	r3, [r7, #48]	; 0x30
 80080dc:	2301      	movs	r3, #1
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	f383 8810 	msr	PRIMASK, r3
}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2101      	movs	r1, #1
 80080f4:	438a      	bics	r2, r1
 80080f6:	609a      	str	r2, [r3, #8]
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	f383 8810 	msr	PRIMASK, r3
}
 8008102:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008108:	2b01      	cmp	r3, #1
 800810a:	d118      	bne.n	800813e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800810c:	f3ef 8310 	mrs	r3, PRIMASK
 8008110:	60bb      	str	r3, [r7, #8]
  return(result);
 8008112:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008116:	2301      	movs	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f383 8810 	msr	PRIMASK, r3
}
 8008120:	46c0      	nop			; (mov r8, r8)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2110      	movs	r1, #16
 800812e:	438a      	bics	r2, r1
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f383 8810 	msr	PRIMASK, r3
}
 800813c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2280      	movs	r2, #128	; 0x80
 8008142:	2120      	movs	r1, #32
 8008144:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	46bd      	mov	sp, r7
 8008156:	b00e      	add	sp, #56	; 0x38
 8008158:	bd80      	pop	{r7, pc}
 800815a:	46c0      	nop			; (mov r8, r8)
 800815c:	fffffedf 	.word	0xfffffedf

08008160 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	225a      	movs	r2, #90	; 0x5a
 8008172:	2100      	movs	r1, #0
 8008174:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2252      	movs	r2, #82	; 0x52
 800817a:	2100      	movs	r1, #0
 800817c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	0018      	movs	r0, r3
 8008182:	f7ff fbc7 	bl	8007914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	46bd      	mov	sp, r7
 800818a:	b004      	add	sp, #16
 800818c:	bd80      	pop	{r7, pc}

0800818e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b086      	sub	sp, #24
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008196:	f3ef 8310 	mrs	r3, PRIMASK
 800819a:	60bb      	str	r3, [r7, #8]
  return(result);
 800819c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	2301      	movs	r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f383 8810 	msr	PRIMASK, r3
}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2140      	movs	r1, #64	; 0x40
 80081b8:	438a      	bics	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f383 8810 	msr	PRIMASK, r3
}
 80081c6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	0018      	movs	r0, r3
 80081d8:	f7ff fb94 	bl	8007904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081dc:	46c0      	nop			; (mov r8, r8)
 80081de:	46bd      	mov	sp, r7
 80081e0:	b006      	add	sp, #24
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081ec:	46c0      	nop			; (mov r8, r8)
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b002      	add	sp, #8
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <memset>:
 80081f4:	0003      	movs	r3, r0
 80081f6:	1882      	adds	r2, r0, r2
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d100      	bne.n	80081fe <memset+0xa>
 80081fc:	4770      	bx	lr
 80081fe:	7019      	strb	r1, [r3, #0]
 8008200:	3301      	adds	r3, #1
 8008202:	e7f9      	b.n	80081f8 <memset+0x4>

08008204 <__libc_init_array>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	2600      	movs	r6, #0
 8008208:	4c0c      	ldr	r4, [pc, #48]	; (800823c <__libc_init_array+0x38>)
 800820a:	4d0d      	ldr	r5, [pc, #52]	; (8008240 <__libc_init_array+0x3c>)
 800820c:	1b64      	subs	r4, r4, r5
 800820e:	10a4      	asrs	r4, r4, #2
 8008210:	42a6      	cmp	r6, r4
 8008212:	d109      	bne.n	8008228 <__libc_init_array+0x24>
 8008214:	2600      	movs	r6, #0
 8008216:	f000 f823 	bl	8008260 <_init>
 800821a:	4c0a      	ldr	r4, [pc, #40]	; (8008244 <__libc_init_array+0x40>)
 800821c:	4d0a      	ldr	r5, [pc, #40]	; (8008248 <__libc_init_array+0x44>)
 800821e:	1b64      	subs	r4, r4, r5
 8008220:	10a4      	asrs	r4, r4, #2
 8008222:	42a6      	cmp	r6, r4
 8008224:	d105      	bne.n	8008232 <__libc_init_array+0x2e>
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	00b3      	lsls	r3, r6, #2
 800822a:	58eb      	ldr	r3, [r5, r3]
 800822c:	4798      	blx	r3
 800822e:	3601      	adds	r6, #1
 8008230:	e7ee      	b.n	8008210 <__libc_init_array+0xc>
 8008232:	00b3      	lsls	r3, r6, #2
 8008234:	58eb      	ldr	r3, [r5, r3]
 8008236:	4798      	blx	r3
 8008238:	3601      	adds	r6, #1
 800823a:	e7f2      	b.n	8008222 <__libc_init_array+0x1e>
 800823c:	080082f0 	.word	0x080082f0
 8008240:	080082f0 	.word	0x080082f0
 8008244:	080082f4 	.word	0x080082f4
 8008248:	080082f0 	.word	0x080082f0

0800824c <memcpy>:
 800824c:	2300      	movs	r3, #0
 800824e:	b510      	push	{r4, lr}
 8008250:	429a      	cmp	r2, r3
 8008252:	d100      	bne.n	8008256 <memcpy+0xa>
 8008254:	bd10      	pop	{r4, pc}
 8008256:	5ccc      	ldrb	r4, [r1, r3]
 8008258:	54c4      	strb	r4, [r0, r3]
 800825a:	3301      	adds	r3, #1
 800825c:	e7f8      	b.n	8008250 <memcpy+0x4>
	...

08008260 <_init>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr

0800826c <_fini>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr
