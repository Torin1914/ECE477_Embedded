
motor_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d6c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e60  08005e60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e60  08005e60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e60  08005e60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  08005e74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005e74  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001162c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002552  00000000  00000000  000316a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00033bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cac  00000000  00000000  00034bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f89  00000000  00000000  000358a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001407a  00000000  00000000  0003782d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6127  00000000  00000000  0004b8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a14  00000000  00000000  000f19d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f53e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005e10 	.word	0x08005e10

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005e10 	.word	0x08005e10

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 febf 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f87b 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 fadd 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800022e:	f000 faad 	bl	800078c <MX_DMA_Init>
  MX_TIM2_Init();
 8000232:	f000 f90d 	bl	8000450 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000236:	f000 f9a7 	bl	8000588 <MX_TIM3_Init>
  MX_TIM6_Init();
 800023a:	f000 fa3b 	bl	80006b4 <MX_TIM6_Init>
  MX_I2C2_Init();
 800023e:	f000 f8c7 	bl	80003d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000242:	f000 fa73 	bl	800072c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000246:	4b32      	ldr	r3, [pc, #200]	; (8000310 <main+0xf4>)
 8000248:	2100      	movs	r1, #0
 800024a:	0018      	movs	r0, r3
 800024c:	f003 fe80 	bl	8003f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000250:	4b2f      	ldr	r3, [pc, #188]	; (8000310 <main+0xf4>)
 8000252:	2104      	movs	r1, #4
 8000254:	0018      	movs	r0, r3
 8000256:	f003 fe7b 	bl	8003f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800025a:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <main+0xf4>)
 800025c:	2108      	movs	r1, #8
 800025e:	0018      	movs	r0, r3
 8000260:	f003 fe76 	bl	8003f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000264:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <main+0xf4>)
 8000266:	210c      	movs	r1, #12
 8000268:	0018      	movs	r0, r3
 800026a:	f003 fe71 	bl	8003f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800026e:	4b29      	ldr	r3, [pc, #164]	; (8000314 <main+0xf8>)
 8000270:	2100      	movs	r1, #0
 8000272:	0018      	movs	r0, r3
 8000274:	f003 fe6c 	bl	8003f50 <HAL_TIM_PWM_Start>

  uint8_t gyro_on = 0b10000000;
 8000278:	2508      	movs	r5, #8
 800027a:	197b      	adds	r3, r7, r5
 800027c:	2280      	movs	r2, #128	; 0x80
 800027e:	701a      	strb	r2, [r3, #0]
  uint8_t accel_on = 0b10000000;
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	2280      	movs	r2, #128	; 0x80
 8000284:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, 212, 1, 100);
 8000286:	230b      	movs	r3, #11
 8000288:	18fc      	adds	r4, r7, r3
 800028a:	4823      	ldr	r0, [pc, #140]	; (8000318 <main+0xfc>)
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	2201      	movs	r2, #1
 8000290:	21d4      	movs	r1, #212	; 0xd4
 8000292:	f001 fcf5 	bl	8001c80 <HAL_I2C_IsDeviceReady>
 8000296:	0003      	movs	r3, r0
 8000298:	7023      	strb	r3, [r4, #0]
  HAL_StatusTypeDef ret1 = HAL_I2C_Mem_Write(&hi2c2, 212, 0x11, I2C_MEMADD_SIZE_8BIT, &gyro_on, 1, HAL_MAX_DELAY);
 800029a:	230a      	movs	r3, #10
 800029c:	18fc      	adds	r4, r7, r3
 800029e:	481e      	ldr	r0, [pc, #120]	; (8000318 <main+0xfc>)
 80002a0:	2301      	movs	r3, #1
 80002a2:	425b      	negs	r3, r3
 80002a4:	9302      	str	r3, [sp, #8]
 80002a6:	2301      	movs	r3, #1
 80002a8:	9301      	str	r3, [sp, #4]
 80002aa:	197b      	adds	r3, r7, r5
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2301      	movs	r3, #1
 80002b0:	2211      	movs	r2, #17
 80002b2:	21d4      	movs	r1, #212	; 0xd4
 80002b4:	f001 fbb6 	bl	8001a24 <HAL_I2C_Mem_Write>
 80002b8:	0003      	movs	r3, r0
 80002ba:	7023      	strb	r3, [r4, #0]
  HAL_StatusTypeDef ret2 = HAL_I2C_Mem_Write(&hi2c2, 212, 0x10, I2C_MEMADD_SIZE_8BIT, &accel_on, 1, HAL_MAX_DELAY);
 80002bc:	2309      	movs	r3, #9
 80002be:	18fc      	adds	r4, r7, r3
 80002c0:	4815      	ldr	r0, [pc, #84]	; (8000318 <main+0xfc>)
 80002c2:	2301      	movs	r3, #1
 80002c4:	425b      	negs	r3, r3
 80002c6:	9302      	str	r3, [sp, #8]
 80002c8:	2301      	movs	r3, #1
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	1dfb      	adds	r3, r7, #7
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2301      	movs	r3, #1
 80002d2:	2210      	movs	r2, #16
 80002d4:	21d4      	movs	r1, #212	; 0xd4
 80002d6:	f001 fba5 	bl	8001a24 <HAL_I2C_Mem_Write>
 80002da:	0003      	movs	r3, r0
 80002dc:	7023      	strb	r3, [r4, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <main+0x100>)
 80002e0:	0018      	movs	r0, r3
 80002e2:	f003 fd33 	bl	8003d4c <HAL_TIM_Base_Start_IT>
	  //    HAL_Delay(500);
	  //    HAL_UART_Transmit_DMA(&huart1, test_buff, sizeof(test_buff));
	  //HAL_UART_Receive_DMA (&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));

	  //motor1_control(CW, 100);
	  for(uint32_t i = 0; i < 107; i++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e00c      	b.n	8000306 <main+0xea>
	  {
		  motor1_control(CW, i);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	0019      	movs	r1, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 fdf3 	bl	8000edc <motor1_control>
		  HAL_Delay(500);
 80002f6:	23fa      	movs	r3, #250	; 0xfa
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 feb6 	bl	800106c <HAL_Delay>
	  for(uint32_t i = 0; i < 107; i++)
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3301      	adds	r3, #1
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	2b6a      	cmp	r3, #106	; 0x6a
 800030a:	d9ef      	bls.n	80002ec <main+0xd0>
 800030c:	e7eb      	b.n	80002e6 <main+0xca>
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	20000104 	.word	0x20000104
 8000314:	2000014c 	.word	0x2000014c
 8000318:	20000028 	.word	0x20000028
 800031c:	20000194 	.word	0x20000194

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b099      	sub	sp, #100	; 0x64
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	242c      	movs	r4, #44	; 0x2c
 8000328:	193b      	adds	r3, r7, r4
 800032a:	0018      	movs	r0, r3
 800032c:	2334      	movs	r3, #52	; 0x34
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f005 fd41 	bl	8005db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000336:	231c      	movs	r3, #28
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2310      	movs	r3, #16
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f005 fd39 	bl	8005db8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000346:	003b      	movs	r3, r7
 8000348:	0018      	movs	r0, r3
 800034a:	231c      	movs	r3, #28
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f005 fd32 	bl	8005db8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000354:	0021      	movs	r1, r4
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2202      	movs	r2, #2
 800035a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2201      	movs	r2, #1
 8000360:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2210      	movs	r2, #16
 8000366:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	187b      	adds	r3, r7, r1
 8000370:	0018      	movs	r0, r3
 8000372:	f002 fea9 	bl	80030c8 <HAL_RCC_OscConfig>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800037a:	f000 fabb 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	211c      	movs	r1, #28
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2207      	movs	r2, #7
 8000384:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2200      	movs	r2, #0
 800038a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2100      	movs	r1, #0
 800039c:	0018      	movs	r0, r3
 800039e:	f003 fa19 	bl	80037d4 <HAL_RCC_ClockConfig>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003a6:	f000 faa5 	bl	80008f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003aa:	003b      	movs	r3, r7
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003b0:	003b      	movs	r3, r7
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b6:	003b      	movs	r3, r7
 80003b8:	0018      	movs	r0, r3
 80003ba:	f003 fb77 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003c2:	f000 fa97 	bl	80008f4 <Error_Handler>
  }
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b019      	add	sp, #100	; 0x64
 80003cc:	bd90      	pop	{r4, r7, pc}
	...

080003d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003d4:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <MX_I2C2_Init+0x74>)
 80003d6:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <MX_I2C2_Init+0x78>)
 80003d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00101D37;
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_I2C2_Init+0x74>)
 80003dc:	4a1b      	ldr	r2, [pc, #108]	; (800044c <MX_I2C2_Init+0x7c>)
 80003de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <MX_I2C2_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_I2C2_Init+0x74>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_I2C2_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_I2C2_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_I2C2_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_I2C2_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_I2C2_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_I2C2_Init+0x74>)
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fa73 	bl	80018f8 <HAL_I2C_Init>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000416:	f000 fa6d 	bl	80008f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <MX_I2C2_Init+0x74>)
 800041c:	2100      	movs	r1, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f002 fdba 	bl	8002f98 <HAL_I2CEx_ConfigAnalogFilter>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000428:	f000 fa64 	bl	80008f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <MX_I2C2_Init+0x74>)
 800042e:	2100      	movs	r1, #0
 8000430:	0018      	movs	r0, r3
 8000432:	f002 fdfd 	bl	8003030 <HAL_I2CEx_ConfigDigitalFilter>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800043a:	f000 fa5b 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000028 	.word	0x20000028
 8000448:	40005800 	.word	0x40005800
 800044c:	00101d37 	.word	0x00101d37

08000450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08e      	sub	sp, #56	; 0x38
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000456:	2328      	movs	r3, #40	; 0x28
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	0018      	movs	r0, r3
 800045c:	2310      	movs	r3, #16
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f005 fca9 	bl	8005db8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000466:	2320      	movs	r3, #32
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	0018      	movs	r0, r3
 800046c:	2308      	movs	r3, #8
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f005 fca1 	bl	8005db8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	0018      	movs	r0, r3
 800047a:	231c      	movs	r3, #28
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f005 fc9a 	bl	8005db8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000484:	4b3f      	ldr	r3, [pc, #252]	; (8000584 <MX_TIM2_Init+0x134>)
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	05d2      	lsls	r2, r2, #23
 800048a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800048c:	4b3d      	ldr	r3, [pc, #244]	; (8000584 <MX_TIM2_Init+0x134>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000492:	4b3c      	ldr	r3, [pc, #240]	; (8000584 <MX_TIM2_Init+0x134>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 106;
 8000498:	4b3a      	ldr	r3, [pc, #232]	; (8000584 <MX_TIM2_Init+0x134>)
 800049a:	226a      	movs	r2, #106	; 0x6a
 800049c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049e:	4b39      	ldr	r3, [pc, #228]	; (8000584 <MX_TIM2_Init+0x134>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a4:	4b37      	ldr	r3, [pc, #220]	; (8000584 <MX_TIM2_Init+0x134>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004aa:	4b36      	ldr	r3, [pc, #216]	; (8000584 <MX_TIM2_Init+0x134>)
 80004ac:	0018      	movs	r0, r3
 80004ae:	f003 fbfd 	bl	8003cac <HAL_TIM_Base_Init>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80004b6:	f000 fa1d 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ba:	2128      	movs	r1, #40	; 0x28
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	0152      	lsls	r2, r2, #5
 80004c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004c4:	187a      	adds	r2, r7, r1
 80004c6:	4b2f      	ldr	r3, [pc, #188]	; (8000584 <MX_TIM2_Init+0x134>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f004 f82c 	bl	8004528 <HAL_TIM_ConfigClockSource>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80004d4:	f000 fa0e 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <MX_TIM2_Init+0x134>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f003 fce0 	bl	8003ea0 <HAL_TIM_PWM_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004e4:	f000 fa06 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e8:	2120      	movs	r1, #32
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f6:	187a      	adds	r2, r7, r1
 80004f8:	4b22      	ldr	r3, [pc, #136]	; (8000584 <MX_TIM2_Init+0x134>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f004 fc41 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000506:	f000 f9f5 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2260      	movs	r2, #96	; 0x60
 800050e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000522:	1d39      	adds	r1, r7, #4
 8000524:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_TIM2_Init+0x134>)
 8000526:	2200      	movs	r2, #0
 8000528:	0018      	movs	r0, r3
 800052a:	f003 ff37 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000532:	f000 f9df 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000536:	1d39      	adds	r1, r7, #4
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <MX_TIM2_Init+0x134>)
 800053a:	2204      	movs	r2, #4
 800053c:	0018      	movs	r0, r3
 800053e:	f003 ff2d 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000546:	f000 f9d5 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800054a:	1d39      	adds	r1, r7, #4
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <MX_TIM2_Init+0x134>)
 800054e:	2208      	movs	r2, #8
 8000550:	0018      	movs	r0, r3
 8000552:	f003 ff23 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 800055a:	f000 f9cb 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800055e:	1d39      	adds	r1, r7, #4
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_TIM2_Init+0x134>)
 8000562:	220c      	movs	r2, #12
 8000564:	0018      	movs	r0, r3
 8000566:	f003 ff19 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 800056e:	f000 f9c1 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <MX_TIM2_Init+0x134>)
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fb09 	bl	8000b8c <HAL_TIM_MspPostInit>

}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b00e      	add	sp, #56	; 0x38
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000104 	.word	0x20000104

08000588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08e      	sub	sp, #56	; 0x38
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058e:	2328      	movs	r3, #40	; 0x28
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0018      	movs	r0, r3
 8000594:	2310      	movs	r3, #16
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f005 fc0d 	bl	8005db8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059e:	2320      	movs	r3, #32
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	0018      	movs	r0, r3
 80005a4:	2308      	movs	r3, #8
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f005 fc05 	bl	8005db8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	0018      	movs	r0, r3
 80005b2:	231c      	movs	r3, #28
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f005 fbfe 	bl	8005db8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005bc:	4b3a      	ldr	r3, [pc, #232]	; (80006a8 <MX_TIM3_Init+0x120>)
 80005be:	4a3b      	ldr	r2, [pc, #236]	; (80006ac <MX_TIM3_Init+0x124>)
 80005c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80005c2:	4b39      	ldr	r3, [pc, #228]	; (80006a8 <MX_TIM3_Init+0x120>)
 80005c4:	2207      	movs	r2, #7
 80005c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <MX_TIM3_Init+0x120>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80005ce:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <MX_TIM3_Init+0x120>)
 80005d0:	4a37      	ldr	r2, [pc, #220]	; (80006b0 <MX_TIM3_Init+0x128>)
 80005d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <MX_TIM3_Init+0x120>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <MX_TIM3_Init+0x120>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005e0:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <MX_TIM3_Init+0x120>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f003 fb62 	bl	8003cac <HAL_TIM_Base_Init>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005ec:	f000 f982 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	2128      	movs	r1, #40	; 0x28
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	0152      	lsls	r2, r2, #5
 80005f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005fa:	187a      	adds	r2, r7, r1
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_TIM3_Init+0x120>)
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f003 ff91 	bl	8004528 <HAL_TIM_ConfigClockSource>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800060a:	f000 f973 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MX_TIM3_Init+0x120>)
 8000610:	0018      	movs	r0, r3
 8000612:	f003 fc45 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800061a:	f000 f96b 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800061e:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <MX_TIM3_Init+0x120>)
 8000620:	0018      	movs	r0, r3
 8000622:	f003 fbe5 	bl	8003df0 <HAL_TIM_OC_Init>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800062a:	f000 f963 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062e:	2120      	movs	r1, #32
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800063c:	187a      	adds	r2, r7, r1
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_TIM3_Init+0x120>)
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f004 fb9e 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800064c:	f000 f952 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2260      	movs	r2, #96	; 0x60
 8000654:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_TIM3_Init+0x120>)
 800066c:	2200      	movs	r2, #0
 800066e:	0018      	movs	r0, r3
 8000670:	f003 fe94 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8000678:	f000 f93c 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000682:	1d39      	adds	r1, r7, #4
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_TIM3_Init+0x120>)
 8000686:	2204      	movs	r2, #4
 8000688:	0018      	movs	r0, r3
 800068a:	f003 fe2f 	bl	80042ec <HAL_TIM_OC_ConfigChannel>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8000692:	f000 f92f 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <MX_TIM3_Init+0x120>)
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fa77 	bl	8000b8c <HAL_TIM_MspPostInit>

}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b00e      	add	sp, #56	; 0x38
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	2000014c 	.word	0x2000014c
 80006ac:	40000400 	.word	0x40000400
 80006b0:	00004e1f 	.word	0x00004e1f

080006b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	003b      	movs	r3, r7
 80006bc:	0018      	movs	r0, r3
 80006be:	2308      	movs	r3, #8
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f005 fb78 	bl	8005db8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_TIM6_Init+0x6c>)
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <MX_TIM6_Init+0x70>)
 80006cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_TIM6_Init+0x6c>)
 80006d0:	2207      	movs	r2, #7
 80006d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_TIM6_Init+0x6c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1947;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_TIM6_Init+0x6c>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_TIM6_Init+0x74>)
 80006de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_TIM6_Init+0x6c>)
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_TIM6_Init+0x6c>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f003 fadf 	bl	8003cac <HAL_TIM_Base_Init>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80006f2:	f000 f8ff 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000702:	003a      	movs	r2, r7
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_TIM6_Init+0x6c>)
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f004 fb3b 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000712:	f000 f8ef 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000194 	.word	0x20000194
 8000724:	40001000 	.word	0x40001000
 8000728:	0000079b 	.word	0x0000079b

0800072c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_USART1_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000738:	22e1      	movs	r2, #225	; 0xe1
 800073a:	0252      	lsls	r2, r2, #9
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART1_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART1_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART1_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000770:	0018      	movs	r0, r3
 8000772:	f004 fb75 	bl	8004e60 <HAL_UART_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f8bb 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200001dc 	.word	0x200001dc
 8000788:	40013800 	.word	0x40013800

0800078c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_DMA_Init+0x58>)
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_DMA_Init+0x58>)
 8000798:	2101      	movs	r1, #1
 800079a:	430a      	orrs	r2, r1
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_DMA_Init+0x58>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	2201      	movs	r2, #1
 80007a4:	4013      	ands	r3, r2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2009      	movs	r0, #9
 80007b0:	f000 fd2c 	bl	800120c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80007b4:	2009      	movs	r0, #9
 80007b6:	f000 fd3e 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	200a      	movs	r0, #10
 80007c0:	f000 fd24 	bl	800120c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f000 fd36 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	200b      	movs	r0, #11
 80007d0:	f000 fd1c 	bl	800120c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80007d4:	200b      	movs	r0, #11
 80007d6:	f000 fd2e 	bl	8001236 <HAL_NVIC_EnableIRQ>

}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	40021000 	.word	0x40021000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b08b      	sub	sp, #44	; 0x2c
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	2414      	movs	r4, #20
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2314      	movs	r3, #20
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f005 fadd 	bl	8005db8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b37      	ldr	r3, [pc, #220]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000800:	695a      	ldr	r2, [r3, #20]
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	03c9      	lsls	r1, r1, #15
 8000808:	430a      	orrs	r2, r1
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	4b33      	ldr	r3, [pc, #204]	; (80008dc <MX_GPIO_Init+0xf4>)
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	03db      	lsls	r3, r3, #15
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_GPIO_Init+0xf4>)
 800081c:	695a      	ldr	r2, [r3, #20]
 800081e:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	0309      	lsls	r1, r1, #12
 8000824:	430a      	orrs	r2, r1
 8000826:	615a      	str	r2, [r3, #20]
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_GPIO_Init+0xf4>)
 800082a:	695a      	ldr	r2, [r3, #20]
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	031b      	lsls	r3, r3, #12
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000838:	695a      	ldr	r2, [r3, #20]
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_GPIO_Init+0xf4>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0289      	lsls	r1, r1, #10
 8000840:	430a      	orrs	r2, r1
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000846:	695a      	ldr	r2, [r3, #20]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	029b      	lsls	r3, r3, #10
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000854:	695a      	ldr	r2, [r3, #20]
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	02c9      	lsls	r1, r1, #11
 800085c:	430a      	orrs	r2, r1
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	02db      	lsls	r3, r3, #11
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_GPIO_Init+0xf8>)
 8000870:	2200      	movs	r2, #0
 8000872:	213f      	movs	r1, #63	; 0x3f
 8000874:	0018      	movs	r0, r3
 8000876:	f001 f821 	bl	80018bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800087a:	2390      	movs	r3, #144	; 0x90
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	2200      	movs	r2, #0
 8000880:	2130      	movs	r1, #48	; 0x30
 8000882:	0018      	movs	r0, r3
 8000884:	f001 f81a 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000888:	193b      	adds	r3, r7, r4
 800088a:	223f      	movs	r2, #63	; 0x3f
 800088c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MX_GPIO_Init+0xf8>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fe90 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2230      	movs	r2, #48	; 0x30
 80008b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2201      	movs	r2, #1
 80008b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	187a      	adds	r2, r7, r1
 80008c8:	2390      	movs	r3, #144	; 0x90
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fe7c 	bl	80015cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b00b      	add	sp, #44	; 0x2c
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000800 	.word	0x48000800

080008e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	int16_t gyroDataZ = (int16_t)((gyroData[5] << 8) | gyroData[4]); // Z-axis

	int16_t accelDataX = (int16_t)((accelData[1] << 8) | accelData[0]); // X-axis
	int16_t accelDataY = (int16_t)((accelData[3] << 8) | accelData[2]); // Y-axis
	int16_t accelDataZ = (int16_t)((accelData[5] << 8) | accelData[4]); // Z-axis*/
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x44>)
 8000908:	699a      	ldr	r2, [r3, #24]
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_MspInit+0x44>)
 800090c:	2101      	movs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	619a      	str	r2, [r3, #24]
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x44>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x44>)
 8000920:	69da      	ldr	r2, [r3, #28]
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_MspInit+0x44>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0549      	lsls	r1, r1, #21
 8000928:	430a      	orrs	r2, r1
 800092a:	61da      	str	r2, [r3, #28]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_MspInit+0x44>)
 800092e:	69da      	ldr	r2, [r3, #28]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	055b      	lsls	r3, r3, #21
 8000934:	4013      	ands	r3, r2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b08b      	sub	sp, #44	; 0x2c
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	2414      	movs	r4, #20
 8000952:	193b      	adds	r3, r7, r4
 8000954:	0018      	movs	r0, r3
 8000956:	2314      	movs	r3, #20
 8000958:	001a      	movs	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	f005 fa2c 	bl	8005db8 <memset>
  if(hi2c->Instance==I2C2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a59      	ldr	r2, [pc, #356]	; (8000acc <HAL_I2C_MspInit+0x184>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d000      	beq.n	800096c <HAL_I2C_MspInit+0x24>
 800096a:	e0aa      	b.n	8000ac2 <HAL_I2C_MspInit+0x17a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b58      	ldr	r3, [pc, #352]	; (8000ad0 <HAL_I2C_MspInit+0x188>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <HAL_I2C_MspInit+0x188>)
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	02c9      	lsls	r1, r1, #11
 8000976:	430a      	orrs	r2, r1
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	4b55      	ldr	r3, [pc, #340]	; (8000ad0 <HAL_I2C_MspInit+0x188>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	02db      	lsls	r3, r3, #11
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	22c0      	movs	r2, #192	; 0xc0
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	0021      	movs	r1, r4
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2212      	movs	r2, #18
 8000996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2203      	movs	r2, #3
 80009a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2201      	movs	r2, #1
 80009a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	4a49      	ldr	r2, [pc, #292]	; (8000ad4 <HAL_I2C_MspInit+0x18c>)
 80009ae:	0019      	movs	r1, r3
 80009b0:	0010      	movs	r0, r2
 80009b2:	f000 fe0b 	bl	80015cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009b6:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <HAL_I2C_MspInit+0x188>)
 80009b8:	69da      	ldr	r2, [r3, #28]
 80009ba:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <HAL_I2C_MspInit+0x188>)
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	03c9      	lsls	r1, r1, #15
 80009c0:	430a      	orrs	r2, r1
 80009c2:	61da      	str	r2, [r3, #28]
 80009c4:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <HAL_I2C_MspInit+0x188>)
 80009c6:	69da      	ldr	r2, [r3, #28]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	03db      	lsls	r3, r3, #15
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 80009d4:	4a41      	ldr	r2, [pc, #260]	; (8000adc <HAL_I2C_MspInit+0x194>)
 80009d6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d8:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009de:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009e4:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f0:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80009f6:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80009fc:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	0192      	lsls	r2, r2, #6
 8000a02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000a04:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fc32 	bl	8001270 <HAL_DMA_Init>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000a10:	f7ff ff70 	bl	80008f4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH5_I2C2_RX);
 8000a14:	4a32      	ldr	r2, [pc, #200]	; (8000ae0 <HAL_I2C_MspInit+0x198>)
 8000a16:	23a8      	movs	r3, #168	; 0xa8
 8000a18:	58d3      	ldr	r3, [r2, r3]
 8000a1a:	4931      	ldr	r1, [pc, #196]	; (8000ae0 <HAL_I2C_MspInit+0x198>)
 8000a1c:	4a31      	ldr	r2, [pc, #196]	; (8000ae4 <HAL_I2C_MspInit+0x19c>)
 8000a1e:	4013      	ands	r3, r2
 8000a20:	22a8      	movs	r2, #168	; 0xa8
 8000a22:	508b      	str	r3, [r1, r2]
 8000a24:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <HAL_I2C_MspInit+0x198>)
 8000a26:	23a8      	movs	r3, #168	; 0xa8
 8000a28:	58d3      	ldr	r3, [r2, r3]
 8000a2a:	492d      	ldr	r1, [pc, #180]	; (8000ae0 <HAL_I2C_MspInit+0x198>)
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0292      	lsls	r2, r2, #10
 8000a30:	4313      	orrs	r3, r2
 8000a32:	22a8      	movs	r2, #168	; 0xa8
 8000a34:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 8000a3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <HAL_I2C_MspInit+0x190>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000a44:	4a29      	ldr	r2, [pc, #164]	; (8000aec <HAL_I2C_MspInit+0x1a4>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	0192      	lsls	r2, r2, #6
 8000a72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fbfa 	bl	8001270 <HAL_DMA_Init>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 8000a80:	f7ff ff38 	bl	80008f4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_I2C2_TX);
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_I2C_MspInit+0x198>)
 8000a86:	23a8      	movs	r3, #168	; 0xa8
 8000a88:	58d3      	ldr	r3, [r2, r3]
 8000a8a:	4915      	ldr	r1, [pc, #84]	; (8000ae0 <HAL_I2C_MspInit+0x198>)
 8000a8c:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <HAL_I2C_MspInit+0x1a8>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	22a8      	movs	r2, #168	; 0xa8
 8000a92:	508b      	str	r3, [r1, r2]
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <HAL_I2C_MspInit+0x198>)
 8000a96:	23a8      	movs	r3, #168	; 0xa8
 8000a98:	58d3      	ldr	r3, [r2, r3]
 8000a9a:	4911      	ldr	r1, [pc, #68]	; (8000ae0 <HAL_I2C_MspInit+0x198>)
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	0192      	lsls	r2, r2, #6
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	22a8      	movs	r2, #168	; 0xa8
 8000aa4:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_I2C_MspInit+0x1a0>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2018      	movs	r0, #24
 8000ab8:	f000 fba8 	bl	800120c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000abc:	2018      	movs	r0, #24
 8000abe:	f000 fbba 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b00b      	add	sp, #44	; 0x2c
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40005800 	.word	0x40005800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	2000007c 	.word	0x2000007c
 8000adc:	40020058 	.word	0x40020058
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	fff0ffff 	.word	0xfff0ffff
 8000ae8:	200000c0 	.word	0x200000c0
 8000aec:	40020044 	.word	0x40020044
 8000af0:	ffff0fff 	.word	0xffff0fff

08000af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d10c      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <HAL_TIM_Base_MspInit+0x8c>)
 8000b0a:	69da      	ldr	r2, [r3, #28]
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_TIM_Base_MspInit+0x8c>)
 8000b0e:	2101      	movs	r1, #1
 8000b10:	430a      	orrs	r2, r1
 8000b12:	61da      	str	r2, [r3, #28]
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <HAL_TIM_Base_MspInit+0x8c>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b20:	e02a      	b.n	8000b78 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <HAL_TIM_Base_MspInit+0x90>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d10c      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_TIM_Base_MspInit+0x8c>)
 8000b2e:	69da      	ldr	r2, [r3, #28]
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <HAL_TIM_Base_MspInit+0x8c>)
 8000b32:	2102      	movs	r1, #2
 8000b34:	430a      	orrs	r2, r1
 8000b36:	61da      	str	r2, [r3, #28]
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_TIM_Base_MspInit+0x8c>)
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]
}
 8000b44:	e018      	b.n	8000b78 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM6)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <HAL_TIM_Base_MspInit+0x94>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d113      	bne.n	8000b78 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_TIM_Base_MspInit+0x8c>)
 8000b52:	69da      	ldr	r2, [r3, #28]
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_TIM_Base_MspInit+0x8c>)
 8000b56:	2110      	movs	r1, #16
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	61da      	str	r2, [r3, #28]
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_TIM_Base_MspInit+0x8c>)
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	2210      	movs	r2, #16
 8000b62:	4013      	ands	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2011      	movs	r0, #17
 8000b6e:	f000 fb4d 	bl	800120c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b72:	2011      	movs	r0, #17
 8000b74:	f000 fb5f 	bl	8001236 <HAL_NVIC_EnableIRQ>
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b006      	add	sp, #24
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40000400 	.word	0x40000400
 8000b88:	40001000 	.word	0x40001000

08000b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b08b      	sub	sp, #44	; 0x2c
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	2414      	movs	r4, #20
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	0018      	movs	r0, r3
 8000b9a:	2314      	movs	r3, #20
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f005 f90a 	bl	8005db8 <memset>
  if(htim->Instance==TIM2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d125      	bne.n	8000bfc <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <HAL_TIM_MspPostInit+0xcc>)
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <HAL_TIM_MspPostInit+0xcc>)
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	0289      	lsls	r1, r1, #10
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_TIM_MspPostInit+0xcc>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	029b      	lsls	r3, r3, #10
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bcc:	0021      	movs	r1, r4
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2202      	movs	r2, #2
 8000bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	187a      	adds	r2, r7, r1
 8000bee:	2390      	movs	r3, #144	; 0x90
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fce9 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bfa:	e029      	b.n	8000c50 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM3)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <HAL_TIM_MspPostInit+0xd0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d124      	bne.n	8000c50 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_TIM_MspPostInit+0xcc>)
 8000c08:	695a      	ldr	r2, [r3, #20]
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_TIM_MspPostInit+0xcc>)
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	0289      	lsls	r1, r1, #10
 8000c10:	430a      	orrs	r2, r1
 8000c12:	615a      	str	r2, [r3, #20]
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_TIM_MspPostInit+0xcc>)
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	029b      	lsls	r3, r3, #10
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c22:	2114      	movs	r1, #20
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	22c0      	movs	r2, #192	; 0xc0
 8000c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2201      	movs	r2, #1
 8000c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	187a      	adds	r2, r7, r1
 8000c44:	2390      	movs	r3, #144	; 0x90
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fcbe 	bl	80015cc <HAL_GPIO_Init>
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b00b      	add	sp, #44	; 0x2c
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40000400 	.word	0x40000400

08000c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b08b      	sub	sp, #44	; 0x2c
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	2414      	movs	r4, #20
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	2314      	movs	r3, #20
 8000c70:	001a      	movs	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	f005 f8a0 	bl	8005db8 <memset>
  if(huart->Instance==USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a57      	ldr	r2, [pc, #348]	; (8000ddc <HAL_UART_MspInit+0x17c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d000      	beq.n	8000c84 <HAL_UART_MspInit+0x24>
 8000c82:	e0a7      	b.n	8000dd4 <HAL_UART_MspInit+0x174>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c84:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <HAL_UART_MspInit+0x180>)
 8000c86:	699a      	ldr	r2, [r3, #24]
 8000c88:	4b55      	ldr	r3, [pc, #340]	; (8000de0 <HAL_UART_MspInit+0x180>)
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	01c9      	lsls	r1, r1, #7
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	619a      	str	r2, [r3, #24]
 8000c92:	4b53      	ldr	r3, [pc, #332]	; (8000de0 <HAL_UART_MspInit+0x180>)
 8000c94:	699a      	ldr	r2, [r3, #24]
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	01db      	lsls	r3, r3, #7
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <HAL_UART_MspInit+0x180>)
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	4b4e      	ldr	r3, [pc, #312]	; (8000de0 <HAL_UART_MspInit+0x180>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0289      	lsls	r1, r1, #10
 8000caa:	430a      	orrs	r2, r1
 8000cac:	615a      	str	r2, [r3, #20]
 8000cae:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <HAL_UART_MspInit+0x180>)
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	029b      	lsls	r3, r3, #10
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	22c0      	movs	r2, #192	; 0xc0
 8000cc0:	00d2      	lsls	r2, r2, #3
 8000cc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2202      	movs	r2, #2
 8000cca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2201      	movs	r2, #1
 8000cdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	187a      	adds	r2, r7, r1
 8000ce0:	2390      	movs	r3, #144	; 0x90
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 fc70 	bl	80015cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000cec:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000cee:	4a3e      	ldr	r2, [pc, #248]	; (8000de8 <HAL_UART_MspInit+0x188>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf8:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfe:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d04:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d10:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000d12:	2220      	movs	r2, #32
 8000d14:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 faa6 	bl	8001270 <HAL_DMA_Init>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000d28:	f7ff fde4 	bl	80008f4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000d2c:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <HAL_UART_MspInit+0x18c>)
 8000d2e:	23a8      	movs	r3, #168	; 0xa8
 8000d30:	58d3      	ldr	r3, [r2, r3]
 8000d32:	492e      	ldr	r1, [pc, #184]	; (8000dec <HAL_UART_MspInit+0x18c>)
 8000d34:	220f      	movs	r2, #15
 8000d36:	4393      	bics	r3, r2
 8000d38:	22a8      	movs	r2, #168	; 0xa8
 8000d3a:	508b      	str	r3, [r1, r2]
 8000d3c:	4a2b      	ldr	r2, [pc, #172]	; (8000dec <HAL_UART_MspInit+0x18c>)
 8000d3e:	23a8      	movs	r3, #168	; 0xa8
 8000d40:	58d3      	ldr	r3, [r2, r3]
 8000d42:	492a      	ldr	r1, [pc, #168]	; (8000dec <HAL_UART_MspInit+0x18c>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	4313      	orrs	r3, r2
 8000d48:	22a8      	movs	r2, #168	; 0xa8
 8000d4a:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000d50:	675a      	str	r2, [r3, #116]	; 0x74
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <HAL_UART_MspInit+0x184>)
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000d5a:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <HAL_UART_MspInit+0x194>)
 8000d5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000d60:	2210      	movs	r2, #16
 8000d62:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fa70 	bl	8001270 <HAL_DMA_Init>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000d94:	f7ff fdae 	bl	80008f4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_UART_MspInit+0x18c>)
 8000d9a:	23a8      	movs	r3, #168	; 0xa8
 8000d9c:	58d3      	ldr	r3, [r2, r3]
 8000d9e:	4913      	ldr	r1, [pc, #76]	; (8000dec <HAL_UART_MspInit+0x18c>)
 8000da0:	22f0      	movs	r2, #240	; 0xf0
 8000da2:	4393      	bics	r3, r2
 8000da4:	22a8      	movs	r2, #168	; 0xa8
 8000da6:	508b      	str	r3, [r1, r2]
 8000da8:	4a10      	ldr	r2, [pc, #64]	; (8000dec <HAL_UART_MspInit+0x18c>)
 8000daa:	23a8      	movs	r3, #168	; 0xa8
 8000dac:	58d3      	ldr	r3, [r2, r3]
 8000dae:	490f      	ldr	r1, [pc, #60]	; (8000dec <HAL_UART_MspInit+0x18c>)
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	4313      	orrs	r3, r2
 8000db4:	22a8      	movs	r2, #168	; 0xa8
 8000db6:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000dbc:	671a      	str	r2, [r3, #112]	; 0x70
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_UART_MspInit+0x190>)
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	201b      	movs	r0, #27
 8000dca:	f000 fa1f 	bl	800120c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dce:	201b      	movs	r0, #27
 8000dd0:	f000 fa31 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b00b      	add	sp, #44	; 0x2c
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	40021000 	.word	0x40021000
 8000de4:	20000264 	.word	0x20000264
 8000de8:	40020008 	.word	0x40020008
 8000dec:	40020000 	.word	0x40020000
 8000df0:	200002a8 	.word	0x200002a8
 8000df4:	4002001c 	.word	0x4002001c

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f90a 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <DMA1_Ch1_IRQHandler+0x14>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 fae3 	bl	80013fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	20000264 	.word	0x20000264

08000e40 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 fad7 	bl	80013fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	200002a8 	.word	0x200002a8

08000e58 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_i2c2_tx);
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x14>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 facb 	bl	80013fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	2000007c 	.word	0x2000007c

08000e70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <TIM6_DAC_IRQHandler+0x14>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f003 f922 	bl	80040c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	20000194 	.word	0x20000194

08000e88 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <I2C2_IRQHandler+0x2c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	23e0      	movs	r3, #224	; 0xe0
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4013      	ands	r3, r2
 8000e98:	d004      	beq.n	8000ea4 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <I2C2_IRQHandler+0x2c>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 f823 	bl	8001ee8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8000ea2:	e003      	b.n	8000eac <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <I2C2_IRQHandler+0x2c>)
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 f804 	bl	8001eb4 <HAL_I2C_EV_IRQHandler>
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20000028 	.word	0x20000028

08000eb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <USART1_IRQHandler+0x14>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f004 f822 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	200001dc 	.word	0x200001dc

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <motor1_control>:
#define M3IN2 0b100000
#define M4IN1 0b10000
#define M4IN2 0b100000

void motor1_control(int direction, int speed)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	if(!speed)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d106      	bne.n	8000efa <motor1_control+0x1e>
	{
		HAL_GPIO_WritePin(GPIOC, M1IN1 | M1IN2, GPIO_PIN_RESET);
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <motor1_control+0x70>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2103      	movs	r1, #3
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 fce2 	bl	80018bc <HAL_GPIO_WritePin>
		return;
 8000ef8:	e024      	b.n	8000f44 <motor1_control+0x68>
	}

	if(direction)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d010      	beq.n	8000f22 <motor1_control+0x46>
	{
		HAL_GPIO_WritePin(GPIOC, M1IN1, GPIO_PIN_SET);
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <motor1_control+0x70>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	2101      	movs	r1, #1
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fcd8 	bl	80018bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, M1IN2, GPIO_PIN_RESET);
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <motor1_control+0x70>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2102      	movs	r1, #2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fcd2 	bl	80018bc <HAL_GPIO_WritePin>
		TIM2->CCR1 = speed;
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, M1IN1, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, M1IN2, GPIO_PIN_SET);
		TIM2->CCR1 = speed;
	}

	return;
 8000f20:	e00f      	b.n	8000f42 <motor1_control+0x66>
		HAL_GPIO_WritePin(GPIOC, M1IN1, GPIO_PIN_RESET);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <motor1_control+0x70>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	2101      	movs	r1, #1
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 fcc7 	bl	80018bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, M1IN2, GPIO_PIN_SET);
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <motor1_control+0x70>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	2102      	movs	r1, #2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fcc1 	bl	80018bc <HAL_GPIO_WritePin>
		TIM2->CCR1 = speed;
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8000f42:	46c0      	nop			; (mov r8, r8)
}
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	48000800 	.word	0x48000800

08000f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f54:	f7ff ffbc 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5a:	490d      	ldr	r1, [pc, #52]	; (8000f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <LoopForever+0xe>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f70:	4c0a      	ldr	r4, [pc, #40]	; (8000f9c <LoopForever+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f7e:	f004 ff23 	bl	8005dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f82:	f7ff f94b 	bl	800021c <main>

08000f86 <LoopForever>:

LoopForever:
    b LoopForever
 8000f86:	e7fe      	b.n	8000f86 <LoopForever>
  ldr   r0, =_estack
 8000f88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f94:	08005e68 	.word	0x08005e68
  ldr r2, =_sbss
 8000f98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f9c:	200002f0 	.word	0x200002f0

08000fa0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_COMP_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_Init+0x24>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_Init+0x24>)
 8000fae:	2110      	movs	r1, #16
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f809 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fba:	f7ff fca1 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	40022000 	.word	0x40022000

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_InitTick+0x5c>)
 8000fd6:	681c      	ldr	r4, [r3, #0]
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_InitTick+0x60>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	0019      	movs	r1, r3
 8000fde:	23fa      	movs	r3, #250	; 0xfa
 8000fe0:	0098      	lsls	r0, r3, #2
 8000fe2:	f7ff f88f 	bl	8000104 <__udivsi3>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	0019      	movs	r1, r3
 8000fea:	0020      	movs	r0, r4
 8000fec:	f7ff f88a 	bl	8000104 <__udivsi3>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 f92f 	bl	8001256 <HAL_SYSTICK_Config>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e00f      	b.n	8001020 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d80b      	bhi.n	800101e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	2301      	movs	r3, #1
 800100a:	425b      	negs	r3, r3
 800100c:	2200      	movs	r2, #0
 800100e:	0018      	movs	r0, r3
 8001010:	f000 f8fc 	bl	800120c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_InitTick+0x64>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b003      	add	sp, #12
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x1c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	001a      	movs	r2, r3
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_IncTick+0x20>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	18d2      	adds	r2, r2, r3
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_IncTick+0x20>)
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20000008 	.word	0x20000008
 8001054:	200002ec 	.word	0x200002ec

08001058 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <HAL_GetTick+0x10>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	200002ec 	.word	0x200002ec

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff fff0 	bl	8001058 <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3301      	adds	r3, #1
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	001a      	movs	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	189b      	adds	r3, r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	f7ff ffe0 	bl	8001058 <HAL_GetTick>
 8001098:	0002      	movs	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b004      	add	sp, #16
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	0002      	movs	r2, r0
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b7f      	cmp	r3, #127	; 0x7f
 80010c6:	d809      	bhi.n	80010dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	001a      	movs	r2, r3
 80010ce:	231f      	movs	r3, #31
 80010d0:	401a      	ands	r2, r3
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_EnableIRQ+0x30>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	4091      	lsls	r1, r2
 80010d8:	000a      	movs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
  }
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	0002      	movs	r2, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b7f      	cmp	r3, #127	; 0x7f
 80010fc:	d828      	bhi.n	8001150 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fe:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <__NVIC_SetPriority+0xd4>)
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b25b      	sxtb	r3, r3
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	33c0      	adds	r3, #192	; 0xc0
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	589b      	ldr	r3, [r3, r2]
 800110e:	1dfa      	adds	r2, r7, #7
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	0011      	movs	r1, r2
 8001114:	2203      	movs	r2, #3
 8001116:	400a      	ands	r2, r1
 8001118:	00d2      	lsls	r2, r2, #3
 800111a:	21ff      	movs	r1, #255	; 0xff
 800111c:	4091      	lsls	r1, r2
 800111e:	000a      	movs	r2, r1
 8001120:	43d2      	mvns	r2, r2
 8001122:	401a      	ands	r2, r3
 8001124:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	019b      	lsls	r3, r3, #6
 800112a:	22ff      	movs	r2, #255	; 0xff
 800112c:	401a      	ands	r2, r3
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	0018      	movs	r0, r3
 8001134:	2303      	movs	r3, #3
 8001136:	4003      	ands	r3, r0
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113c:	481f      	ldr	r0, [pc, #124]	; (80011bc <__NVIC_SetPriority+0xd4>)
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b25b      	sxtb	r3, r3
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	430a      	orrs	r2, r1
 8001148:	33c0      	adds	r3, #192	; 0xc0
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800114e:	e031      	b.n	80011b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <__NVIC_SetPriority+0xd8>)
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	0019      	movs	r1, r3
 8001158:	230f      	movs	r3, #15
 800115a:	400b      	ands	r3, r1
 800115c:	3b08      	subs	r3, #8
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3306      	adds	r3, #6
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	18d3      	adds	r3, r2, r3
 8001166:	3304      	adds	r3, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1dfa      	adds	r2, r7, #7
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	0011      	movs	r1, r2
 8001170:	2203      	movs	r2, #3
 8001172:	400a      	ands	r2, r1
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	21ff      	movs	r1, #255	; 0xff
 8001178:	4091      	lsls	r1, r2
 800117a:	000a      	movs	r2, r1
 800117c:	43d2      	mvns	r2, r2
 800117e:	401a      	ands	r2, r3
 8001180:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	019b      	lsls	r3, r3, #6
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	401a      	ands	r2, r3
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	0018      	movs	r0, r3
 8001190:	2303      	movs	r3, #3
 8001192:	4003      	ands	r3, r0
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <__NVIC_SetPriority+0xd8>)
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	001c      	movs	r4, r3
 80011a0:	230f      	movs	r3, #15
 80011a2:	4023      	ands	r3, r4
 80011a4:	3b08      	subs	r3, #8
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	430a      	orrs	r2, r1
 80011aa:	3306      	adds	r3, #6
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	18c3      	adds	r3, r0, r3
 80011b0:	3304      	adds	r3, #4
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b003      	add	sp, #12
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	045b      	lsls	r3, r3, #17
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d301      	bcc.n	80011dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d8:	2301      	movs	r3, #1
 80011da:	e010      	b.n	80011fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <SysTick_Config+0x44>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	3a01      	subs	r2, #1
 80011e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e4:	2301      	movs	r3, #1
 80011e6:	425b      	negs	r3, r3
 80011e8:	2103      	movs	r1, #3
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff ff7c 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x44>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x44>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	210f      	movs	r1, #15
 8001218:	187b      	adds	r3, r7, r1
 800121a:	1c02      	adds	r2, r0, #0
 800121c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	187b      	adds	r3, r7, r1
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b25b      	sxtb	r3, r3
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b004      	add	sp, #16
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	0002      	movs	r2, r0
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b25b      	sxtb	r3, r3
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff ff33 	bl	80010b4 <__NVIC_EnableIRQ>
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff ffaf 	bl	80011c4 <SysTick_Config>
 8001266:	0003      	movs	r3, r0
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e036      	b.n	80012f4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2221      	movs	r2, #33	; 0x21
 800128a:	2102      	movs	r1, #2
 800128c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4a18      	ldr	r2, [pc, #96]	; (80012fc <HAL_DMA_Init+0x8c>)
 800129a:	4013      	ands	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 f93e 	bl	8001558 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2221      	movs	r2, #33	; 0x21
 80012e6:	2101      	movs	r1, #1
 80012e8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2220      	movs	r2, #32
 80012ee:	2100      	movs	r1, #0
 80012f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b004      	add	sp, #16
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	ffffc00f 	.word	0xffffc00f

08001300 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2221      	movs	r2, #33	; 0x21
 800130c:	5c9b      	ldrb	r3, [r3, r2]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d008      	beq.n	8001326 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2204      	movs	r2, #4
 8001318:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2220      	movs	r2, #32
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e020      	b.n	8001368 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	210e      	movs	r1, #14
 8001332:	438a      	bics	r2, r1
 8001334:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	438a      	bics	r2, r1
 8001344:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134e:	2101      	movs	r1, #1
 8001350:	4091      	lsls	r1, r2
 8001352:	000a      	movs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2221      	movs	r2, #33	; 0x21
 800135a:	2101      	movs	r1, #1
 800135c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2220      	movs	r2, #32
 8001362:	2100      	movs	r1, #0
 8001364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001378:	210f      	movs	r1, #15
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2221      	movs	r2, #33	; 0x21
 8001384:	5c9b      	ldrb	r3, [r3, r2]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d006      	beq.n	800139a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2204      	movs	r2, #4
 8001390:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e028      	b.n	80013ec <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	210e      	movs	r1, #14
 80013a6:	438a      	bics	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	438a      	bics	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c2:	2101      	movs	r1, #1
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2221      	movs	r2, #33	; 0x21
 80013ce:	2101      	movs	r1, #1
 80013d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2220      	movs	r2, #32
 80013d6:	2100      	movs	r1, #0
 80013d8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d004      	beq.n	80013ec <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	0010      	movs	r0, r2
 80013ea:	4798      	blx	r3
    }
  }
  return status;
 80013ec:	230f      	movs	r3, #15
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	781b      	ldrb	r3, [r3, #0]
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b004      	add	sp, #16
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2204      	movs	r2, #4
 8001418:	409a      	lsls	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	d024      	beq.n	800146c <HAL_DMA_IRQHandler+0x72>
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2204      	movs	r2, #4
 8001426:	4013      	ands	r3, r2
 8001428:	d020      	beq.n	800146c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2220      	movs	r2, #32
 8001432:	4013      	ands	r3, r2
 8001434:	d107      	bne.n	8001446 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2104      	movs	r1, #4
 8001442:	438a      	bics	r2, r1
 8001444:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144e:	2104      	movs	r1, #4
 8001450:	4091      	lsls	r1, r2
 8001452:	000a      	movs	r2, r1
 8001454:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	2b00      	cmp	r3, #0
 800145c:	d100      	bne.n	8001460 <HAL_DMA_IRQHandler+0x66>
 800145e:	e06a      	b.n	8001536 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	0010      	movs	r0, r2
 8001468:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800146a:	e064      	b.n	8001536 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	2202      	movs	r2, #2
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	d02b      	beq.n	80014d4 <HAL_DMA_IRQHandler+0xda>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d027      	beq.n	80014d4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2220      	movs	r2, #32
 800148c:	4013      	ands	r3, r2
 800148e:	d10b      	bne.n	80014a8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	210a      	movs	r1, #10
 800149c:	438a      	bics	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2221      	movs	r2, #33	; 0x21
 80014a4:	2101      	movs	r1, #1
 80014a6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b0:	2102      	movs	r1, #2
 80014b2:	4091      	lsls	r1, r2
 80014b4:	000a      	movs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2220      	movs	r2, #32
 80014bc:	2100      	movs	r1, #0
 80014be:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d036      	beq.n	8001536 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	0010      	movs	r0, r2
 80014d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014d2:	e030      	b.n	8001536 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	2208      	movs	r2, #8
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	d028      	beq.n	8001536 <HAL_DMA_IRQHandler+0x13c>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2208      	movs	r2, #8
 80014e8:	4013      	ands	r3, r2
 80014ea:	d024      	beq.n	8001536 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	210e      	movs	r1, #14
 80014f8:	438a      	bics	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001504:	2101      	movs	r1, #1
 8001506:	4091      	lsls	r1, r2
 8001508:	000a      	movs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2221      	movs	r2, #33	; 0x21
 8001516:	2101      	movs	r1, #1
 8001518:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	0010      	movs	r0, r2
 8001532:	4798      	blx	r3
    }
  }
}
 8001534:	e7ff      	b.n	8001536 <HAL_DMA_IRQHandler+0x13c>
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b004      	add	sp, #16
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2221      	movs	r2, #33	; 0x21
 800154a:	5c9b      	ldrb	r3, [r3, r2]
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	001a      	movs	r2, r3
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <DMA_CalcBaseAndBitshift+0x60>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d810      	bhi.n	800158e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <DMA_CalcBaseAndBitshift+0x64>)
 8001572:	4694      	mov	ip, r2
 8001574:	4463      	add	r3, ip
 8001576:	2114      	movs	r1, #20
 8001578:	0018      	movs	r0, r3
 800157a:	f7fe fdc3 	bl	8000104 <__udivsi3>
 800157e:	0003      	movs	r3, r0
 8001580:	009a      	lsls	r2, r3, #2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <DMA_CalcBaseAndBitshift+0x68>)
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800158c:	e00f      	b.n	80015ae <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <DMA_CalcBaseAndBitshift+0x6c>)
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	2114      	movs	r1, #20
 800159a:	0018      	movs	r0, r3
 800159c:	f7fe fdb2 	bl	8000104 <__udivsi3>
 80015a0:	0003      	movs	r3, r0
 80015a2:	009a      	lsls	r2, r3, #2
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <DMA_CalcBaseAndBitshift+0x70>)
 80015ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	40020407 	.word	0x40020407
 80015bc:	bffdfff8 	.word	0xbffdfff8
 80015c0:	40020000 	.word	0x40020000
 80015c4:	bffdfbf8 	.word	0xbffdfbf8
 80015c8:	40020400 	.word	0x40020400

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015da:	e155      	b.n	8001888 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2101      	movs	r1, #1
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4091      	lsls	r1, r2
 80015e6:	000a      	movs	r2, r1
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d100      	bne.n	80015f4 <HAL_GPIO_Init+0x28>
 80015f2:	e146      	b.n	8001882 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2203      	movs	r2, #3
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d005      	beq.n	800160c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001608:	2b02      	cmp	r3, #2
 800160a:	d130      	bne.n	800166e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	409a      	lsls	r2, r3
 800161a:	0013      	movs	r3, r2
 800161c:	43da      	mvns	r2, r3
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	409a      	lsls	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001642:	2201      	movs	r2, #1
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	43da      	mvns	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	2201      	movs	r2, #1
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	4013      	ands	r3, r2
 8001676:	2b03      	cmp	r3, #3
 8001678:	d017      	beq.n	80016aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	43da      	mvns	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2203      	movs	r2, #3
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d123      	bne.n	80016fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	08da      	lsrs	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3208      	adds	r2, #8
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	58d3      	ldr	r3, [r2, r3]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2207      	movs	r2, #7
 80016c8:	4013      	ands	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	43da      	mvns	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2107      	movs	r1, #7
 80016e2:	400b      	ands	r3, r1
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	0092      	lsls	r2, r2, #2
 80016fa:	6939      	ldr	r1, [r7, #16]
 80016fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	409a      	lsls	r2, r3
 800170c:	0013      	movs	r3, r2
 800170e:	43da      	mvns	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	401a      	ands	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	409a      	lsls	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	23c0      	movs	r3, #192	; 0xc0
 8001738:	029b      	lsls	r3, r3, #10
 800173a:	4013      	ands	r3, r2
 800173c:	d100      	bne.n	8001740 <HAL_GPIO_Init+0x174>
 800173e:	e0a0      	b.n	8001882 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001740:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_GPIO_Init+0x2d4>)
 8001742:	699a      	ldr	r2, [r3, #24]
 8001744:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <HAL_GPIO_Init+0x2d4>)
 8001746:	2101      	movs	r1, #1
 8001748:	430a      	orrs	r2, r1
 800174a:	619a      	str	r2, [r3, #24]
 800174c:	4b54      	ldr	r3, [pc, #336]	; (80018a0 <HAL_GPIO_Init+0x2d4>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001758:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_GPIO_Init+0x2d8>)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	589b      	ldr	r3, [r3, r2]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2203      	movs	r2, #3
 800176a:	4013      	ands	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	43da      	mvns	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	2390      	movs	r3, #144	; 0x90
 8001780:	05db      	lsls	r3, r3, #23
 8001782:	429a      	cmp	r2, r3
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0x1ee>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a47      	ldr	r2, [pc, #284]	; (80018a8 <HAL_GPIO_Init+0x2dc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x1ea>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a46      	ldr	r2, [pc, #280]	; (80018ac <HAL_GPIO_Init+0x2e0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x1e6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a45      	ldr	r2, [pc, #276]	; (80018b0 <HAL_GPIO_Init+0x2e4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x1e2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a44      	ldr	r2, [pc, #272]	; (80018b4 <HAL_GPIO_Init+0x2e8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x1de>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e008      	b.n	80017bc <HAL_GPIO_Init+0x1f0>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x1f0>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x1f0>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x1f0>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x1f0>
 80017ba:	2300      	movs	r3, #0
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	2103      	movs	r1, #3
 80017c0:	400a      	ands	r2, r1
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017cc:	4935      	ldr	r1, [pc, #212]	; (80018a4 <HAL_GPIO_Init+0x2d8>)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	035b      	lsls	r3, r3, #13
 80017f2:	4013      	ands	r3, r2
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001804:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43da      	mvns	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	039b      	lsls	r3, r3, #14
 800181c:	4013      	ands	r3, r2
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	029b      	lsls	r3, r3, #10
 8001846:	4013      	ands	r3, r2
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43da      	mvns	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	025b      	lsls	r3, r3, #9
 8001870:	4013      	ands	r3, r2
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	40da      	lsrs	r2, r3
 8001890:	1e13      	subs	r3, r2, #0
 8001892:	d000      	beq.n	8001896 <HAL_GPIO_Init+0x2ca>
 8001894:	e6a2      	b.n	80015dc <HAL_GPIO_Init+0x10>
  } 
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b006      	add	sp, #24
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000
 80018a8:	48000400 	.word	0x48000400
 80018ac:	48000800 	.word	0x48000800
 80018b0:	48000c00 	.word	0x48000c00
 80018b4:	48001000 	.word	0x48001000
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	0008      	movs	r0, r1
 80018c6:	0011      	movs	r1, r2
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	1c02      	adds	r2, r0, #0
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	1c7b      	adds	r3, r7, #1
 80018d0:	1c0a      	adds	r2, r1, #0
 80018d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d4:	1c7b      	adds	r3, r7, #1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018dc:	1cbb      	adds	r3, r7, #2
 80018de:	881a      	ldrh	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e6:	1cbb      	adds	r3, r7, #2
 80018e8:	881a      	ldrh	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e082      	b.n	8001a10 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2241      	movs	r2, #65	; 0x41
 800190e:	5c9b      	ldrb	r3, [r3, r2]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff f811 	bl	8000948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2241      	movs	r2, #65	; 0x41
 800192a:	2124      	movs	r1, #36	; 0x24
 800192c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	438a      	bics	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_I2C_Init+0x120>)
 8001948:	400a      	ands	r2, r1
 800194a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4931      	ldr	r1, [pc, #196]	; (8001a1c <HAL_I2C_Init+0x124>)
 8001958:	400a      	ands	r2, r1
 800195a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0209      	lsls	r1, r1, #8
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	e007      	b.n	8001986 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2184      	movs	r1, #132	; 0x84
 8001980:	0209      	lsls	r1, r1, #8
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d104      	bne.n	8001998 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	491f      	ldr	r1, [pc, #124]	; (8001a20 <HAL_I2C_Init+0x128>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	491a      	ldr	r1, [pc, #104]	; (8001a1c <HAL_I2C_Init+0x124>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69d9      	ldr	r1, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	2120      	movs	r1, #32
 80019fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2242      	movs	r2, #66	; 0x42
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	f0ffffff 	.word	0xf0ffffff
 8001a1c:	ffff7fff 	.word	0xffff7fff
 8001a20:	02008000 	.word	0x02008000

08001a24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	000c      	movs	r4, r1
 8001a2e:	0010      	movs	r0, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	230a      	movs	r3, #10
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	1c22      	adds	r2, r4, #0
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	1c02      	adds	r2, r0, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	1dbb      	adds	r3, r7, #6
 8001a44:	1c0a      	adds	r2, r1, #0
 8001a46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2241      	movs	r2, #65	; 0x41
 8001a4c:	5c9b      	ldrb	r3, [r3, r2]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	d000      	beq.n	8001a56 <HAL_I2C_Mem_Write+0x32>
 8001a54:	e10c      	b.n	8001c70 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_I2C_Mem_Write+0x42>
 8001a5c:	232c      	movs	r3, #44	; 0x2c
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0ff      	b.n	8001c72 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	5c9b      	ldrb	r3, [r3, r2]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_I2C_Mem_Write+0x5c>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e0f8      	b.n	8001c72 <HAL_I2C_Mem_Write+0x24e>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	2101      	movs	r1, #1
 8001a86:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a88:	f7ff fae6 	bl	8001058 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	0219      	lsls	r1, r3, #8
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2319      	movs	r3, #25
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f001 f805 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8001aa2:	1e03      	subs	r3, r0, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0e3      	b.n	8001c72 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2241      	movs	r2, #65	; 0x41
 8001aae:	2121      	movs	r1, #33	; 0x21
 8001ab0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2242      	movs	r2, #66	; 0x42
 8001ab6:	2140      	movs	r1, #64	; 0x40
 8001ab8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	222c      	movs	r2, #44	; 0x2c
 8001aca:	18ba      	adds	r2, r7, r2
 8001acc:	8812      	ldrh	r2, [r2, #0]
 8001ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ad6:	1dbb      	adds	r3, r7, #6
 8001ad8:	881c      	ldrh	r4, [r3, #0]
 8001ada:	2308      	movs	r3, #8
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	881a      	ldrh	r2, [r3, #0]
 8001ae0:	230a      	movs	r3, #10
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	8819      	ldrh	r1, [r3, #0]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	0023      	movs	r3, r4
 8001af2:	f000 fb8b 	bl	800220c <I2C_RequestMemoryWrite>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	2100      	movs	r1, #0
 8001b00:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0b5      	b.n	8001c72 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2bff      	cmp	r3, #255	; 0xff
 8001b0e:	d911      	bls.n	8001b34 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	22ff      	movs	r2, #255	; 0xff
 8001b14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	045c      	lsls	r4, r3, #17
 8001b20:	230a      	movs	r3, #10
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	8819      	ldrh	r1, [r3, #0]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	0023      	movs	r3, r4
 8001b2e:	f001 f995 	bl	8002e5c <I2C_TransferConfig>
 8001b32:	e012      	b.n	8001b5a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	049c      	lsls	r4, r3, #18
 8001b48:	230a      	movs	r3, #10
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	8819      	ldrh	r1, [r3, #0]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	0023      	movs	r3, r4
 8001b56:	f001 f981 	bl	8002e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 fff1 	bl	8002b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e081      	b.n	8001c72 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d03a      	beq.n	8001c1e <HAL_I2C_Mem_Write+0x1fa>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d136      	bne.n	8001c1e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	0013      	movs	r3, r2
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	f000 ff75 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e053      	b.n	8001c72 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	d911      	bls.n	8001bf8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	22ff      	movs	r2, #255	; 0xff
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	045c      	lsls	r4, r3, #17
 8001be4:	230a      	movs	r3, #10
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	8819      	ldrh	r1, [r3, #0]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	2300      	movs	r3, #0
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	0023      	movs	r3, r4
 8001bf2:	f001 f933 	bl	8002e5c <I2C_TransferConfig>
 8001bf6:	e012      	b.n	8001c1e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	049c      	lsls	r4, r3, #18
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	8819      	ldrh	r1, [r3, #0]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	0023      	movs	r3, r4
 8001c1a:	f001 f91f 	bl	8002e5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d198      	bne.n	8001b5a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 ffd0 	bl	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e01a      	b.n	8001c72 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2220      	movs	r2, #32
 8001c42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	490b      	ldr	r1, [pc, #44]	; (8001c7c <HAL_I2C_Mem_Write+0x258>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2241      	movs	r2, #65	; 0x41
 8001c58:	2120      	movs	r1, #32
 8001c5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2242      	movs	r2, #66	; 0x42
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
  }
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b007      	add	sp, #28
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	fe00e800 	.word	0xfe00e800

08001c80 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	1c0a      	adds	r2, r1, #0
 8001c92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2241      	movs	r2, #65	; 0x41
 8001c9c:	5c9b      	ldrb	r3, [r3, r2]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d000      	beq.n	8001ca6 <HAL_I2C_IsDeviceReady+0x26>
 8001ca4:	e0fd      	b.n	8001ea2 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d101      	bne.n	8001cbe <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e0f2      	b.n	8001ea4 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2240      	movs	r2, #64	; 0x40
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2C_IsDeviceReady+0x4c>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0eb      	b.n	8001ea4 <HAL_I2C_IsDeviceReady+0x224>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2241      	movs	r2, #65	; 0x41
 8001cd8:	2124      	movs	r1, #36	; 0x24
 8001cda:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d107      	bne.n	8001cfa <HAL_I2C_IsDeviceReady+0x7a>
 8001cea:	230a      	movs	r3, #10
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	059b      	lsls	r3, r3, #22
 8001cf2:	0d9b      	lsrs	r3, r3, #22
 8001cf4:	4a6d      	ldr	r2, [pc, #436]	; (8001eac <HAL_I2C_IsDeviceReady+0x22c>)
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	e006      	b.n	8001d08 <HAL_I2C_IsDeviceReady+0x88>
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	059b      	lsls	r3, r3, #22
 8001d02:	0d9b      	lsrs	r3, r3, #22
 8001d04:	4a6a      	ldr	r2, [pc, #424]	; (8001eb0 <HAL_I2C_IsDeviceReady+0x230>)
 8001d06:	431a      	orrs	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d0e:	f7ff f9a3 	bl	8001058 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	4013      	ands	r3, r2
 8001d20:	3b20      	subs	r3, #32
 8001d22:	425a      	negs	r2, r3
 8001d24:	4153      	adcs	r3, r2
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	231f      	movs	r3, #31
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2210      	movs	r2, #16
 8001d36:	4013      	ands	r3, r2
 8001d38:	3b10      	subs	r3, #16
 8001d3a:	425a      	negs	r2, r3
 8001d3c:	4153      	adcs	r3, r2
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	231e      	movs	r3, #30
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d46:	e035      	b.n	8001db4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	d01a      	beq.n	8001d84 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d4e:	f7ff f983 	bl	8001058 <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d302      	bcc.n	8001d64 <HAL_I2C_IsDeviceReady+0xe4>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10f      	bne.n	8001d84 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2241      	movs	r2, #65	; 0x41
 8001d68:	2120      	movs	r1, #32
 8001d6a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	2220      	movs	r2, #32
 8001d72:	431a      	orrs	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2240      	movs	r2, #64	; 0x40
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e08f      	b.n	8001ea4 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	3b20      	subs	r3, #32
 8001d90:	425a      	negs	r2, r3
 8001d92:	4153      	adcs	r3, r2
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	231f      	movs	r3, #31
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2210      	movs	r2, #16
 8001da4:	4013      	ands	r3, r2
 8001da6:	3b10      	subs	r3, #16
 8001da8:	425a      	negs	r2, r3
 8001daa:	4153      	adcs	r3, r2
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	231e      	movs	r3, #30
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001db4:	231f      	movs	r3, #31
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d104      	bne.n	8001dc8 <HAL_I2C_IsDeviceReady+0x148>
 8001dbe:	231e      	movs	r3, #30
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0bf      	beq.n	8001d48 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2210      	movs	r2, #16
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d01a      	beq.n	8001e0c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	0013      	movs	r3, r2
 8001de0:	2200      	movs	r2, #0
 8001de2:	2120      	movs	r1, #32
 8001de4:	f000 fe62 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8001de8:	1e03      	subs	r3, r0, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e059      	b.n	8001ea4 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2220      	movs	r2, #32
 8001df6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2241      	movs	r2, #65	; 0x41
 8001dfc:	2120      	movs	r1, #32
 8001dfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	; 0x40
 8001e04:	2100      	movs	r1, #0
 8001e06:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e04b      	b.n	8001ea4 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	0013      	movs	r3, r2
 8001e16:	2200      	movs	r2, #0
 8001e18:	2120      	movs	r1, #32
 8001e1a:	f000 fe47 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8001e1e:	1e03      	subs	r3, r0, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e03e      	b.n	8001ea4 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2220      	movs	r2, #32
 8001e34:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d119      	bne.n	8001e72 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	01c9      	lsls	r1, r1, #7
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	0013      	movs	r3, r2
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	f000 fe25 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8001e62:	1e03      	subs	r3, r0, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e01c      	b.n	8001ea4 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d900      	bls.n	8001e82 <HAL_I2C_IsDeviceReady+0x202>
 8001e80:	e72f      	b.n	8001ce2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2241      	movs	r2, #65	; 0x41
 8001e86:	2120      	movs	r1, #32
 8001e88:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	2220      	movs	r2, #32
 8001e90:	431a      	orrs	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2240      	movs	r2, #64	; 0x40
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
  }
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b008      	add	sp, #32
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	02002000 	.word	0x02002000
 8001eb0:	02002800 	.word	0x02002800

08001eb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	68f9      	ldr	r1, [r7, #12]
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
  }
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	d00e      	beq.n	8001f28 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f10:	d00a      	beq.n	8001f28 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	2201      	movs	r2, #1
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	0052      	lsls	r2, r2, #1
 8001f26:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d00e      	beq.n	8001f50 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f38:	d00a      	beq.n	8001f50 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	2208      	movs	r2, #8
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	00d2      	lsls	r2, r2, #3
 8001f4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d00e      	beq.n	8001f78 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f60:	d00a      	beq.n	8001f78 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	2202      	movs	r2, #2
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	220b      	movs	r2, #11
 8001f82:	4013      	ands	r3, r2
 8001f84:	d005      	beq.n	8001f92 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	0011      	movs	r1, r2
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 fc21 	bl	80027d4 <I2C_ITError>
  }
}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b006      	add	sp, #24
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b002      	add	sp, #8
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	0008      	movs	r0, r1
 8001fc4:	0011      	movs	r1, r2
 8001fc6:	1cfb      	adds	r3, r7, #3
 8001fc8:	1c02      	adds	r2, r0, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	003b      	movs	r3, r7
 8001fce:	1c0a      	adds	r2, r1, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	5c9b      	ldrb	r3, [r3, r2]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <I2C_Slave_ISR_IT+0x24>
 800202c:	2302      	movs	r3, #2
 800202e:	e0e6      	b.n	80021fe <I2C_Slave_ISR_IT+0x1f2>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2240      	movs	r2, #64	; 0x40
 8002034:	2101      	movs	r1, #1
 8002036:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2220      	movs	r2, #32
 800203c:	4013      	ands	r3, r2
 800203e:	d009      	beq.n	8002054 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002046:	d005      	beq.n	8002054 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0011      	movs	r1, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f000 fa48 	bl	80024e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2210      	movs	r2, #16
 8002058:	4013      	ands	r3, r2
 800205a:	d052      	beq.n	8002102 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2210      	movs	r2, #16
 8002060:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002062:	d04e      	beq.n	8002102 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d12d      	bne.n	80020ca <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2241      	movs	r2, #65	; 0x41
 8002072:	5c9b      	ldrb	r3, [r3, r2]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b28      	cmp	r3, #40	; 0x28
 8002078:	d10b      	bne.n	8002092 <I2C_Slave_ISR_IT+0x86>
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	049b      	lsls	r3, r3, #18
 8002080:	429a      	cmp	r2, r3
 8002082:	d106      	bne.n	8002092 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0011      	movs	r1, r2
 800208a:	0018      	movs	r0, r3
 800208c:	f000 fb4a 	bl	8002724 <I2C_ITListenCplt>
 8002090:	e036      	b.n	8002100 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2241      	movs	r2, #65	; 0x41
 8002096:	5c9b      	ldrb	r3, [r3, r2]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b29      	cmp	r3, #41	; 0x29
 800209c:	d110      	bne.n	80020c0 <I2C_Slave_ISR_IT+0xb4>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	4a59      	ldr	r2, [pc, #356]	; (8002208 <I2C_Slave_ISR_IT+0x1fc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00c      	beq.n	80020c0 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2210      	movs	r2, #16
 80020ac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 fcba 	bl	8002a2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 f9af 	bl	800241c <I2C_ITSlaveSeqCplt>
 80020be:	e01f      	b.n	8002100 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2210      	movs	r2, #16
 80020c6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80020c8:	e091      	b.n	80021ee <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2210      	movs	r2, #16
 80020d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	2204      	movs	r2, #4
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <I2C_Slave_ISR_IT+0xe4>
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	045b      	lsls	r3, r3, #17
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d000      	beq.n	80020f0 <I2C_Slave_ISR_IT+0xe4>
 80020ee:	e07e      	b.n	80021ee <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fb6b 	bl	80027d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80020fe:	e076      	b.n	80021ee <I2C_Slave_ISR_IT+0x1e2>
 8002100:	e075      	b.n	80021ee <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2204      	movs	r2, #4
 8002106:	4013      	ands	r3, r2
 8002108:	d02f      	beq.n	800216a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002110:	d02b      	beq.n	800216a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d018      	beq.n	800214e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d14c      	bne.n	80021f2 <I2C_Slave_ISR_IT+0x1e6>
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <I2C_Slave_ISR_IT+0x1fc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d048      	beq.n	80021f2 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	0018      	movs	r0, r3
 8002164:	f000 f95a 	bl	800241c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002168:	e043      	b.n	80021f2 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2208      	movs	r2, #8
 800216e:	4013      	ands	r3, r2
 8002170:	d00a      	beq.n	8002188 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2208      	movs	r2, #8
 8002176:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002178:	d006      	beq.n	8002188 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f000 f8a7 	bl	80022d4 <I2C_ITAddrCplt>
 8002186:	e035      	b.n	80021f4 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d031      	beq.n	80021f4 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002196:	d02d      	beq.n	80021f4 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d018      	beq.n	80021d4 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80021d2:	e00f      	b.n	80021f4 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	045b      	lsls	r3, r3, #17
 80021da:	429a      	cmp	r2, r3
 80021dc:	d002      	beq.n	80021e4 <I2C_Slave_ISR_IT+0x1d8>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 f918 	bl	800241c <I2C_ITSlaveSeqCplt>
 80021ec:	e002      	b.n	80021f4 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	e000      	b.n	80021f4 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80021f2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2240      	movs	r2, #64	; 0x40
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	b006      	add	sp, #24
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	ffff0000 	.word	0xffff0000

0800220c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800220c:	b5b0      	push	{r4, r5, r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	000c      	movs	r4, r1
 8002216:	0010      	movs	r0, r2
 8002218:	0019      	movs	r1, r3
 800221a:	250a      	movs	r5, #10
 800221c:	197b      	adds	r3, r7, r5
 800221e:	1c22      	adds	r2, r4, #0
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	2308      	movs	r3, #8
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	1c02      	adds	r2, r0, #0
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	1dbb      	adds	r3, r7, #6
 800222c:	1c0a      	adds	r2, r1, #0
 800222e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	045c      	lsls	r4, r3, #17
 800223a:	197b      	adds	r3, r7, r5
 800223c:	8819      	ldrh	r1, [r3, #0]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <I2C_RequestMemoryWrite+0xc4>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	0023      	movs	r3, r4
 8002246:	f000 fe09 	bl	8002e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	6a39      	ldr	r1, [r7, #32]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0018      	movs	r0, r3
 8002252:	f000 fc79 	bl	8002b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d001      	beq.n	800225e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e033      	b.n	80022c6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800225e:	1dbb      	adds	r3, r7, #6
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002266:	2308      	movs	r3, #8
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
 8002274:	e019      	b.n	80022aa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002276:	2308      	movs	r3, #8
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	b29b      	uxth	r3, r3
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	6a39      	ldr	r1, [r7, #32]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	0018      	movs	r0, r3
 8002290:	f000 fc5a 	bl	8002b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d001      	beq.n	800229c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e014      	b.n	80022c6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800229c:	2308      	movs	r3, #8
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022aa:	6a3a      	ldr	r2, [r7, #32]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	0013      	movs	r3, r2
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	f000 fbf8 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d001      	beq.n	80022c4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bdb0      	pop	{r4, r5, r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	80002000 	.word	0x80002000

080022d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2241      	movs	r2, #65	; 0x41
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	001a      	movs	r2, r3
 80022e8:	2328      	movs	r3, #40	; 0x28
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b28      	cmp	r3, #40	; 0x28
 80022ee:	d000      	beq.n	80022f2 <I2C_ITAddrCplt+0x1e>
 80022f0:	e088      	b.n	8002404 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	250f      	movs	r5, #15
 80022fe:	197b      	adds	r3, r7, r5
 8002300:	2101      	movs	r1, #1
 8002302:	400a      	ands	r2, r1
 8002304:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	b29a      	uxth	r2, r3
 8002310:	200c      	movs	r0, #12
 8002312:	183b      	adds	r3, r7, r0
 8002314:	21fe      	movs	r1, #254	; 0xfe
 8002316:	400a      	ands	r2, r1
 8002318:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	b29a      	uxth	r2, r3
 8002322:	240a      	movs	r4, #10
 8002324:	193b      	adds	r3, r7, r4
 8002326:	0592      	lsls	r2, r2, #22
 8002328:	0d92      	lsrs	r2, r2, #22
 800232a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	b29a      	uxth	r2, r3
 8002334:	2308      	movs	r3, #8
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	21fe      	movs	r1, #254	; 0xfe
 800233a:	400a      	ands	r2, r1
 800233c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d148      	bne.n	80023d8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002346:	0021      	movs	r1, r4
 8002348:	187b      	adds	r3, r7, r1
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	09db      	lsrs	r3, r3, #7
 800234e:	b29a      	uxth	r2, r3
 8002350:	183b      	adds	r3, r7, r0
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	4053      	eors	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	001a      	movs	r2, r3
 800235a:	2306      	movs	r3, #6
 800235c:	4013      	ands	r3, r2
 800235e:	d120      	bne.n	80023a2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002360:	183b      	adds	r3, r7, r0
 8002362:	187a      	adds	r2, r7, r1
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	2b02      	cmp	r3, #2
 8002378:	d14c      	bne.n	8002414 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2208      	movs	r2, #8
 8002386:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002390:	183b      	adds	r3, r7, r0
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	197b      	adds	r3, r7, r5
 8002396:	7819      	ldrb	r1, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff fe0d 	bl	8001fba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80023a0:	e038      	b.n	8002414 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80023a2:	240c      	movs	r4, #12
 80023a4:	193b      	adds	r3, r7, r4
 80023a6:	2208      	movs	r2, #8
 80023a8:	18ba      	adds	r2, r7, r2
 80023aa:	8812      	ldrh	r2, [r2, #0]
 80023ac:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	021a      	lsls	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0011      	movs	r1, r2
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 fd8a 	bl	8002ed0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023c4:	193b      	adds	r3, r7, r4
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	230f      	movs	r3, #15
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	7819      	ldrb	r1, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff fdf2 	bl	8001fba <HAL_I2C_AddrCallback>
}
 80023d6:	e01d      	b.n	8002414 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	021a      	lsls	r2, r3, #8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	0011      	movs	r1, r2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fd75 	bl	8002ed0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2240      	movs	r2, #64	; 0x40
 80023ea:	2100      	movs	r1, #0
 80023ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023ee:	230c      	movs	r3, #12
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	881a      	ldrh	r2, [r3, #0]
 80023f4:	230f      	movs	r3, #15
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	7819      	ldrb	r1, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff fddc 	bl	8001fba <HAL_I2C_AddrCallback>
}
 8002402:	e007      	b.n	8002414 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2208      	movs	r2, #8
 800240a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	2100      	movs	r1, #0
 8002412:	5499      	strb	r1, [r3, r2]
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b004      	add	sp, #16
 800241a:	bdb0      	pop	{r4, r5, r7, pc}

0800241c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2242      	movs	r2, #66	; 0x42
 8002430:	2100      	movs	r1, #0
 8002432:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	01db      	lsls	r3, r3, #7
 800243a:	4013      	ands	r3, r2
 800243c:	d008      	beq.n	8002450 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4924      	ldr	r1, [pc, #144]	; (80024dc <I2C_ITSlaveSeqCplt+0xc0>)
 800244a:	400a      	ands	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e00c      	b.n	800246a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	4013      	ands	r3, r2
 8002458:	d007      	beq.n	800246a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	491e      	ldr	r1, [pc, #120]	; (80024e0 <I2C_ITSlaveSeqCplt+0xc4>)
 8002466:	400a      	ands	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2241      	movs	r2, #65	; 0x41
 800246e:	5c9b      	ldrb	r3, [r3, r2]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b29      	cmp	r3, #41	; 0x29
 8002474:	d114      	bne.n	80024a0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2241      	movs	r2, #65	; 0x41
 800247a:	2128      	movs	r1, #40	; 0x28
 800247c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2221      	movs	r2, #33	; 0x21
 8002482:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2101      	movs	r1, #1
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fd21 	bl	8002ed0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2240      	movs	r2, #64	; 0x40
 8002492:	2100      	movs	r1, #0
 8002494:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0018      	movs	r0, r3
 800249a:	f7ff fd7e 	bl	8001f9a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800249e:	e019      	b.n	80024d4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2241      	movs	r2, #65	; 0x41
 80024a4:	5c9b      	ldrb	r3, [r3, r2]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b2a      	cmp	r3, #42	; 0x2a
 80024aa:	d113      	bne.n	80024d4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2241      	movs	r2, #65	; 0x41
 80024b0:	2128      	movs	r1, #40	; 0x28
 80024b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2222      	movs	r2, #34	; 0x22
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2102      	movs	r1, #2
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fd06 	bl	8002ed0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2240      	movs	r2, #64	; 0x40
 80024c8:	2100      	movs	r1, #0
 80024ca:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff fd6b 	bl	8001faa <HAL_I2C_SlaveRxCpltCallback>
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	ffffbfff 	.word	0xffffbfff
 80024e0:	ffff7fff 	.word	0xffff7fff

080024e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80024fa:	200f      	movs	r0, #15
 80024fc:	183b      	adds	r3, r7, r0
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	2141      	movs	r1, #65	; 0x41
 8002502:	5c52      	ldrb	r2, [r2, r1]
 8002504:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2220      	movs	r2, #32
 800250c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800250e:	183b      	adds	r3, r7, r0
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b21      	cmp	r3, #33	; 0x21
 8002514:	d003      	beq.n	800251e <I2C_ITSlaveCplt+0x3a>
 8002516:	183b      	adds	r3, r7, r0
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b29      	cmp	r3, #41	; 0x29
 800251c:	d109      	bne.n	8002532 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800251e:	4a7b      	ldr	r2, [pc, #492]	; (800270c <I2C_ITSlaveCplt+0x228>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	0011      	movs	r1, r2
 8002524:	0018      	movs	r0, r3
 8002526:	f000 fcd3 	bl	8002ed0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2221      	movs	r2, #33	; 0x21
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
 8002530:	e011      	b.n	8002556 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002532:	220f      	movs	r2, #15
 8002534:	18bb      	adds	r3, r7, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b22      	cmp	r3, #34	; 0x22
 800253a:	d003      	beq.n	8002544 <I2C_ITSlaveCplt+0x60>
 800253c:	18bb      	adds	r3, r7, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b2a      	cmp	r3, #42	; 0x2a
 8002542:	d108      	bne.n	8002556 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002544:	4a72      	ldr	r2, [pc, #456]	; (8002710 <I2C_ITSlaveCplt+0x22c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f000 fcc0 	bl	8002ed0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2222      	movs	r2, #34	; 0x22
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	0209      	lsls	r1, r1, #8
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4968      	ldr	r1, [pc, #416]	; (8002714 <I2C_ITSlaveCplt+0x230>)
 8002574:	400a      	ands	r2, r1
 8002576:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fa55 	bl	8002a2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	01db      	lsls	r3, r3, #7
 8002586:	4013      	ands	r3, r2
 8002588:	d013      	beq.n	80025b2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4960      	ldr	r1, [pc, #384]	; (8002718 <I2C_ITSlaveCplt+0x234>)
 8002596:	400a      	ands	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d01f      	beq.n	80025e2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b0:	e017      	b.n	80025e2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	4013      	ands	r3, r2
 80025ba:	d012      	beq.n	80025e2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4955      	ldr	r1, [pc, #340]	; (800271c <I2C_ITSlaveCplt+0x238>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2204      	movs	r2, #4
 80025e6:	4013      	ands	r3, r2
 80025e8:	d020      	beq.n	800262c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2204      	movs	r2, #4
 80025ee:	4393      	bics	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	2204      	movs	r2, #4
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2242      	movs	r2, #66	; 0x42
 8002646:	2100      	movs	r1, #0
 8002648:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0011      	movs	r1, r2
 8002660:	0018      	movs	r0, r3
 8002662:	f000 f8b7 	bl	80027d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2241      	movs	r2, #65	; 0x41
 800266a:	5c9b      	ldrb	r3, [r3, r2]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b28      	cmp	r3, #40	; 0x28
 8002670:	d147      	bne.n	8002702 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0011      	movs	r1, r2
 8002678:	0018      	movs	r0, r3
 800267a:	f000 f853 	bl	8002724 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800267e:	e040      	b.n	8002702 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	4a26      	ldr	r2, [pc, #152]	; (8002720 <I2C_ITSlaveCplt+0x23c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d016      	beq.n	80026b8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff fec5 	bl	800241c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a22      	ldr	r2, [pc, #136]	; (8002720 <I2C_ITSlaveCplt+0x23c>)
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2241      	movs	r2, #65	; 0x41
 800269c:	2120      	movs	r1, #32
 800269e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2240      	movs	r2, #64	; 0x40
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff fc92 	bl	8001fda <HAL_I2C_ListenCpltCallback>
}
 80026b6:	e024      	b.n	8002702 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2241      	movs	r2, #65	; 0x41
 80026bc:	5c9b      	ldrb	r3, [r3, r2]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b22      	cmp	r3, #34	; 0x22
 80026c2:	d10f      	bne.n	80026e4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2241      	movs	r2, #65	; 0x41
 80026c8:	2120      	movs	r1, #32
 80026ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2240      	movs	r2, #64	; 0x40
 80026d6:	2100      	movs	r1, #0
 80026d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff fc64 	bl	8001faa <HAL_I2C_SlaveRxCpltCallback>
}
 80026e2:	e00e      	b.n	8002702 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2241      	movs	r2, #65	; 0x41
 80026e8:	2120      	movs	r1, #32
 80026ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2240      	movs	r2, #64	; 0x40
 80026f6:	2100      	movs	r1, #0
 80026f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff fc4c 	bl	8001f9a <HAL_I2C_SlaveTxCpltCallback>
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b006      	add	sp, #24
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	00008001 	.word	0x00008001
 8002710:	00008002 	.word	0x00008002
 8002714:	fe00e800 	.word	0xfe00e800
 8002718:	ffffbfff 	.word	0xffffbfff
 800271c:	ffff7fff 	.word	0xffff7fff
 8002720:	ffff0000 	.word	0xffff0000

08002724 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a26      	ldr	r2, [pc, #152]	; (80027cc <I2C_ITListenCplt+0xa8>)
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2241      	movs	r2, #65	; 0x41
 800273e:	2120      	movs	r1, #32
 8002740:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2242      	movs	r2, #66	; 0x42
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2204      	movs	r2, #4
 8002754:	4013      	ands	r3, r2
 8002756:	d022      	beq.n	800279e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d012      	beq.n	800279e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	2204      	movs	r2, #4
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <I2C_ITListenCplt+0xac>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0011      	movs	r1, r2
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 fb93 	bl	8002ed0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2210      	movs	r2, #16
 80027b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2240      	movs	r2, #64	; 0x40
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff fc0c 	bl	8001fda <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b002      	add	sp, #8
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	ffff0000 	.word	0xffff0000
 80027d0:	00008003 	.word	0x00008003

080027d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027de:	200f      	movs	r0, #15
 80027e0:	183b      	adds	r3, r7, r0
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	2141      	movs	r1, #65	; 0x41
 80027e6:	5c52      	ldrb	r2, [r2, r1]
 80027e8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2242      	movs	r2, #66	; 0x42
 80027ee:	2100      	movs	r1, #0
 80027f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a72      	ldr	r2, [pc, #456]	; (80029c0 <I2C_ITError+0x1ec>)
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800280a:	183b      	adds	r3, r7, r0
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b28      	cmp	r3, #40	; 0x28
 8002810:	d007      	beq.n	8002822 <I2C_ITError+0x4e>
 8002812:	183b      	adds	r3, r7, r0
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b29      	cmp	r3, #41	; 0x29
 8002818:	d003      	beq.n	8002822 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800281a:	183b      	adds	r3, r7, r0
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b2a      	cmp	r3, #42	; 0x2a
 8002820:	d10c      	bne.n	800283c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2103      	movs	r1, #3
 8002826:	0018      	movs	r0, r3
 8002828:	f000 fb52 	bl	8002ed0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2241      	movs	r2, #65	; 0x41
 8002830:	2128      	movs	r1, #40	; 0x28
 8002832:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a63      	ldr	r2, [pc, #396]	; (80029c4 <I2C_ITError+0x1f0>)
 8002838:	635a      	str	r2, [r3, #52]	; 0x34
 800283a:	e032      	b.n	80028a2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800283c:	4a62      	ldr	r2, [pc, #392]	; (80029c8 <I2C_ITError+0x1f4>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0011      	movs	r1, r2
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fb44 	bl	8002ed0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 f8ed 	bl	8002a2a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2241      	movs	r2, #65	; 0x41
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b60      	cmp	r3, #96	; 0x60
 800285a:	d01f      	beq.n	800289c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2241      	movs	r2, #65	; 0x41
 8002860:	2120      	movs	r1, #32
 8002862:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2220      	movs	r2, #32
 800286c:	4013      	ands	r3, r2
 800286e:	2b20      	cmp	r3, #32
 8002870:	d114      	bne.n	800289c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2210      	movs	r2, #16
 800287a:	4013      	ands	r3, r2
 800287c:	2b10      	cmp	r3, #16
 800287e:	d109      	bne.n	8002894 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2210      	movs	r2, #16
 8002886:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	2204      	movs	r2, #4
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2220      	movs	r2, #32
 800289a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d03b      	beq.n	8002928 <I2C_ITError+0x154>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d002      	beq.n	80028bc <I2C_ITError+0xe8>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b21      	cmp	r3, #33	; 0x21
 80028ba:	d135      	bne.n	8002928 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	01db      	lsls	r3, r3, #7
 80028c6:	401a      	ands	r2, r3
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	01db      	lsls	r3, r3, #7
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d107      	bne.n	80028e0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	493c      	ldr	r1, [pc, #240]	; (80029cc <I2C_ITError+0x1f8>)
 80028dc:	400a      	ands	r2, r1
 80028de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe fe2a 	bl	800153e <HAL_DMA_GetState>
 80028ea:	0003      	movs	r3, r0
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d016      	beq.n	800291e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	4a36      	ldr	r2, [pc, #216]	; (80029d0 <I2C_ITError+0x1fc>)
 80028f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	2100      	movs	r1, #0
 80028fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	0018      	movs	r0, r3
 8002906:	f7fe fd33 	bl	8001370 <HAL_DMA_Abort_IT>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d051      	beq.n	80029b2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	0018      	movs	r0, r3
 800291a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800291c:	e049      	b.n	80029b2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f859 	bl	80029d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002926:	e044      	b.n	80029b2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d03b      	beq.n	80029a8 <I2C_ITError+0x1d4>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b12      	cmp	r3, #18
 8002934:	d002      	beq.n	800293c <I2C_ITError+0x168>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b22      	cmp	r3, #34	; 0x22
 800293a:	d135      	bne.n	80029a8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	401a      	ands	r2, r3
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	429a      	cmp	r2, r3
 800294e:	d107      	bne.n	8002960 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	491e      	ldr	r1, [pc, #120]	; (80029d4 <I2C_ITError+0x200>)
 800295c:	400a      	ands	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	0018      	movs	r0, r3
 8002966:	f7fe fdea 	bl	800153e <HAL_DMA_GetState>
 800296a:	0003      	movs	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d016      	beq.n	800299e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <I2C_ITError+0x1fc>)
 8002976:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2240      	movs	r2, #64	; 0x40
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	0018      	movs	r0, r3
 8002986:	f7fe fcf3 	bl	8001370 <HAL_DMA_Abort_IT>
 800298a:	1e03      	subs	r3, r0, #0
 800298c:	d013      	beq.n	80029b6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	0018      	movs	r0, r3
 800299a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800299c:	e00b      	b.n	80029b6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f819 	bl	80029d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029a6:	e006      	b.n	80029b6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f814 	bl	80029d8 <I2C_TreatErrorCallback>
  }
}
 80029b0:	e002      	b.n	80029b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	e000      	b.n	80029b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029b6:	46c0      	nop			; (mov r8, r8)
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b004      	add	sp, #16
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	ffff0000 	.word	0xffff0000
 80029c4:	0800200d 	.word	0x0800200d
 80029c8:	00008003 	.word	0x00008003
 80029cc:	ffffbfff 	.word	0xffffbfff
 80029d0:	08002a6f 	.word	0x08002a6f
 80029d4:	ffff7fff 	.word	0xffff7fff

080029d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2241      	movs	r2, #65	; 0x41
 80029e4:	5c9b      	ldrb	r3, [r3, r2]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d10f      	bne.n	8002a0c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2241      	movs	r2, #65	; 0x41
 80029f0:	2120      	movs	r1, #32
 80029f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff faf8 	bl	8001ffa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a0a:	e00a      	b.n	8002a22 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2240      	movs	r2, #64	; 0x40
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fae4 	bl	8001fea <HAL_I2C_ErrorCallback>
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b002      	add	sp, #8
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d103      	bne.n	8002a48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d007      	beq.n	8002a66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	619a      	str	r2, [r3, #24]
  }
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	2200      	movs	r2, #0
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7ff ff9a 	bl	80029d8 <I2C_TreatErrorCallback>
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	1dfb      	adds	r3, r7, #7
 8002aba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002abc:	e030      	b.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	d02d      	beq.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac4:	f7fe fac8 	bl	8001058 <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d302      	bcc.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d122      	bne.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	425a      	negs	r2, r3
 8002aea:	4153      	adcs	r3, r2
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	001a      	movs	r2, r3
 8002af0:	1dfb      	adds	r3, r7, #7
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d113      	bne.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	2220      	movs	r2, #32
 8002afe:	431a      	orrs	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2241      	movs	r2, #65	; 0x41
 8002b08:	2120      	movs	r1, #32
 8002b0a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2242      	movs	r2, #66	; 0x42
 8002b10:	2100      	movs	r1, #0
 8002b12:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e00f      	b.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	425a      	negs	r2, r3
 8002b30:	4153      	adcs	r3, r2
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	001a      	movs	r2, r3
 8002b36:	1dfb      	adds	r3, r7, #7
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d0bf      	beq.n	8002abe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b54:	e032      	b.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 f87d 	bl	8002c5c <I2C_IsErrorOccurred>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e030      	b.n	8002bcc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	d025      	beq.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b70:	f7fe fa72 	bl	8001058 <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d302      	bcc.n	8002b86 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11a      	bne.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d013      	beq.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	2220      	movs	r2, #32
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2241      	movs	r2, #65	; 0x41
 8002ba4:	2120      	movs	r1, #32
 8002ba6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2242      	movs	r2, #66	; 0x42
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2240      	movs	r2, #64	; 0x40
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e007      	b.n	8002bcc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d1c5      	bne.n	8002b56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b004      	add	sp, #16
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be0:	e02f      	b.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f837 	bl	8002c5c <I2C_IsErrorOccurred>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e02d      	b.n	8002c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7fe fa2f 	bl	8001058 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d11a      	bne.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2220      	movs	r2, #32
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d013      	beq.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	2220      	movs	r2, #32
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2241      	movs	r2, #65	; 0x41
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2242      	movs	r2, #66	; 0x42
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2240      	movs	r2, #64	; 0x40
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e007      	b.n	8002c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d1c8      	bne.n	8002be2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b08b      	sub	sp, #44	; 0x2c
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c68:	2327      	movs	r3, #39	; 0x27
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2210      	movs	r2, #16
 8002c84:	4013      	ands	r3, r2
 8002c86:	d100      	bne.n	8002c8a <I2C_IsErrorOccurred+0x2e>
 8002c88:	e082      	b.n	8002d90 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c92:	e060      	b.n	8002d56 <I2C_IsErrorOccurred+0xfa>
 8002c94:	2427      	movs	r4, #39	; 0x27
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	193a      	adds	r2, r7, r4
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	d058      	beq.n	8002d56 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ca4:	f7fe f9d8 	bl	8001058 <HAL_GetTick>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d306      	bcc.n	8002cc2 <I2C_IsErrorOccurred+0x66>
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	193a      	adds	r2, r7, r4
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d149      	bne.n	8002d56 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	01db      	lsls	r3, r3, #7
 8002ccc:	4013      	ands	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cd0:	2013      	movs	r0, #19
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	2142      	movs	r1, #66	; 0x42
 8002cd8:	5c52      	ldrb	r2, [r2, r1]
 8002cda:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d126      	bne.n	8002d3e <I2C_IsErrorOccurred+0xe2>
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	01db      	lsls	r3, r3, #7
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d021      	beq.n	8002d3e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002cfa:	183b      	adds	r3, r7, r0
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d01d      	beq.n	8002d3e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	01c9      	lsls	r1, r1, #7
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d14:	f7fe f9a0 	bl	8001058 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d1c:	e00f      	b.n	8002d3e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d1e:	f7fe f99b 	bl	8001058 <HAL_GetTick>
 8002d22:	0002      	movs	r2, r0
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b19      	cmp	r3, #25
 8002d2a:	d908      	bls.n	8002d3e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	4313      	orrs	r3, r2
 8002d32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d34:	2327      	movs	r3, #39	; 0x27
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]

              break;
 8002d3c:	e00b      	b.n	8002d56 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2220      	movs	r2, #32
 8002d46:	4013      	ands	r3, r2
 8002d48:	2127      	movs	r1, #39	; 0x27
 8002d4a:	187a      	adds	r2, r7, r1
 8002d4c:	1879      	adds	r1, r7, r1
 8002d4e:	7809      	ldrb	r1, [r1, #0]
 8002d50:	7011      	strb	r1, [r2, #0]
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d1e3      	bne.n	8002d1e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d004      	beq.n	8002d6e <I2C_IsErrorOccurred+0x112>
 8002d64:	2327      	movs	r3, #39	; 0x27
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d092      	beq.n	8002c94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d6e:	2327      	movs	r3, #39	; 0x27
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2204      	movs	r2, #4
 8002d84:	4313      	orrs	r3, r2
 8002d86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d88:	2327      	movs	r3, #39	; 0x27
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d00c      	beq.n	8002dbc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4313      	orrs	r3, r2
 8002da8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	0052      	lsls	r2, r2, #1
 8002db2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002db4:	2327      	movs	r3, #39	; 0x27
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d00c      	beq.n	8002de0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	00d2      	lsls	r2, r2, #3
 8002dd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd8:	2327      	movs	r3, #39	; 0x27
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4013      	ands	r3, r2
 8002de8:	d00c      	beq.n	8002e04 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	2202      	movs	r2, #2
 8002dee:	4313      	orrs	r3, r2
 8002df0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2280      	movs	r2, #128	; 0x80
 8002df8:	0092      	lsls	r2, r2, #2
 8002dfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dfc:	2327      	movs	r3, #39	; 0x27
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002e04:	2327      	movs	r3, #39	; 0x27
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01d      	beq.n	8002e4a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7ff fe0a 	bl	8002a2a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	490d      	ldr	r1, [pc, #52]	; (8002e58 <I2C_IsErrorOccurred+0x1fc>)
 8002e22:	400a      	ands	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2241      	movs	r2, #65	; 0x41
 8002e36:	2120      	movs	r1, #32
 8002e38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2242      	movs	r2, #66	; 0x42
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2240      	movs	r2, #64	; 0x40
 8002e46:	2100      	movs	r1, #0
 8002e48:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002e4a:	2327      	movs	r3, #39	; 0x27
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b00b      	add	sp, #44	; 0x2c
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	fe00e800 	.word	0xfe00e800

08002e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	0008      	movs	r0, r1
 8002e66:	0011      	movs	r1, r2
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	240a      	movs	r4, #10
 8002e6c:	193b      	adds	r3, r7, r4
 8002e6e:	1c02      	adds	r2, r0, #0
 8002e70:	801a      	strh	r2, [r3, #0]
 8002e72:	2009      	movs	r0, #9
 8002e74:	183b      	adds	r3, r7, r0
 8002e76:	1c0a      	adds	r2, r1, #0
 8002e78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e7a:	193b      	adds	r3, r7, r4
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	059b      	lsls	r3, r3, #22
 8002e80:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e82:	183b      	adds	r3, r7, r0
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	0419      	lsls	r1, r3, #16
 8002e88:	23ff      	movs	r3, #255	; 0xff
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e8e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	4313      	orrs	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea6:	0d51      	lsrs	r1, r2, #21
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	00d2      	lsls	r2, r2, #3
 8002eac:	400a      	ands	r2, r1
 8002eae:	4907      	ldr	r1, [pc, #28]	; (8002ecc <I2C_TransferConfig+0x70>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	43d2      	mvns	r2, r2
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	0011      	movs	r1, r2
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b007      	add	sp, #28
 8002ec8:	bd90      	pop	{r4, r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	03ff63ff 	.word	0x03ff63ff

08002ed0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	000a      	movs	r2, r1
 8002eda:	1cbb      	adds	r3, r7, #2
 8002edc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ee2:	1cbb      	adds	r3, r7, #2
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d010      	beq.n	8002f0e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2242      	movs	r2, #66	; 0x42
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2241      	movs	r2, #65	; 0x41
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	001a      	movs	r2, r3
 8002efe:	2328      	movs	r3, #40	; 0x28
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b28      	cmp	r3, #40	; 0x28
 8002f04:	d003      	beq.n	8002f0e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	22b0      	movs	r2, #176	; 0xb0
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f0e:	1cbb      	adds	r3, r7, #2
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	2202      	movs	r2, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d010      	beq.n	8002f3a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2244      	movs	r2, #68	; 0x44
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2241      	movs	r2, #65	; 0x41
 8002f24:	5c9b      	ldrb	r3, [r3, r2]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	001a      	movs	r2, r3
 8002f2a:	2328      	movs	r3, #40	; 0x28
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b28      	cmp	r3, #40	; 0x28
 8002f30:	d003      	beq.n	8002f3a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	22b0      	movs	r2, #176	; 0xb0
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f3a:	1cbb      	adds	r3, r7, #2
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	da03      	bge.n	8002f4c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	22b8      	movs	r2, #184	; 0xb8
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f4c:	1cbb      	adds	r3, r7, #2
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d103      	bne.n	8002f5c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2290      	movs	r2, #144	; 0x90
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f5c:	1cbb      	adds	r3, r7, #2
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d103      	bne.n	8002f6c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f6c:	1cbb      	adds	r3, r7, #2
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d103      	bne.n	8002f7c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2240      	movs	r2, #64	; 0x40
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43d9      	mvns	r1, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2241      	movs	r2, #65	; 0x41
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d138      	bne.n	8003020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2240      	movs	r2, #64	; 0x40
 8002fb2:	5c9b      	ldrb	r3, [r3, r2]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e032      	b.n	8003022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2241      	movs	r2, #65	; 0x41
 8002fc8:	2124      	movs	r1, #36	; 0x24
 8002fca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	438a      	bics	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4911      	ldr	r1, [pc, #68]	; (800302c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002fe8:	400a      	ands	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2101      	movs	r1, #1
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2241      	movs	r2, #65	; 0x41
 8003010:	2120      	movs	r1, #32
 8003012:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	2100      	movs	r1, #0
 800301a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b002      	add	sp, #8
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	ffffefff 	.word	0xffffefff

08003030 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2241      	movs	r2, #65	; 0x41
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	d139      	bne.n	80030ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2240      	movs	r2, #64	; 0x40
 800304a:	5c9b      	ldrb	r3, [r3, r2]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003050:	2302      	movs	r3, #2
 8003052:	e033      	b.n	80030bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2240      	movs	r2, #64	; 0x40
 8003058:	2101      	movs	r1, #1
 800305a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2241      	movs	r2, #65	; 0x41
 8003060:	2124      	movs	r1, #36	; 0x24
 8003062:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2101      	movs	r1, #1
 8003070:	438a      	bics	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003080:	4013      	ands	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2241      	movs	r2, #65	; 0x41
 80030aa:	2120      	movs	r1, #32
 80030ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2240      	movs	r2, #64	; 0x40
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e000      	b.n	80030bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
  }
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b004      	add	sp, #16
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	fffff0ff 	.word	0xfffff0ff

080030c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f000 fb76 	bl	80037c8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2201      	movs	r2, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	d100      	bne.n	80030e8 <HAL_RCC_OscConfig+0x20>
 80030e6:	e08e      	b.n	8003206 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030e8:	4bc5      	ldr	r3, [pc, #788]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	220c      	movs	r2, #12
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d00e      	beq.n	8003112 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030f4:	4bc2      	ldr	r3, [pc, #776]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	220c      	movs	r2, #12
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d117      	bne.n	8003130 <HAL_RCC_OscConfig+0x68>
 8003100:	4bbf      	ldr	r3, [pc, #764]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	23c0      	movs	r3, #192	; 0xc0
 8003106:	025b      	lsls	r3, r3, #9
 8003108:	401a      	ands	r2, r3
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	025b      	lsls	r3, r3, #9
 800310e:	429a      	cmp	r2, r3
 8003110:	d10e      	bne.n	8003130 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003112:	4bbb      	ldr	r3, [pc, #748]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	029b      	lsls	r3, r3, #10
 800311a:	4013      	ands	r3, r2
 800311c:	d100      	bne.n	8003120 <HAL_RCC_OscConfig+0x58>
 800311e:	e071      	b.n	8003204 <HAL_RCC_OscConfig+0x13c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d000      	beq.n	800312a <HAL_RCC_OscConfig+0x62>
 8003128:	e06c      	b.n	8003204 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	f000 fb4c 	bl	80037c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x80>
 8003138:	4bb1      	ldr	r3, [pc, #708]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4bb0      	ldr	r3, [pc, #704]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	0249      	lsls	r1, r1, #9
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e02f      	b.n	80031a8 <HAL_RCC_OscConfig+0xe0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10c      	bne.n	800316a <HAL_RCC_OscConfig+0xa2>
 8003150:	4bab      	ldr	r3, [pc, #684]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4baa      	ldr	r3, [pc, #680]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003156:	49ab      	ldr	r1, [pc, #684]	; (8003404 <HAL_RCC_OscConfig+0x33c>)
 8003158:	400a      	ands	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	4ba8      	ldr	r3, [pc, #672]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4ba7      	ldr	r3, [pc, #668]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003162:	49a9      	ldr	r1, [pc, #676]	; (8003408 <HAL_RCC_OscConfig+0x340>)
 8003164:	400a      	ands	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	e01e      	b.n	80031a8 <HAL_RCC_OscConfig+0xe0>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d10e      	bne.n	8003190 <HAL_RCC_OscConfig+0xc8>
 8003172:	4ba3      	ldr	r3, [pc, #652]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4ba2      	ldr	r3, [pc, #648]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	02c9      	lsls	r1, r1, #11
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	4b9f      	ldr	r3, [pc, #636]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b9e      	ldr	r3, [pc, #632]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	0249      	lsls	r1, r1, #9
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0xe0>
 8003190:	4b9b      	ldr	r3, [pc, #620]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b9a      	ldr	r3, [pc, #616]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003196:	499b      	ldr	r1, [pc, #620]	; (8003404 <HAL_RCC_OscConfig+0x33c>)
 8003198:	400a      	ands	r2, r1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	4b98      	ldr	r3, [pc, #608]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b97      	ldr	r3, [pc, #604]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80031a2:	4999      	ldr	r1, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x340>)
 80031a4:	400a      	ands	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d014      	beq.n	80031da <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd ff52 	bl	8001058 <HAL_GetTick>
 80031b4:	0003      	movs	r3, r0
 80031b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ba:	f7fd ff4d 	bl	8001058 <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b64      	cmp	r3, #100	; 0x64
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e2fd      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031cc:	4b8c      	ldr	r3, [pc, #560]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	029b      	lsls	r3, r3, #10
 80031d4:	4013      	ands	r3, r2
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0xf2>
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fd ff3d 	bl	8001058 <HAL_GetTick>
 80031de:	0003      	movs	r3, r0
 80031e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fd ff38 	bl	8001058 <HAL_GetTick>
 80031e8:	0002      	movs	r2, r0
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e2e8      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b82      	ldr	r3, [pc, #520]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	029b      	lsls	r3, r3, #10
 80031fe:	4013      	ands	r3, r2
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x11c>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2202      	movs	r2, #2
 800320c:	4013      	ands	r3, r2
 800320e:	d100      	bne.n	8003212 <HAL_RCC_OscConfig+0x14a>
 8003210:	e06c      	b.n	80032ec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003212:	4b7b      	ldr	r3, [pc, #492]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	220c      	movs	r2, #12
 8003218:	4013      	ands	r3, r2
 800321a:	d00e      	beq.n	800323a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800321c:	4b78      	ldr	r3, [pc, #480]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	220c      	movs	r2, #12
 8003222:	4013      	ands	r3, r2
 8003224:	2b08      	cmp	r3, #8
 8003226:	d11f      	bne.n	8003268 <HAL_RCC_OscConfig+0x1a0>
 8003228:	4b75      	ldr	r3, [pc, #468]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	23c0      	movs	r3, #192	; 0xc0
 800322e:	025b      	lsls	r3, r3, #9
 8003230:	401a      	ands	r2, r3
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	429a      	cmp	r2, r3
 8003238:	d116      	bne.n	8003268 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	4b71      	ldr	r3, [pc, #452]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2202      	movs	r2, #2
 8003240:	4013      	ands	r3, r2
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x188>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e2bb      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b6b      	ldr	r3, [pc, #428]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	22f8      	movs	r2, #248	; 0xf8
 8003256:	4393      	bics	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00da      	lsls	r2, r3, #3
 8003260:	4b67      	ldr	r3, [pc, #412]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	e041      	b.n	80032ec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d024      	beq.n	80032ba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003270:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4b62      	ldr	r3, [pc, #392]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003276:	2101      	movs	r1, #1
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fd feec 	bl	8001058 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003286:	f7fd fee7 	bl	8001058 <HAL_GetTick>
 800328a:	0002      	movs	r2, r0
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e297      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	4b59      	ldr	r3, [pc, #356]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2202      	movs	r2, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	d0f1      	beq.n	8003286 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b57      	ldr	r3, [pc, #348]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	22f8      	movs	r2, #248	; 0xf8
 80032a8:	4393      	bics	r3, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	00da      	lsls	r2, r3, #3
 80032b2:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e018      	b.n	80032ec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ba:	4b51      	ldr	r3, [pc, #324]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80032c0:	2101      	movs	r1, #1
 80032c2:	438a      	bics	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fd fec7 	bl	8001058 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d0:	f7fd fec2 	bl	8001058 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e272      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2202      	movs	r2, #2
 80032e8:	4013      	ands	r3, r2
 80032ea:	d1f1      	bne.n	80032d0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2208      	movs	r2, #8
 80032f2:	4013      	ands	r3, r2
 80032f4:	d036      	beq.n	8003364 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d019      	beq.n	8003332 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b40      	ldr	r3, [pc, #256]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003302:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7fd fea5 	bl	8001058 <HAL_GetTick>
 800330e:	0003      	movs	r3, r0
 8003310:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003314:	f7fd fea0 	bl	8001058 <HAL_GetTick>
 8003318:	0002      	movs	r2, r0
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e250      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2202      	movs	r2, #2
 800332c:	4013      	ands	r3, r2
 800332e:	d0f1      	beq.n	8003314 <HAL_RCC_OscConfig+0x24c>
 8003330:	e018      	b.n	8003364 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b33      	ldr	r3, [pc, #204]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003336:	4b32      	ldr	r3, [pc, #200]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003338:	2101      	movs	r1, #1
 800333a:	438a      	bics	r2, r1
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fd fe8b 	bl	8001058 <HAL_GetTick>
 8003342:	0003      	movs	r3, r0
 8003344:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003348:	f7fd fe86 	bl	8001058 <HAL_GetTick>
 800334c:	0002      	movs	r2, r0
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e236      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335a:	4b29      	ldr	r3, [pc, #164]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2202      	movs	r2, #2
 8003360:	4013      	ands	r3, r2
 8003362:	d1f1      	bne.n	8003348 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2204      	movs	r2, #4
 800336a:	4013      	ands	r3, r2
 800336c:	d100      	bne.n	8003370 <HAL_RCC_OscConfig+0x2a8>
 800336e:	e0b5      	b.n	80034dc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003370:	201f      	movs	r0, #31
 8003372:	183b      	adds	r3, r7, r0
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	055b      	lsls	r3, r3, #21
 8003380:	4013      	ands	r3, r2
 8003382:	d110      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	0549      	lsls	r1, r1, #21
 800338e:	430a      	orrs	r2, r1
 8003390:	61da      	str	r2, [r3, #28]
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	055b      	lsls	r3, r3, #21
 800339a:	4013      	ands	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033a0:	183b      	adds	r3, r7, r0
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_OscConfig+0x344>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	d11a      	bne.n	80033e8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <HAL_RCC_OscConfig+0x344>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_RCC_OscConfig+0x344>)
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	0049      	lsls	r1, r1, #1
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c0:	f7fd fe4a 	bl	8001058 <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ca:	f7fd fe45 	bl	8001058 <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b64      	cmp	r3, #100	; 0x64
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1f5      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_OscConfig+0x344>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4013      	ands	r3, r2
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10f      	bne.n	8003410 <HAL_RCC_OscConfig+0x348>
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80033f2:	6a1a      	ldr	r2, [r3, #32]
 80033f4:	4b02      	ldr	r3, [pc, #8]	; (8003400 <HAL_RCC_OscConfig+0x338>)
 80033f6:	2101      	movs	r1, #1
 80033f8:	430a      	orrs	r2, r1
 80033fa:	621a      	str	r2, [r3, #32]
 80033fc:	e036      	b.n	800346c <HAL_RCC_OscConfig+0x3a4>
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	40021000 	.word	0x40021000
 8003404:	fffeffff 	.word	0xfffeffff
 8003408:	fffbffff 	.word	0xfffbffff
 800340c:	40007000 	.word	0x40007000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_OscConfig+0x36a>
 8003418:	4bca      	ldr	r3, [pc, #808]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800341a:	6a1a      	ldr	r2, [r3, #32]
 800341c:	4bc9      	ldr	r3, [pc, #804]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800341e:	2101      	movs	r1, #1
 8003420:	438a      	bics	r2, r1
 8003422:	621a      	str	r2, [r3, #32]
 8003424:	4bc7      	ldr	r3, [pc, #796]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	4bc6      	ldr	r3, [pc, #792]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800342a:	2104      	movs	r1, #4
 800342c:	438a      	bics	r2, r1
 800342e:	621a      	str	r2, [r3, #32]
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x3a4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x38c>
 800343a:	4bc2      	ldr	r3, [pc, #776]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800343c:	6a1a      	ldr	r2, [r3, #32]
 800343e:	4bc1      	ldr	r3, [pc, #772]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003440:	2104      	movs	r1, #4
 8003442:	430a      	orrs	r2, r1
 8003444:	621a      	str	r2, [r3, #32]
 8003446:	4bbf      	ldr	r3, [pc, #764]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003448:	6a1a      	ldr	r2, [r3, #32]
 800344a:	4bbe      	ldr	r3, [pc, #760]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800344c:	2101      	movs	r1, #1
 800344e:	430a      	orrs	r2, r1
 8003450:	621a      	str	r2, [r3, #32]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0x3a4>
 8003454:	4bbb      	ldr	r3, [pc, #748]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	4bba      	ldr	r3, [pc, #744]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800345a:	2101      	movs	r1, #1
 800345c:	438a      	bics	r2, r1
 800345e:	621a      	str	r2, [r3, #32]
 8003460:	4bb8      	ldr	r3, [pc, #736]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	4bb7      	ldr	r3, [pc, #732]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003466:	2104      	movs	r1, #4
 8003468:	438a      	bics	r2, r1
 800346a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d014      	beq.n	800349e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fd fdf0 	bl	8001058 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	e009      	b.n	8003492 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fd fdeb 	bl	8001058 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	4aaf      	ldr	r2, [pc, #700]	; (8003748 <HAL_RCC_OscConfig+0x680>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e19a      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	4bac      	ldr	r3, [pc, #688]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	2202      	movs	r2, #2
 8003498:	4013      	ands	r3, r2
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x3b6>
 800349c:	e013      	b.n	80034c6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349e:	f7fd fddb 	bl	8001058 <HAL_GetTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a6:	e009      	b.n	80034bc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fd fdd6 	bl	8001058 <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	4aa5      	ldr	r2, [pc, #660]	; (8003748 <HAL_RCC_OscConfig+0x680>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e185      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034bc:	4ba1      	ldr	r3, [pc, #644]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	2202      	movs	r2, #2
 80034c2:	4013      	ands	r3, r2
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034c6:	231f      	movs	r3, #31
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b9c      	ldr	r3, [pc, #624]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	4b9b      	ldr	r3, [pc, #620]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80034d6:	499d      	ldr	r1, [pc, #628]	; (800374c <HAL_RCC_OscConfig+0x684>)
 80034d8:	400a      	ands	r2, r1
 80034da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2210      	movs	r2, #16
 80034e2:	4013      	ands	r3, r2
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d12a      	bne.n	8003544 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80034ee:	4b95      	ldr	r3, [pc, #596]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80034f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f2:	4b94      	ldr	r3, [pc, #592]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80034f4:	2104      	movs	r1, #4
 80034f6:	430a      	orrs	r2, r1
 80034f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80034fa:	4b92      	ldr	r3, [pc, #584]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80034fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fe:	4b91      	ldr	r3, [pc, #580]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003500:	2101      	movs	r1, #1
 8003502:	430a      	orrs	r2, r1
 8003504:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7fd fda7 	bl	8001058 <HAL_GetTick>
 800350a:	0003      	movs	r3, r0
 800350c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003510:	f7fd fda2 	bl	8001058 <HAL_GetTick>
 8003514:	0002      	movs	r2, r0
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e152      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003522:	4b88      	ldr	r3, [pc, #544]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003526:	2202      	movs	r2, #2
 8003528:	4013      	ands	r3, r2
 800352a:	d0f1      	beq.n	8003510 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800352c:	4b85      	ldr	r3, [pc, #532]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800352e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003530:	22f8      	movs	r2, #248	; 0xf8
 8003532:	4393      	bics	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	00da      	lsls	r2, r3, #3
 800353c:	4b81      	ldr	r3, [pc, #516]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800353e:	430a      	orrs	r2, r1
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
 8003542:	e034      	b.n	80035ae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	3305      	adds	r3, #5
 800354a:	d111      	bne.n	8003570 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800354c:	4b7d      	ldr	r3, [pc, #500]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800354e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003550:	4b7c      	ldr	r3, [pc, #496]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003552:	2104      	movs	r1, #4
 8003554:	438a      	bics	r2, r1
 8003556:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003558:	4b7a      	ldr	r3, [pc, #488]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355c:	22f8      	movs	r2, #248	; 0xf8
 800355e:	4393      	bics	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	00da      	lsls	r2, r3, #3
 8003568:	4b76      	ldr	r3, [pc, #472]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800356a:	430a      	orrs	r2, r1
 800356c:	635a      	str	r2, [r3, #52]	; 0x34
 800356e:	e01e      	b.n	80035ae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003570:	4b74      	ldr	r3, [pc, #464]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003574:	4b73      	ldr	r3, [pc, #460]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003576:	2104      	movs	r1, #4
 8003578:	430a      	orrs	r2, r1
 800357a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800357c:	4b71      	ldr	r3, [pc, #452]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800357e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003580:	4b70      	ldr	r3, [pc, #448]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003582:	2101      	movs	r1, #1
 8003584:	438a      	bics	r2, r1
 8003586:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7fd fd66 	bl	8001058 <HAL_GetTick>
 800358c:	0003      	movs	r3, r0
 800358e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003592:	f7fd fd61 	bl	8001058 <HAL_GetTick>
 8003596:	0002      	movs	r2, r0
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e111      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035a4:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	2202      	movs	r2, #2
 80035aa:	4013      	ands	r3, r2
 80035ac:	d1f1      	bne.n	8003592 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2220      	movs	r2, #32
 80035b4:	4013      	ands	r3, r2
 80035b6:	d05c      	beq.n	8003672 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035b8:	4b62      	ldr	r3, [pc, #392]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	220c      	movs	r2, #12
 80035be:	4013      	ands	r3, r2
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	d00e      	beq.n	80035e2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035c4:	4b5f      	ldr	r3, [pc, #380]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	220c      	movs	r2, #12
 80035ca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d114      	bne.n	80035fa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80035d0:	4b5c      	ldr	r3, [pc, #368]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	23c0      	movs	r3, #192	; 0xc0
 80035d6:	025b      	lsls	r3, r3, #9
 80035d8:	401a      	ands	r2, r3
 80035da:	23c0      	movs	r3, #192	; 0xc0
 80035dc:	025b      	lsls	r3, r3, #9
 80035de:	429a      	cmp	r2, r3
 80035e0:	d10b      	bne.n	80035fa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80035e2:	4b58      	ldr	r3, [pc, #352]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80035e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	029b      	lsls	r3, r3, #10
 80035ea:	4013      	ands	r3, r2
 80035ec:	d040      	beq.n	8003670 <HAL_RCC_OscConfig+0x5a8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d03c      	beq.n	8003670 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0e6      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01b      	beq.n	800363a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003602:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003606:	4b4f      	ldr	r3, [pc, #316]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	0249      	lsls	r1, r1, #9
 800360c:	430a      	orrs	r2, r1
 800360e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fd fd22 	bl	8001058 <HAL_GetTick>
 8003614:	0003      	movs	r3, r0
 8003616:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800361a:	f7fd fd1d 	bl	8001058 <HAL_GetTick>
 800361e:	0002      	movs	r2, r0
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e0cd      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800362c:	4b45      	ldr	r3, [pc, #276]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800362e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	029b      	lsls	r3, r3, #10
 8003634:	4013      	ands	r3, r2
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x552>
 8003638:	e01b      	b.n	8003672 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800363a:	4b42      	ldr	r3, [pc, #264]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800363c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800363e:	4b41      	ldr	r3, [pc, #260]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003640:	4943      	ldr	r1, [pc, #268]	; (8003750 <HAL_RCC_OscConfig+0x688>)
 8003642:	400a      	ands	r2, r1
 8003644:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fd fd07 	bl	8001058 <HAL_GetTick>
 800364a:	0003      	movs	r3, r0
 800364c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003650:	f7fd fd02 	bl	8001058 <HAL_GetTick>
 8003654:	0002      	movs	r2, r0
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e0b2      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003662:	4b38      	ldr	r3, [pc, #224]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	029b      	lsls	r3, r3, #10
 800366a:	4013      	ands	r3, r2
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x588>
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003670:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	2b00      	cmp	r3, #0
 8003678:	d100      	bne.n	800367c <HAL_RCC_OscConfig+0x5b4>
 800367a:	e0a4      	b.n	80037c6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800367c:	4b31      	ldr	r3, [pc, #196]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	220c      	movs	r2, #12
 8003682:	4013      	ands	r3, r2
 8003684:	2b08      	cmp	r3, #8
 8003686:	d100      	bne.n	800368a <HAL_RCC_OscConfig+0x5c2>
 8003688:	e078      	b.n	800377c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	2b02      	cmp	r3, #2
 8003690:	d14c      	bne.n	800372c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b2c      	ldr	r3, [pc, #176]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003698:	492e      	ldr	r1, [pc, #184]	; (8003754 <HAL_RCC_OscConfig+0x68c>)
 800369a:	400a      	ands	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fd fcdb 	bl	8001058 <HAL_GetTick>
 80036a2:	0003      	movs	r3, r0
 80036a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fd fcd6 	bl	8001058 <HAL_GetTick>
 80036ac:	0002      	movs	r2, r0
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e086      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	4b22      	ldr	r3, [pc, #136]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	049b      	lsls	r3, r3, #18
 80036c2:	4013      	ands	r3, r2
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	220f      	movs	r2, #15
 80036cc:	4393      	bics	r3, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80036d6:	430a      	orrs	r2, r1
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_RCC_OscConfig+0x690>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	431a      	orrs	r2, r3
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	0449      	lsls	r1, r1, #17
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fd fca9 	bl	8001058 <HAL_GetTick>
 8003706:	0003      	movs	r3, r0
 8003708:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370c:	f7fd fca4 	bl	8001058 <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e054      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	049b      	lsls	r3, r3, #18
 8003726:	4013      	ands	r3, r2
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x644>
 800372a:	e04c      	b.n	80037c6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <HAL_RCC_OscConfig+0x67c>)
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <HAL_RCC_OscConfig+0x68c>)
 8003734:	400a      	ands	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fd fc8e 	bl	8001058 <HAL_GetTick>
 800373c:	0003      	movs	r3, r0
 800373e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003740:	e015      	b.n	800376e <HAL_RCC_OscConfig+0x6a6>
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	40021000 	.word	0x40021000
 8003748:	00001388 	.word	0x00001388
 800374c:	efffffff 	.word	0xefffffff
 8003750:	fffeffff 	.word	0xfffeffff
 8003754:	feffffff 	.word	0xfeffffff
 8003758:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375c:	f7fd fc7c 	bl	8001058 <HAL_GetTick>
 8003760:	0002      	movs	r2, r0
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e02c      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <HAL_RCC_OscConfig+0x708>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	049b      	lsls	r3, r3, #18
 8003776:	4013      	ands	r3, r2
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x694>
 800377a:	e024      	b.n	80037c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e01f      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_RCC_OscConfig+0x708>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800378e:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_RCC_OscConfig+0x708>)
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	23c0      	movs	r3, #192	; 0xc0
 8003798:	025b      	lsls	r3, r3, #9
 800379a:	401a      	ands	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d10e      	bne.n	80037c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	220f      	movs	r2, #15
 80037a8:	401a      	ands	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	23f0      	movs	r3, #240	; 0xf0
 80037b6:	039b      	lsls	r3, r3, #14
 80037b8:	401a      	ands	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b008      	add	sp, #32
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0bf      	b.n	8003968 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_RCC_ClockConfig+0x19c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2201      	movs	r2, #1
 80037ee:	4013      	ands	r3, r2
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d911      	bls.n	800381a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_RCC_ClockConfig+0x19c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2201      	movs	r2, #1
 80037fc:	4393      	bics	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <HAL_RCC_ClockConfig+0x19c>)
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCC_ClockConfig+0x19c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2201      	movs	r2, #1
 800380e:	4013      	ands	r3, r2
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d001      	beq.n	800381a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0a6      	b.n	8003968 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2202      	movs	r2, #2
 8003820:	4013      	ands	r3, r2
 8003822:	d015      	beq.n	8003850 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2204      	movs	r2, #4
 800382a:	4013      	ands	r3, r2
 800382c:	d006      	beq.n	800383c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800382e:	4b51      	ldr	r3, [pc, #324]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	4b50      	ldr	r3, [pc, #320]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 8003834:	21e0      	movs	r1, #224	; 0xe0
 8003836:	00c9      	lsls	r1, r1, #3
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b4d      	ldr	r3, [pc, #308]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	22f0      	movs	r2, #240	; 0xf0
 8003842:	4393      	bics	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	4b4a      	ldr	r3, [pc, #296]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2201      	movs	r2, #1
 8003856:	4013      	ands	r3, r2
 8003858:	d04c      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b44      	ldr	r3, [pc, #272]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	029b      	lsls	r3, r3, #10
 800386a:	4013      	ands	r3, r2
 800386c:	d120      	bne.n	80038b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e07a      	b.n	8003968 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	049b      	lsls	r3, r3, #18
 8003882:	4013      	ands	r3, r2
 8003884:	d114      	bne.n	80038b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06e      	b.n	8003968 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003892:	4b38      	ldr	r3, [pc, #224]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 8003894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	4013      	ands	r3, r2
 800389c:	d108      	bne.n	80038b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e062      	b.n	8003968 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b34      	ldr	r3, [pc, #208]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2202      	movs	r2, #2
 80038a8:	4013      	ands	r3, r2
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e05b      	b.n	8003968 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b0:	4b30      	ldr	r3, [pc, #192]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2203      	movs	r2, #3
 80038b6:	4393      	bics	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fd fbc8 	bl	8001058 <HAL_GetTick>
 80038c8:	0003      	movs	r3, r0
 80038ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038cc:	e009      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ce:	f7fd fbc3 	bl	8001058 <HAL_GetTick>
 80038d2:	0002      	movs	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	4a27      	ldr	r2, [pc, #156]	; (8003978 <HAL_RCC_ClockConfig+0x1a4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e042      	b.n	8003968 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	220c      	movs	r2, #12
 80038e8:	401a      	ands	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1ec      	bne.n	80038ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <HAL_RCC_ClockConfig+0x19c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2201      	movs	r2, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d211      	bcs.n	8003926 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_RCC_ClockConfig+0x19c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2201      	movs	r2, #1
 8003908:	4393      	bics	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <HAL_RCC_ClockConfig+0x19c>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <HAL_RCC_ClockConfig+0x19c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	4013      	ands	r3, r2
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d001      	beq.n	8003926 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e020      	b.n	8003968 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2204      	movs	r2, #4
 800392c:	4013      	ands	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a11      	ldr	r2, [pc, #68]	; (800397c <HAL_RCC_ClockConfig+0x1a8>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 8003940:	430a      	orrs	r2, r1
 8003942:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003944:	f000 f820 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8003948:	0001      	movs	r1, r0
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_RCC_ClockConfig+0x1a0>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	220f      	movs	r2, #15
 8003952:	4013      	ands	r3, r2
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <HAL_RCC_ClockConfig+0x1ac>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	000a      	movs	r2, r1
 800395a:	40da      	lsrs	r2, r3
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1b0>)
 800395e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003960:	2003      	movs	r0, #3
 8003962:	f7fd fb33 	bl	8000fcc <HAL_InitTick>
  
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40022000 	.word	0x40022000
 8003974:	40021000 	.word	0x40021000
 8003978:	00001388 	.word	0x00001388
 800397c:	fffff8ff 	.word	0xfffff8ff
 8003980:	08005e28 	.word	0x08005e28
 8003984:	20000000 	.word	0x20000000

08003988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80039a2:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	220c      	movs	r2, #12
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d046      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0xb8>
 80039b2:	d848      	bhi.n	8003a46 <HAL_RCC_GetSysClockFreq+0xbe>
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d002      	beq.n	80039be <HAL_RCC_GetSysClockFreq+0x36>
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d003      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x3c>
 80039bc:	e043      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039be:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xd4>)
 80039c0:	613b      	str	r3, [r7, #16]
      break;
 80039c2:	e043      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	0c9b      	lsrs	r3, r3, #18
 80039c8:	220f      	movs	r2, #15
 80039ca:	4013      	ands	r3, r2
 80039cc:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xd8>)
 80039ce:	5cd3      	ldrb	r3, [r2, r3]
 80039d0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80039d2:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	220f      	movs	r2, #15
 80039d8:	4013      	ands	r3, r2
 80039da:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xdc>)
 80039dc:	5cd3      	ldrb	r3, [r2, r3]
 80039de:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	23c0      	movs	r3, #192	; 0xc0
 80039e4:	025b      	lsls	r3, r3, #9
 80039e6:	401a      	ands	r2, r3
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	025b      	lsls	r3, r3, #9
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d109      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	481a      	ldr	r0, [pc, #104]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xd4>)
 80039f4:	f7fc fb86 	bl	8000104 <__udivsi3>
 80039f8:	0003      	movs	r3, r0
 80039fa:	001a      	movs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4353      	muls	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e01a      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	23c0      	movs	r3, #192	; 0xc0
 8003a08:	025b      	lsls	r3, r3, #9
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	23c0      	movs	r3, #192	; 0xc0
 8003a0e:	025b      	lsls	r3, r3, #9
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d109      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	4814      	ldr	r0, [pc, #80]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003a18:	f7fc fb74 	bl	8000104 <__udivsi3>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	001a      	movs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4353      	muls	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	480c      	ldr	r0, [pc, #48]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a2c:	f7fc fb6a 	bl	8000104 <__udivsi3>
 8003a30:	0003      	movs	r3, r0
 8003a32:	001a      	movs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4353      	muls	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	613b      	str	r3, [r7, #16]
      break;
 8003a3e:	e005      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003a42:	613b      	str	r3, [r7, #16]
      break;
 8003a44:	e002      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a48:	613b      	str	r3, [r7, #16]
      break;
 8003a4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a4c:	693b      	ldr	r3, [r7, #16]
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b006      	add	sp, #24
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	007a1200 	.word	0x007a1200
 8003a60:	08005e40 	.word	0x08005e40
 8003a64:	08005e50 	.word	0x08005e50
 8003a68:	02dc6c00 	.word	0x02dc6c00

08003a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a70:	4b02      	ldr	r3, [pc, #8]	; (8003a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	20000000 	.word	0x20000000

08003a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003a84:	f7ff fff2 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003a88:	0001      	movs	r1, r0
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	2207      	movs	r2, #7
 8003a92:	4013      	ands	r3, r2
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	40d9      	lsrs	r1, r3
 8003a9a:	000b      	movs	r3, r1
}    
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08005e38 	.word	0x08005e38

08003aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	025b      	lsls	r3, r3, #9
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d100      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003ac8:	e08e      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003aca:	2017      	movs	r0, #23
 8003acc:	183b      	adds	r3, r7, r0
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b6e      	ldr	r3, [pc, #440]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	055b      	lsls	r3, r3, #21
 8003ada:	4013      	ands	r3, r2
 8003adc:	d110      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	4b6b      	ldr	r3, [pc, #428]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	4b6a      	ldr	r3, [pc, #424]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	0549      	lsls	r1, r1, #21
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	61da      	str	r2, [r3, #28]
 8003aec:	4b67      	ldr	r3, [pc, #412]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	055b      	lsls	r3, r3, #21
 8003af4:	4013      	ands	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	183b      	adds	r3, r7, r0
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b63      	ldr	r3, [pc, #396]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d11a      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0c:	4b60      	ldr	r3, [pc, #384]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b5f      	ldr	r3, [pc, #380]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	0049      	lsls	r1, r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b1a:	f7fd fa9d 	bl	8001058 <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b22:	e008      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b24:	f7fd fa98 	bl	8001058 <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0a6      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	4b56      	ldr	r3, [pc, #344]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b42:	4b52      	ldr	r3, [pc, #328]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	23c0      	movs	r3, #192	; 0xc0
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d034      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	23c0      	movs	r3, #192	; 0xc0
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d02c      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b64:	4b49      	ldr	r3, [pc, #292]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4a4a      	ldr	r2, [pc, #296]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	4b46      	ldr	r3, [pc, #280]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	0249      	lsls	r1, r1, #9
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7c:	4b43      	ldr	r3, [pc, #268]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b82:	4945      	ldr	r1, [pc, #276]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b88:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	4013      	ands	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fd fa5f 	bl	8001058 <HAL_GetTick>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9e:	e009      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fd fa5a 	bl	8001058 <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	4a3c      	ldr	r2, [pc, #240]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e067      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbe:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4a34      	ldr	r2, [pc, #208]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	4b2f      	ldr	r3, [pc, #188]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bd2:	2317      	movs	r3, #23
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003be2:	492f      	ldr	r1, [pc, #188]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2201      	movs	r2, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c02:	430a      	orrs	r2, r1
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c10:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	02db      	lsls	r3, r3, #11
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c30:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	4a1c      	ldr	r2, [pc, #112]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	0019      	movs	r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c40:	430a      	orrs	r2, r1
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	2210      	movs	r2, #16
 8003c54:	4393      	bics	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	2380      	movs	r3, #128	; 0x80
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	2240      	movs	r2, #64	; 0x40
 8003c74:	4393      	bics	r3, r2
 8003c76:	0019      	movs	r1, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	0018      	movs	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b006      	add	sp, #24
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40007000 	.word	0x40007000
 8003c94:	fffffcff 	.word	0xfffffcff
 8003c98:	fffeffff 	.word	0xfffeffff
 8003c9c:	00001388 	.word	0x00001388
 8003ca0:	efffffff 	.word	0xefffffff
 8003ca4:	fffcffff 	.word	0xfffcffff
 8003ca8:	fff3ffff 	.word	0xfff3ffff

08003cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e042      	b.n	8003d44 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	223d      	movs	r2, #61	; 0x3d
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	223c      	movs	r2, #60	; 0x3c
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fc ff0d 	bl	8000af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223d      	movs	r2, #61	; 0x3d
 8003cde:	2102      	movs	r1, #2
 8003ce0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	0019      	movs	r1, r3
 8003cec:	0010      	movs	r0, r2
 8003cee:	f000 fd0f 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2246      	movs	r2, #70	; 0x46
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	223e      	movs	r2, #62	; 0x3e
 8003cfe:	2101      	movs	r1, #1
 8003d00:	5499      	strb	r1, [r3, r2]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	223f      	movs	r2, #63	; 0x3f
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2241      	movs	r2, #65	; 0x41
 8003d16:	2101      	movs	r1, #1
 8003d18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2242      	movs	r2, #66	; 0x42
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2243      	movs	r2, #67	; 0x43
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2244      	movs	r2, #68	; 0x44
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2245      	movs	r2, #69	; 0x45
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223d      	movs	r2, #61	; 0x3d
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	223d      	movs	r2, #61	; 0x3d
 8003d58:	5c9b      	ldrb	r3, [r3, r2]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d001      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e03b      	b.n	8003ddc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	223d      	movs	r2, #61	; 0x3d
 8003d68:	2102      	movs	r1, #2
 8003d6a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2101      	movs	r1, #1
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_TIM_Base_Start_IT+0x98>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00f      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x5a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	05db      	lsls	r3, r3, #23
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d009      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x5a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x5a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a12      	ldr	r2, [pc, #72]	; (8003dec <HAL_TIM_Base_Start_IT+0xa0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d111      	bne.n	8003dca <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2207      	movs	r2, #7
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b06      	cmp	r3, #6
 8003db6:	d010      	beq.n	8003dda <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc8:	e007      	b.n	8003dda <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40014000 	.word	0x40014000

08003df0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e042      	b.n	8003e88 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223d      	movs	r2, #61	; 0x3d
 8003e06:	5c9b      	ldrb	r3, [r3, r2]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	223c      	movs	r2, #60	; 0x3c
 8003e12:	2100      	movs	r1, #0
 8003e14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 f839 	bl	8003e90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	223d      	movs	r2, #61	; 0x3d
 8003e22:	2102      	movs	r1, #2
 8003e24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	0019      	movs	r1, r3
 8003e30:	0010      	movs	r0, r2
 8003e32:	f000 fc6d 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2246      	movs	r2, #70	; 0x46
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223e      	movs	r2, #62	; 0x3e
 8003e42:	2101      	movs	r1, #1
 8003e44:	5499      	strb	r1, [r3, r2]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	223f      	movs	r2, #63	; 0x3f
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2240      	movs	r2, #64	; 0x40
 8003e52:	2101      	movs	r1, #1
 8003e54:	5499      	strb	r1, [r3, r2]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2241      	movs	r2, #65	; 0x41
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2242      	movs	r2, #66	; 0x42
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2243      	movs	r2, #67	; 0x43
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2244      	movs	r2, #68	; 0x44
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2245      	movs	r2, #69	; 0x45
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	223d      	movs	r2, #61	; 0x3d
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e042      	b.n	8003f38 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	223d      	movs	r2, #61	; 0x3d
 8003eb6:	5c9b      	ldrb	r3, [r3, r2]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	223c      	movs	r2, #60	; 0x3c
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f839 	bl	8003f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223d      	movs	r2, #61	; 0x3d
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3304      	adds	r3, #4
 8003ede:	0019      	movs	r1, r3
 8003ee0:	0010      	movs	r0, r2
 8003ee2:	f000 fc15 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2246      	movs	r2, #70	; 0x46
 8003eea:	2101      	movs	r1, #1
 8003eec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	223e      	movs	r2, #62	; 0x3e
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223f      	movs	r2, #63	; 0x3f
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2240      	movs	r2, #64	; 0x40
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2241      	movs	r2, #65	; 0x41
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2242      	movs	r2, #66	; 0x42
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2243      	movs	r2, #67	; 0x43
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2244      	movs	r2, #68	; 0x44
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2245      	movs	r2, #69	; 0x45
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	223d      	movs	r2, #61	; 0x3d
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d108      	bne.n	8003f72 <HAL_TIM_PWM_Start+0x22>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	223e      	movs	r2, #62	; 0x3e
 8003f64:	5c9b      	ldrb	r3, [r3, r2]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	1e5a      	subs	r2, r3, #1
 8003f6c:	4193      	sbcs	r3, r2
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e01f      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x62>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d108      	bne.n	8003f8a <HAL_TIM_PWM_Start+0x3a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	223f      	movs	r2, #63	; 0x3f
 8003f7c:	5c9b      	ldrb	r3, [r3, r2]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	1e5a      	subs	r2, r3, #1
 8003f84:	4193      	sbcs	r3, r2
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e013      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x62>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d108      	bne.n	8003fa2 <HAL_TIM_PWM_Start+0x52>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2240      	movs	r2, #64	; 0x40
 8003f94:	5c9b      	ldrb	r3, [r3, r2]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	4193      	sbcs	r3, r2
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	e007      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2241      	movs	r2, #65	; 0x41
 8003fa6:	5c9b      	ldrb	r3, [r3, r2]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	1e5a      	subs	r2, r3, #1
 8003fae:	4193      	sbcs	r3, r2
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e074      	b.n	80040a4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Start+0x7a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	223e      	movs	r2, #62	; 0x3e
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	5499      	strb	r1, [r3, r2]
 8003fc8:	e013      	b.n	8003ff2 <HAL_TIM_PWM_Start+0xa2>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Start+0x8a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	223f      	movs	r2, #63	; 0x3f
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	5499      	strb	r1, [r3, r2]
 8003fd8:	e00b      	b.n	8003ff2 <HAL_TIM_PWM_Start+0xa2>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_PWM_Start+0x9a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2240      	movs	r2, #64	; 0x40
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	5499      	strb	r1, [r3, r2]
 8003fe8:	e003      	b.n	8003ff2 <HAL_TIM_PWM_Start+0xa2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2241      	movs	r2, #65	; 0x41
 8003fee:	2102      	movs	r1, #2
 8003ff0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fe9e 	bl	8004d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a29      	ldr	r2, [pc, #164]	; (80040ac <HAL_TIM_PWM_Start+0x15c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00e      	beq.n	8004028 <HAL_TIM_PWM_Start+0xd8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <HAL_TIM_PWM_Start+0x160>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d009      	beq.n	8004028 <HAL_TIM_PWM_Start+0xd8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a26      	ldr	r2, [pc, #152]	; (80040b4 <HAL_TIM_PWM_Start+0x164>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_TIM_PWM_Start+0xd8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a25      	ldr	r2, [pc, #148]	; (80040b8 <HAL_TIM_PWM_Start+0x168>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d101      	bne.n	800402c <HAL_TIM_PWM_Start+0xdc>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <HAL_TIM_PWM_Start+0xde>
 800402c:	2300      	movs	r3, #0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	0209      	lsls	r1, r1, #8
 8004040:	430a      	orrs	r2, r1
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <HAL_TIM_PWM_Start+0x15c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00f      	beq.n	800406e <HAL_TIM_PWM_Start+0x11e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	05db      	lsls	r3, r3, #23
 8004056:	429a      	cmp	r2, r3
 8004058:	d009      	beq.n	800406e <HAL_TIM_PWM_Start+0x11e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a17      	ldr	r2, [pc, #92]	; (80040bc <HAL_TIM_PWM_Start+0x16c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIM_PWM_Start+0x11e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <HAL_TIM_PWM_Start+0x160>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d111      	bne.n	8004092 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2207      	movs	r2, #7
 8004076:	4013      	ands	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b06      	cmp	r3, #6
 800407e:	d010      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	430a      	orrs	r2, r1
 800408e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	e007      	b.n	80040a2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2101      	movs	r1, #1
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b004      	add	sp, #16
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800
 80040bc:	40000400 	.word	0x40000400

080040c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2202      	movs	r2, #2
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d124      	bne.n	8004120 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d11d      	bne.n	8004120 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2203      	movs	r2, #3
 80040ea:	4252      	negs	r2, r2
 80040ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2203      	movs	r2, #3
 80040fc:	4013      	ands	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 faec 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 8004108:	e007      	b.n	800411a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 fadf 	bl	80046d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f000 faeb 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2204      	movs	r2, #4
 8004128:	4013      	ands	r3, r2
 800412a:	2b04      	cmp	r3, #4
 800412c:	d125      	bne.n	800417a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2204      	movs	r2, #4
 8004136:	4013      	ands	r3, r2
 8004138:	2b04      	cmp	r3, #4
 800413a:	d11e      	bne.n	800417a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2205      	movs	r2, #5
 8004142:	4252      	negs	r2, r2
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	23c0      	movs	r3, #192	; 0xc0
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4013      	ands	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0018      	movs	r0, r3
 800415e:	f000 fabf 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 8004162:	e007      	b.n	8004174 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	0018      	movs	r0, r3
 8004168:	f000 fab2 	bl	80046d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f000 fabe 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2208      	movs	r2, #8
 8004182:	4013      	ands	r3, r2
 8004184:	2b08      	cmp	r3, #8
 8004186:	d124      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2208      	movs	r2, #8
 8004190:	4013      	ands	r3, r2
 8004192:	2b08      	cmp	r3, #8
 8004194:	d11d      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2209      	movs	r2, #9
 800419c:	4252      	negs	r2, r2
 800419e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2204      	movs	r2, #4
 80041a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	2203      	movs	r2, #3
 80041ae:	4013      	ands	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 fa93 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 80041ba:	e007      	b.n	80041cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 fa86 	bl	80046d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 fa92 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2210      	movs	r2, #16
 80041da:	4013      	ands	r3, r2
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d125      	bne.n	800422c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2210      	movs	r2, #16
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d11e      	bne.n	800422c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2211      	movs	r2, #17
 80041f4:	4252      	negs	r2, r2
 80041f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2208      	movs	r2, #8
 80041fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	23c0      	movs	r3, #192	; 0xc0
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4013      	ands	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	0018      	movs	r0, r3
 8004210:	f000 fa66 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 8004214:	e007      	b.n	8004226 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 fa59 	bl	80046d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	0018      	movs	r0, r3
 8004222:	f000 fa65 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2201      	movs	r2, #1
 8004234:	4013      	ands	r3, r2
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10f      	bne.n	800425a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	4013      	ands	r3, r2
 8004244:	2b01      	cmp	r3, #1
 8004246:	d108      	bne.n	800425a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2202      	movs	r2, #2
 800424e:	4252      	negs	r2, r2
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0018      	movs	r0, r3
 8004256:	f7fc fb45 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2280      	movs	r2, #128	; 0x80
 8004262:	4013      	ands	r3, r2
 8004264:	2b80      	cmp	r3, #128	; 0x80
 8004266:	d10f      	bne.n	8004288 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2280      	movs	r2, #128	; 0x80
 8004270:	4013      	ands	r3, r2
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d108      	bne.n	8004288 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2281      	movs	r2, #129	; 0x81
 800427c:	4252      	negs	r2, r2
 800427e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	0018      	movs	r0, r3
 8004284:	f000 fde4 	bl	8004e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2240      	movs	r2, #64	; 0x40
 8004290:	4013      	ands	r3, r2
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d10f      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2240      	movs	r2, #64	; 0x40
 800429e:	4013      	ands	r3, r2
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d108      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2241      	movs	r2, #65	; 0x41
 80042aa:	4252      	negs	r2, r2
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 fa25 	bl	8004700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2220      	movs	r2, #32
 80042be:	4013      	ands	r3, r2
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d10f      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d108      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2221      	movs	r2, #33	; 0x21
 80042d8:	4252      	negs	r2, r2
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 fdae 	bl	8004e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b002      	add	sp, #8
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f8:	2317      	movs	r3, #23
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	223c      	movs	r2, #60	; 0x3c
 8004304:	5c9b      	ldrb	r3, [r3, r2]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_TIM_OC_ConfigChannel+0x22>
 800430a:	2302      	movs	r3, #2
 800430c:	e042      	b.n	8004394 <HAL_TIM_OC_ConfigChannel+0xa8>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	223c      	movs	r2, #60	; 0x3c
 8004312:	2101      	movs	r1, #1
 8004314:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b0c      	cmp	r3, #12
 800431a:	d027      	beq.n	800436c <HAL_TIM_OC_ConfigChannel+0x80>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d82c      	bhi.n	800437c <HAL_TIM_OC_ConfigChannel+0x90>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d019      	beq.n	800435c <HAL_TIM_OC_ConfigChannel+0x70>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b08      	cmp	r3, #8
 800432c:	d826      	bhi.n	800437c <HAL_TIM_OC_ConfigChannel+0x90>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_TIM_OC_ConfigChannel+0x50>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b04      	cmp	r3, #4
 8004338:	d008      	beq.n	800434c <HAL_TIM_OC_ConfigChannel+0x60>
 800433a:	e01f      	b.n	800437c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	0011      	movs	r1, r2
 8004344:	0018      	movs	r0, r3
 8004346:	f000 fa63 	bl	8004810 <TIM_OC1_SetConfig>
      break;
 800434a:	e01c      	b.n	8004386 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	0011      	movs	r1, r2
 8004354:	0018      	movs	r0, r3
 8004356:	f000 fae3 	bl	8004920 <TIM_OC2_SetConfig>
      break;
 800435a:	e014      	b.n	8004386 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f000 fb5f 	bl	8004a28 <TIM_OC3_SetConfig>
      break;
 800436a:	e00c      	b.n	8004386 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	0011      	movs	r1, r2
 8004374:	0018      	movs	r0, r3
 8004376:	f000 fbdd 	bl	8004b34 <TIM_OC4_SetConfig>
      break;
 800437a:	e004      	b.n	8004386 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 800437c:	2317      	movs	r3, #23
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
      break;
 8004384:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	223c      	movs	r2, #60	; 0x3c
 800438a:	2100      	movs	r1, #0
 800438c:	5499      	strb	r1, [r3, r2]

  return status;
 800438e:	2317      	movs	r3, #23
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	781b      	ldrb	r3, [r3, #0]
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b006      	add	sp, #24
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2317      	movs	r3, #23
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	223c      	movs	r2, #60	; 0x3c
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_TIM_PWM_ConfigChannel+0x22>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e0ad      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	223c      	movs	r2, #60	; 0x3c
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d100      	bne.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80043cc:	e076      	b.n	80044bc <HAL_TIM_PWM_ConfigChannel+0x120>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d900      	bls.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80043d4:	e095      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x166>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d04e      	beq.n	800447a <HAL_TIM_PWM_ConfigChannel+0xde>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d900      	bls.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80043e2:	e08e      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x166>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d021      	beq.n	8004434 <HAL_TIM_PWM_ConfigChannel+0x98>
 80043f0:	e087      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 fa08 	bl	8004810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2108      	movs	r1, #8
 800440c:	430a      	orrs	r2, r1
 800440e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2104      	movs	r1, #4
 800441c:	438a      	bics	r2, r1
 800441e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6999      	ldr	r1, [r3, #24]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	619a      	str	r2, [r3, #24]
      break;
 8004432:	e06b      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f000 fa6f 	bl	8004920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0109      	lsls	r1, r1, #4
 8004450:	430a      	orrs	r2, r1
 8004452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4931      	ldr	r1, [pc, #196]	; (8004524 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004460:	400a      	ands	r2, r1
 8004462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6999      	ldr	r1, [r3, #24]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	619a      	str	r2, [r3, #24]
      break;
 8004478:	e048      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	0011      	movs	r1, r2
 8004482:	0018      	movs	r0, r3
 8004484:	f000 fad0 	bl	8004a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2108      	movs	r1, #8
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2104      	movs	r1, #4
 80044a4:	438a      	bics	r2, r1
 80044a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69d9      	ldr	r1, [r3, #28]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	61da      	str	r2, [r3, #28]
      break;
 80044ba:	e027      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	0011      	movs	r1, r2
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 fb35 	bl	8004b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2180      	movs	r1, #128	; 0x80
 80044d6:	0109      	lsls	r1, r1, #4
 80044d8:	430a      	orrs	r2, r1
 80044da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	490f      	ldr	r1, [pc, #60]	; (8004524 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69d9      	ldr	r1, [r3, #28]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	61da      	str	r2, [r3, #28]
      break;
 8004500:	e004      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004502:	2317      	movs	r3, #23
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
      break;
 800450a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	223c      	movs	r2, #60	; 0x3c
 8004510:	2100      	movs	r1, #0
 8004512:	5499      	strb	r1, [r3, r2]

  return status;
 8004514:	2317      	movs	r3, #23
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	781b      	ldrb	r3, [r3, #0]
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b006      	add	sp, #24
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	fffffbff 	.word	0xfffffbff

08004528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004532:	230f      	movs	r3, #15
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	223c      	movs	r2, #60	; 0x3c
 800453e:	5c9b      	ldrb	r3, [r3, r2]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_ConfigClockSource+0x20>
 8004544:	2302      	movs	r3, #2
 8004546:	e0bc      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x19a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	223c      	movs	r2, #60	; 0x3c
 800454c:	2101      	movs	r1, #1
 800454e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	223d      	movs	r2, #61	; 0x3d
 8004554:	2102      	movs	r1, #2
 8004556:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2277      	movs	r2, #119	; 0x77
 8004564:	4393      	bics	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a58      	ldr	r2, [pc, #352]	; (80046cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800456c:	4013      	ands	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	0192      	lsls	r2, r2, #6
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xde>
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	0192      	lsls	r2, r2, #6
 8004588:	4293      	cmp	r3, r2
 800458a:	d900      	bls.n	800458e <HAL_TIM_ConfigClockSource+0x66>
 800458c:	e088      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	0152      	lsls	r2, r2, #5
 8004592:	4293      	cmp	r3, r2
 8004594:	d100      	bne.n	8004598 <HAL_TIM_ConfigClockSource+0x70>
 8004596:	e088      	b.n	80046aa <HAL_TIM_ConfigClockSource+0x182>
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	0152      	lsls	r2, r2, #5
 800459c:	4293      	cmp	r3, r2
 800459e:	d900      	bls.n	80045a2 <HAL_TIM_ConfigClockSource+0x7a>
 80045a0:	e07e      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045a2:	2b70      	cmp	r3, #112	; 0x70
 80045a4:	d018      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0xb0>
 80045a6:	d900      	bls.n	80045aa <HAL_TIM_ConfigClockSource+0x82>
 80045a8:	e07a      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045aa:	2b60      	cmp	r3, #96	; 0x60
 80045ac:	d04f      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x126>
 80045ae:	d900      	bls.n	80045b2 <HAL_TIM_ConfigClockSource+0x8a>
 80045b0:	e076      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045b2:	2b50      	cmp	r3, #80	; 0x50
 80045b4:	d03b      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x106>
 80045b6:	d900      	bls.n	80045ba <HAL_TIM_ConfigClockSource+0x92>
 80045b8:	e072      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d057      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x146>
 80045be:	d900      	bls.n	80045c2 <HAL_TIM_ConfigClockSource+0x9a>
 80045c0:	e06e      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045c2:	2b30      	cmp	r3, #48	; 0x30
 80045c4:	d063      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045c6:	d86b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d060      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045cc:	d868      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d05d      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d05b      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045d6:	e063      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045e8:	f000 fb88 	bl	8004cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2277      	movs	r2, #119	; 0x77
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e052      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004616:	f000 fb71 	bl	8004cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	01c9      	lsls	r1, r1, #7
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
      break;
 800462c:	e03e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	001a      	movs	r2, r3
 800463c:	f000 fae4 	bl	8004c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2150      	movs	r1, #80	; 0x50
 8004646:	0018      	movs	r0, r3
 8004648:	f000 fb3e 	bl	8004cc8 <TIM_ITRx_SetConfig>
      break;
 800464c:	e02e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800465a:	001a      	movs	r2, r3
 800465c:	f000 fb02 	bl	8004c64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2160      	movs	r1, #96	; 0x60
 8004666:	0018      	movs	r0, r3
 8004668:	f000 fb2e 	bl	8004cc8 <TIM_ITRx_SetConfig>
      break;
 800466c:	e01e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	001a      	movs	r2, r3
 800467c:	f000 fac4 	bl	8004c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	0018      	movs	r0, r3
 8004688:	f000 fb1e 	bl	8004cc8 <TIM_ITRx_SetConfig>
      break;
 800468c:	e00e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	0019      	movs	r1, r3
 8004698:	0010      	movs	r0, r2
 800469a:	f000 fb15 	bl	8004cc8 <TIM_ITRx_SetConfig>
      break;
 800469e:	e005      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046a0:	230f      	movs	r3, #15
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
      break;
 80046a8:	e000      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	223d      	movs	r2, #61	; 0x3d
 80046b0:	2101      	movs	r1, #1
 80046b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	223c      	movs	r2, #60	; 0x3c
 80046b8:	2100      	movs	r1, #0
 80046ba:	5499      	strb	r1, [r3, r2]

  return status;
 80046bc:	230f      	movs	r3, #15
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	781b      	ldrb	r3, [r3, #0]
}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b004      	add	sp, #16
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	ffff00ff 	.word	0xffff00ff

080046d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}

08004710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a34      	ldr	r2, [pc, #208]	; (80047f4 <TIM_Base_SetConfig+0xe4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d008      	beq.n	800473a <TIM_Base_SetConfig+0x2a>
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	05db      	lsls	r3, r3, #23
 800472e:	429a      	cmp	r2, r3
 8004730:	d003      	beq.n	800473a <TIM_Base_SetConfig+0x2a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a30      	ldr	r2, [pc, #192]	; (80047f8 <TIM_Base_SetConfig+0xe8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d108      	bne.n	800474c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2270      	movs	r2, #112	; 0x70
 800473e:	4393      	bics	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <TIM_Base_SetConfig+0xe4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d018      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	05db      	lsls	r3, r3, #23
 800475a:	429a      	cmp	r2, r3
 800475c:	d013      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <TIM_Base_SetConfig+0xe8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00f      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a24      	ldr	r2, [pc, #144]	; (80047fc <TIM_Base_SetConfig+0xec>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a23      	ldr	r2, [pc, #140]	; (8004800 <TIM_Base_SetConfig+0xf0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a22      	ldr	r2, [pc, #136]	; (8004804 <TIM_Base_SetConfig+0xf4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a21      	ldr	r2, [pc, #132]	; (8004808 <TIM_Base_SetConfig+0xf8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <TIM_Base_SetConfig+0xfc>)
 800478a:	4013      	ands	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	4393      	bics	r3, r2
 800479e:	001a      	movs	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <TIM_Base_SetConfig+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00b      	beq.n	80047de <TIM_Base_SetConfig+0xce>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a0d      	ldr	r2, [pc, #52]	; (8004800 <TIM_Base_SetConfig+0xf0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <TIM_Base_SetConfig+0xce>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <TIM_Base_SetConfig+0xf4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_Base_SetConfig+0xce>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a0b      	ldr	r2, [pc, #44]	; (8004808 <TIM_Base_SetConfig+0xf8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d103      	bne.n	80047e6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	615a      	str	r2, [r3, #20]
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b004      	add	sp, #16
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40002000 	.word	0x40002000
 8004800:	40014000 	.word	0x40014000
 8004804:	40014400 	.word	0x40014400
 8004808:	40014800 	.word	0x40014800
 800480c:	fffffcff 	.word	0xfffffcff

08004810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	2201      	movs	r2, #1
 8004820:	4393      	bics	r3, r2
 8004822:	001a      	movs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2270      	movs	r2, #112	; 0x70
 800483e:	4393      	bics	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2203      	movs	r2, #3
 8004846:	4393      	bics	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2202      	movs	r2, #2
 8004858:	4393      	bics	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a27      	ldr	r2, [pc, #156]	; (8004908 <TIM_OC1_SetConfig+0xf8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00b      	beq.n	8004886 <TIM_OC1_SetConfig+0x76>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <TIM_OC1_SetConfig+0xfc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d007      	beq.n	8004886 <TIM_OC1_SetConfig+0x76>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <TIM_OC1_SetConfig+0x100>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d003      	beq.n	8004886 <TIM_OC1_SetConfig+0x76>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a24      	ldr	r2, [pc, #144]	; (8004914 <TIM_OC1_SetConfig+0x104>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10c      	bne.n	80048a0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2208      	movs	r2, #8
 800488a:	4393      	bics	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2204      	movs	r2, #4
 800489c:	4393      	bics	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a19      	ldr	r2, [pc, #100]	; (8004908 <TIM_OC1_SetConfig+0xf8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_OC1_SetConfig+0xb0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <TIM_OC1_SetConfig+0xfc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_OC1_SetConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a17      	ldr	r2, [pc, #92]	; (8004910 <TIM_OC1_SetConfig+0x100>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_OC1_SetConfig+0xb0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a16      	ldr	r2, [pc, #88]	; (8004914 <TIM_OC1_SetConfig+0x104>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d111      	bne.n	80048e4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <TIM_OC1_SetConfig+0x108>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4a14      	ldr	r2, [pc, #80]	; (800491c <TIM_OC1_SetConfig+0x10c>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b006      	add	sp, #24
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40014000 	.word	0x40014000
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800
 8004918:	fffffeff 	.word	0xfffffeff
 800491c:	fffffdff 	.word	0xfffffdff

08004920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	2210      	movs	r2, #16
 8004930:	4393      	bics	r3, r2
 8004932:	001a      	movs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a2e      	ldr	r2, [pc, #184]	; (8004a08 <TIM_OC2_SetConfig+0xe8>)
 800494e:	4013      	ands	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a2d      	ldr	r2, [pc, #180]	; (8004a0c <TIM_OC2_SetConfig+0xec>)
 8004956:	4013      	ands	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2220      	movs	r2, #32
 800496a:	4393      	bics	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a24      	ldr	r2, [pc, #144]	; (8004a10 <TIM_OC2_SetConfig+0xf0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d10d      	bne.n	800499e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	4393      	bics	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	4393      	bics	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <TIM_OC2_SetConfig+0xf0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_OC2_SetConfig+0x9e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <TIM_OC2_SetConfig+0xf4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_OC2_SetConfig+0x9e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <TIM_OC2_SetConfig+0xf8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC2_SetConfig+0x9e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <TIM_OC2_SetConfig+0xfc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <TIM_OC2_SetConfig+0x100>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <TIM_OC2_SetConfig+0x104>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b006      	add	sp, #24
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	ffff8fff 	.word	0xffff8fff
 8004a0c:	fffffcff 	.word	0xfffffcff
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800
 8004a20:	fffffbff 	.word	0xfffffbff
 8004a24:	fffff7ff 	.word	0xfffff7ff

08004a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	4a35      	ldr	r2, [pc, #212]	; (8004b0c <TIM_OC3_SetConfig+0xe4>)
 8004a38:	401a      	ands	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2270      	movs	r2, #112	; 0x70
 8004a54:	4393      	bics	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4a28      	ldr	r2, [pc, #160]	; (8004b10 <TIM_OC3_SetConfig+0xe8>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <TIM_OC3_SetConfig+0xec>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10d      	bne.n	8004aa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <TIM_OC3_SetConfig+0xf0>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <TIM_OC3_SetConfig+0xf4>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <TIM_OC3_SetConfig+0xec>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00b      	beq.n	8004ac2 <TIM_OC3_SetConfig+0x9a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <TIM_OC3_SetConfig+0xf8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <TIM_OC3_SetConfig+0x9a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <TIM_OC3_SetConfig+0xfc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d003      	beq.n	8004ac2 <TIM_OC3_SetConfig+0x9a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1a      	ldr	r2, [pc, #104]	; (8004b28 <TIM_OC3_SetConfig+0x100>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d113      	bne.n	8004aea <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <TIM_OC3_SetConfig+0x104>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <TIM_OC3_SetConfig+0x108>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	621a      	str	r2, [r3, #32]
}
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b006      	add	sp, #24
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	fffffeff 	.word	0xfffffeff
 8004b10:	fffffdff 	.word	0xfffffdff
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	fffff7ff 	.word	0xfffff7ff
 8004b1c:	fffffbff 	.word	0xfffffbff
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800
 8004b2c:	ffffefff 	.word	0xffffefff
 8004b30:	ffffdfff 	.word	0xffffdfff

08004b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <TIM_OC4_SetConfig+0xb0>)
 8004b44:	401a      	ands	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <TIM_OC4_SetConfig+0xb4>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <TIM_OC4_SetConfig+0xb8>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <TIM_OC4_SetConfig+0xbc>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	031b      	lsls	r3, r3, #12
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <TIM_OC4_SetConfig+0xc0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_OC4_SetConfig+0x78>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <TIM_OC4_SetConfig+0xc4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_OC4_SetConfig+0x78>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <TIM_OC4_SetConfig+0xc8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_OC4_SetConfig+0x78>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <TIM_OC4_SetConfig+0xcc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d109      	bne.n	8004bc0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <TIM_OC4_SetConfig+0xd0>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	019b      	lsls	r3, r3, #6
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b006      	add	sp, #24
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	ffffefff 	.word	0xffffefff
 8004be8:	ffff8fff 	.word	0xffff8fff
 8004bec:	fffffcff 	.word	0xfffffcff
 8004bf0:	ffffdfff 	.word	0xffffdfff
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	ffffbfff 	.word	0xffffbfff

08004c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4393      	bics	r3, r2
 8004c22:	001a      	movs	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	22f0      	movs	r2, #240	; 0xf0
 8004c32:	4393      	bics	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	220a      	movs	r2, #10
 8004c44:	4393      	bics	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	46c0      	nop			; (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b006      	add	sp, #24
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	2210      	movs	r2, #16
 8004c76:	4393      	bics	r3, r2
 8004c78:	001a      	movs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	4a0d      	ldr	r2, [pc, #52]	; (8004cc4 <TIM_TI2_ConfigInputStage+0x60>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	031b      	lsls	r3, r3, #12
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	22a0      	movs	r2, #160	; 0xa0
 8004ca0:	4393      	bics	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b006      	add	sp, #24
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	ffff0fff 	.word	0xffff0fff

08004cc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2270      	movs	r2, #112	; 0x70
 8004cdc:	4393      	bics	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	2207      	movs	r2, #7
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b004      	add	sp, #16
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <TIM_ETR_SetConfig+0x3c>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b006      	add	sp, #24
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	ffff00ff 	.word	0xffff00ff

08004d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	221f      	movs	r2, #31
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2201      	movs	r2, #1
 8004d50:	409a      	lsls	r2, r3
 8004d52:	0013      	movs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	43d2      	mvns	r2, r2
 8004d5e:	401a      	ands	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	211f      	movs	r1, #31
 8004d6c:	400b      	ands	r3, r1
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4099      	lsls	r1, r3
 8004d72:	000b      	movs	r3, r1
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b006      	add	sp, #24
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223c      	movs	r2, #60	; 0x3c
 8004d92:	5c9b      	ldrb	r3, [r3, r2]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e047      	b.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	223c      	movs	r2, #60	; 0x3c
 8004da0:	2101      	movs	r1, #1
 8004da2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	223d      	movs	r2, #61	; 0x3d
 8004da8:	2102      	movs	r1, #2
 8004daa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2270      	movs	r2, #112	; 0x70
 8004dc0:	4393      	bics	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	05db      	lsls	r3, r3, #23
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d009      	beq.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a11      	ldr	r2, [pc, #68]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a10      	ldr	r2, [pc, #64]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10c      	bne.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	4393      	bics	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	223d      	movs	r2, #61	; 0x3d
 8004e1e:	2101      	movs	r1, #1
 8004e20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	223c      	movs	r2, #60	; 0x3c
 8004e26:	2100      	movs	r1, #0
 8004e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b004      	add	sp, #16
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40014000 	.word	0x40014000

08004e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b002      	add	sp, #8
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b002      	add	sp, #8
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e044      	b.n	8004efc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2278      	movs	r2, #120	; 0x78
 8004e7e:	2100      	movs	r1, #0
 8004e80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7fb feeb 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2224      	movs	r2, #36	; 0x24
 8004e8e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	438a      	bics	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f000 fb2c 	bl	8005500 <UART_SetConfig>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e024      	b.n	8004efc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f000 fd07 	bl	80058d0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	490d      	ldr	r1, [pc, #52]	; (8004f04 <HAL_UART_Init+0xa4>)
 8004ece:	400a      	ands	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	212a      	movs	r1, #42	; 0x2a
 8004ede:	438a      	bics	r2, r1
 8004ee0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2101      	movs	r1, #1
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fd9f 	bl	8005a38 <UART_CheckIdleState>
 8004efa:	0003      	movs	r3, r0
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b002      	add	sp, #8
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	ffffb7ff 	.word	0xffffb7ff

08004f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f08:	b590      	push	{r4, r7, lr}
 8004f0a:	b0ab      	sub	sp, #172	; 0xac
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	22a4      	movs	r2, #164	; 0xa4
 8004f18:	18b9      	adds	r1, r7, r2
 8004f1a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	20a0      	movs	r0, #160	; 0xa0
 8004f24:	1839      	adds	r1, r7, r0
 8004f26:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	219c      	movs	r1, #156	; 0x9c
 8004f30:	1879      	adds	r1, r7, r1
 8004f32:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f34:	0011      	movs	r1, r2
 8004f36:	18bb      	adds	r3, r7, r2
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a99      	ldr	r2, [pc, #612]	; (80051a0 <HAL_UART_IRQHandler+0x298>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2298      	movs	r2, #152	; 0x98
 8004f40:	18bc      	adds	r4, r7, r2
 8004f42:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004f44:	18bb      	adds	r3, r7, r2
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d114      	bne.n	8004f76 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f4c:	187b      	adds	r3, r7, r1
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2220      	movs	r2, #32
 8004f52:	4013      	ands	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f56:	183b      	adds	r3, r7, r0
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d00a      	beq.n	8004f76 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d100      	bne.n	8004f6a <HAL_UART_IRQHandler+0x62>
 8004f68:	e29e      	b.n	80054a8 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	0010      	movs	r0, r2
 8004f72:	4798      	blx	r3
      }
      return;
 8004f74:	e298      	b.n	80054a8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f76:	2398      	movs	r3, #152	; 0x98
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d100      	bne.n	8004f82 <HAL_UART_IRQHandler+0x7a>
 8004f80:	e114      	b.n	80051ac <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f82:	239c      	movs	r3, #156	; 0x9c
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d106      	bne.n	8004f9c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f8e:	23a0      	movs	r3, #160	; 0xa0
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a83      	ldr	r2, [pc, #524]	; (80051a4 <HAL_UART_IRQHandler+0x29c>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	d100      	bne.n	8004f9c <HAL_UART_IRQHandler+0x94>
 8004f9a:	e107      	b.n	80051ac <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f9c:	23a4      	movs	r3, #164	; 0xa4
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d012      	beq.n	8004fce <HAL_UART_IRQHandler+0xc6>
 8004fa8:	23a0      	movs	r3, #160	; 0xa0
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2284      	movs	r2, #132	; 0x84
 8004fc2:	589b      	ldr	r3, [r3, r2]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2184      	movs	r1, #132	; 0x84
 8004fcc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fce:	23a4      	movs	r3, #164	; 0xa4
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d011      	beq.n	8004ffe <HAL_UART_IRQHandler+0xf6>
 8004fda:	239c      	movs	r3, #156	; 0x9c
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2202      	movs	r2, #2
 8004fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2284      	movs	r2, #132	; 0x84
 8004ff2:	589b      	ldr	r3, [r3, r2]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2184      	movs	r1, #132	; 0x84
 8004ffc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ffe:	23a4      	movs	r3, #164	; 0xa4
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2204      	movs	r2, #4
 8005006:	4013      	ands	r3, r2
 8005008:	d011      	beq.n	800502e <HAL_UART_IRQHandler+0x126>
 800500a:	239c      	movs	r3, #156	; 0x9c
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2201      	movs	r2, #1
 8005012:	4013      	ands	r3, r2
 8005014:	d00b      	beq.n	800502e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2204      	movs	r2, #4
 800501c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2284      	movs	r2, #132	; 0x84
 8005022:	589b      	ldr	r3, [r3, r2]
 8005024:	2202      	movs	r2, #2
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2184      	movs	r1, #132	; 0x84
 800502c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800502e:	23a4      	movs	r3, #164	; 0xa4
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2208      	movs	r2, #8
 8005036:	4013      	ands	r3, r2
 8005038:	d017      	beq.n	800506a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800503a:	23a0      	movs	r3, #160	; 0xa0
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2220      	movs	r2, #32
 8005042:	4013      	ands	r3, r2
 8005044:	d105      	bne.n	8005052 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005046:	239c      	movs	r3, #156	; 0x9c
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2201      	movs	r2, #1
 800504e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2208      	movs	r2, #8
 8005058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2284      	movs	r2, #132	; 0x84
 800505e:	589b      	ldr	r3, [r3, r2]
 8005060:	2208      	movs	r2, #8
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2184      	movs	r1, #132	; 0x84
 8005068:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800506a:	23a4      	movs	r3, #164	; 0xa4
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	4013      	ands	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_UART_IRQHandler+0x198>
 8005078:	23a0      	movs	r3, #160	; 0xa0
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	04db      	lsls	r3, r3, #19
 8005082:	4013      	ands	r3, r2
 8005084:	d00c      	beq.n	80050a0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	0112      	lsls	r2, r2, #4
 800508e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2284      	movs	r2, #132	; 0x84
 8005094:	589b      	ldr	r3, [r3, r2]
 8005096:	2220      	movs	r2, #32
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2184      	movs	r1, #132	; 0x84
 800509e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2284      	movs	r2, #132	; 0x84
 80050a4:	589b      	ldr	r3, [r3, r2]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d100      	bne.n	80050ac <HAL_UART_IRQHandler+0x1a4>
 80050aa:	e1ff      	b.n	80054ac <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050ac:	23a4      	movs	r3, #164	; 0xa4
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2220      	movs	r2, #32
 80050b4:	4013      	ands	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050b8:	23a0      	movs	r3, #160	; 0xa0
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2220      	movs	r2, #32
 80050c0:	4013      	ands	r3, r2
 80050c2:	d008      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	0010      	movs	r0, r2
 80050d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2284      	movs	r2, #132	; 0x84
 80050da:	589b      	ldr	r3, [r3, r2]
 80050dc:	2194      	movs	r1, #148	; 0x94
 80050de:	187a      	adds	r2, r7, r1
 80050e0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2240      	movs	r2, #64	; 0x40
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d004      	beq.n	80050fa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050f0:	187b      	adds	r3, r7, r1
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2228      	movs	r2, #40	; 0x28
 80050f6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050f8:	d047      	beq.n	800518a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f000 fdad 	bl	8005c5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2240      	movs	r2, #64	; 0x40
 800510a:	4013      	ands	r3, r2
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	d137      	bne.n	8005180 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005110:	f3ef 8310 	mrs	r3, PRIMASK
 8005114:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005118:	2090      	movs	r0, #144	; 0x90
 800511a:	183a      	adds	r2, r7, r0
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	2301      	movs	r3, #1
 8005120:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2140      	movs	r1, #64	; 0x40
 8005136:	438a      	bics	r2, r1
 8005138:	609a      	str	r2, [r3, #8]
 800513a:	183b      	adds	r3, r7, r0
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005142:	f383 8810 	msr	PRIMASK, r3
}
 8005146:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514c:	2b00      	cmp	r3, #0
 800514e:	d012      	beq.n	8005176 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005154:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <HAL_UART_IRQHandler+0x2a0>)
 8005156:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515c:	0018      	movs	r0, r3
 800515e:	f7fc f907 	bl	8001370 <HAL_DMA_Abort_IT>
 8005162:	1e03      	subs	r3, r0, #0
 8005164:	d01a      	beq.n	800519c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005170:	0018      	movs	r0, r3
 8005172:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e012      	b.n	800519c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	0018      	movs	r0, r3
 800517a:	f000 f9ad 	bl	80054d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517e:	e00d      	b.n	800519c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	0018      	movs	r0, r3
 8005184:	f000 f9a8 	bl	80054d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	e008      	b.n	800519c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 f9a3 	bl	80054d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2284      	movs	r2, #132	; 0x84
 8005196:	2100      	movs	r1, #0
 8005198:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800519a:	e187      	b.n	80054ac <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	46c0      	nop			; (mov r8, r8)
    return;
 800519e:	e185      	b.n	80054ac <HAL_UART_IRQHandler+0x5a4>
 80051a0:	0000080f 	.word	0x0000080f
 80051a4:	04000120 	.word	0x04000120
 80051a8:	08005d25 	.word	0x08005d25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d000      	beq.n	80051b6 <HAL_UART_IRQHandler+0x2ae>
 80051b4:	e139      	b.n	800542a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051b6:	23a4      	movs	r3, #164	; 0xa4
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2210      	movs	r2, #16
 80051be:	4013      	ands	r3, r2
 80051c0:	d100      	bne.n	80051c4 <HAL_UART_IRQHandler+0x2bc>
 80051c2:	e132      	b.n	800542a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051c4:	23a0      	movs	r3, #160	; 0xa0
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2210      	movs	r2, #16
 80051cc:	4013      	ands	r3, r2
 80051ce:	d100      	bne.n	80051d2 <HAL_UART_IRQHandler+0x2ca>
 80051d0:	e12b      	b.n	800542a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2210      	movs	r2, #16
 80051d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2240      	movs	r2, #64	; 0x40
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d000      	beq.n	80051ea <HAL_UART_IRQHandler+0x2e2>
 80051e8:	e09f      	b.n	800532a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	217e      	movs	r1, #126	; 0x7e
 80051f4:	187b      	adds	r3, r7, r1
 80051f6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d100      	bne.n	8005202 <HAL_UART_IRQHandler+0x2fa>
 8005200:	e156      	b.n	80054b0 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2258      	movs	r2, #88	; 0x58
 8005206:	5a9b      	ldrh	r3, [r3, r2]
 8005208:	187a      	adds	r2, r7, r1
 800520a:	8812      	ldrh	r2, [r2, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d300      	bcc.n	8005212 <HAL_UART_IRQHandler+0x30a>
 8005210:	e14e      	b.n	80054b0 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	187a      	adds	r2, r7, r1
 8005216:	215a      	movs	r1, #90	; 0x5a
 8005218:	8812      	ldrh	r2, [r2, #0]
 800521a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b20      	cmp	r3, #32
 8005224:	d06f      	beq.n	8005306 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005226:	f3ef 8310 	mrs	r3, PRIMASK
 800522a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800522e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005230:	2301      	movs	r3, #1
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	f383 8810 	msr	PRIMASK, r3
}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	499e      	ldr	r1, [pc, #632]	; (80054c0 <HAL_UART_IRQHandler+0x5b8>)
 8005248:	400a      	ands	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800524e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	f383 8810 	msr	PRIMASK, r3
}
 8005256:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005258:	f3ef 8310 	mrs	r3, PRIMASK
 800525c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800525e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005260:	677b      	str	r3, [r7, #116]	; 0x74
 8005262:	2301      	movs	r3, #1
 8005264:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2101      	movs	r1, #1
 800527a:	438a      	bics	r2, r1
 800527c:	609a      	str	r2, [r3, #8]
 800527e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005280:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528a:	f3ef 8310 	mrs	r3, PRIMASK
 800528e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005290:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005292:	673b      	str	r3, [r7, #112]	; 0x70
 8005294:	2301      	movs	r3, #1
 8005296:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2140      	movs	r1, #64	; 0x40
 80052ac:	438a      	bics	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052b2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b6:	f383 8810 	msr	PRIMASK, r3
}
 80052ba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	2120      	movs	r1, #32
 80052c2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ca:	f3ef 8310 	mrs	r3, PRIMASK
 80052ce:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80052d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052d4:	2301      	movs	r3, #1
 80052d6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052da:	f383 8810 	msr	PRIMASK, r3
}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2110      	movs	r1, #16
 80052ec:	438a      	bics	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f6:	f383 8810 	msr	PRIMASK, r3
}
 80052fa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005300:	0018      	movs	r0, r3
 8005302:	f7fb fffd 	bl	8001300 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2258      	movs	r2, #88	; 0x58
 8005310:	5a9a      	ldrh	r2, [r3, r2]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	215a      	movs	r1, #90	; 0x5a
 8005316:	5a5b      	ldrh	r3, [r3, r1]
 8005318:	b29b      	uxth	r3, r3
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	0011      	movs	r1, r2
 8005322:	0018      	movs	r0, r3
 8005324:	f000 f8e0 	bl	80054e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005328:	e0c2      	b.n	80054b0 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2258      	movs	r2, #88	; 0x58
 800532e:	5a99      	ldrh	r1, [r3, r2]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	225a      	movs	r2, #90	; 0x5a
 8005334:	5a9b      	ldrh	r3, [r3, r2]
 8005336:	b29a      	uxth	r2, r3
 8005338:	208e      	movs	r0, #142	; 0x8e
 800533a:	183b      	adds	r3, r7, r0
 800533c:	1a8a      	subs	r2, r1, r2
 800533e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	225a      	movs	r2, #90	; 0x5a
 8005344:	5a9b      	ldrh	r3, [r3, r2]
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d100      	bne.n	800534e <HAL_UART_IRQHandler+0x446>
 800534c:	e0b2      	b.n	80054b4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800534e:	183b      	adds	r3, r7, r0
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d100      	bne.n	8005358 <HAL_UART_IRQHandler+0x450>
 8005356:	e0ad      	b.n	80054b4 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005358:	f3ef 8310 	mrs	r3, PRIMASK
 800535c:	60fb      	str	r3, [r7, #12]
  return(result);
 800535e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005360:	2488      	movs	r4, #136	; 0x88
 8005362:	193a      	adds	r2, r7, r4
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	2301      	movs	r3, #1
 8005368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			; (mov r8, r8)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4951      	ldr	r1, [pc, #324]	; (80054c4 <HAL_UART_IRQHandler+0x5bc>)
 800537e:	400a      	ands	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	193b      	adds	r3, r7, r4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005390:	f3ef 8310 	mrs	r3, PRIMASK
 8005394:	61bb      	str	r3, [r7, #24]
  return(result);
 8005396:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005398:	2484      	movs	r4, #132	; 0x84
 800539a:	193a      	adds	r2, r7, r4
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	2301      	movs	r3, #1
 80053a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f383 8810 	msr	PRIMASK, r3
}
 80053a8:	46c0      	nop			; (mov r8, r8)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2101      	movs	r1, #1
 80053b6:	438a      	bics	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]
 80053ba:	193b      	adds	r3, r7, r4
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2280      	movs	r2, #128	; 0x80
 80053cc:	2120      	movs	r1, #32
 80053ce:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053dc:	f3ef 8310 	mrs	r3, PRIMASK
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e4:	2480      	movs	r4, #128	; 0x80
 80053e6:	193a      	adds	r2, r7, r4
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	2301      	movs	r3, #1
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	f383 8810 	msr	PRIMASK, r3
}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2110      	movs	r1, #16
 8005402:	438a      	bics	r2, r1
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	193b      	adds	r3, r7, r4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	f383 8810 	msr	PRIMASK, r3
}
 8005412:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800541a:	183b      	adds	r3, r7, r0
 800541c:	881a      	ldrh	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	0011      	movs	r1, r2
 8005422:	0018      	movs	r0, r3
 8005424:	f000 f860 	bl	80054e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005428:	e044      	b.n	80054b4 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800542a:	23a4      	movs	r3, #164	; 0xa4
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	2380      	movs	r3, #128	; 0x80
 8005432:	035b      	lsls	r3, r3, #13
 8005434:	4013      	ands	r3, r2
 8005436:	d010      	beq.n	800545a <HAL_UART_IRQHandler+0x552>
 8005438:	239c      	movs	r3, #156	; 0x9c
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	03db      	lsls	r3, r3, #15
 8005442:	4013      	ands	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2280      	movs	r2, #128	; 0x80
 800544c:	0352      	lsls	r2, r2, #13
 800544e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	0018      	movs	r0, r3
 8005454:	f000 fca8 	bl	8005da8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005458:	e02f      	b.n	80054ba <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800545a:	23a4      	movs	r3, #164	; 0xa4
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	4013      	ands	r3, r2
 8005464:	d00f      	beq.n	8005486 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005466:	23a0      	movs	r3, #160	; 0xa0
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2280      	movs	r2, #128	; 0x80
 800546e:	4013      	ands	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01e      	beq.n	80054b8 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	0010      	movs	r0, r2
 8005482:	4798      	blx	r3
    }
    return;
 8005484:	e018      	b.n	80054b8 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005486:	23a4      	movs	r3, #164	; 0xa4
 8005488:	18fb      	adds	r3, r7, r3
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	4013      	ands	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_UART_IRQHandler+0x5b2>
 8005492:	23a0      	movs	r3, #160	; 0xa0
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2240      	movs	r2, #64	; 0x40
 800549a:	4013      	ands	r3, r2
 800549c:	d00d      	beq.n	80054ba <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 fc56 	bl	8005d52 <UART_EndTransmit_IT>
    return;
 80054a6:	e008      	b.n	80054ba <HAL_UART_IRQHandler+0x5b2>
      return;
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	e006      	b.n	80054ba <HAL_UART_IRQHandler+0x5b2>
    return;
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	e004      	b.n	80054ba <HAL_UART_IRQHandler+0x5b2>
      return;
 80054b0:	46c0      	nop			; (mov r8, r8)
 80054b2:	e002      	b.n	80054ba <HAL_UART_IRQHandler+0x5b2>
      return;
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	e000      	b.n	80054ba <HAL_UART_IRQHandler+0x5b2>
    return;
 80054b8:	46c0      	nop			; (mov r8, r8)
  }

}
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b02b      	add	sp, #172	; 0xac
 80054be:	bd90      	pop	{r4, r7, pc}
 80054c0:	fffffeff 	.word	0xfffffeff
 80054c4:	fffffedf 	.word	0xfffffedf

080054c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b002      	add	sp, #8
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054e0:	46c0      	nop			; (mov r8, r8)
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b002      	add	sp, #8
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	000a      	movs	r2, r1
 80054f2:	1cbb      	adds	r3, r7, #2
 80054f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b002      	add	sp, #8
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005508:	231e      	movs	r3, #30
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4abe      	ldr	r2, [pc, #760]	; (8005828 <UART_SetConfig+0x328>)
 8005530:	4013      	ands	r3, r2
 8005532:	0019      	movs	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	430a      	orrs	r2, r1
 800553c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4ab9      	ldr	r2, [pc, #740]	; (800582c <UART_SetConfig+0x32c>)
 8005546:	4013      	ands	r3, r2
 8005548:	0019      	movs	r1, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	4ab0      	ldr	r2, [pc, #704]	; (8005830 <UART_SetConfig+0x330>)
 800556e:	4013      	ands	r3, r2
 8005570:	0019      	movs	r1, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4aac      	ldr	r2, [pc, #688]	; (8005834 <UART_SetConfig+0x334>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d127      	bne.n	80055d6 <UART_SetConfig+0xd6>
 8005586:	4bac      	ldr	r3, [pc, #688]	; (8005838 <UART_SetConfig+0x338>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	2203      	movs	r2, #3
 800558c:	4013      	ands	r3, r2
 800558e:	2b03      	cmp	r3, #3
 8005590:	d00d      	beq.n	80055ae <UART_SetConfig+0xae>
 8005592:	d81b      	bhi.n	80055cc <UART_SetConfig+0xcc>
 8005594:	2b02      	cmp	r3, #2
 8005596:	d014      	beq.n	80055c2 <UART_SetConfig+0xc2>
 8005598:	d818      	bhi.n	80055cc <UART_SetConfig+0xcc>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <UART_SetConfig+0xa4>
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d00a      	beq.n	80055b8 <UART_SetConfig+0xb8>
 80055a2:	e013      	b.n	80055cc <UART_SetConfig+0xcc>
 80055a4:	231f      	movs	r3, #31
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e0bd      	b.n	800572a <UART_SetConfig+0x22a>
 80055ae:	231f      	movs	r3, #31
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e0b8      	b.n	800572a <UART_SetConfig+0x22a>
 80055b8:	231f      	movs	r3, #31
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	2204      	movs	r2, #4
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e0b3      	b.n	800572a <UART_SetConfig+0x22a>
 80055c2:	231f      	movs	r3, #31
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	2208      	movs	r2, #8
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e0ae      	b.n	800572a <UART_SetConfig+0x22a>
 80055cc:	231f      	movs	r3, #31
 80055ce:	18fb      	adds	r3, r7, r3
 80055d0:	2210      	movs	r2, #16
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e0a9      	b.n	800572a <UART_SetConfig+0x22a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a98      	ldr	r2, [pc, #608]	; (800583c <UART_SetConfig+0x33c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d134      	bne.n	800564a <UART_SetConfig+0x14a>
 80055e0:	4b95      	ldr	r3, [pc, #596]	; (8005838 <UART_SetConfig+0x338>)
 80055e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e4:	23c0      	movs	r3, #192	; 0xc0
 80055e6:	029b      	lsls	r3, r3, #10
 80055e8:	4013      	ands	r3, r2
 80055ea:	22c0      	movs	r2, #192	; 0xc0
 80055ec:	0292      	lsls	r2, r2, #10
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d017      	beq.n	8005622 <UART_SetConfig+0x122>
 80055f2:	22c0      	movs	r2, #192	; 0xc0
 80055f4:	0292      	lsls	r2, r2, #10
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d822      	bhi.n	8005640 <UART_SetConfig+0x140>
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	0292      	lsls	r2, r2, #10
 80055fe:	4293      	cmp	r3, r2
 8005600:	d019      	beq.n	8005636 <UART_SetConfig+0x136>
 8005602:	2280      	movs	r2, #128	; 0x80
 8005604:	0292      	lsls	r2, r2, #10
 8005606:	4293      	cmp	r3, r2
 8005608:	d81a      	bhi.n	8005640 <UART_SetConfig+0x140>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d004      	beq.n	8005618 <UART_SetConfig+0x118>
 800560e:	2280      	movs	r2, #128	; 0x80
 8005610:	0252      	lsls	r2, r2, #9
 8005612:	4293      	cmp	r3, r2
 8005614:	d00a      	beq.n	800562c <UART_SetConfig+0x12c>
 8005616:	e013      	b.n	8005640 <UART_SetConfig+0x140>
 8005618:	231f      	movs	r3, #31
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	e083      	b.n	800572a <UART_SetConfig+0x22a>
 8005622:	231f      	movs	r3, #31
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	2202      	movs	r2, #2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e07e      	b.n	800572a <UART_SetConfig+0x22a>
 800562c:	231f      	movs	r3, #31
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	2204      	movs	r2, #4
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e079      	b.n	800572a <UART_SetConfig+0x22a>
 8005636:	231f      	movs	r3, #31
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	2208      	movs	r2, #8
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e074      	b.n	800572a <UART_SetConfig+0x22a>
 8005640:	231f      	movs	r3, #31
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	2210      	movs	r2, #16
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e06f      	b.n	800572a <UART_SetConfig+0x22a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7c      	ldr	r2, [pc, #496]	; (8005840 <UART_SetConfig+0x340>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d134      	bne.n	80056be <UART_SetConfig+0x1be>
 8005654:	4b78      	ldr	r3, [pc, #480]	; (8005838 <UART_SetConfig+0x338>)
 8005656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005658:	23c0      	movs	r3, #192	; 0xc0
 800565a:	031b      	lsls	r3, r3, #12
 800565c:	4013      	ands	r3, r2
 800565e:	22c0      	movs	r2, #192	; 0xc0
 8005660:	0312      	lsls	r2, r2, #12
 8005662:	4293      	cmp	r3, r2
 8005664:	d017      	beq.n	8005696 <UART_SetConfig+0x196>
 8005666:	22c0      	movs	r2, #192	; 0xc0
 8005668:	0312      	lsls	r2, r2, #12
 800566a:	4293      	cmp	r3, r2
 800566c:	d822      	bhi.n	80056b4 <UART_SetConfig+0x1b4>
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	0312      	lsls	r2, r2, #12
 8005672:	4293      	cmp	r3, r2
 8005674:	d019      	beq.n	80056aa <UART_SetConfig+0x1aa>
 8005676:	2280      	movs	r2, #128	; 0x80
 8005678:	0312      	lsls	r2, r2, #12
 800567a:	4293      	cmp	r3, r2
 800567c:	d81a      	bhi.n	80056b4 <UART_SetConfig+0x1b4>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <UART_SetConfig+0x18c>
 8005682:	2280      	movs	r2, #128	; 0x80
 8005684:	02d2      	lsls	r2, r2, #11
 8005686:	4293      	cmp	r3, r2
 8005688:	d00a      	beq.n	80056a0 <UART_SetConfig+0x1a0>
 800568a:	e013      	b.n	80056b4 <UART_SetConfig+0x1b4>
 800568c:	231f      	movs	r3, #31
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e049      	b.n	800572a <UART_SetConfig+0x22a>
 8005696:	231f      	movs	r3, #31
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	2202      	movs	r2, #2
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e044      	b.n	800572a <UART_SetConfig+0x22a>
 80056a0:	231f      	movs	r3, #31
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	2204      	movs	r2, #4
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	e03f      	b.n	800572a <UART_SetConfig+0x22a>
 80056aa:	231f      	movs	r3, #31
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	2208      	movs	r2, #8
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e03a      	b.n	800572a <UART_SetConfig+0x22a>
 80056b4:	231f      	movs	r3, #31
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	2210      	movs	r2, #16
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	e035      	b.n	800572a <UART_SetConfig+0x22a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a60      	ldr	r2, [pc, #384]	; (8005844 <UART_SetConfig+0x344>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d104      	bne.n	80056d2 <UART_SetConfig+0x1d2>
 80056c8:	231f      	movs	r3, #31
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e02b      	b.n	800572a <UART_SetConfig+0x22a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a5c      	ldr	r2, [pc, #368]	; (8005848 <UART_SetConfig+0x348>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d104      	bne.n	80056e6 <UART_SetConfig+0x1e6>
 80056dc:	231f      	movs	r3, #31
 80056de:	18fb      	adds	r3, r7, r3
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e021      	b.n	800572a <UART_SetConfig+0x22a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a58      	ldr	r2, [pc, #352]	; (800584c <UART_SetConfig+0x34c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d104      	bne.n	80056fa <UART_SetConfig+0x1fa>
 80056f0:	231f      	movs	r3, #31
 80056f2:	18fb      	adds	r3, r7, r3
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	e017      	b.n	800572a <UART_SetConfig+0x22a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a54      	ldr	r2, [pc, #336]	; (8005850 <UART_SetConfig+0x350>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d104      	bne.n	800570e <UART_SetConfig+0x20e>
 8005704:	231f      	movs	r3, #31
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	e00d      	b.n	800572a <UART_SetConfig+0x22a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a50      	ldr	r2, [pc, #320]	; (8005854 <UART_SetConfig+0x354>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d104      	bne.n	8005722 <UART_SetConfig+0x222>
 8005718:	231f      	movs	r3, #31
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e003      	b.n	800572a <UART_SetConfig+0x22a>
 8005722:	231f      	movs	r3, #31
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	2210      	movs	r2, #16
 8005728:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	2380      	movs	r3, #128	; 0x80
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	429a      	cmp	r2, r3
 8005734:	d15c      	bne.n	80057f0 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8005736:	231f      	movs	r3, #31
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d015      	beq.n	800576c <UART_SetConfig+0x26c>
 8005740:	dc18      	bgt.n	8005774 <UART_SetConfig+0x274>
 8005742:	2b04      	cmp	r3, #4
 8005744:	d00d      	beq.n	8005762 <UART_SetConfig+0x262>
 8005746:	dc15      	bgt.n	8005774 <UART_SetConfig+0x274>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <UART_SetConfig+0x252>
 800574c:	2b02      	cmp	r3, #2
 800574e:	d005      	beq.n	800575c <UART_SetConfig+0x25c>
 8005750:	e010      	b.n	8005774 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005752:	f7fe f995 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8005756:	0003      	movs	r3, r0
 8005758:	61bb      	str	r3, [r7, #24]
        break;
 800575a:	e012      	b.n	8005782 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800575c:	4b3e      	ldr	r3, [pc, #248]	; (8005858 <UART_SetConfig+0x358>)
 800575e:	61bb      	str	r3, [r7, #24]
        break;
 8005760:	e00f      	b.n	8005782 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fe f911 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8005766:	0003      	movs	r3, r0
 8005768:	61bb      	str	r3, [r7, #24]
        break;
 800576a:	e00a      	b.n	8005782 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	61bb      	str	r3, [r7, #24]
        break;
 8005772:	e006      	b.n	8005782 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005778:	231e      	movs	r3, #30
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
        break;
 8005780:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d100      	bne.n	800578a <UART_SetConfig+0x28a>
 8005788:	e095      	b.n	80058b6 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	005a      	lsls	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	18d2      	adds	r2, r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	0019      	movs	r1, r3
 800579c:	0010      	movs	r0, r2
 800579e:	f7fa fcb1 	bl	8000104 <__udivsi3>
 80057a2:	0003      	movs	r3, r0
 80057a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b0f      	cmp	r3, #15
 80057aa:	d91c      	bls.n	80057e6 <UART_SetConfig+0x2e6>
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	025b      	lsls	r3, r3, #9
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d217      	bcs.n	80057e6 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	200e      	movs	r0, #14
 80057bc:	183b      	adds	r3, r7, r0
 80057be:	210f      	movs	r1, #15
 80057c0:	438a      	bics	r2, r1
 80057c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2207      	movs	r2, #7
 80057cc:	4013      	ands	r3, r2
 80057ce:	b299      	uxth	r1, r3
 80057d0:	183b      	adds	r3, r7, r0
 80057d2:	183a      	adds	r2, r7, r0
 80057d4:	8812      	ldrh	r2, [r2, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	183a      	adds	r2, r7, r0
 80057e0:	8812      	ldrh	r2, [r2, #0]
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	e067      	b.n	80058b6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80057e6:	231e      	movs	r3, #30
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	2201      	movs	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e062      	b.n	80058b6 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057f0:	231f      	movs	r3, #31
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d030      	beq.n	800585c <UART_SetConfig+0x35c>
 80057fa:	dc33      	bgt.n	8005864 <UART_SetConfig+0x364>
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d00d      	beq.n	800581c <UART_SetConfig+0x31c>
 8005800:	dc30      	bgt.n	8005864 <UART_SetConfig+0x364>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <UART_SetConfig+0x30c>
 8005806:	2b02      	cmp	r3, #2
 8005808:	d005      	beq.n	8005816 <UART_SetConfig+0x316>
 800580a:	e02b      	b.n	8005864 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800580c:	f7fe f938 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8005810:	0003      	movs	r3, r0
 8005812:	61bb      	str	r3, [r7, #24]
        break;
 8005814:	e02d      	b.n	8005872 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <UART_SetConfig+0x358>)
 8005818:	61bb      	str	r3, [r7, #24]
        break;
 800581a:	e02a      	b.n	8005872 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581c:	f7fe f8b4 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8005820:	0003      	movs	r3, r0
 8005822:	61bb      	str	r3, [r7, #24]
        break;
 8005824:	e025      	b.n	8005872 <UART_SetConfig+0x372>
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	efff69f3 	.word	0xefff69f3
 800582c:	ffffcfff 	.word	0xffffcfff
 8005830:	fffff4ff 	.word	0xfffff4ff
 8005834:	40013800 	.word	0x40013800
 8005838:	40021000 	.word	0x40021000
 800583c:	40004400 	.word	0x40004400
 8005840:	40004800 	.word	0x40004800
 8005844:	40004c00 	.word	0x40004c00
 8005848:	40005000 	.word	0x40005000
 800584c:	40011400 	.word	0x40011400
 8005850:	40011800 	.word	0x40011800
 8005854:	40011c00 	.word	0x40011c00
 8005858:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800585c:	2380      	movs	r3, #128	; 0x80
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	61bb      	str	r3, [r7, #24]
        break;
 8005862:	e006      	b.n	8005872 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005868:	231e      	movs	r3, #30
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
        break;
 8005870:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01e      	beq.n	80058b6 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	085a      	lsrs	r2, r3, #1
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	18d2      	adds	r2, r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	0019      	movs	r1, r3
 8005888:	0010      	movs	r0, r2
 800588a:	f7fa fc3b 	bl	8000104 <__udivsi3>
 800588e:	0003      	movs	r3, r0
 8005890:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b0f      	cmp	r3, #15
 8005896:	d90a      	bls.n	80058ae <UART_SetConfig+0x3ae>
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	025b      	lsls	r3, r3, #9
 800589e:	429a      	cmp	r2, r3
 80058a0:	d205      	bcs.n	80058ae <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60da      	str	r2, [r3, #12]
 80058ac:	e003      	b.n	80058b6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80058ae:	231e      	movs	r3, #30
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	2201      	movs	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058c2:	231e      	movs	r3, #30
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	781b      	ldrb	r3, [r3, #0]
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b008      	add	sp, #32
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2201      	movs	r2, #1
 80058de:	4013      	ands	r3, r2
 80058e0:	d00b      	beq.n	80058fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4a4a      	ldr	r2, [pc, #296]	; (8005a14 <UART_AdvFeatureConfig+0x144>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	0019      	movs	r1, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2202      	movs	r2, #2
 8005900:	4013      	ands	r3, r2
 8005902:	d00b      	beq.n	800591c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4a43      	ldr	r2, [pc, #268]	; (8005a18 <UART_AdvFeatureConfig+0x148>)
 800590c:	4013      	ands	r3, r2
 800590e:	0019      	movs	r1, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	2204      	movs	r2, #4
 8005922:	4013      	ands	r3, r2
 8005924:	d00b      	beq.n	800593e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4a3b      	ldr	r2, [pc, #236]	; (8005a1c <UART_AdvFeatureConfig+0x14c>)
 800592e:	4013      	ands	r3, r2
 8005930:	0019      	movs	r1, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2208      	movs	r2, #8
 8005944:	4013      	ands	r3, r2
 8005946:	d00b      	beq.n	8005960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4a34      	ldr	r2, [pc, #208]	; (8005a20 <UART_AdvFeatureConfig+0x150>)
 8005950:	4013      	ands	r3, r2
 8005952:	0019      	movs	r1, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2210      	movs	r2, #16
 8005966:	4013      	ands	r3, r2
 8005968:	d00b      	beq.n	8005982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	4a2c      	ldr	r2, [pc, #176]	; (8005a24 <UART_AdvFeatureConfig+0x154>)
 8005972:	4013      	ands	r3, r2
 8005974:	0019      	movs	r1, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	2220      	movs	r2, #32
 8005988:	4013      	ands	r3, r2
 800598a:	d00b      	beq.n	80059a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <UART_AdvFeatureConfig+0x158>)
 8005994:	4013      	ands	r3, r2
 8005996:	0019      	movs	r1, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	2240      	movs	r2, #64	; 0x40
 80059aa:	4013      	ands	r3, r2
 80059ac:	d01d      	beq.n	80059ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <UART_AdvFeatureConfig+0x15c>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ca:	2380      	movs	r3, #128	; 0x80
 80059cc:	035b      	lsls	r3, r3, #13
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d10b      	bne.n	80059ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <UART_AdvFeatureConfig+0x160>)
 80059da:	4013      	ands	r3, r2
 80059dc:	0019      	movs	r1, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	4013      	ands	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4a0e      	ldr	r2, [pc, #56]	; (8005a34 <UART_AdvFeatureConfig+0x164>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	0019      	movs	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b002      	add	sp, #8
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	fffdffff 	.word	0xfffdffff
 8005a18:	fffeffff 	.word	0xfffeffff
 8005a1c:	fffbffff 	.word	0xfffbffff
 8005a20:	ffff7fff 	.word	0xffff7fff
 8005a24:	ffffefff 	.word	0xffffefff
 8005a28:	ffffdfff 	.word	0xffffdfff
 8005a2c:	ffefffff 	.word	0xffefffff
 8005a30:	ff9fffff 	.word	0xff9fffff
 8005a34:	fff7ffff 	.word	0xfff7ffff

08005a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b092      	sub	sp, #72	; 0x48
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2284      	movs	r2, #132	; 0x84
 8005a44:	2100      	movs	r1, #0
 8005a46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a48:	f7fb fb06 	bl	8001058 <HAL_GetTick>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2208      	movs	r2, #8
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d12c      	bne.n	8005ab8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	0391      	lsls	r1, r2, #14
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4a46      	ldr	r2, [pc, #280]	; (8005b80 <UART_CheckIdleState+0x148>)
 8005a68:	9200      	str	r2, [sp, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f000 f88c 	bl	8005b88 <UART_WaitOnFlagUntilTimeout>
 8005a70:	1e03      	subs	r3, r0, #0
 8005a72:	d021      	beq.n	8005ab8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a74:	f3ef 8310 	mrs	r3, PRIMASK
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a7e:	2301      	movs	r3, #1
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	f383 8810 	msr	PRIMASK, r3
}
 8005a88:	46c0      	nop			; (mov r8, r8)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2180      	movs	r1, #128	; 0x80
 8005a96:	438a      	bics	r2, r1
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	f383 8810 	msr	PRIMASK, r3
}
 8005aa4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2278      	movs	r2, #120	; 0x78
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e05f      	b.n	8005b78 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d146      	bne.n	8005b54 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	03d1      	lsls	r1, r2, #15
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4a2c      	ldr	r2, [pc, #176]	; (8005b80 <UART_CheckIdleState+0x148>)
 8005ad0:	9200      	str	r2, [sp, #0]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f000 f858 	bl	8005b88 <UART_WaitOnFlagUntilTimeout>
 8005ad8:	1e03      	subs	r3, r0, #0
 8005ada:	d03b      	beq.n	8005b54 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005adc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f383 8810 	msr	PRIMASK, r3
}
 8005af0:	46c0      	nop			; (mov r8, r8)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4921      	ldr	r1, [pc, #132]	; (8005b84 <UART_CheckIdleState+0x14c>)
 8005afe:	400a      	ands	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f383 8810 	msr	PRIMASK, r3
}
 8005b0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b12:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b14:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b16:	633b      	str	r3, [r7, #48]	; 0x30
 8005b18:	2301      	movs	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f383 8810 	msr	PRIMASK, r3
}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2101      	movs	r1, #1
 8005b30:	438a      	bics	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	f383 8810 	msr	PRIMASK, r3
}
 8005b3e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	2120      	movs	r1, #32
 8005b46:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2278      	movs	r2, #120	; 0x78
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e011      	b.n	8005b78 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2280      	movs	r2, #128	; 0x80
 8005b5e:	2120      	movs	r1, #32
 8005b60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2278      	movs	r2, #120	; 0x78
 8005b72:	2100      	movs	r1, #0
 8005b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	0018      	movs	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b010      	add	sp, #64	; 0x40
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	01ffffff 	.word	0x01ffffff
 8005b84:	fffffedf 	.word	0xfffffedf

08005b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	1dfb      	adds	r3, r7, #7
 8005b96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b98:	e04b      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	d048      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba0:	f7fb fa5a 	bl	8001058 <HAL_GetTick>
 8005ba4:	0002      	movs	r2, r0
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d302      	bcc.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e04b      	b.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d035      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	2208      	movs	r2, #8
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d111      	bne.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2208      	movs	r2, #8
 8005bda:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f000 f83c 	bl	8005c5c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2284      	movs	r2, #132	; 0x84
 8005be8:	2108      	movs	r1, #8
 8005bea:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2278      	movs	r2, #120	; 0x78
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e02c      	b.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	401a      	ands	r2, r3
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d112      	bne.n	8005c32 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	0112      	lsls	r2, r2, #4
 8005c14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 f81f 	bl	8005c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2284      	movs	r2, #132	; 0x84
 8005c22:	2120      	movs	r1, #32
 8005c24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2278      	movs	r2, #120	; 0x78
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e00f      	b.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	425a      	negs	r2, r3
 8005c42:	4153      	adcs	r3, r2
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	001a      	movs	r2, r3
 8005c48:	1dfb      	adds	r3, r7, #7
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d0a4      	beq.n	8005b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b004      	add	sp, #16
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08e      	sub	sp, #56	; 0x38
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c64:	f3ef 8310 	mrs	r3, PRIMASK
 8005c68:	617b      	str	r3, [r7, #20]
  return(result);
 8005c6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6e:	2301      	movs	r3, #1
 8005c70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f383 8810 	msr	PRIMASK, r3
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4926      	ldr	r1, [pc, #152]	; (8005d20 <UART_EndRxTransfer+0xc4>)
 8005c86:	400a      	ands	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c96:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9a:	623b      	str	r3, [r7, #32]
  return(result);
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	438a      	bics	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d118      	bne.n	8005d02 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cda:	2301      	movs	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f383 8810 	msr	PRIMASK, r3
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2110      	movs	r1, #16
 8005cf2:	438a      	bics	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f383 8810 	msr	PRIMASK, r3
}
 8005d00:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2280      	movs	r2, #128	; 0x80
 8005d06:	2120      	movs	r1, #32
 8005d08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b00e      	add	sp, #56	; 0x38
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	fffffedf 	.word	0xfffffedf

08005d24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	225a      	movs	r2, #90	; 0x5a
 8005d36:	2100      	movs	r1, #0
 8005d38:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2252      	movs	r2, #82	; 0x52
 8005d3e:	2100      	movs	r1, #0
 8005d40:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7ff fbc7 	bl	80054d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b004      	add	sp, #16
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d60:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	2301      	movs	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f383 8810 	msr	PRIMASK, r3
}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2140      	movs	r1, #64	; 0x40
 8005d7c:	438a      	bics	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f383 8810 	msr	PRIMASK, r3
}
 8005d8a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f7ff fb94 	bl	80054c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b006      	add	sp, #24
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <memset>:
 8005db8:	0003      	movs	r3, r0
 8005dba:	1882      	adds	r2, r0, r2
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d100      	bne.n	8005dc2 <memset+0xa>
 8005dc0:	4770      	bx	lr
 8005dc2:	7019      	strb	r1, [r3, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	e7f9      	b.n	8005dbc <memset+0x4>

08005dc8 <__libc_init_array>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	2600      	movs	r6, #0
 8005dcc:	4c0c      	ldr	r4, [pc, #48]	; (8005e00 <__libc_init_array+0x38>)
 8005dce:	4d0d      	ldr	r5, [pc, #52]	; (8005e04 <__libc_init_array+0x3c>)
 8005dd0:	1b64      	subs	r4, r4, r5
 8005dd2:	10a4      	asrs	r4, r4, #2
 8005dd4:	42a6      	cmp	r6, r4
 8005dd6:	d109      	bne.n	8005dec <__libc_init_array+0x24>
 8005dd8:	2600      	movs	r6, #0
 8005dda:	f000 f819 	bl	8005e10 <_init>
 8005dde:	4c0a      	ldr	r4, [pc, #40]	; (8005e08 <__libc_init_array+0x40>)
 8005de0:	4d0a      	ldr	r5, [pc, #40]	; (8005e0c <__libc_init_array+0x44>)
 8005de2:	1b64      	subs	r4, r4, r5
 8005de4:	10a4      	asrs	r4, r4, #2
 8005de6:	42a6      	cmp	r6, r4
 8005de8:	d105      	bne.n	8005df6 <__libc_init_array+0x2e>
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	00b3      	lsls	r3, r6, #2
 8005dee:	58eb      	ldr	r3, [r5, r3]
 8005df0:	4798      	blx	r3
 8005df2:	3601      	adds	r6, #1
 8005df4:	e7ee      	b.n	8005dd4 <__libc_init_array+0xc>
 8005df6:	00b3      	lsls	r3, r6, #2
 8005df8:	58eb      	ldr	r3, [r5, r3]
 8005dfa:	4798      	blx	r3
 8005dfc:	3601      	adds	r6, #1
 8005dfe:	e7f2      	b.n	8005de6 <__libc_init_array+0x1e>
 8005e00:	08005e60 	.word	0x08005e60
 8005e04:	08005e60 	.word	0x08005e60
 8005e08:	08005e64 	.word	0x08005e64
 8005e0c:	08005e60 	.word	0x08005e60

08005e10 <_init>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr

08005e1c <_fini>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr
