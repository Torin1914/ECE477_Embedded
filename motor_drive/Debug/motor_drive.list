
motor_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b00  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf4  08006bf4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006bf4  08006bf4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bf4  08006bf4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  08006c08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006c08  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114fa  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024d2  00000000  00000000  00031571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00033a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9a  00000000  00000000  00034a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0e1  00000000  00000000  000356ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140ea  00000000  00000000  000507ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6087  00000000  00000000  00064895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a84  00000000  00000000  0010a91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006ba4 	.word	0x08006ba4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08006ba4 	.word	0x08006ba4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_dadd>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	464f      	mov	r7, r9
 8000220:	4646      	mov	r6, r8
 8000222:	46d6      	mov	lr, sl
 8000224:	0004      	movs	r4, r0
 8000226:	b5c0      	push	{r6, r7, lr}
 8000228:	001f      	movs	r7, r3
 800022a:	030b      	lsls	r3, r1, #12
 800022c:	0010      	movs	r0, r2
 800022e:	004e      	lsls	r6, r1, #1
 8000230:	0a5b      	lsrs	r3, r3, #9
 8000232:	0fcd      	lsrs	r5, r1, #31
 8000234:	0f61      	lsrs	r1, r4, #29
 8000236:	007a      	lsls	r2, r7, #1
 8000238:	4319      	orrs	r1, r3
 800023a:	00e3      	lsls	r3, r4, #3
 800023c:	033c      	lsls	r4, r7, #12
 800023e:	0fff      	lsrs	r7, r7, #31
 8000240:	46bc      	mov	ip, r7
 8000242:	0a64      	lsrs	r4, r4, #9
 8000244:	0f47      	lsrs	r7, r0, #29
 8000246:	4327      	orrs	r7, r4
 8000248:	0d76      	lsrs	r6, r6, #21
 800024a:	0d52      	lsrs	r2, r2, #21
 800024c:	00c0      	lsls	r0, r0, #3
 800024e:	46b9      	mov	r9, r7
 8000250:	4680      	mov	r8, r0
 8000252:	1ab7      	subs	r7, r6, r2
 8000254:	4565      	cmp	r5, ip
 8000256:	d100      	bne.n	800025a <__aeabi_dadd+0x3e>
 8000258:	e09b      	b.n	8000392 <__aeabi_dadd+0x176>
 800025a:	2f00      	cmp	r7, #0
 800025c:	dc00      	bgt.n	8000260 <__aeabi_dadd+0x44>
 800025e:	e084      	b.n	800036a <__aeabi_dadd+0x14e>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_dadd+0x4a>
 8000264:	e0be      	b.n	80003e4 <__aeabi_dadd+0x1c8>
 8000266:	4ac8      	ldr	r2, [pc, #800]	; (8000588 <__aeabi_dadd+0x36c>)
 8000268:	4296      	cmp	r6, r2
 800026a:	d100      	bne.n	800026e <__aeabi_dadd+0x52>
 800026c:	e124      	b.n	80004b8 <__aeabi_dadd+0x29c>
 800026e:	2280      	movs	r2, #128	; 0x80
 8000270:	464c      	mov	r4, r9
 8000272:	0412      	lsls	r2, r2, #16
 8000274:	4314      	orrs	r4, r2
 8000276:	46a1      	mov	r9, r4
 8000278:	2f38      	cmp	r7, #56	; 0x38
 800027a:	dd00      	ble.n	800027e <__aeabi_dadd+0x62>
 800027c:	e167      	b.n	800054e <__aeabi_dadd+0x332>
 800027e:	2f1f      	cmp	r7, #31
 8000280:	dd00      	ble.n	8000284 <__aeabi_dadd+0x68>
 8000282:	e1d6      	b.n	8000632 <__aeabi_dadd+0x416>
 8000284:	2220      	movs	r2, #32
 8000286:	464c      	mov	r4, r9
 8000288:	1bd2      	subs	r2, r2, r7
 800028a:	4094      	lsls	r4, r2
 800028c:	46a2      	mov	sl, r4
 800028e:	4644      	mov	r4, r8
 8000290:	40fc      	lsrs	r4, r7
 8000292:	0020      	movs	r0, r4
 8000294:	4654      	mov	r4, sl
 8000296:	4304      	orrs	r4, r0
 8000298:	4640      	mov	r0, r8
 800029a:	4090      	lsls	r0, r2
 800029c:	1e42      	subs	r2, r0, #1
 800029e:	4190      	sbcs	r0, r2
 80002a0:	464a      	mov	r2, r9
 80002a2:	40fa      	lsrs	r2, r7
 80002a4:	4304      	orrs	r4, r0
 80002a6:	1a89      	subs	r1, r1, r2
 80002a8:	1b1c      	subs	r4, r3, r4
 80002aa:	42a3      	cmp	r3, r4
 80002ac:	4192      	sbcs	r2, r2
 80002ae:	4252      	negs	r2, r2
 80002b0:	1a8b      	subs	r3, r1, r2
 80002b2:	469a      	mov	sl, r3
 80002b4:	4653      	mov	r3, sl
 80002b6:	021b      	lsls	r3, r3, #8
 80002b8:	d400      	bmi.n	80002bc <__aeabi_dadd+0xa0>
 80002ba:	e0d4      	b.n	8000466 <__aeabi_dadd+0x24a>
 80002bc:	4653      	mov	r3, sl
 80002be:	025a      	lsls	r2, r3, #9
 80002c0:	0a53      	lsrs	r3, r2, #9
 80002c2:	469a      	mov	sl, r3
 80002c4:	4653      	mov	r3, sl
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d100      	bne.n	80002cc <__aeabi_dadd+0xb0>
 80002ca:	e104      	b.n	80004d6 <__aeabi_dadd+0x2ba>
 80002cc:	4650      	mov	r0, sl
 80002ce:	f000 fe2d 	bl	8000f2c <__clzsi2>
 80002d2:	0003      	movs	r3, r0
 80002d4:	3b08      	subs	r3, #8
 80002d6:	2220      	movs	r2, #32
 80002d8:	0020      	movs	r0, r4
 80002da:	1ad2      	subs	r2, r2, r3
 80002dc:	4651      	mov	r1, sl
 80002de:	40d0      	lsrs	r0, r2
 80002e0:	4099      	lsls	r1, r3
 80002e2:	0002      	movs	r2, r0
 80002e4:	409c      	lsls	r4, r3
 80002e6:	430a      	orrs	r2, r1
 80002e8:	42b3      	cmp	r3, r6
 80002ea:	da00      	bge.n	80002ee <__aeabi_dadd+0xd2>
 80002ec:	e102      	b.n	80004f4 <__aeabi_dadd+0x2d8>
 80002ee:	1b9b      	subs	r3, r3, r6
 80002f0:	1c59      	adds	r1, r3, #1
 80002f2:	291f      	cmp	r1, #31
 80002f4:	dd00      	ble.n	80002f8 <__aeabi_dadd+0xdc>
 80002f6:	e0a7      	b.n	8000448 <__aeabi_dadd+0x22c>
 80002f8:	2320      	movs	r3, #32
 80002fa:	0010      	movs	r0, r2
 80002fc:	0026      	movs	r6, r4
 80002fe:	1a5b      	subs	r3, r3, r1
 8000300:	409c      	lsls	r4, r3
 8000302:	4098      	lsls	r0, r3
 8000304:	40ce      	lsrs	r6, r1
 8000306:	40ca      	lsrs	r2, r1
 8000308:	1e63      	subs	r3, r4, #1
 800030a:	419c      	sbcs	r4, r3
 800030c:	4330      	orrs	r0, r6
 800030e:	4692      	mov	sl, r2
 8000310:	2600      	movs	r6, #0
 8000312:	4304      	orrs	r4, r0
 8000314:	0763      	lsls	r3, r4, #29
 8000316:	d009      	beq.n	800032c <__aeabi_dadd+0x110>
 8000318:	230f      	movs	r3, #15
 800031a:	4023      	ands	r3, r4
 800031c:	2b04      	cmp	r3, #4
 800031e:	d005      	beq.n	800032c <__aeabi_dadd+0x110>
 8000320:	1d23      	adds	r3, r4, #4
 8000322:	42a3      	cmp	r3, r4
 8000324:	41a4      	sbcs	r4, r4
 8000326:	4264      	negs	r4, r4
 8000328:	44a2      	add	sl, r4
 800032a:	001c      	movs	r4, r3
 800032c:	4653      	mov	r3, sl
 800032e:	021b      	lsls	r3, r3, #8
 8000330:	d400      	bmi.n	8000334 <__aeabi_dadd+0x118>
 8000332:	e09b      	b.n	800046c <__aeabi_dadd+0x250>
 8000334:	4b94      	ldr	r3, [pc, #592]	; (8000588 <__aeabi_dadd+0x36c>)
 8000336:	3601      	adds	r6, #1
 8000338:	429e      	cmp	r6, r3
 800033a:	d100      	bne.n	800033e <__aeabi_dadd+0x122>
 800033c:	e0b8      	b.n	80004b0 <__aeabi_dadd+0x294>
 800033e:	4653      	mov	r3, sl
 8000340:	4992      	ldr	r1, [pc, #584]	; (800058c <__aeabi_dadd+0x370>)
 8000342:	08e4      	lsrs	r4, r4, #3
 8000344:	400b      	ands	r3, r1
 8000346:	0019      	movs	r1, r3
 8000348:	075b      	lsls	r3, r3, #29
 800034a:	4323      	orrs	r3, r4
 800034c:	0572      	lsls	r2, r6, #21
 800034e:	024c      	lsls	r4, r1, #9
 8000350:	0b24      	lsrs	r4, r4, #12
 8000352:	0d52      	lsrs	r2, r2, #21
 8000354:	0512      	lsls	r2, r2, #20
 8000356:	07ed      	lsls	r5, r5, #31
 8000358:	4322      	orrs	r2, r4
 800035a:	432a      	orrs	r2, r5
 800035c:	0018      	movs	r0, r3
 800035e:	0011      	movs	r1, r2
 8000360:	bce0      	pop	{r5, r6, r7}
 8000362:	46ba      	mov	sl, r7
 8000364:	46b1      	mov	r9, r6
 8000366:	46a8      	mov	r8, r5
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	2f00      	cmp	r7, #0
 800036c:	d048      	beq.n	8000400 <__aeabi_dadd+0x1e4>
 800036e:	1b97      	subs	r7, r2, r6
 8000370:	2e00      	cmp	r6, #0
 8000372:	d000      	beq.n	8000376 <__aeabi_dadd+0x15a>
 8000374:	e10e      	b.n	8000594 <__aeabi_dadd+0x378>
 8000376:	000c      	movs	r4, r1
 8000378:	431c      	orrs	r4, r3
 800037a:	d100      	bne.n	800037e <__aeabi_dadd+0x162>
 800037c:	e1b7      	b.n	80006ee <__aeabi_dadd+0x4d2>
 800037e:	1e7c      	subs	r4, r7, #1
 8000380:	2f01      	cmp	r7, #1
 8000382:	d100      	bne.n	8000386 <__aeabi_dadd+0x16a>
 8000384:	e226      	b.n	80007d4 <__aeabi_dadd+0x5b8>
 8000386:	4d80      	ldr	r5, [pc, #512]	; (8000588 <__aeabi_dadd+0x36c>)
 8000388:	42af      	cmp	r7, r5
 800038a:	d100      	bne.n	800038e <__aeabi_dadd+0x172>
 800038c:	e1d5      	b.n	800073a <__aeabi_dadd+0x51e>
 800038e:	0027      	movs	r7, r4
 8000390:	e107      	b.n	80005a2 <__aeabi_dadd+0x386>
 8000392:	2f00      	cmp	r7, #0
 8000394:	dc00      	bgt.n	8000398 <__aeabi_dadd+0x17c>
 8000396:	e0b2      	b.n	80004fe <__aeabi_dadd+0x2e2>
 8000398:	2a00      	cmp	r2, #0
 800039a:	d047      	beq.n	800042c <__aeabi_dadd+0x210>
 800039c:	4a7a      	ldr	r2, [pc, #488]	; (8000588 <__aeabi_dadd+0x36c>)
 800039e:	4296      	cmp	r6, r2
 80003a0:	d100      	bne.n	80003a4 <__aeabi_dadd+0x188>
 80003a2:	e089      	b.n	80004b8 <__aeabi_dadd+0x29c>
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	464c      	mov	r4, r9
 80003a8:	0412      	lsls	r2, r2, #16
 80003aa:	4314      	orrs	r4, r2
 80003ac:	46a1      	mov	r9, r4
 80003ae:	2f38      	cmp	r7, #56	; 0x38
 80003b0:	dc6b      	bgt.n	800048a <__aeabi_dadd+0x26e>
 80003b2:	2f1f      	cmp	r7, #31
 80003b4:	dc00      	bgt.n	80003b8 <__aeabi_dadd+0x19c>
 80003b6:	e16e      	b.n	8000696 <__aeabi_dadd+0x47a>
 80003b8:	003a      	movs	r2, r7
 80003ba:	4648      	mov	r0, r9
 80003bc:	3a20      	subs	r2, #32
 80003be:	40d0      	lsrs	r0, r2
 80003c0:	4684      	mov	ip, r0
 80003c2:	2f20      	cmp	r7, #32
 80003c4:	d007      	beq.n	80003d6 <__aeabi_dadd+0x1ba>
 80003c6:	2240      	movs	r2, #64	; 0x40
 80003c8:	4648      	mov	r0, r9
 80003ca:	1bd2      	subs	r2, r2, r7
 80003cc:	4090      	lsls	r0, r2
 80003ce:	0002      	movs	r2, r0
 80003d0:	4640      	mov	r0, r8
 80003d2:	4310      	orrs	r0, r2
 80003d4:	4680      	mov	r8, r0
 80003d6:	4640      	mov	r0, r8
 80003d8:	1e42      	subs	r2, r0, #1
 80003da:	4190      	sbcs	r0, r2
 80003dc:	4662      	mov	r2, ip
 80003de:	0004      	movs	r4, r0
 80003e0:	4314      	orrs	r4, r2
 80003e2:	e057      	b.n	8000494 <__aeabi_dadd+0x278>
 80003e4:	464a      	mov	r2, r9
 80003e6:	4302      	orrs	r2, r0
 80003e8:	d100      	bne.n	80003ec <__aeabi_dadd+0x1d0>
 80003ea:	e103      	b.n	80005f4 <__aeabi_dadd+0x3d8>
 80003ec:	1e7a      	subs	r2, r7, #1
 80003ee:	2f01      	cmp	r7, #1
 80003f0:	d100      	bne.n	80003f4 <__aeabi_dadd+0x1d8>
 80003f2:	e193      	b.n	800071c <__aeabi_dadd+0x500>
 80003f4:	4c64      	ldr	r4, [pc, #400]	; (8000588 <__aeabi_dadd+0x36c>)
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	d100      	bne.n	80003fc <__aeabi_dadd+0x1e0>
 80003fa:	e18a      	b.n	8000712 <__aeabi_dadd+0x4f6>
 80003fc:	0017      	movs	r7, r2
 80003fe:	e73b      	b.n	8000278 <__aeabi_dadd+0x5c>
 8000400:	4c63      	ldr	r4, [pc, #396]	; (8000590 <__aeabi_dadd+0x374>)
 8000402:	1c72      	adds	r2, r6, #1
 8000404:	4222      	tst	r2, r4
 8000406:	d000      	beq.n	800040a <__aeabi_dadd+0x1ee>
 8000408:	e0e0      	b.n	80005cc <__aeabi_dadd+0x3b0>
 800040a:	000a      	movs	r2, r1
 800040c:	431a      	orrs	r2, r3
 800040e:	2e00      	cmp	r6, #0
 8000410:	d000      	beq.n	8000414 <__aeabi_dadd+0x1f8>
 8000412:	e174      	b.n	80006fe <__aeabi_dadd+0x4e2>
 8000414:	2a00      	cmp	r2, #0
 8000416:	d100      	bne.n	800041a <__aeabi_dadd+0x1fe>
 8000418:	e1d0      	b.n	80007bc <__aeabi_dadd+0x5a0>
 800041a:	464a      	mov	r2, r9
 800041c:	4302      	orrs	r2, r0
 800041e:	d000      	beq.n	8000422 <__aeabi_dadd+0x206>
 8000420:	e1e3      	b.n	80007ea <__aeabi_dadd+0x5ce>
 8000422:	074a      	lsls	r2, r1, #29
 8000424:	08db      	lsrs	r3, r3, #3
 8000426:	4313      	orrs	r3, r2
 8000428:	08c9      	lsrs	r1, r1, #3
 800042a:	e029      	b.n	8000480 <__aeabi_dadd+0x264>
 800042c:	464a      	mov	r2, r9
 800042e:	4302      	orrs	r2, r0
 8000430:	d100      	bne.n	8000434 <__aeabi_dadd+0x218>
 8000432:	e17d      	b.n	8000730 <__aeabi_dadd+0x514>
 8000434:	1e7a      	subs	r2, r7, #1
 8000436:	2f01      	cmp	r7, #1
 8000438:	d100      	bne.n	800043c <__aeabi_dadd+0x220>
 800043a:	e0e0      	b.n	80005fe <__aeabi_dadd+0x3e2>
 800043c:	4c52      	ldr	r4, [pc, #328]	; (8000588 <__aeabi_dadd+0x36c>)
 800043e:	42a7      	cmp	r7, r4
 8000440:	d100      	bne.n	8000444 <__aeabi_dadd+0x228>
 8000442:	e166      	b.n	8000712 <__aeabi_dadd+0x4f6>
 8000444:	0017      	movs	r7, r2
 8000446:	e7b2      	b.n	80003ae <__aeabi_dadd+0x192>
 8000448:	0010      	movs	r0, r2
 800044a:	3b1f      	subs	r3, #31
 800044c:	40d8      	lsrs	r0, r3
 800044e:	2920      	cmp	r1, #32
 8000450:	d003      	beq.n	800045a <__aeabi_dadd+0x23e>
 8000452:	2340      	movs	r3, #64	; 0x40
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	409a      	lsls	r2, r3
 8000458:	4314      	orrs	r4, r2
 800045a:	1e63      	subs	r3, r4, #1
 800045c:	419c      	sbcs	r4, r3
 800045e:	2300      	movs	r3, #0
 8000460:	2600      	movs	r6, #0
 8000462:	469a      	mov	sl, r3
 8000464:	4304      	orrs	r4, r0
 8000466:	0763      	lsls	r3, r4, #29
 8000468:	d000      	beq.n	800046c <__aeabi_dadd+0x250>
 800046a:	e755      	b.n	8000318 <__aeabi_dadd+0xfc>
 800046c:	4652      	mov	r2, sl
 800046e:	08e3      	lsrs	r3, r4, #3
 8000470:	0752      	lsls	r2, r2, #29
 8000472:	4313      	orrs	r3, r2
 8000474:	4652      	mov	r2, sl
 8000476:	0037      	movs	r7, r6
 8000478:	08d1      	lsrs	r1, r2, #3
 800047a:	4a43      	ldr	r2, [pc, #268]	; (8000588 <__aeabi_dadd+0x36c>)
 800047c:	4297      	cmp	r7, r2
 800047e:	d01f      	beq.n	80004c0 <__aeabi_dadd+0x2a4>
 8000480:	0309      	lsls	r1, r1, #12
 8000482:	057a      	lsls	r2, r7, #21
 8000484:	0b0c      	lsrs	r4, r1, #12
 8000486:	0d52      	lsrs	r2, r2, #21
 8000488:	e764      	b.n	8000354 <__aeabi_dadd+0x138>
 800048a:	4642      	mov	r2, r8
 800048c:	464c      	mov	r4, r9
 800048e:	4314      	orrs	r4, r2
 8000490:	1e62      	subs	r2, r4, #1
 8000492:	4194      	sbcs	r4, r2
 8000494:	18e4      	adds	r4, r4, r3
 8000496:	429c      	cmp	r4, r3
 8000498:	4192      	sbcs	r2, r2
 800049a:	4252      	negs	r2, r2
 800049c:	4692      	mov	sl, r2
 800049e:	448a      	add	sl, r1
 80004a0:	4653      	mov	r3, sl
 80004a2:	021b      	lsls	r3, r3, #8
 80004a4:	d5df      	bpl.n	8000466 <__aeabi_dadd+0x24a>
 80004a6:	4b38      	ldr	r3, [pc, #224]	; (8000588 <__aeabi_dadd+0x36c>)
 80004a8:	3601      	adds	r6, #1
 80004aa:	429e      	cmp	r6, r3
 80004ac:	d000      	beq.n	80004b0 <__aeabi_dadd+0x294>
 80004ae:	e0b3      	b.n	8000618 <__aeabi_dadd+0x3fc>
 80004b0:	0032      	movs	r2, r6
 80004b2:	2400      	movs	r4, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	e74d      	b.n	8000354 <__aeabi_dadd+0x138>
 80004b8:	074a      	lsls	r2, r1, #29
 80004ba:	08db      	lsrs	r3, r3, #3
 80004bc:	4313      	orrs	r3, r2
 80004be:	08c9      	lsrs	r1, r1, #3
 80004c0:	001a      	movs	r2, r3
 80004c2:	430a      	orrs	r2, r1
 80004c4:	d100      	bne.n	80004c8 <__aeabi_dadd+0x2ac>
 80004c6:	e200      	b.n	80008ca <__aeabi_dadd+0x6ae>
 80004c8:	2480      	movs	r4, #128	; 0x80
 80004ca:	0324      	lsls	r4, r4, #12
 80004cc:	430c      	orrs	r4, r1
 80004ce:	0324      	lsls	r4, r4, #12
 80004d0:	4a2d      	ldr	r2, [pc, #180]	; (8000588 <__aeabi_dadd+0x36c>)
 80004d2:	0b24      	lsrs	r4, r4, #12
 80004d4:	e73e      	b.n	8000354 <__aeabi_dadd+0x138>
 80004d6:	0020      	movs	r0, r4
 80004d8:	f000 fd28 	bl	8000f2c <__clzsi2>
 80004dc:	0003      	movs	r3, r0
 80004de:	3318      	adds	r3, #24
 80004e0:	2b1f      	cmp	r3, #31
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_dadd+0x2ca>
 80004e4:	e6f7      	b.n	80002d6 <__aeabi_dadd+0xba>
 80004e6:	0022      	movs	r2, r4
 80004e8:	3808      	subs	r0, #8
 80004ea:	4082      	lsls	r2, r0
 80004ec:	2400      	movs	r4, #0
 80004ee:	42b3      	cmp	r3, r6
 80004f0:	db00      	blt.n	80004f4 <__aeabi_dadd+0x2d8>
 80004f2:	e6fc      	b.n	80002ee <__aeabi_dadd+0xd2>
 80004f4:	1af6      	subs	r6, r6, r3
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <__aeabi_dadd+0x370>)
 80004f8:	401a      	ands	r2, r3
 80004fa:	4692      	mov	sl, r2
 80004fc:	e70a      	b.n	8000314 <__aeabi_dadd+0xf8>
 80004fe:	2f00      	cmp	r7, #0
 8000500:	d02b      	beq.n	800055a <__aeabi_dadd+0x33e>
 8000502:	1b97      	subs	r7, r2, r6
 8000504:	2e00      	cmp	r6, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x2ee>
 8000508:	e0b8      	b.n	800067c <__aeabi_dadd+0x460>
 800050a:	4c1f      	ldr	r4, [pc, #124]	; (8000588 <__aeabi_dadd+0x36c>)
 800050c:	42a2      	cmp	r2, r4
 800050e:	d100      	bne.n	8000512 <__aeabi_dadd+0x2f6>
 8000510:	e11c      	b.n	800074c <__aeabi_dadd+0x530>
 8000512:	2480      	movs	r4, #128	; 0x80
 8000514:	0424      	lsls	r4, r4, #16
 8000516:	4321      	orrs	r1, r4
 8000518:	2f38      	cmp	r7, #56	; 0x38
 800051a:	dd00      	ble.n	800051e <__aeabi_dadd+0x302>
 800051c:	e11e      	b.n	800075c <__aeabi_dadd+0x540>
 800051e:	2f1f      	cmp	r7, #31
 8000520:	dd00      	ble.n	8000524 <__aeabi_dadd+0x308>
 8000522:	e19e      	b.n	8000862 <__aeabi_dadd+0x646>
 8000524:	2620      	movs	r6, #32
 8000526:	000c      	movs	r4, r1
 8000528:	1bf6      	subs	r6, r6, r7
 800052a:	0018      	movs	r0, r3
 800052c:	40b3      	lsls	r3, r6
 800052e:	40b4      	lsls	r4, r6
 8000530:	40f8      	lsrs	r0, r7
 8000532:	1e5e      	subs	r6, r3, #1
 8000534:	41b3      	sbcs	r3, r6
 8000536:	40f9      	lsrs	r1, r7
 8000538:	4304      	orrs	r4, r0
 800053a:	431c      	orrs	r4, r3
 800053c:	4489      	add	r9, r1
 800053e:	4444      	add	r4, r8
 8000540:	4544      	cmp	r4, r8
 8000542:	419b      	sbcs	r3, r3
 8000544:	425b      	negs	r3, r3
 8000546:	444b      	add	r3, r9
 8000548:	469a      	mov	sl, r3
 800054a:	0016      	movs	r6, r2
 800054c:	e7a8      	b.n	80004a0 <__aeabi_dadd+0x284>
 800054e:	4642      	mov	r2, r8
 8000550:	464c      	mov	r4, r9
 8000552:	4314      	orrs	r4, r2
 8000554:	1e62      	subs	r2, r4, #1
 8000556:	4194      	sbcs	r4, r2
 8000558:	e6a6      	b.n	80002a8 <__aeabi_dadd+0x8c>
 800055a:	4c0d      	ldr	r4, [pc, #52]	; (8000590 <__aeabi_dadd+0x374>)
 800055c:	1c72      	adds	r2, r6, #1
 800055e:	4222      	tst	r2, r4
 8000560:	d000      	beq.n	8000564 <__aeabi_dadd+0x348>
 8000562:	e0a8      	b.n	80006b6 <__aeabi_dadd+0x49a>
 8000564:	000a      	movs	r2, r1
 8000566:	431a      	orrs	r2, r3
 8000568:	2e00      	cmp	r6, #0
 800056a:	d000      	beq.n	800056e <__aeabi_dadd+0x352>
 800056c:	e10a      	b.n	8000784 <__aeabi_dadd+0x568>
 800056e:	2a00      	cmp	r2, #0
 8000570:	d100      	bne.n	8000574 <__aeabi_dadd+0x358>
 8000572:	e15e      	b.n	8000832 <__aeabi_dadd+0x616>
 8000574:	464a      	mov	r2, r9
 8000576:	4302      	orrs	r2, r0
 8000578:	d000      	beq.n	800057c <__aeabi_dadd+0x360>
 800057a:	e161      	b.n	8000840 <__aeabi_dadd+0x624>
 800057c:	074a      	lsls	r2, r1, #29
 800057e:	08db      	lsrs	r3, r3, #3
 8000580:	4313      	orrs	r3, r2
 8000582:	08c9      	lsrs	r1, r1, #3
 8000584:	e77c      	b.n	8000480 <__aeabi_dadd+0x264>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	000007ff 	.word	0x000007ff
 800058c:	ff7fffff 	.word	0xff7fffff
 8000590:	000007fe 	.word	0x000007fe
 8000594:	4ccf      	ldr	r4, [pc, #828]	; (80008d4 <__aeabi_dadd+0x6b8>)
 8000596:	42a2      	cmp	r2, r4
 8000598:	d100      	bne.n	800059c <__aeabi_dadd+0x380>
 800059a:	e0ce      	b.n	800073a <__aeabi_dadd+0x51e>
 800059c:	2480      	movs	r4, #128	; 0x80
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	4321      	orrs	r1, r4
 80005a2:	2f38      	cmp	r7, #56	; 0x38
 80005a4:	dc5b      	bgt.n	800065e <__aeabi_dadd+0x442>
 80005a6:	2f1f      	cmp	r7, #31
 80005a8:	dd00      	ble.n	80005ac <__aeabi_dadd+0x390>
 80005aa:	e0dc      	b.n	8000766 <__aeabi_dadd+0x54a>
 80005ac:	2520      	movs	r5, #32
 80005ae:	000c      	movs	r4, r1
 80005b0:	1bed      	subs	r5, r5, r7
 80005b2:	001e      	movs	r6, r3
 80005b4:	40ab      	lsls	r3, r5
 80005b6:	40ac      	lsls	r4, r5
 80005b8:	40fe      	lsrs	r6, r7
 80005ba:	1e5d      	subs	r5, r3, #1
 80005bc:	41ab      	sbcs	r3, r5
 80005be:	4334      	orrs	r4, r6
 80005c0:	40f9      	lsrs	r1, r7
 80005c2:	431c      	orrs	r4, r3
 80005c4:	464b      	mov	r3, r9
 80005c6:	1a5b      	subs	r3, r3, r1
 80005c8:	4699      	mov	r9, r3
 80005ca:	e04c      	b.n	8000666 <__aeabi_dadd+0x44a>
 80005cc:	464a      	mov	r2, r9
 80005ce:	1a1c      	subs	r4, r3, r0
 80005d0:	1a88      	subs	r0, r1, r2
 80005d2:	42a3      	cmp	r3, r4
 80005d4:	4192      	sbcs	r2, r2
 80005d6:	4252      	negs	r2, r2
 80005d8:	4692      	mov	sl, r2
 80005da:	0002      	movs	r2, r0
 80005dc:	4650      	mov	r0, sl
 80005de:	1a12      	subs	r2, r2, r0
 80005e0:	4692      	mov	sl, r2
 80005e2:	0212      	lsls	r2, r2, #8
 80005e4:	d478      	bmi.n	80006d8 <__aeabi_dadd+0x4bc>
 80005e6:	4653      	mov	r3, sl
 80005e8:	4323      	orrs	r3, r4
 80005ea:	d000      	beq.n	80005ee <__aeabi_dadd+0x3d2>
 80005ec:	e66a      	b.n	80002c4 <__aeabi_dadd+0xa8>
 80005ee:	2100      	movs	r1, #0
 80005f0:	2500      	movs	r5, #0
 80005f2:	e745      	b.n	8000480 <__aeabi_dadd+0x264>
 80005f4:	074a      	lsls	r2, r1, #29
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	08c9      	lsrs	r1, r1, #3
 80005fc:	e73d      	b.n	800047a <__aeabi_dadd+0x25e>
 80005fe:	181c      	adds	r4, r3, r0
 8000600:	429c      	cmp	r4, r3
 8000602:	419b      	sbcs	r3, r3
 8000604:	4449      	add	r1, r9
 8000606:	468a      	mov	sl, r1
 8000608:	425b      	negs	r3, r3
 800060a:	449a      	add	sl, r3
 800060c:	4653      	mov	r3, sl
 800060e:	2601      	movs	r6, #1
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	d400      	bmi.n	8000616 <__aeabi_dadd+0x3fa>
 8000614:	e727      	b.n	8000466 <__aeabi_dadd+0x24a>
 8000616:	2602      	movs	r6, #2
 8000618:	4652      	mov	r2, sl
 800061a:	4baf      	ldr	r3, [pc, #700]	; (80008d8 <__aeabi_dadd+0x6bc>)
 800061c:	2101      	movs	r1, #1
 800061e:	401a      	ands	r2, r3
 8000620:	0013      	movs	r3, r2
 8000622:	4021      	ands	r1, r4
 8000624:	0862      	lsrs	r2, r4, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	07dc      	lsls	r4, r3, #31
 800062a:	085b      	lsrs	r3, r3, #1
 800062c:	469a      	mov	sl, r3
 800062e:	4314      	orrs	r4, r2
 8000630:	e670      	b.n	8000314 <__aeabi_dadd+0xf8>
 8000632:	003a      	movs	r2, r7
 8000634:	464c      	mov	r4, r9
 8000636:	3a20      	subs	r2, #32
 8000638:	40d4      	lsrs	r4, r2
 800063a:	46a4      	mov	ip, r4
 800063c:	2f20      	cmp	r7, #32
 800063e:	d007      	beq.n	8000650 <__aeabi_dadd+0x434>
 8000640:	2240      	movs	r2, #64	; 0x40
 8000642:	4648      	mov	r0, r9
 8000644:	1bd2      	subs	r2, r2, r7
 8000646:	4090      	lsls	r0, r2
 8000648:	0002      	movs	r2, r0
 800064a:	4640      	mov	r0, r8
 800064c:	4310      	orrs	r0, r2
 800064e:	4680      	mov	r8, r0
 8000650:	4640      	mov	r0, r8
 8000652:	1e42      	subs	r2, r0, #1
 8000654:	4190      	sbcs	r0, r2
 8000656:	4662      	mov	r2, ip
 8000658:	0004      	movs	r4, r0
 800065a:	4314      	orrs	r4, r2
 800065c:	e624      	b.n	80002a8 <__aeabi_dadd+0x8c>
 800065e:	4319      	orrs	r1, r3
 8000660:	000c      	movs	r4, r1
 8000662:	1e63      	subs	r3, r4, #1
 8000664:	419c      	sbcs	r4, r3
 8000666:	4643      	mov	r3, r8
 8000668:	1b1c      	subs	r4, r3, r4
 800066a:	45a0      	cmp	r8, r4
 800066c:	419b      	sbcs	r3, r3
 800066e:	4649      	mov	r1, r9
 8000670:	425b      	negs	r3, r3
 8000672:	1acb      	subs	r3, r1, r3
 8000674:	469a      	mov	sl, r3
 8000676:	4665      	mov	r5, ip
 8000678:	0016      	movs	r6, r2
 800067a:	e61b      	b.n	80002b4 <__aeabi_dadd+0x98>
 800067c:	000c      	movs	r4, r1
 800067e:	431c      	orrs	r4, r3
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x468>
 8000682:	e0c7      	b.n	8000814 <__aeabi_dadd+0x5f8>
 8000684:	1e7c      	subs	r4, r7, #1
 8000686:	2f01      	cmp	r7, #1
 8000688:	d100      	bne.n	800068c <__aeabi_dadd+0x470>
 800068a:	e0f9      	b.n	8000880 <__aeabi_dadd+0x664>
 800068c:	4e91      	ldr	r6, [pc, #580]	; (80008d4 <__aeabi_dadd+0x6b8>)
 800068e:	42b7      	cmp	r7, r6
 8000690:	d05c      	beq.n	800074c <__aeabi_dadd+0x530>
 8000692:	0027      	movs	r7, r4
 8000694:	e740      	b.n	8000518 <__aeabi_dadd+0x2fc>
 8000696:	2220      	movs	r2, #32
 8000698:	464c      	mov	r4, r9
 800069a:	4640      	mov	r0, r8
 800069c:	1bd2      	subs	r2, r2, r7
 800069e:	4094      	lsls	r4, r2
 80006a0:	40f8      	lsrs	r0, r7
 80006a2:	4304      	orrs	r4, r0
 80006a4:	4640      	mov	r0, r8
 80006a6:	4090      	lsls	r0, r2
 80006a8:	1e42      	subs	r2, r0, #1
 80006aa:	4190      	sbcs	r0, r2
 80006ac:	464a      	mov	r2, r9
 80006ae:	40fa      	lsrs	r2, r7
 80006b0:	4304      	orrs	r4, r0
 80006b2:	1889      	adds	r1, r1, r2
 80006b4:	e6ee      	b.n	8000494 <__aeabi_dadd+0x278>
 80006b6:	4c87      	ldr	r4, [pc, #540]	; (80008d4 <__aeabi_dadd+0x6b8>)
 80006b8:	42a2      	cmp	r2, r4
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x4a2>
 80006bc:	e6f9      	b.n	80004b2 <__aeabi_dadd+0x296>
 80006be:	1818      	adds	r0, r3, r0
 80006c0:	4298      	cmp	r0, r3
 80006c2:	419b      	sbcs	r3, r3
 80006c4:	4449      	add	r1, r9
 80006c6:	425b      	negs	r3, r3
 80006c8:	18cb      	adds	r3, r1, r3
 80006ca:	07dc      	lsls	r4, r3, #31
 80006cc:	0840      	lsrs	r0, r0, #1
 80006ce:	085b      	lsrs	r3, r3, #1
 80006d0:	469a      	mov	sl, r3
 80006d2:	0016      	movs	r6, r2
 80006d4:	4304      	orrs	r4, r0
 80006d6:	e6c6      	b.n	8000466 <__aeabi_dadd+0x24a>
 80006d8:	4642      	mov	r2, r8
 80006da:	1ad4      	subs	r4, r2, r3
 80006dc:	45a0      	cmp	r8, r4
 80006de:	4180      	sbcs	r0, r0
 80006e0:	464b      	mov	r3, r9
 80006e2:	4240      	negs	r0, r0
 80006e4:	1a59      	subs	r1, r3, r1
 80006e6:	1a0b      	subs	r3, r1, r0
 80006e8:	469a      	mov	sl, r3
 80006ea:	4665      	mov	r5, ip
 80006ec:	e5ea      	b.n	80002c4 <__aeabi_dadd+0xa8>
 80006ee:	464b      	mov	r3, r9
 80006f0:	464a      	mov	r2, r9
 80006f2:	08c0      	lsrs	r0, r0, #3
 80006f4:	075b      	lsls	r3, r3, #29
 80006f6:	4665      	mov	r5, ip
 80006f8:	4303      	orrs	r3, r0
 80006fa:	08d1      	lsrs	r1, r2, #3
 80006fc:	e6bd      	b.n	800047a <__aeabi_dadd+0x25e>
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d000      	beq.n	8000704 <__aeabi_dadd+0x4e8>
 8000702:	e08e      	b.n	8000822 <__aeabi_dadd+0x606>
 8000704:	464b      	mov	r3, r9
 8000706:	4303      	orrs	r3, r0
 8000708:	d117      	bne.n	800073a <__aeabi_dadd+0x51e>
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	2500      	movs	r5, #0
 800070e:	0309      	lsls	r1, r1, #12
 8000710:	e6da      	b.n	80004c8 <__aeabi_dadd+0x2ac>
 8000712:	074a      	lsls	r2, r1, #29
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	4313      	orrs	r3, r2
 8000718:	08c9      	lsrs	r1, r1, #3
 800071a:	e6d1      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 800071c:	1a1c      	subs	r4, r3, r0
 800071e:	464a      	mov	r2, r9
 8000720:	42a3      	cmp	r3, r4
 8000722:	419b      	sbcs	r3, r3
 8000724:	1a89      	subs	r1, r1, r2
 8000726:	425b      	negs	r3, r3
 8000728:	1acb      	subs	r3, r1, r3
 800072a:	469a      	mov	sl, r3
 800072c:	2601      	movs	r6, #1
 800072e:	e5c1      	b.n	80002b4 <__aeabi_dadd+0x98>
 8000730:	074a      	lsls	r2, r1, #29
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	4313      	orrs	r3, r2
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	e69f      	b.n	800047a <__aeabi_dadd+0x25e>
 800073a:	4643      	mov	r3, r8
 800073c:	08d8      	lsrs	r0, r3, #3
 800073e:	464b      	mov	r3, r9
 8000740:	464a      	mov	r2, r9
 8000742:	075b      	lsls	r3, r3, #29
 8000744:	4665      	mov	r5, ip
 8000746:	4303      	orrs	r3, r0
 8000748:	08d1      	lsrs	r1, r2, #3
 800074a:	e6b9      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 800074c:	4643      	mov	r3, r8
 800074e:	08d8      	lsrs	r0, r3, #3
 8000750:	464b      	mov	r3, r9
 8000752:	464a      	mov	r2, r9
 8000754:	075b      	lsls	r3, r3, #29
 8000756:	4303      	orrs	r3, r0
 8000758:	08d1      	lsrs	r1, r2, #3
 800075a:	e6b1      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 800075c:	4319      	orrs	r1, r3
 800075e:	000c      	movs	r4, r1
 8000760:	1e63      	subs	r3, r4, #1
 8000762:	419c      	sbcs	r4, r3
 8000764:	e6eb      	b.n	800053e <__aeabi_dadd+0x322>
 8000766:	003c      	movs	r4, r7
 8000768:	000d      	movs	r5, r1
 800076a:	3c20      	subs	r4, #32
 800076c:	40e5      	lsrs	r5, r4
 800076e:	2f20      	cmp	r7, #32
 8000770:	d003      	beq.n	800077a <__aeabi_dadd+0x55e>
 8000772:	2440      	movs	r4, #64	; 0x40
 8000774:	1be4      	subs	r4, r4, r7
 8000776:	40a1      	lsls	r1, r4
 8000778:	430b      	orrs	r3, r1
 800077a:	001c      	movs	r4, r3
 800077c:	1e63      	subs	r3, r4, #1
 800077e:	419c      	sbcs	r4, r3
 8000780:	432c      	orrs	r4, r5
 8000782:	e770      	b.n	8000666 <__aeabi_dadd+0x44a>
 8000784:	2a00      	cmp	r2, #0
 8000786:	d0e1      	beq.n	800074c <__aeabi_dadd+0x530>
 8000788:	464a      	mov	r2, r9
 800078a:	4302      	orrs	r2, r0
 800078c:	d0c1      	beq.n	8000712 <__aeabi_dadd+0x4f6>
 800078e:	074a      	lsls	r2, r1, #29
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	4313      	orrs	r3, r2
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	08c9      	lsrs	r1, r1, #3
 8000798:	0312      	lsls	r2, r2, #12
 800079a:	4211      	tst	r1, r2
 800079c:	d008      	beq.n	80007b0 <__aeabi_dadd+0x594>
 800079e:	4648      	mov	r0, r9
 80007a0:	08c4      	lsrs	r4, r0, #3
 80007a2:	4214      	tst	r4, r2
 80007a4:	d104      	bne.n	80007b0 <__aeabi_dadd+0x594>
 80007a6:	4643      	mov	r3, r8
 80007a8:	0021      	movs	r1, r4
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	0742      	lsls	r2, r0, #29
 80007ae:	4313      	orrs	r3, r2
 80007b0:	0f5a      	lsrs	r2, r3, #29
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	0752      	lsls	r2, r2, #29
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	e681      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 80007bc:	464b      	mov	r3, r9
 80007be:	4303      	orrs	r3, r0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_dadd+0x5a8>
 80007c2:	e714      	b.n	80005ee <__aeabi_dadd+0x3d2>
 80007c4:	464b      	mov	r3, r9
 80007c6:	464a      	mov	r2, r9
 80007c8:	08c0      	lsrs	r0, r0, #3
 80007ca:	075b      	lsls	r3, r3, #29
 80007cc:	4665      	mov	r5, ip
 80007ce:	4303      	orrs	r3, r0
 80007d0:	08d1      	lsrs	r1, r2, #3
 80007d2:	e655      	b.n	8000480 <__aeabi_dadd+0x264>
 80007d4:	1ac4      	subs	r4, r0, r3
 80007d6:	45a0      	cmp	r8, r4
 80007d8:	4180      	sbcs	r0, r0
 80007da:	464b      	mov	r3, r9
 80007dc:	4240      	negs	r0, r0
 80007de:	1a59      	subs	r1, r3, r1
 80007e0:	1a0b      	subs	r3, r1, r0
 80007e2:	469a      	mov	sl, r3
 80007e4:	4665      	mov	r5, ip
 80007e6:	2601      	movs	r6, #1
 80007e8:	e564      	b.n	80002b4 <__aeabi_dadd+0x98>
 80007ea:	1a1c      	subs	r4, r3, r0
 80007ec:	464a      	mov	r2, r9
 80007ee:	42a3      	cmp	r3, r4
 80007f0:	4180      	sbcs	r0, r0
 80007f2:	1a8a      	subs	r2, r1, r2
 80007f4:	4240      	negs	r0, r0
 80007f6:	1a12      	subs	r2, r2, r0
 80007f8:	4692      	mov	sl, r2
 80007fa:	0212      	lsls	r2, r2, #8
 80007fc:	d549      	bpl.n	8000892 <__aeabi_dadd+0x676>
 80007fe:	4642      	mov	r2, r8
 8000800:	1ad4      	subs	r4, r2, r3
 8000802:	45a0      	cmp	r8, r4
 8000804:	4180      	sbcs	r0, r0
 8000806:	464b      	mov	r3, r9
 8000808:	4240      	negs	r0, r0
 800080a:	1a59      	subs	r1, r3, r1
 800080c:	1a0b      	subs	r3, r1, r0
 800080e:	469a      	mov	sl, r3
 8000810:	4665      	mov	r5, ip
 8000812:	e57f      	b.n	8000314 <__aeabi_dadd+0xf8>
 8000814:	464b      	mov	r3, r9
 8000816:	464a      	mov	r2, r9
 8000818:	08c0      	lsrs	r0, r0, #3
 800081a:	075b      	lsls	r3, r3, #29
 800081c:	4303      	orrs	r3, r0
 800081e:	08d1      	lsrs	r1, r2, #3
 8000820:	e62b      	b.n	800047a <__aeabi_dadd+0x25e>
 8000822:	464a      	mov	r2, r9
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	4302      	orrs	r2, r0
 8000828:	d138      	bne.n	800089c <__aeabi_dadd+0x680>
 800082a:	074a      	lsls	r2, r1, #29
 800082c:	4313      	orrs	r3, r2
 800082e:	08c9      	lsrs	r1, r1, #3
 8000830:	e646      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 8000832:	464b      	mov	r3, r9
 8000834:	464a      	mov	r2, r9
 8000836:	08c0      	lsrs	r0, r0, #3
 8000838:	075b      	lsls	r3, r3, #29
 800083a:	4303      	orrs	r3, r0
 800083c:	08d1      	lsrs	r1, r2, #3
 800083e:	e61f      	b.n	8000480 <__aeabi_dadd+0x264>
 8000840:	181c      	adds	r4, r3, r0
 8000842:	429c      	cmp	r4, r3
 8000844:	419b      	sbcs	r3, r3
 8000846:	4449      	add	r1, r9
 8000848:	468a      	mov	sl, r1
 800084a:	425b      	negs	r3, r3
 800084c:	449a      	add	sl, r3
 800084e:	4653      	mov	r3, sl
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	d400      	bmi.n	8000856 <__aeabi_dadd+0x63a>
 8000854:	e607      	b.n	8000466 <__aeabi_dadd+0x24a>
 8000856:	4652      	mov	r2, sl
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <__aeabi_dadd+0x6bc>)
 800085a:	2601      	movs	r6, #1
 800085c:	401a      	ands	r2, r3
 800085e:	4692      	mov	sl, r2
 8000860:	e601      	b.n	8000466 <__aeabi_dadd+0x24a>
 8000862:	003c      	movs	r4, r7
 8000864:	000e      	movs	r6, r1
 8000866:	3c20      	subs	r4, #32
 8000868:	40e6      	lsrs	r6, r4
 800086a:	2f20      	cmp	r7, #32
 800086c:	d003      	beq.n	8000876 <__aeabi_dadd+0x65a>
 800086e:	2440      	movs	r4, #64	; 0x40
 8000870:	1be4      	subs	r4, r4, r7
 8000872:	40a1      	lsls	r1, r4
 8000874:	430b      	orrs	r3, r1
 8000876:	001c      	movs	r4, r3
 8000878:	1e63      	subs	r3, r4, #1
 800087a:	419c      	sbcs	r4, r3
 800087c:	4334      	orrs	r4, r6
 800087e:	e65e      	b.n	800053e <__aeabi_dadd+0x322>
 8000880:	4443      	add	r3, r8
 8000882:	4283      	cmp	r3, r0
 8000884:	4180      	sbcs	r0, r0
 8000886:	4449      	add	r1, r9
 8000888:	468a      	mov	sl, r1
 800088a:	4240      	negs	r0, r0
 800088c:	001c      	movs	r4, r3
 800088e:	4482      	add	sl, r0
 8000890:	e6bc      	b.n	800060c <__aeabi_dadd+0x3f0>
 8000892:	4653      	mov	r3, sl
 8000894:	4323      	orrs	r3, r4
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x67e>
 8000898:	e6a9      	b.n	80005ee <__aeabi_dadd+0x3d2>
 800089a:	e5e4      	b.n	8000466 <__aeabi_dadd+0x24a>
 800089c:	074a      	lsls	r2, r1, #29
 800089e:	4313      	orrs	r3, r2
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	08c9      	lsrs	r1, r1, #3
 80008a4:	0312      	lsls	r2, r2, #12
 80008a6:	4211      	tst	r1, r2
 80008a8:	d009      	beq.n	80008be <__aeabi_dadd+0x6a2>
 80008aa:	4648      	mov	r0, r9
 80008ac:	08c4      	lsrs	r4, r0, #3
 80008ae:	4214      	tst	r4, r2
 80008b0:	d105      	bne.n	80008be <__aeabi_dadd+0x6a2>
 80008b2:	4643      	mov	r3, r8
 80008b4:	4665      	mov	r5, ip
 80008b6:	0021      	movs	r1, r4
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	0742      	lsls	r2, r0, #29
 80008bc:	4313      	orrs	r3, r2
 80008be:	0f5a      	lsrs	r2, r3, #29
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	0752      	lsls	r2, r2, #29
 80008c6:	4313      	orrs	r3, r2
 80008c8:	e5fa      	b.n	80004c0 <__aeabi_dadd+0x2a4>
 80008ca:	2300      	movs	r3, #0
 80008cc:	4a01      	ldr	r2, [pc, #4]	; (80008d4 <__aeabi_dadd+0x6b8>)
 80008ce:	001c      	movs	r4, r3
 80008d0:	e540      	b.n	8000354 <__aeabi_dadd+0x138>
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	000007ff 	.word	0x000007ff
 80008d8:	ff7fffff 	.word	0xff7fffff

080008dc <__aeabi_dmul>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	4645      	mov	r5, r8
 80008e0:	46de      	mov	lr, fp
 80008e2:	4657      	mov	r7, sl
 80008e4:	464e      	mov	r6, r9
 80008e6:	b5e0      	push	{r5, r6, r7, lr}
 80008e8:	001f      	movs	r7, r3
 80008ea:	030b      	lsls	r3, r1, #12
 80008ec:	0b1b      	lsrs	r3, r3, #12
 80008ee:	469b      	mov	fp, r3
 80008f0:	004d      	lsls	r5, r1, #1
 80008f2:	0fcb      	lsrs	r3, r1, #31
 80008f4:	0004      	movs	r4, r0
 80008f6:	4691      	mov	r9, r2
 80008f8:	4698      	mov	r8, r3
 80008fa:	b087      	sub	sp, #28
 80008fc:	0d6d      	lsrs	r5, r5, #21
 80008fe:	d100      	bne.n	8000902 <__aeabi_dmul+0x26>
 8000900:	e1cd      	b.n	8000c9e <__aeabi_dmul+0x3c2>
 8000902:	4bce      	ldr	r3, [pc, #824]	; (8000c3c <__aeabi_dmul+0x360>)
 8000904:	429d      	cmp	r5, r3
 8000906:	d100      	bne.n	800090a <__aeabi_dmul+0x2e>
 8000908:	e1e9      	b.n	8000cde <__aeabi_dmul+0x402>
 800090a:	465a      	mov	r2, fp
 800090c:	0f43      	lsrs	r3, r0, #29
 800090e:	00d2      	lsls	r2, r2, #3
 8000910:	4313      	orrs	r3, r2
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0412      	lsls	r2, r2, #16
 8000916:	431a      	orrs	r2, r3
 8000918:	00c3      	lsls	r3, r0, #3
 800091a:	469a      	mov	sl, r3
 800091c:	4bc8      	ldr	r3, [pc, #800]	; (8000c40 <__aeabi_dmul+0x364>)
 800091e:	4693      	mov	fp, r2
 8000920:	469c      	mov	ip, r3
 8000922:	2300      	movs	r3, #0
 8000924:	2600      	movs	r6, #0
 8000926:	4465      	add	r5, ip
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	033c      	lsls	r4, r7, #12
 800092c:	007b      	lsls	r3, r7, #1
 800092e:	4648      	mov	r0, r9
 8000930:	0b24      	lsrs	r4, r4, #12
 8000932:	0d5b      	lsrs	r3, r3, #21
 8000934:	0fff      	lsrs	r7, r7, #31
 8000936:	2b00      	cmp	r3, #0
 8000938:	d100      	bne.n	800093c <__aeabi_dmul+0x60>
 800093a:	e189      	b.n	8000c50 <__aeabi_dmul+0x374>
 800093c:	4abf      	ldr	r2, [pc, #764]	; (8000c3c <__aeabi_dmul+0x360>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d019      	beq.n	8000976 <__aeabi_dmul+0x9a>
 8000942:	0f42      	lsrs	r2, r0, #29
 8000944:	00e4      	lsls	r4, r4, #3
 8000946:	4322      	orrs	r2, r4
 8000948:	2480      	movs	r4, #128	; 0x80
 800094a:	0424      	lsls	r4, r4, #16
 800094c:	4314      	orrs	r4, r2
 800094e:	4abc      	ldr	r2, [pc, #752]	; (8000c40 <__aeabi_dmul+0x364>)
 8000950:	2100      	movs	r1, #0
 8000952:	4694      	mov	ip, r2
 8000954:	4642      	mov	r2, r8
 8000956:	4463      	add	r3, ip
 8000958:	195b      	adds	r3, r3, r5
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	9b01      	ldr	r3, [sp, #4]
 800095e:	407a      	eors	r2, r7
 8000960:	3301      	adds	r3, #1
 8000962:	00c0      	lsls	r0, r0, #3
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	9302      	str	r3, [sp, #8]
 8000968:	2e0a      	cmp	r6, #10
 800096a:	dd1c      	ble.n	80009a6 <__aeabi_dmul+0xca>
 800096c:	003a      	movs	r2, r7
 800096e:	2e0b      	cmp	r6, #11
 8000970:	d05e      	beq.n	8000a30 <__aeabi_dmul+0x154>
 8000972:	4647      	mov	r7, r8
 8000974:	e056      	b.n	8000a24 <__aeabi_dmul+0x148>
 8000976:	4649      	mov	r1, r9
 8000978:	4bb0      	ldr	r3, [pc, #704]	; (8000c3c <__aeabi_dmul+0x360>)
 800097a:	4321      	orrs	r1, r4
 800097c:	18eb      	adds	r3, r5, r3
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	2900      	cmp	r1, #0
 8000982:	d12a      	bne.n	80009da <__aeabi_dmul+0xfe>
 8000984:	2080      	movs	r0, #128	; 0x80
 8000986:	2202      	movs	r2, #2
 8000988:	0100      	lsls	r0, r0, #4
 800098a:	002b      	movs	r3, r5
 800098c:	4684      	mov	ip, r0
 800098e:	4316      	orrs	r6, r2
 8000990:	4642      	mov	r2, r8
 8000992:	4463      	add	r3, ip
 8000994:	407a      	eors	r2, r7
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	2e0a      	cmp	r6, #10
 800099c:	dd00      	ble.n	80009a0 <__aeabi_dmul+0xc4>
 800099e:	e231      	b.n	8000e04 <__aeabi_dmul+0x528>
 80009a0:	2000      	movs	r0, #0
 80009a2:	2400      	movs	r4, #0
 80009a4:	2102      	movs	r1, #2
 80009a6:	2e02      	cmp	r6, #2
 80009a8:	dc26      	bgt.n	80009f8 <__aeabi_dmul+0x11c>
 80009aa:	3e01      	subs	r6, #1
 80009ac:	2e01      	cmp	r6, #1
 80009ae:	d852      	bhi.n	8000a56 <__aeabi_dmul+0x17a>
 80009b0:	2902      	cmp	r1, #2
 80009b2:	d04c      	beq.n	8000a4e <__aeabi_dmul+0x172>
 80009b4:	2901      	cmp	r1, #1
 80009b6:	d000      	beq.n	80009ba <__aeabi_dmul+0xde>
 80009b8:	e118      	b.n	8000bec <__aeabi_dmul+0x310>
 80009ba:	2300      	movs	r3, #0
 80009bc:	2400      	movs	r4, #0
 80009be:	2500      	movs	r5, #0
 80009c0:	051b      	lsls	r3, r3, #20
 80009c2:	4323      	orrs	r3, r4
 80009c4:	07d2      	lsls	r2, r2, #31
 80009c6:	4313      	orrs	r3, r2
 80009c8:	0028      	movs	r0, r5
 80009ca:	0019      	movs	r1, r3
 80009cc:	b007      	add	sp, #28
 80009ce:	bcf0      	pop	{r4, r5, r6, r7}
 80009d0:	46bb      	mov	fp, r7
 80009d2:	46b2      	mov	sl, r6
 80009d4:	46a9      	mov	r9, r5
 80009d6:	46a0      	mov	r8, r4
 80009d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	2203      	movs	r2, #3
 80009de:	0109      	lsls	r1, r1, #4
 80009e0:	002b      	movs	r3, r5
 80009e2:	468c      	mov	ip, r1
 80009e4:	4316      	orrs	r6, r2
 80009e6:	4642      	mov	r2, r8
 80009e8:	4463      	add	r3, ip
 80009ea:	407a      	eors	r2, r7
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	9302      	str	r3, [sp, #8]
 80009f0:	2e0a      	cmp	r6, #10
 80009f2:	dd00      	ble.n	80009f6 <__aeabi_dmul+0x11a>
 80009f4:	e228      	b.n	8000e48 <__aeabi_dmul+0x56c>
 80009f6:	2103      	movs	r1, #3
 80009f8:	2501      	movs	r5, #1
 80009fa:	40b5      	lsls	r5, r6
 80009fc:	46ac      	mov	ip, r5
 80009fe:	26a6      	movs	r6, #166	; 0xa6
 8000a00:	4663      	mov	r3, ip
 8000a02:	00f6      	lsls	r6, r6, #3
 8000a04:	4035      	ands	r5, r6
 8000a06:	4233      	tst	r3, r6
 8000a08:	d10b      	bne.n	8000a22 <__aeabi_dmul+0x146>
 8000a0a:	2690      	movs	r6, #144	; 0x90
 8000a0c:	00b6      	lsls	r6, r6, #2
 8000a0e:	4233      	tst	r3, r6
 8000a10:	d118      	bne.n	8000a44 <__aeabi_dmul+0x168>
 8000a12:	3eb9      	subs	r6, #185	; 0xb9
 8000a14:	3eff      	subs	r6, #255	; 0xff
 8000a16:	421e      	tst	r6, r3
 8000a18:	d01d      	beq.n	8000a56 <__aeabi_dmul+0x17a>
 8000a1a:	46a3      	mov	fp, r4
 8000a1c:	4682      	mov	sl, r0
 8000a1e:	9100      	str	r1, [sp, #0]
 8000a20:	e000      	b.n	8000a24 <__aeabi_dmul+0x148>
 8000a22:	0017      	movs	r7, r2
 8000a24:	9900      	ldr	r1, [sp, #0]
 8000a26:	003a      	movs	r2, r7
 8000a28:	2902      	cmp	r1, #2
 8000a2a:	d010      	beq.n	8000a4e <__aeabi_dmul+0x172>
 8000a2c:	465c      	mov	r4, fp
 8000a2e:	4650      	mov	r0, sl
 8000a30:	2903      	cmp	r1, #3
 8000a32:	d1bf      	bne.n	80009b4 <__aeabi_dmul+0xd8>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	031b      	lsls	r3, r3, #12
 8000a38:	431c      	orrs	r4, r3
 8000a3a:	0324      	lsls	r4, r4, #12
 8000a3c:	0005      	movs	r5, r0
 8000a3e:	4b7f      	ldr	r3, [pc, #508]	; (8000c3c <__aeabi_dmul+0x360>)
 8000a40:	0b24      	lsrs	r4, r4, #12
 8000a42:	e7bd      	b.n	80009c0 <__aeabi_dmul+0xe4>
 8000a44:	2480      	movs	r4, #128	; 0x80
 8000a46:	2200      	movs	r2, #0
 8000a48:	4b7c      	ldr	r3, [pc, #496]	; (8000c3c <__aeabi_dmul+0x360>)
 8000a4a:	0324      	lsls	r4, r4, #12
 8000a4c:	e7b8      	b.n	80009c0 <__aeabi_dmul+0xe4>
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	4b7a      	ldr	r3, [pc, #488]	; (8000c3c <__aeabi_dmul+0x360>)
 8000a54:	e7b4      	b.n	80009c0 <__aeabi_dmul+0xe4>
 8000a56:	4653      	mov	r3, sl
 8000a58:	041e      	lsls	r6, r3, #16
 8000a5a:	0c36      	lsrs	r6, r6, #16
 8000a5c:	0c1f      	lsrs	r7, r3, #16
 8000a5e:	0033      	movs	r3, r6
 8000a60:	0c01      	lsrs	r1, r0, #16
 8000a62:	0400      	lsls	r0, r0, #16
 8000a64:	0c00      	lsrs	r0, r0, #16
 8000a66:	4343      	muls	r3, r0
 8000a68:	4698      	mov	r8, r3
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	437b      	muls	r3, r7
 8000a6e:	4699      	mov	r9, r3
 8000a70:	0033      	movs	r3, r6
 8000a72:	434b      	muls	r3, r1
 8000a74:	469c      	mov	ip, r3
 8000a76:	4643      	mov	r3, r8
 8000a78:	000d      	movs	r5, r1
 8000a7a:	0c1b      	lsrs	r3, r3, #16
 8000a7c:	469a      	mov	sl, r3
 8000a7e:	437d      	muls	r5, r7
 8000a80:	44cc      	add	ip, r9
 8000a82:	44d4      	add	ip, sl
 8000a84:	9500      	str	r5, [sp, #0]
 8000a86:	45e1      	cmp	r9, ip
 8000a88:	d904      	bls.n	8000a94 <__aeabi_dmul+0x1b8>
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	4699      	mov	r9, r3
 8000a90:	444d      	add	r5, r9
 8000a92:	9500      	str	r5, [sp, #0]
 8000a94:	4663      	mov	r3, ip
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	001d      	movs	r5, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	041b      	lsls	r3, r3, #16
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	4643      	mov	r3, r8
 8000aa2:	041b      	lsls	r3, r3, #16
 8000aa4:	0c1b      	lsrs	r3, r3, #16
 8000aa6:	4698      	mov	r8, r3
 8000aa8:	4663      	mov	r3, ip
 8000aaa:	4443      	add	r3, r8
 8000aac:	9303      	str	r3, [sp, #12]
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	4698      	mov	r8, r3
 8000ab2:	0033      	movs	r3, r6
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	0c24      	lsrs	r4, r4, #16
 8000ab8:	4363      	muls	r3, r4
 8000aba:	469c      	mov	ip, r3
 8000abc:	0023      	movs	r3, r4
 8000abe:	437b      	muls	r3, r7
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	435e      	muls	r6, r3
 8000ac6:	435f      	muls	r7, r3
 8000ac8:	444e      	add	r6, r9
 8000aca:	4663      	mov	r3, ip
 8000acc:	46b2      	mov	sl, r6
 8000ace:	0c1e      	lsrs	r6, r3, #16
 8000ad0:	4456      	add	r6, sl
 8000ad2:	45b1      	cmp	r9, r6
 8000ad4:	d903      	bls.n	8000ade <__aeabi_dmul+0x202>
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	025b      	lsls	r3, r3, #9
 8000ada:	4699      	mov	r9, r3
 8000adc:	444f      	add	r7, r9
 8000ade:	0c33      	lsrs	r3, r6, #16
 8000ae0:	4699      	mov	r9, r3
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	444b      	add	r3, r9
 8000ae6:	9305      	str	r3, [sp, #20]
 8000ae8:	4663      	mov	r3, ip
 8000aea:	46ac      	mov	ip, r5
 8000aec:	041f      	lsls	r7, r3, #16
 8000aee:	0c3f      	lsrs	r7, r7, #16
 8000af0:	0436      	lsls	r6, r6, #16
 8000af2:	19f6      	adds	r6, r6, r7
 8000af4:	44b4      	add	ip, r6
 8000af6:	4663      	mov	r3, ip
 8000af8:	9304      	str	r3, [sp, #16]
 8000afa:	465b      	mov	r3, fp
 8000afc:	0c1b      	lsrs	r3, r3, #16
 8000afe:	469c      	mov	ip, r3
 8000b00:	465b      	mov	r3, fp
 8000b02:	041f      	lsls	r7, r3, #16
 8000b04:	0c3f      	lsrs	r7, r7, #16
 8000b06:	003b      	movs	r3, r7
 8000b08:	4343      	muls	r3, r0
 8000b0a:	4699      	mov	r9, r3
 8000b0c:	4663      	mov	r3, ip
 8000b0e:	4343      	muls	r3, r0
 8000b10:	469a      	mov	sl, r3
 8000b12:	464b      	mov	r3, r9
 8000b14:	4660      	mov	r0, ip
 8000b16:	0c1b      	lsrs	r3, r3, #16
 8000b18:	469b      	mov	fp, r3
 8000b1a:	4348      	muls	r0, r1
 8000b1c:	4379      	muls	r1, r7
 8000b1e:	4451      	add	r1, sl
 8000b20:	4459      	add	r1, fp
 8000b22:	458a      	cmp	sl, r1
 8000b24:	d903      	bls.n	8000b2e <__aeabi_dmul+0x252>
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	4450      	add	r0, sl
 8000b2e:	0c0b      	lsrs	r3, r1, #16
 8000b30:	469a      	mov	sl, r3
 8000b32:	464b      	mov	r3, r9
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	0c1b      	lsrs	r3, r3, #16
 8000b38:	4699      	mov	r9, r3
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	4363      	muls	r3, r4
 8000b3e:	0409      	lsls	r1, r1, #16
 8000b40:	4645      	mov	r5, r8
 8000b42:	4449      	add	r1, r9
 8000b44:	4699      	mov	r9, r3
 8000b46:	4663      	mov	r3, ip
 8000b48:	435c      	muls	r4, r3
 8000b4a:	436b      	muls	r3, r5
 8000b4c:	469c      	mov	ip, r3
 8000b4e:	464b      	mov	r3, r9
 8000b50:	0c1b      	lsrs	r3, r3, #16
 8000b52:	4698      	mov	r8, r3
 8000b54:	436f      	muls	r7, r5
 8000b56:	193f      	adds	r7, r7, r4
 8000b58:	4447      	add	r7, r8
 8000b5a:	4450      	add	r0, sl
 8000b5c:	42bc      	cmp	r4, r7
 8000b5e:	d903      	bls.n	8000b68 <__aeabi_dmul+0x28c>
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	4698      	mov	r8, r3
 8000b66:	44c4      	add	ip, r8
 8000b68:	9b04      	ldr	r3, [sp, #16]
 8000b6a:	9d00      	ldr	r5, [sp, #0]
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	4445      	add	r5, r8
 8000b70:	42b5      	cmp	r5, r6
 8000b72:	41b6      	sbcs	r6, r6
 8000b74:	4273      	negs	r3, r6
 8000b76:	4698      	mov	r8, r3
 8000b78:	464b      	mov	r3, r9
 8000b7a:	041e      	lsls	r6, r3, #16
 8000b7c:	9b05      	ldr	r3, [sp, #20]
 8000b7e:	043c      	lsls	r4, r7, #16
 8000b80:	4699      	mov	r9, r3
 8000b82:	0c36      	lsrs	r6, r6, #16
 8000b84:	19a4      	adds	r4, r4, r6
 8000b86:	444c      	add	r4, r9
 8000b88:	46a1      	mov	r9, r4
 8000b8a:	4683      	mov	fp, r0
 8000b8c:	186e      	adds	r6, r5, r1
 8000b8e:	44c1      	add	r9, r8
 8000b90:	428e      	cmp	r6, r1
 8000b92:	4189      	sbcs	r1, r1
 8000b94:	44cb      	add	fp, r9
 8000b96:	465d      	mov	r5, fp
 8000b98:	4249      	negs	r1, r1
 8000b9a:	186d      	adds	r5, r5, r1
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	41a4      	sbcs	r4, r4
 8000ba0:	45c1      	cmp	r9, r8
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4583      	cmp	fp, r0
 8000ba6:	4180      	sbcs	r0, r0
 8000ba8:	428d      	cmp	r5, r1
 8000baa:	4189      	sbcs	r1, r1
 8000bac:	425b      	negs	r3, r3
 8000bae:	4264      	negs	r4, r4
 8000bb0:	431c      	orrs	r4, r3
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	9b03      	ldr	r3, [sp, #12]
 8000bb6:	4249      	negs	r1, r1
 8000bb8:	4301      	orrs	r1, r0
 8000bba:	0270      	lsls	r0, r6, #9
 8000bbc:	0c3f      	lsrs	r7, r7, #16
 8000bbe:	4318      	orrs	r0, r3
 8000bc0:	19e4      	adds	r4, r4, r7
 8000bc2:	1e47      	subs	r7, r0, #1
 8000bc4:	41b8      	sbcs	r0, r7
 8000bc6:	1864      	adds	r4, r4, r1
 8000bc8:	4464      	add	r4, ip
 8000bca:	0df6      	lsrs	r6, r6, #23
 8000bcc:	0261      	lsls	r1, r4, #9
 8000bce:	4330      	orrs	r0, r6
 8000bd0:	0dec      	lsrs	r4, r5, #23
 8000bd2:	026e      	lsls	r6, r5, #9
 8000bd4:	430c      	orrs	r4, r1
 8000bd6:	4330      	orrs	r0, r6
 8000bd8:	01c9      	lsls	r1, r1, #7
 8000bda:	d400      	bmi.n	8000bde <__aeabi_dmul+0x302>
 8000bdc:	e0f1      	b.n	8000dc2 <__aeabi_dmul+0x4e6>
 8000bde:	2101      	movs	r1, #1
 8000be0:	0843      	lsrs	r3, r0, #1
 8000be2:	4001      	ands	r1, r0
 8000be4:	430b      	orrs	r3, r1
 8000be6:	07e0      	lsls	r0, r4, #31
 8000be8:	4318      	orrs	r0, r3
 8000bea:	0864      	lsrs	r4, r4, #1
 8000bec:	4915      	ldr	r1, [pc, #84]	; (8000c44 <__aeabi_dmul+0x368>)
 8000bee:	9b02      	ldr	r3, [sp, #8]
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	4463      	add	r3, ip
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	dc00      	bgt.n	8000bfa <__aeabi_dmul+0x31e>
 8000bf8:	e097      	b.n	8000d2a <__aeabi_dmul+0x44e>
 8000bfa:	0741      	lsls	r1, r0, #29
 8000bfc:	d009      	beq.n	8000c12 <__aeabi_dmul+0x336>
 8000bfe:	210f      	movs	r1, #15
 8000c00:	4001      	ands	r1, r0
 8000c02:	2904      	cmp	r1, #4
 8000c04:	d005      	beq.n	8000c12 <__aeabi_dmul+0x336>
 8000c06:	1d01      	adds	r1, r0, #4
 8000c08:	4281      	cmp	r1, r0
 8000c0a:	4180      	sbcs	r0, r0
 8000c0c:	4240      	negs	r0, r0
 8000c0e:	1824      	adds	r4, r4, r0
 8000c10:	0008      	movs	r0, r1
 8000c12:	01e1      	lsls	r1, r4, #7
 8000c14:	d506      	bpl.n	8000c24 <__aeabi_dmul+0x348>
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	00c9      	lsls	r1, r1, #3
 8000c1a:	468c      	mov	ip, r1
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <__aeabi_dmul+0x36c>)
 8000c1e:	401c      	ands	r4, r3
 8000c20:	9b02      	ldr	r3, [sp, #8]
 8000c22:	4463      	add	r3, ip
 8000c24:	4909      	ldr	r1, [pc, #36]	; (8000c4c <__aeabi_dmul+0x370>)
 8000c26:	428b      	cmp	r3, r1
 8000c28:	dd00      	ble.n	8000c2c <__aeabi_dmul+0x350>
 8000c2a:	e710      	b.n	8000a4e <__aeabi_dmul+0x172>
 8000c2c:	0761      	lsls	r1, r4, #29
 8000c2e:	08c5      	lsrs	r5, r0, #3
 8000c30:	0264      	lsls	r4, r4, #9
 8000c32:	055b      	lsls	r3, r3, #21
 8000c34:	430d      	orrs	r5, r1
 8000c36:	0b24      	lsrs	r4, r4, #12
 8000c38:	0d5b      	lsrs	r3, r3, #21
 8000c3a:	e6c1      	b.n	80009c0 <__aeabi_dmul+0xe4>
 8000c3c:	000007ff 	.word	0x000007ff
 8000c40:	fffffc01 	.word	0xfffffc01
 8000c44:	000003ff 	.word	0x000003ff
 8000c48:	feffffff 	.word	0xfeffffff
 8000c4c:	000007fe 	.word	0x000007fe
 8000c50:	464b      	mov	r3, r9
 8000c52:	4323      	orrs	r3, r4
 8000c54:	d059      	beq.n	8000d0a <__aeabi_dmul+0x42e>
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_dmul+0x380>
 8000c5a:	e0a3      	b.n	8000da4 <__aeabi_dmul+0x4c8>
 8000c5c:	0020      	movs	r0, r4
 8000c5e:	f000 f965 	bl	8000f2c <__clzsi2>
 8000c62:	0001      	movs	r1, r0
 8000c64:	0003      	movs	r3, r0
 8000c66:	390b      	subs	r1, #11
 8000c68:	221d      	movs	r2, #29
 8000c6a:	1a52      	subs	r2, r2, r1
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	0018      	movs	r0, r3
 8000c70:	40d1      	lsrs	r1, r2
 8000c72:	464a      	mov	r2, r9
 8000c74:	3808      	subs	r0, #8
 8000c76:	4082      	lsls	r2, r0
 8000c78:	4084      	lsls	r4, r0
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	430c      	orrs	r4, r1
 8000c7e:	4a74      	ldr	r2, [pc, #464]	; (8000e50 <__aeabi_dmul+0x574>)
 8000c80:	1aeb      	subs	r3, r5, r3
 8000c82:	4694      	mov	ip, r2
 8000c84:	4642      	mov	r2, r8
 8000c86:	4463      	add	r3, ip
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	9b01      	ldr	r3, [sp, #4]
 8000c8c:	407a      	eors	r2, r7
 8000c8e:	3301      	adds	r3, #1
 8000c90:	2100      	movs	r1, #0
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	9302      	str	r3, [sp, #8]
 8000c96:	2e0a      	cmp	r6, #10
 8000c98:	dd00      	ble.n	8000c9c <__aeabi_dmul+0x3c0>
 8000c9a:	e667      	b.n	800096c <__aeabi_dmul+0x90>
 8000c9c:	e683      	b.n	80009a6 <__aeabi_dmul+0xca>
 8000c9e:	465b      	mov	r3, fp
 8000ca0:	4303      	orrs	r3, r0
 8000ca2:	469a      	mov	sl, r3
 8000ca4:	d02a      	beq.n	8000cfc <__aeabi_dmul+0x420>
 8000ca6:	465b      	mov	r3, fp
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d06d      	beq.n	8000d88 <__aeabi_dmul+0x4ac>
 8000cac:	4658      	mov	r0, fp
 8000cae:	f000 f93d 	bl	8000f2c <__clzsi2>
 8000cb2:	0001      	movs	r1, r0
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	390b      	subs	r1, #11
 8000cb8:	221d      	movs	r2, #29
 8000cba:	1a52      	subs	r2, r2, r1
 8000cbc:	0021      	movs	r1, r4
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	465d      	mov	r5, fp
 8000cc2:	40d1      	lsrs	r1, r2
 8000cc4:	3808      	subs	r0, #8
 8000cc6:	4085      	lsls	r5, r0
 8000cc8:	000a      	movs	r2, r1
 8000cca:	4084      	lsls	r4, r0
 8000ccc:	432a      	orrs	r2, r5
 8000cce:	4693      	mov	fp, r2
 8000cd0:	46a2      	mov	sl, r4
 8000cd2:	4d5f      	ldr	r5, [pc, #380]	; (8000e50 <__aeabi_dmul+0x574>)
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	1aed      	subs	r5, r5, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	e625      	b.n	800092a <__aeabi_dmul+0x4e>
 8000cde:	465b      	mov	r3, fp
 8000ce0:	4303      	orrs	r3, r0
 8000ce2:	469a      	mov	sl, r3
 8000ce4:	d105      	bne.n	8000cf2 <__aeabi_dmul+0x416>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	469b      	mov	fp, r3
 8000cea:	3302      	adds	r3, #2
 8000cec:	2608      	movs	r6, #8
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	e61b      	b.n	800092a <__aeabi_dmul+0x4e>
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	4682      	mov	sl, r0
 8000cf6:	260c      	movs	r6, #12
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	e616      	b.n	800092a <__aeabi_dmul+0x4e>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	469b      	mov	fp, r3
 8000d00:	3301      	adds	r3, #1
 8000d02:	2604      	movs	r6, #4
 8000d04:	2500      	movs	r5, #0
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	e60f      	b.n	800092a <__aeabi_dmul+0x4e>
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	9501      	str	r5, [sp, #4]
 8000d10:	431e      	orrs	r6, r3
 8000d12:	9b01      	ldr	r3, [sp, #4]
 8000d14:	407a      	eors	r2, r7
 8000d16:	3301      	adds	r3, #1
 8000d18:	2400      	movs	r4, #0
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	2e0a      	cmp	r6, #10
 8000d24:	dd00      	ble.n	8000d28 <__aeabi_dmul+0x44c>
 8000d26:	e621      	b.n	800096c <__aeabi_dmul+0x90>
 8000d28:	e63d      	b.n	80009a6 <__aeabi_dmul+0xca>
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	1ac9      	subs	r1, r1, r3
 8000d2e:	2938      	cmp	r1, #56	; 0x38
 8000d30:	dd00      	ble.n	8000d34 <__aeabi_dmul+0x458>
 8000d32:	e642      	b.n	80009ba <__aeabi_dmul+0xde>
 8000d34:	291f      	cmp	r1, #31
 8000d36:	dd47      	ble.n	8000dc8 <__aeabi_dmul+0x4ec>
 8000d38:	261f      	movs	r6, #31
 8000d3a:	0025      	movs	r5, r4
 8000d3c:	4276      	negs	r6, r6
 8000d3e:	1af3      	subs	r3, r6, r3
 8000d40:	40dd      	lsrs	r5, r3
 8000d42:	002b      	movs	r3, r5
 8000d44:	2920      	cmp	r1, #32
 8000d46:	d005      	beq.n	8000d54 <__aeabi_dmul+0x478>
 8000d48:	4942      	ldr	r1, [pc, #264]	; (8000e54 <__aeabi_dmul+0x578>)
 8000d4a:	9d02      	ldr	r5, [sp, #8]
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	4465      	add	r5, ip
 8000d50:	40ac      	lsls	r4, r5
 8000d52:	4320      	orrs	r0, r4
 8000d54:	1e41      	subs	r1, r0, #1
 8000d56:	4188      	sbcs	r0, r1
 8000d58:	4318      	orrs	r0, r3
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	001d      	movs	r5, r3
 8000d5e:	2400      	movs	r4, #0
 8000d60:	4005      	ands	r5, r0
 8000d62:	4203      	tst	r3, r0
 8000d64:	d04a      	beq.n	8000dfc <__aeabi_dmul+0x520>
 8000d66:	230f      	movs	r3, #15
 8000d68:	2400      	movs	r4, #0
 8000d6a:	4003      	ands	r3, r0
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d042      	beq.n	8000df6 <__aeabi_dmul+0x51a>
 8000d70:	1d03      	adds	r3, r0, #4
 8000d72:	4283      	cmp	r3, r0
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	4240      	negs	r0, r0
 8000d78:	1824      	adds	r4, r4, r0
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	0223      	lsls	r3, r4, #8
 8000d7e:	d53a      	bpl.n	8000df6 <__aeabi_dmul+0x51a>
 8000d80:	2301      	movs	r3, #1
 8000d82:	2400      	movs	r4, #0
 8000d84:	2500      	movs	r5, #0
 8000d86:	e61b      	b.n	80009c0 <__aeabi_dmul+0xe4>
 8000d88:	f000 f8d0 	bl	8000f2c <__clzsi2>
 8000d8c:	0001      	movs	r1, r0
 8000d8e:	0003      	movs	r3, r0
 8000d90:	3115      	adds	r1, #21
 8000d92:	3320      	adds	r3, #32
 8000d94:	291c      	cmp	r1, #28
 8000d96:	dd8f      	ble.n	8000cb8 <__aeabi_dmul+0x3dc>
 8000d98:	3808      	subs	r0, #8
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4084      	lsls	r4, r0
 8000d9e:	4692      	mov	sl, r2
 8000da0:	46a3      	mov	fp, r4
 8000da2:	e796      	b.n	8000cd2 <__aeabi_dmul+0x3f6>
 8000da4:	f000 f8c2 	bl	8000f2c <__clzsi2>
 8000da8:	0001      	movs	r1, r0
 8000daa:	0003      	movs	r3, r0
 8000dac:	3115      	adds	r1, #21
 8000dae:	3320      	adds	r3, #32
 8000db0:	291c      	cmp	r1, #28
 8000db2:	dc00      	bgt.n	8000db6 <__aeabi_dmul+0x4da>
 8000db4:	e758      	b.n	8000c68 <__aeabi_dmul+0x38c>
 8000db6:	0002      	movs	r2, r0
 8000db8:	464c      	mov	r4, r9
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	4094      	lsls	r4, r2
 8000dc0:	e75d      	b.n	8000c7e <__aeabi_dmul+0x3a2>
 8000dc2:	9b01      	ldr	r3, [sp, #4]
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	e711      	b.n	8000bec <__aeabi_dmul+0x310>
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <__aeabi_dmul+0x57c>)
 8000dca:	0026      	movs	r6, r4
 8000dcc:	469c      	mov	ip, r3
 8000dce:	0003      	movs	r3, r0
 8000dd0:	9d02      	ldr	r5, [sp, #8]
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	4465      	add	r5, ip
 8000dd6:	40ae      	lsls	r6, r5
 8000dd8:	431e      	orrs	r6, r3
 8000dda:	0003      	movs	r3, r0
 8000ddc:	40ab      	lsls	r3, r5
 8000dde:	1e58      	subs	r0, r3, #1
 8000de0:	4183      	sbcs	r3, r0
 8000de2:	0030      	movs	r0, r6
 8000de4:	4318      	orrs	r0, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	0743      	lsls	r3, r0, #29
 8000dea:	d0c7      	beq.n	8000d7c <__aeabi_dmul+0x4a0>
 8000dec:	230f      	movs	r3, #15
 8000dee:	4003      	ands	r3, r0
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d1bd      	bne.n	8000d70 <__aeabi_dmul+0x494>
 8000df4:	e7c2      	b.n	8000d7c <__aeabi_dmul+0x4a0>
 8000df6:	0765      	lsls	r5, r4, #29
 8000df8:	0264      	lsls	r4, r4, #9
 8000dfa:	0b24      	lsrs	r4, r4, #12
 8000dfc:	08c0      	lsrs	r0, r0, #3
 8000dfe:	2300      	movs	r3, #0
 8000e00:	4305      	orrs	r5, r0
 8000e02:	e5dd      	b.n	80009c0 <__aeabi_dmul+0xe4>
 8000e04:	2500      	movs	r5, #0
 8000e06:	2302      	movs	r3, #2
 8000e08:	2e0f      	cmp	r6, #15
 8000e0a:	d10c      	bne.n	8000e26 <__aeabi_dmul+0x54a>
 8000e0c:	2480      	movs	r4, #128	; 0x80
 8000e0e:	465b      	mov	r3, fp
 8000e10:	0324      	lsls	r4, r4, #12
 8000e12:	4223      	tst	r3, r4
 8000e14:	d00e      	beq.n	8000e34 <__aeabi_dmul+0x558>
 8000e16:	4221      	tst	r1, r4
 8000e18:	d10c      	bne.n	8000e34 <__aeabi_dmul+0x558>
 8000e1a:	430c      	orrs	r4, r1
 8000e1c:	0324      	lsls	r4, r4, #12
 8000e1e:	003a      	movs	r2, r7
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <__aeabi_dmul+0x580>)
 8000e22:	0b24      	lsrs	r4, r4, #12
 8000e24:	e5cc      	b.n	80009c0 <__aeabi_dmul+0xe4>
 8000e26:	2e0b      	cmp	r6, #11
 8000e28:	d000      	beq.n	8000e2c <__aeabi_dmul+0x550>
 8000e2a:	e5a2      	b.n	8000972 <__aeabi_dmul+0x96>
 8000e2c:	468b      	mov	fp, r1
 8000e2e:	46aa      	mov	sl, r5
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	e5f7      	b.n	8000a24 <__aeabi_dmul+0x148>
 8000e34:	2480      	movs	r4, #128	; 0x80
 8000e36:	465b      	mov	r3, fp
 8000e38:	0324      	lsls	r4, r4, #12
 8000e3a:	431c      	orrs	r4, r3
 8000e3c:	0324      	lsls	r4, r4, #12
 8000e3e:	4642      	mov	r2, r8
 8000e40:	4655      	mov	r5, sl
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <__aeabi_dmul+0x580>)
 8000e44:	0b24      	lsrs	r4, r4, #12
 8000e46:	e5bb      	b.n	80009c0 <__aeabi_dmul+0xe4>
 8000e48:	464d      	mov	r5, r9
 8000e4a:	0021      	movs	r1, r4
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e7db      	b.n	8000e08 <__aeabi_dmul+0x52c>
 8000e50:	fffffc0d 	.word	0xfffffc0d
 8000e54:	0000043e 	.word	0x0000043e
 8000e58:	0000041e 	.word	0x0000041e
 8000e5c:	000007ff 	.word	0x000007ff

08000e60 <__aeabi_d2iz>:
 8000e60:	000a      	movs	r2, r1
 8000e62:	b530      	push	{r4, r5, lr}
 8000e64:	4c13      	ldr	r4, [pc, #76]	; (8000eb4 <__aeabi_d2iz+0x54>)
 8000e66:	0053      	lsls	r3, r2, #1
 8000e68:	0309      	lsls	r1, r1, #12
 8000e6a:	0005      	movs	r5, r0
 8000e6c:	0b09      	lsrs	r1, r1, #12
 8000e6e:	2000      	movs	r0, #0
 8000e70:	0d5b      	lsrs	r3, r3, #21
 8000e72:	0fd2      	lsrs	r2, r2, #31
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	dd04      	ble.n	8000e82 <__aeabi_d2iz+0x22>
 8000e78:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <__aeabi_d2iz+0x58>)
 8000e7a:	4283      	cmp	r3, r0
 8000e7c:	dd02      	ble.n	8000e84 <__aeabi_d2iz+0x24>
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <__aeabi_d2iz+0x5c>)
 8000e80:	18d0      	adds	r0, r2, r3
 8000e82:	bd30      	pop	{r4, r5, pc}
 8000e84:	2080      	movs	r0, #128	; 0x80
 8000e86:	0340      	lsls	r0, r0, #13
 8000e88:	4301      	orrs	r1, r0
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <__aeabi_d2iz+0x60>)
 8000e8c:	1ac0      	subs	r0, r0, r3
 8000e8e:	281f      	cmp	r0, #31
 8000e90:	dd08      	ble.n	8000ea4 <__aeabi_d2iz+0x44>
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <__aeabi_d2iz+0x64>)
 8000e94:	1ac3      	subs	r3, r0, r3
 8000e96:	40d9      	lsrs	r1, r3
 8000e98:	000b      	movs	r3, r1
 8000e9a:	4258      	negs	r0, r3
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d1f0      	bne.n	8000e82 <__aeabi_d2iz+0x22>
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	e7ee      	b.n	8000e82 <__aeabi_d2iz+0x22>
 8000ea4:	4c08      	ldr	r4, [pc, #32]	; (8000ec8 <__aeabi_d2iz+0x68>)
 8000ea6:	40c5      	lsrs	r5, r0
 8000ea8:	46a4      	mov	ip, r4
 8000eaa:	4463      	add	r3, ip
 8000eac:	4099      	lsls	r1, r3
 8000eae:	000b      	movs	r3, r1
 8000eb0:	432b      	orrs	r3, r5
 8000eb2:	e7f2      	b.n	8000e9a <__aeabi_d2iz+0x3a>
 8000eb4:	000003fe 	.word	0x000003fe
 8000eb8:	0000041d 	.word	0x0000041d
 8000ebc:	7fffffff 	.word	0x7fffffff
 8000ec0:	00000433 	.word	0x00000433
 8000ec4:	00000413 	.word	0x00000413
 8000ec8:	fffffbed 	.word	0xfffffbed

08000ecc <__aeabi_i2d>:
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d016      	beq.n	8000f00 <__aeabi_i2d+0x34>
 8000ed2:	17c3      	asrs	r3, r0, #31
 8000ed4:	18c5      	adds	r5, r0, r3
 8000ed6:	405d      	eors	r5, r3
 8000ed8:	0fc4      	lsrs	r4, r0, #31
 8000eda:	0028      	movs	r0, r5
 8000edc:	f000 f826 	bl	8000f2c <__clzsi2>
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <__aeabi_i2d+0x5c>)
 8000ee2:	1a1b      	subs	r3, r3, r0
 8000ee4:	280a      	cmp	r0, #10
 8000ee6:	dc16      	bgt.n	8000f16 <__aeabi_i2d+0x4a>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	002e      	movs	r6, r5
 8000eec:	3215      	adds	r2, #21
 8000eee:	4096      	lsls	r6, r2
 8000ef0:	220b      	movs	r2, #11
 8000ef2:	1a12      	subs	r2, r2, r0
 8000ef4:	40d5      	lsrs	r5, r2
 8000ef6:	055b      	lsls	r3, r3, #21
 8000ef8:	032d      	lsls	r5, r5, #12
 8000efa:	0b2d      	lsrs	r5, r5, #12
 8000efc:	0d5b      	lsrs	r3, r3, #21
 8000efe:	e003      	b.n	8000f08 <__aeabi_i2d+0x3c>
 8000f00:	2400      	movs	r4, #0
 8000f02:	2300      	movs	r3, #0
 8000f04:	2500      	movs	r5, #0
 8000f06:	2600      	movs	r6, #0
 8000f08:	051b      	lsls	r3, r3, #20
 8000f0a:	432b      	orrs	r3, r5
 8000f0c:	07e4      	lsls	r4, r4, #31
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	0030      	movs	r0, r6
 8000f12:	0019      	movs	r1, r3
 8000f14:	bd70      	pop	{r4, r5, r6, pc}
 8000f16:	380b      	subs	r0, #11
 8000f18:	4085      	lsls	r5, r0
 8000f1a:	055b      	lsls	r3, r3, #21
 8000f1c:	032d      	lsls	r5, r5, #12
 8000f1e:	2600      	movs	r6, #0
 8000f20:	0b2d      	lsrs	r5, r5, #12
 8000f22:	0d5b      	lsrs	r3, r3, #21
 8000f24:	e7f0      	b.n	8000f08 <__aeabi_i2d+0x3c>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	0000041e 	.word	0x0000041e

08000f2c <__clzsi2>:
 8000f2c:	211c      	movs	r1, #28
 8000f2e:	2301      	movs	r3, #1
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d301      	bcc.n	8000f3a <__clzsi2+0xe>
 8000f36:	0c00      	lsrs	r0, r0, #16
 8000f38:	3910      	subs	r1, #16
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	4298      	cmp	r0, r3
 8000f3e:	d301      	bcc.n	8000f44 <__clzsi2+0x18>
 8000f40:	0a00      	lsrs	r0, r0, #8
 8000f42:	3908      	subs	r1, #8
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d301      	bcc.n	8000f4e <__clzsi2+0x22>
 8000f4a:	0900      	lsrs	r0, r0, #4
 8000f4c:	3904      	subs	r1, #4
 8000f4e:	a202      	add	r2, pc, #8	; (adr r2, 8000f58 <__clzsi2+0x2c>)
 8000f50:	5c10      	ldrb	r0, [r2, r0]
 8000f52:	1840      	adds	r0, r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	02020304 	.word	0x02020304
 8000f5c:	01010101 	.word	0x01010101
	...

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b08d      	sub	sp, #52	; 0x34
 8000f6c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 ff07 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f8bb 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 fb1d 	bl	80015b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f000 faed 	bl	8001558 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f7e:	f000 f94d 	bl	800121c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f82:	f000 f9e7 	bl	8001354 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f86:	f000 fa7b 	bl	8001480 <MX_TIM6_Init>
  MX_I2C2_Init();
 8000f8a:	f000 f907 	bl	800119c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000f8e:	f000 fab3 	bl	80014f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f92:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <main+0x16c>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	0018      	movs	r0, r3
 8000f98:	f003 fea4 	bl	8004ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <main+0x16c>)
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f003 fe9f 	bl	8004ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000fa6:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <main+0x16c>)
 8000fa8:	2108      	movs	r1, #8
 8000faa:	0018      	movs	r0, r3
 8000fac:	f003 fe9a 	bl	8004ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <main+0x16c>)
 8000fb2:	210c      	movs	r1, #12
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f003 fe95 	bl	8004ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fba:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <main+0x170>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f003 fe90 	bl	8004ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000fc4:	4b45      	ldr	r3, [pc, #276]	; (80010dc <main+0x174>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f003 fd8a 	bl	8004ae0 <HAL_TIM_Base_Start_IT>

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, 212, 1, 100);
 8000fcc:	1dfc      	adds	r4, r7, #7
 8000fce:	4844      	ldr	r0, [pc, #272]	; (80010e0 <main+0x178>)
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	21d4      	movs	r1, #212	; 0xd4
 8000fd6:	f001 fd1d 	bl	8002a14 <HAL_I2C_IsDeviceReady>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	7023      	strb	r3, [r4, #0]
  uint8_t gyro_on = 0b10000000;
 8000fde:	1dbb      	adds	r3, r7, #6
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	701a      	strb	r2, [r3, #0]
  uint8_t accel_on = 0b10000000;
 8000fe4:	1d7b      	adds	r3, r7, #5
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c2, 212, 0x11, I2C_MEMADD_SIZE_8BIT, &gyro_on, 1, HAL_MAX_DELAY);
 8000fea:	483d      	ldr	r0, [pc, #244]	; (80010e0 <main+0x178>)
 8000fec:	2301      	movs	r3, #1
 8000fee:	425b      	negs	r3, r3
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2211      	movs	r2, #17
 8000ffe:	21d4      	movs	r1, #212	; 0xd4
 8001000:	f001 fbda 	bl	80027b8 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c2, 212, 0x10, I2C_MEMADD_SIZE_8BIT, &accel_on, 1, HAL_MAX_DELAY);
 8001004:	4836      	ldr	r0, [pc, #216]	; (80010e0 <main+0x178>)
 8001006:	2301      	movs	r3, #1
 8001008:	425b      	negs	r3, r3
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2301      	movs	r3, #1
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	1d7b      	adds	r3, r7, #5
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	2210      	movs	r2, #16
 8001018:	21d4      	movs	r1, #212	; 0xd4
 800101a:	f001 fbcd 	bl	80027b8 <HAL_I2C_Mem_Write>

	HAL_GPIO_WritePin(GPIOC, 0, GPIO_PIN_RESET);
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <main+0x17c>)
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	0018      	movs	r0, r3
 8001026:	f001 fb13 	bl	8002650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, 1, GPIO_PIN_RESET);
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <main+0x17c>)
 800102c:	2200      	movs	r2, #0
 800102e:	2101      	movs	r1, #1
 8001030:	0018      	movs	r0, r3
 8001032:	f001 fb0d 	bl	8002650 <HAL_GPIO_WritePin>
  {
	  //    HAL_Delay(500);
	  //    HAL_UART_Transmit_DMA(&huart1, test_buff, sizeof(test_buff));
	  //HAL_UART_Receive_DMA (&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));

	  servo1_control(45);
 8001036:	202d      	movs	r0, #45	; 0x2d
 8001038:	f000 fe3c 	bl	8001cb4 <servo1_control>
	  for(uint32_t i = 0; i < 500000; i++);
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	e002      	b.n	8001048 <main+0xe0>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	4a27      	ldr	r2, [pc, #156]	; (80010e8 <main+0x180>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d9f8      	bls.n	8001042 <main+0xda>
	  servo1_control(90);
 8001050:	205a      	movs	r0, #90	; 0x5a
 8001052:	f000 fe2f 	bl	8001cb4 <servo1_control>
	  for(uint32_t i = 0; i < 500000; i++);
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	e002      	b.n	8001062 <main+0xfa>
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	3301      	adds	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <main+0x180>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d9f8      	bls.n	800105c <main+0xf4>
	  servo1_control(135);
 800106a:	2087      	movs	r0, #135	; 0x87
 800106c:	f000 fe22 	bl	8001cb4 <servo1_control>
	  for(uint32_t i = 0; i < 500000; i++);
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e002      	b.n	800107c <main+0x114>
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	4a1a      	ldr	r2, [pc, #104]	; (80010e8 <main+0x180>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d9f8      	bls.n	8001076 <main+0x10e>
	  servo1_control(180);
 8001084:	20b4      	movs	r0, #180	; 0xb4
 8001086:	f000 fe15 	bl	8001cb4 <servo1_control>
	  for(uint32_t i = 0; i < 500000; i++);
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	e002      	b.n	8001096 <main+0x12e>
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	3301      	adds	r3, #1
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <main+0x180>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d9f8      	bls.n	8001090 <main+0x128>
	  servo1_control(90);
 800109e:	205a      	movs	r0, #90	; 0x5a
 80010a0:	f000 fe08 	bl	8001cb4 <servo1_control>
	  for(uint32_t i = 0; i < 500000; i++);
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e002      	b.n	80010b0 <main+0x148>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <main+0x180>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d9f8      	bls.n	80010aa <main+0x142>
	  servo1_control(0);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 fdfb 	bl	8001cb4 <servo1_control>
	  for(uint32_t i = 0; i < 500000; i++);
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	e002      	b.n	80010ca <main+0x162>
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <main+0x180>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d9f8      	bls.n	80010c4 <main+0x15c>
	  servo1_control(45);
 80010d2:	e7b0      	b.n	8001036 <main+0xce>
 80010d4:	20000104 	.word	0x20000104
 80010d8:	2000014c 	.word	0x2000014c
 80010dc:	20000194 	.word	0x20000194
 80010e0:	20000028 	.word	0x20000028
 80010e4:	48000800 	.word	0x48000800
 80010e8:	0007a11f 	.word	0x0007a11f

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b099      	sub	sp, #100	; 0x64
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	242c      	movs	r4, #44	; 0x2c
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	0018      	movs	r0, r3
 80010f8:	2334      	movs	r3, #52	; 0x34
 80010fa:	001a      	movs	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	f005 fd25 	bl	8006b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001102:	231c      	movs	r3, #28
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	0018      	movs	r0, r3
 8001108:	2310      	movs	r3, #16
 800110a:	001a      	movs	r2, r3
 800110c:	2100      	movs	r1, #0
 800110e:	f005 fd1d 	bl	8006b4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001112:	003b      	movs	r3, r7
 8001114:	0018      	movs	r0, r3
 8001116:	231c      	movs	r3, #28
 8001118:	001a      	movs	r2, r3
 800111a:	2100      	movs	r1, #0
 800111c:	f005 fd16 	bl	8006b4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	0021      	movs	r1, r4
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2202      	movs	r2, #2
 8001126:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2201      	movs	r2, #1
 800112c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2210      	movs	r2, #16
 8001132:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	187b      	adds	r3, r7, r1
 800113c:	0018      	movs	r0, r3
 800113e:	f002 fe8d 	bl	8003e5c <HAL_RCC_OscConfig>
 8001142:	1e03      	subs	r3, r0, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001146:	f000 fabb 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	211c      	movs	r1, #28
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2207      	movs	r2, #7
 8001150:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2100      	movs	r1, #0
 8001168:	0018      	movs	r0, r3
 800116a:	f003 f9fd 	bl	8004568 <HAL_RCC_ClockConfig>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001172:	f000 faa5 	bl	80016c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001176:	003b      	movs	r3, r7
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800117c:	003b      	movs	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001182:	003b      	movs	r3, r7
 8001184:	0018      	movs	r0, r3
 8001186:	f003 fb5b 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800118e:	f000 fa97 	bl	80016c0 <Error_Handler>
  }
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b019      	add	sp, #100	; 0x64
 8001198:	bd90      	pop	{r4, r7, pc}
	...

0800119c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_I2C2_Init+0x74>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <MX_I2C2_Init+0x78>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00101D37;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_I2C2_Init+0x74>)
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <MX_I2C2_Init+0x7c>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_I2C2_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_I2C2_Init+0x74>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_I2C2_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_I2C2_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C2_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_I2C2_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_I2C2_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_I2C2_Init+0x74>)
 80011d8:	0018      	movs	r0, r3
 80011da:	f001 fa57 	bl	800268c <HAL_I2C_Init>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011e2:	f000 fa6d 	bl	80016c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_I2C2_Init+0x74>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	0018      	movs	r0, r3
 80011ec:	f002 fd9e 	bl	8003d2c <HAL_I2CEx_ConfigAnalogFilter>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011f4:	f000 fa64 	bl	80016c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <MX_I2C2_Init+0x74>)
 80011fa:	2100      	movs	r1, #0
 80011fc:	0018      	movs	r0, r3
 80011fe:	f002 fde1 	bl	8003dc4 <HAL_I2CEx_ConfigDigitalFilter>
 8001202:	1e03      	subs	r3, r0, #0
 8001204:	d001      	beq.n	800120a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 fa5b 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000028 	.word	0x20000028
 8001214:	40005800 	.word	0x40005800
 8001218:	00101d37 	.word	0x00101d37

0800121c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	2328      	movs	r3, #40	; 0x28
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	0018      	movs	r0, r3
 8001228:	2310      	movs	r3, #16
 800122a:	001a      	movs	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	f005 fc8d 	bl	8006b4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	2320      	movs	r3, #32
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	0018      	movs	r0, r3
 8001238:	2308      	movs	r3, #8
 800123a:	001a      	movs	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	f005 fc85 	bl	8006b4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	0018      	movs	r0, r3
 8001246:	231c      	movs	r3, #28
 8001248:	001a      	movs	r2, r3
 800124a:	2100      	movs	r1, #0
 800124c:	f005 fc7e 	bl	8006b4c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001250:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <MX_TIM2_Init+0x134>)
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	05d2      	lsls	r2, r2, #23
 8001256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <MX_TIM2_Init+0x134>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <MX_TIM2_Init+0x134>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 106;
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <MX_TIM2_Init+0x134>)
 8001266:	226a      	movs	r2, #106	; 0x6a
 8001268:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b39      	ldr	r3, [pc, #228]	; (8001350 <MX_TIM2_Init+0x134>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b37      	ldr	r3, [pc, #220]	; (8001350 <MX_TIM2_Init+0x134>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <MX_TIM2_Init+0x134>)
 8001278:	0018      	movs	r0, r3
 800127a:	f003 fbe1 	bl	8004a40 <HAL_TIM_Base_Init>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001282:	f000 fa1d 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	2128      	movs	r1, #40	; 0x28
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	0152      	lsls	r2, r2, #5
 800128e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001290:	187a      	adds	r2, r7, r1
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <MX_TIM2_Init+0x134>)
 8001294:	0011      	movs	r1, r2
 8001296:	0018      	movs	r0, r3
 8001298:	f004 f810 	bl	80052bc <HAL_TIM_ConfigClockSource>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80012a0:	f000 fa0e 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <MX_TIM2_Init+0x134>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f003 fcc4 	bl	8004c34 <HAL_TIM_PWM_Init>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80012b0:	f000 fa06 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2120      	movs	r1, #32
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c2:	187a      	adds	r2, r7, r1
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <MX_TIM2_Init+0x134>)
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f004 fc25 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80012d2:	f000 f9f5 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2260      	movs	r2, #96	; 0x60
 80012da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	1d39      	adds	r1, r7, #4
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_TIM2_Init+0x134>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	0018      	movs	r0, r3
 80012f6:	f003 ff1b 	bl	8005130 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80012fe:	f000 f9df 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001302:	1d39      	adds	r1, r7, #4
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_TIM2_Init+0x134>)
 8001306:	2204      	movs	r2, #4
 8001308:	0018      	movs	r0, r3
 800130a:	f003 ff11 	bl	8005130 <HAL_TIM_PWM_ConfigChannel>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001312:	f000 f9d5 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001316:	1d39      	adds	r1, r7, #4
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_TIM2_Init+0x134>)
 800131a:	2208      	movs	r2, #8
 800131c:	0018      	movs	r0, r3
 800131e:	f003 ff07 	bl	8005130 <HAL_TIM_PWM_ConfigChannel>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8001326:	f000 f9cb 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800132a:	1d39      	adds	r1, r7, #4
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_TIM2_Init+0x134>)
 800132e:	220c      	movs	r2, #12
 8001330:	0018      	movs	r0, r3
 8001332:	f003 fefd 	bl	8005130 <HAL_TIM_PWM_ConfigChannel>
 8001336:	1e03      	subs	r3, r0, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 800133a:	f000 f9c1 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <MX_TIM2_Init+0x134>)
 8001340:	0018      	movs	r0, r3
 8001342:	f000 fb09 	bl	8001958 <HAL_TIM_MspPostInit>

}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b00e      	add	sp, #56	; 0x38
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000104 	.word	0x20000104

08001354 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	2328      	movs	r3, #40	; 0x28
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	0018      	movs	r0, r3
 8001360:	2310      	movs	r3, #16
 8001362:	001a      	movs	r2, r3
 8001364:	2100      	movs	r1, #0
 8001366:	f005 fbf1 	bl	8006b4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	2320      	movs	r3, #32
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	0018      	movs	r0, r3
 8001370:	2308      	movs	r3, #8
 8001372:	001a      	movs	r2, r3
 8001374:	2100      	movs	r1, #0
 8001376:	f005 fbe9 	bl	8006b4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	0018      	movs	r0, r3
 800137e:	231c      	movs	r3, #28
 8001380:	001a      	movs	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	f005 fbe2 	bl	8006b4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001388:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MX_TIM3_Init+0x120>)
 800138a:	4a3b      	ldr	r2, [pc, #236]	; (8001478 <MX_TIM3_Init+0x124>)
 800138c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <MX_TIM3_Init+0x120>)
 8001390:	2207      	movs	r2, #7
 8001392:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <MX_TIM3_Init+0x120>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_TIM3_Init+0x120>)
 800139c:	4a37      	ldr	r2, [pc, #220]	; (800147c <MX_TIM3_Init+0x128>)
 800139e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <MX_TIM3_Init+0x120>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_TIM3_Init+0x120>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <MX_TIM3_Init+0x120>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f003 fb46 	bl	8004a40 <HAL_TIM_Base_Init>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013b8:	f000 f982 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	2128      	movs	r1, #40	; 0x28
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	0152      	lsls	r2, r2, #5
 80013c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013c6:	187a      	adds	r2, r7, r1
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <MX_TIM3_Init+0x120>)
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f003 ff75 	bl	80052bc <HAL_TIM_ConfigClockSource>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80013d6:	f000 f973 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <MX_TIM3_Init+0x120>)
 80013dc:	0018      	movs	r0, r3
 80013de:	f003 fc29 	bl	8004c34 <HAL_TIM_PWM_Init>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013e6:	f000 f96b 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_TIM3_Init+0x120>)
 80013ec:	0018      	movs	r0, r3
 80013ee:	f003 fbc9 	bl	8004b84 <HAL_TIM_OC_Init>
 80013f2:	1e03      	subs	r3, r0, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80013f6:	f000 f963 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2120      	movs	r1, #32
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2200      	movs	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001408:	187a      	adds	r2, r7, r1
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_TIM3_Init+0x120>)
 800140c:	0011      	movs	r1, r2
 800140e:	0018      	movs	r0, r3
 8001410:	f004 fb82 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001418:	f000 f952 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2260      	movs	r2, #96	; 0x60
 8001420:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001434:	1d39      	adds	r1, r7, #4
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_TIM3_Init+0x120>)
 8001438:	2200      	movs	r2, #0
 800143a:	0018      	movs	r0, r3
 800143c:	f003 fe78 	bl	8005130 <HAL_TIM_PWM_ConfigChannel>
 8001440:	1e03      	subs	r3, r0, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8001444:	f000 f93c 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800144e:	1d39      	adds	r1, r7, #4
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_TIM3_Init+0x120>)
 8001452:	2204      	movs	r2, #4
 8001454:	0018      	movs	r0, r3
 8001456:	f003 fe13 	bl	8005080 <HAL_TIM_OC_ConfigChannel>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 800145e:	f000 f92f 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <MX_TIM3_Init+0x120>)
 8001464:	0018      	movs	r0, r3
 8001466:	f000 fa77 	bl	8001958 <HAL_TIM_MspPostInit>

}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b00e      	add	sp, #56	; 0x38
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	2000014c 	.word	0x2000014c
 8001478:	40000400 	.word	0x40000400
 800147c:	00004e1f 	.word	0x00004e1f

08001480 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001486:	003b      	movs	r3, r7
 8001488:	0018      	movs	r0, r3
 800148a:	2308      	movs	r3, #8
 800148c:	001a      	movs	r2, r3
 800148e:	2100      	movs	r1, #0
 8001490:	f005 fb5c 	bl	8006b4c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_TIM6_Init+0x6c>)
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <MX_TIM6_Init+0x70>)
 8001498:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_TIM6_Init+0x6c>)
 800149c:	2207      	movs	r2, #7
 800149e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_TIM6_Init+0x6c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1947;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_TIM6_Init+0x6c>)
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <MX_TIM6_Init+0x74>)
 80014aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_TIM6_Init+0x6c>)
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_TIM6_Init+0x6c>)
 80014b4:	0018      	movs	r0, r3
 80014b6:	f003 fac3 	bl	8004a40 <HAL_TIM_Base_Init>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80014be:	f000 f8ff 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	003b      	movs	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	003b      	movs	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014ce:	003a      	movs	r2, r7
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_TIM6_Init+0x6c>)
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f004 fb1f 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80014de:	f000 f8ef 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	20000194 	.word	0x20000194
 80014f0:	40001000 	.word	0x40001000
 80014f4:	0000079b 	.word	0x0000079b

080014f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_USART1_UART_Init+0x58>)
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <MX_USART1_UART_Init+0x5c>)
 8001500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_USART1_UART_Init+0x58>)
 8001504:	22e1      	movs	r2, #225	; 0xe1
 8001506:	0252      	lsls	r2, r2, #9
 8001508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_USART1_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_USART1_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_USART1_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_USART1_UART_Init+0x58>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_USART1_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_USART1_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_USART1_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_USART1_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <MX_USART1_UART_Init+0x58>)
 800153c:	0018      	movs	r0, r3
 800153e:	f004 fb59 	bl	8005bf4 <HAL_UART_Init>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d001      	beq.n	800154a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001546:	f000 f8bb 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200001dc 	.word	0x200001dc
 8001554:	40013800 	.word	0x40013800

08001558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_DMA_Init+0x58>)
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_DMA_Init+0x58>)
 8001564:	2101      	movs	r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_DMA_Init+0x58>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2201      	movs	r2, #1
 8001570:	4013      	ands	r3, r2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2009      	movs	r0, #9
 800157c:	f000 fd10 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8001580:	2009      	movs	r0, #9
 8001582:	f000 fd22 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	200a      	movs	r0, #10
 800158c:	f000 fd08 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8001590:	200a      	movs	r0, #10
 8001592:	f000 fd1a 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	200b      	movs	r0, #11
 800159c:	f000 fd00 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80015a0:	200b      	movs	r0, #11
 80015a2:	f000 fd12 	bl	8001fca <HAL_NVIC_EnableIRQ>

}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b002      	add	sp, #8
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b08b      	sub	sp, #44	; 0x2c
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	2414      	movs	r4, #20
 80015bc:	193b      	adds	r3, r7, r4
 80015be:	0018      	movs	r0, r3
 80015c0:	2314      	movs	r3, #20
 80015c2:	001a      	movs	r2, r3
 80015c4:	2100      	movs	r1, #0
 80015c6:	f005 fac1 	bl	8006b4c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <MX_GPIO_Init+0xf4>)
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <MX_GPIO_Init+0xf4>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	03c9      	lsls	r1, r1, #15
 80015d4:	430a      	orrs	r2, r1
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <MX_GPIO_Init+0xf4>)
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	03db      	lsls	r3, r3, #15
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <MX_GPIO_Init+0xf4>)
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <MX_GPIO_Init+0xf4>)
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	0309      	lsls	r1, r1, #12
 80015f0:	430a      	orrs	r2, r1
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <MX_GPIO_Init+0xf4>)
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	031b      	lsls	r3, r3, #12
 80015fc:	4013      	ands	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_GPIO_Init+0xf4>)
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <MX_GPIO_Init+0xf4>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0289      	lsls	r1, r1, #10
 800160c:	430a      	orrs	r2, r1
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <MX_GPIO_Init+0xf4>)
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_GPIO_Init+0xf4>)
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_GPIO_Init+0xf4>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	02c9      	lsls	r1, r1, #11
 8001628:	430a      	orrs	r2, r1
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_GPIO_Init+0xf4>)
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	02db      	lsls	r3, r3, #11
 8001634:	4013      	ands	r3, r2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_GPIO_Init+0xf8>)
 800163c:	2200      	movs	r2, #0
 800163e:	213f      	movs	r1, #63	; 0x3f
 8001640:	0018      	movs	r0, r3
 8001642:	f001 f805 	bl	8002650 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001646:	2390      	movs	r3, #144	; 0x90
 8001648:	05db      	lsls	r3, r3, #23
 800164a:	2200      	movs	r2, #0
 800164c:	2130      	movs	r1, #48	; 0x30
 800164e:	0018      	movs	r0, r3
 8001650:	f000 fffe 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001654:	193b      	adds	r3, r7, r4
 8001656:	223f      	movs	r2, #63	; 0x3f
 8001658:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	193b      	adds	r3, r7, r4
 800165c:	2201      	movs	r2, #1
 800165e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	193b      	adds	r3, r7, r4
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	193b      	adds	r3, r7, r4
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166c:	193b      	adds	r3, r7, r4
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <MX_GPIO_Init+0xf8>)
 8001670:	0019      	movs	r1, r3
 8001672:	0010      	movs	r0, r2
 8001674:	f000 fe74 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001678:	0021      	movs	r1, r4
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2230      	movs	r2, #48	; 0x30
 800167e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2201      	movs	r2, #1
 8001684:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	187b      	adds	r3, r7, r1
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	187a      	adds	r2, r7, r1
 8001694:	2390      	movs	r3, #144	; 0x90
 8001696:	05db      	lsls	r3, r3, #23
 8001698:	0011      	movs	r1, r2
 800169a:	0018      	movs	r0, r3
 800169c:	f000 fe60 	bl	8002360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b00b      	add	sp, #44	; 0x2c
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48000800 	.word	0x48000800

080016b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	int16_t gyroDataZ = (int16_t)((gyroData[5] << 8) | gyroData[4]); // Z-axis

	int16_t accelDataX = (int16_t)((accelData[1] << 8) | accelData[0]); // X-axis
	int16_t accelDataY = (int16_t)((accelData[3] << 8) | accelData[2]); // Y-axis
	int16_t accelDataZ = (int16_t)((accelData[5] << 8) | accelData[4]); // Z-axis*/
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x44>)
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_MspInit+0x44>)
 80016d8:	2101      	movs	r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	619a      	str	r2, [r3, #24]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x44>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2201      	movs	r2, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x44>)
 80016ec:	69da      	ldr	r2, [r3, #28]
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_MspInit+0x44>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0549      	lsls	r1, r1, #21
 80016f4:	430a      	orrs	r2, r1
 80016f6:	61da      	str	r2, [r3, #28]
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_MspInit+0x44>)
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	055b      	lsls	r3, r3, #21
 8001700:	4013      	ands	r3, r2
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b08b      	sub	sp, #44	; 0x2c
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	2414      	movs	r4, #20
 800171e:	193b      	adds	r3, r7, r4
 8001720:	0018      	movs	r0, r3
 8001722:	2314      	movs	r3, #20
 8001724:	001a      	movs	r2, r3
 8001726:	2100      	movs	r1, #0
 8001728:	f005 fa10 	bl	8006b4c <memset>
  if(hi2c->Instance==I2C2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a59      	ldr	r2, [pc, #356]	; (8001898 <HAL_I2C_MspInit+0x184>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d000      	beq.n	8001738 <HAL_I2C_MspInit+0x24>
 8001736:	e0aa      	b.n	800188e <HAL_I2C_MspInit+0x17a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b58      	ldr	r3, [pc, #352]	; (800189c <HAL_I2C_MspInit+0x188>)
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	4b57      	ldr	r3, [pc, #348]	; (800189c <HAL_I2C_MspInit+0x188>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	02c9      	lsls	r1, r1, #11
 8001742:	430a      	orrs	r2, r1
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_I2C_MspInit+0x188>)
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	02db      	lsls	r3, r3, #11
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001754:	193b      	adds	r3, r7, r4
 8001756:	22c0      	movs	r2, #192	; 0xc0
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175c:	0021      	movs	r1, r4
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2212      	movs	r2, #18
 8001762:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	187b      	adds	r3, r7, r1
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2203      	movs	r2, #3
 800176e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2201      	movs	r2, #1
 8001774:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001776:	187b      	adds	r3, r7, r1
 8001778:	4a49      	ldr	r2, [pc, #292]	; (80018a0 <HAL_I2C_MspInit+0x18c>)
 800177a:	0019      	movs	r1, r3
 800177c:	0010      	movs	r0, r2
 800177e:	f000 fdef 	bl	8002360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001782:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_I2C_MspInit+0x188>)
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	4b45      	ldr	r3, [pc, #276]	; (800189c <HAL_I2C_MspInit+0x188>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	03c9      	lsls	r1, r1, #15
 800178c:	430a      	orrs	r2, r1
 800178e:	61da      	str	r2, [r3, #28]
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_I2C_MspInit+0x188>)
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	03db      	lsls	r3, r3, #15
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 80017a0:	4a41      	ldr	r2, [pc, #260]	; (80018a8 <HAL_I2C_MspInit+0x194>)
 80017a2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b0:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	0192      	lsls	r2, r2, #6
 80017ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80017d0:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 fc16 	bl	8002004 <HAL_DMA_Init>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80017dc:	f7ff ff70 	bl	80016c0 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH5_I2C2_RX);
 80017e0:	4a32      	ldr	r2, [pc, #200]	; (80018ac <HAL_I2C_MspInit+0x198>)
 80017e2:	23a8      	movs	r3, #168	; 0xa8
 80017e4:	58d3      	ldr	r3, [r2, r3]
 80017e6:	4931      	ldr	r1, [pc, #196]	; (80018ac <HAL_I2C_MspInit+0x198>)
 80017e8:	4a31      	ldr	r2, [pc, #196]	; (80018b0 <HAL_I2C_MspInit+0x19c>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	22a8      	movs	r2, #168	; 0xa8
 80017ee:	508b      	str	r3, [r1, r2]
 80017f0:	4a2e      	ldr	r2, [pc, #184]	; (80018ac <HAL_I2C_MspInit+0x198>)
 80017f2:	23a8      	movs	r3, #168	; 0xa8
 80017f4:	58d3      	ldr	r3, [r2, r3]
 80017f6:	492d      	ldr	r1, [pc, #180]	; (80018ac <HAL_I2C_MspInit+0x198>)
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	0292      	lsls	r2, r2, #10
 80017fc:	4313      	orrs	r3, r2
 80017fe:	22a8      	movs	r2, #168	; 0xa8
 8001800:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_I2C_MspInit+0x190>)
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800180e:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 8001810:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <HAL_I2C_MspInit+0x1a4>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 8001816:	2210      	movs	r2, #16
 8001818:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	0192      	lsls	r2, r2, #6
 800183e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 8001842:	0018      	movs	r0, r3
 8001844:	f000 fbde 	bl	8002004 <HAL_DMA_Init>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 800184c:	f7ff ff38 	bl	80016c0 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_I2C2_TX);
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <HAL_I2C_MspInit+0x198>)
 8001852:	23a8      	movs	r3, #168	; 0xa8
 8001854:	58d3      	ldr	r3, [r2, r3]
 8001856:	4915      	ldr	r1, [pc, #84]	; (80018ac <HAL_I2C_MspInit+0x198>)
 8001858:	4a18      	ldr	r2, [pc, #96]	; (80018bc <HAL_I2C_MspInit+0x1a8>)
 800185a:	4013      	ands	r3, r2
 800185c:	22a8      	movs	r2, #168	; 0xa8
 800185e:	508b      	str	r3, [r1, r2]
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_I2C_MspInit+0x198>)
 8001862:	23a8      	movs	r3, #168	; 0xa8
 8001864:	58d3      	ldr	r3, [r2, r3]
 8001866:	4911      	ldr	r1, [pc, #68]	; (80018ac <HAL_I2C_MspInit+0x198>)
 8001868:	2280      	movs	r2, #128	; 0x80
 800186a:	0192      	lsls	r2, r2, #6
 800186c:	4313      	orrs	r3, r2
 800186e:	22a8      	movs	r2, #168	; 0xa8
 8001870:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_I2C_MspInit+0x1a0>)
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2018      	movs	r0, #24
 8001884:	f000 fb8c 	bl	8001fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8001888:	2018      	movs	r0, #24
 800188a:	f000 fb9e 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b00b      	add	sp, #44	; 0x2c
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	40005800 	.word	0x40005800
 800189c:	40021000 	.word	0x40021000
 80018a0:	48000400 	.word	0x48000400
 80018a4:	2000007c 	.word	0x2000007c
 80018a8:	40020058 	.word	0x40020058
 80018ac:	40020000 	.word	0x40020000
 80018b0:	fff0ffff 	.word	0xfff0ffff
 80018b4:	200000c0 	.word	0x200000c0
 80018b8:	40020044 	.word	0x40020044
 80018bc:	ffff0fff 	.word	0xffff0fff

080018c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	05db      	lsls	r3, r3, #23
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d10c      	bne.n	80018ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 80018da:	2101      	movs	r1, #1
 80018dc:	430a      	orrs	r2, r1
 80018de:	61da      	str	r2, [r3, #28]
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4013      	ands	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018ec:	e02a      	b.n	8001944 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_TIM_Base_MspInit+0x90>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d10c      	bne.n	8001912 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 80018fe:	2102      	movs	r1, #2
 8001900:	430a      	orrs	r2, r1
 8001902:	61da      	str	r2, [r3, #28]
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
}
 8001910:	e018      	b.n	8001944 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM6)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_TIM_Base_MspInit+0x94>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d113      	bne.n	8001944 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 800191e:	69da      	ldr	r2, [r3, #28]
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 8001922:	2110      	movs	r1, #16
 8001924:	430a      	orrs	r2, r1
 8001926:	61da      	str	r2, [r3, #28]
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_TIM_Base_MspInit+0x8c>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2210      	movs	r2, #16
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2011      	movs	r0, #17
 800193a:	f000 fb31 	bl	8001fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800193e:	2011      	movs	r0, #17
 8001940:	f000 fb43 	bl	8001fca <HAL_NVIC_EnableIRQ>
}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b006      	add	sp, #24
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	40000400 	.word	0x40000400
 8001954:	40001000 	.word	0x40001000

08001958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b08b      	sub	sp, #44	; 0x2c
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	2414      	movs	r4, #20
 8001962:	193b      	adds	r3, r7, r4
 8001964:	0018      	movs	r0, r3
 8001966:	2314      	movs	r3, #20
 8001968:	001a      	movs	r2, r3
 800196a:	2100      	movs	r1, #0
 800196c:	f005 f8ee 	bl	8006b4c <memset>
  if(htim->Instance==TIM2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	05db      	lsls	r3, r3, #23
 8001978:	429a      	cmp	r2, r3
 800197a:	d125      	bne.n	80019c8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_TIM_MspPostInit+0xcc>)
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <HAL_TIM_MspPostInit+0xcc>)
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	0289      	lsls	r1, r1, #10
 8001986:	430a      	orrs	r2, r1
 8001988:	615a      	str	r2, [r3, #20]
 800198a:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <HAL_TIM_MspPostInit+0xcc>)
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001998:	0021      	movs	r1, r4
 800199a:	187b      	adds	r3, r7, r1
 800199c:	220f      	movs	r2, #15
 800199e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	2202      	movs	r2, #2
 80019a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2202      	movs	r2, #2
 80019b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	187a      	adds	r2, r7, r1
 80019ba:	2390      	movs	r3, #144	; 0x90
 80019bc:	05db      	lsls	r3, r3, #23
 80019be:	0011      	movs	r1, r2
 80019c0:	0018      	movs	r0, r3
 80019c2:	f000 fccd 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019c6:	e029      	b.n	8001a1c <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM3)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_TIM_MspPostInit+0xd0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d124      	bne.n	8001a1c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_TIM_MspPostInit+0xcc>)
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_TIM_MspPostInit+0xcc>)
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	0289      	lsls	r1, r1, #10
 80019dc:	430a      	orrs	r2, r1
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_TIM_MspPostInit+0xcc>)
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	029b      	lsls	r3, r3, #10
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ee:	2114      	movs	r1, #20
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	22c0      	movs	r2, #192	; 0xc0
 80019f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2202      	movs	r2, #2
 80019fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	187a      	adds	r2, r7, r1
 8001a10:	2390      	movs	r3, #144	; 0x90
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 fca2 	bl	8002360 <HAL_GPIO_Init>
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b00b      	add	sp, #44	; 0x2c
 8001a22:	bd90      	pop	{r4, r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40000400 	.word	0x40000400

08001a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b08b      	sub	sp, #44	; 0x2c
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	2414      	movs	r4, #20
 8001a36:	193b      	adds	r3, r7, r4
 8001a38:	0018      	movs	r0, r3
 8001a3a:	2314      	movs	r3, #20
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	2100      	movs	r1, #0
 8001a40:	f005 f884 	bl	8006b4c <memset>
  if(huart->Instance==USART1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a57      	ldr	r2, [pc, #348]	; (8001ba8 <HAL_UART_MspInit+0x17c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d000      	beq.n	8001a50 <HAL_UART_MspInit+0x24>
 8001a4e:	e0a7      	b.n	8001ba0 <HAL_UART_MspInit+0x174>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a50:	4b56      	ldr	r3, [pc, #344]	; (8001bac <HAL_UART_MspInit+0x180>)
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	4b55      	ldr	r3, [pc, #340]	; (8001bac <HAL_UART_MspInit+0x180>)
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	01c9      	lsls	r1, r1, #7
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	619a      	str	r2, [r3, #24]
 8001a5e:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_UART_MspInit+0x180>)
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	01db      	lsls	r3, r3, #7
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <HAL_UART_MspInit+0x180>)
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_UART_MspInit+0x180>)
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	0289      	lsls	r1, r1, #10
 8001a76:	430a      	orrs	r2, r1
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_UART_MspInit+0x180>)
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	029b      	lsls	r3, r3, #10
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a88:	193b      	adds	r3, r7, r4
 8001a8a:	22c0      	movs	r2, #192	; 0xc0
 8001a8c:	00d2      	lsls	r2, r2, #3
 8001a8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	0021      	movs	r1, r4
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2202      	movs	r2, #2
 8001a96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	187a      	adds	r2, r7, r1
 8001aac:	2390      	movs	r3, #144	; 0x90
 8001aae:	05db      	lsls	r3, r3, #23
 8001ab0:	0011      	movs	r1, r2
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f000 fc54 	bl	8002360 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001aba:	4a3e      	ldr	r2, [pc, #248]	; (8001bb4 <HAL_UART_MspInit+0x188>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad0:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad6:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001adc:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001ade:	2220      	movs	r2, #32
 8001ae0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001aea:	0018      	movs	r0, r3
 8001aec:	f000 fa8a 	bl	8002004 <HAL_DMA_Init>
 8001af0:	1e03      	subs	r3, r0, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001af4:	f7ff fde4 	bl	80016c0 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8001af8:	4a2f      	ldr	r2, [pc, #188]	; (8001bb8 <HAL_UART_MspInit+0x18c>)
 8001afa:	23a8      	movs	r3, #168	; 0xa8
 8001afc:	58d3      	ldr	r3, [r2, r3]
 8001afe:	492e      	ldr	r1, [pc, #184]	; (8001bb8 <HAL_UART_MspInit+0x18c>)
 8001b00:	220f      	movs	r2, #15
 8001b02:	4393      	bics	r3, r2
 8001b04:	22a8      	movs	r2, #168	; 0xa8
 8001b06:	508b      	str	r3, [r1, r2]
 8001b08:	4a2b      	ldr	r2, [pc, #172]	; (8001bb8 <HAL_UART_MspInit+0x18c>)
 8001b0a:	23a8      	movs	r3, #168	; 0xa8
 8001b0c:	58d3      	ldr	r3, [r2, r3]
 8001b0e:	492a      	ldr	r1, [pc, #168]	; (8001bb8 <HAL_UART_MspInit+0x18c>)
 8001b10:	2208      	movs	r2, #8
 8001b12:	4313      	orrs	r3, r2
 8001b14:	22a8      	movs	r2, #168	; 0xa8
 8001b16:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001b1c:	675a      	str	r2, [r3, #116]	; 0x74
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_UART_MspInit+0x184>)
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b26:	4a26      	ldr	r2, [pc, #152]	; (8001bc0 <HAL_UART_MspInit+0x194>)
 8001b28:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b48:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fa54 	bl	8002004 <HAL_DMA_Init>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001b60:	f7ff fdae 	bl	80016c0 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_UART_MspInit+0x18c>)
 8001b66:	23a8      	movs	r3, #168	; 0xa8
 8001b68:	58d3      	ldr	r3, [r2, r3]
 8001b6a:	4913      	ldr	r1, [pc, #76]	; (8001bb8 <HAL_UART_MspInit+0x18c>)
 8001b6c:	22f0      	movs	r2, #240	; 0xf0
 8001b6e:	4393      	bics	r3, r2
 8001b70:	22a8      	movs	r2, #168	; 0xa8
 8001b72:	508b      	str	r3, [r1, r2]
 8001b74:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_UART_MspInit+0x18c>)
 8001b76:	23a8      	movs	r3, #168	; 0xa8
 8001b78:	58d3      	ldr	r3, [r2, r3]
 8001b7a:	490f      	ldr	r1, [pc, #60]	; (8001bb8 <HAL_UART_MspInit+0x18c>)
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	22a8      	movs	r2, #168	; 0xa8
 8001b82:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b88:	671a      	str	r2, [r3, #112]	; 0x70
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_UART_MspInit+0x190>)
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	201b      	movs	r0, #27
 8001b96:	f000 fa03 	bl	8001fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b9a:	201b      	movs	r0, #27
 8001b9c:	f000 fa15 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b00b      	add	sp, #44	; 0x2c
 8001ba6:	bd90      	pop	{r4, r7, pc}
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	20000264 	.word	0x20000264
 8001bb4:	40020008 	.word	0x40020008
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	200002a8 	.word	0x200002a8
 8001bc0:	4002001c 	.word	0x4002001c

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 f912 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <DMA1_Ch1_IRQHandler+0x14>)
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 fac7 	bl	800218e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	20000264 	.word	0x20000264

08001c0c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fabb 	bl	800218e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	200002a8 	.word	0x200002a8

08001c24 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x1c>)
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 faaf 	bl	800218e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x20>)
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 faab 	bl	800218e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	200000c0 	.word	0x200000c0
 8001c44:	2000007c 	.word	0x2000007c

08001c48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <TIM6_DAC_IRQHandler+0x14>)
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f003 f900 	bl	8004e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	20000194 	.word	0x20000194

08001c60 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <I2C2_IRQHandler+0x2c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	23e0      	movs	r3, #224	; 0xe0
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d004      	beq.n	8001c7c <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <I2C2_IRQHandler+0x2c>)
 8001c74:	0018      	movs	r0, r3
 8001c76:	f001 f801 	bl	8002c7c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8001c7a:	e003      	b.n	8001c84 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <I2C2_IRQHandler+0x2c>)
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 ffe2 	bl	8002c48 <HAL_I2C_EV_IRQHandler>
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	20000028 	.word	0x20000028

08001c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <USART1_IRQHandler+0x14>)
 8001c96:	0018      	movs	r0, r3
 8001c98:	f004 f800 	bl	8005c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	200001dc 	.word	0x200001dc

08001ca8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <servo1_control>:
#include "servo_proc.h"

void servo1_control(int angle)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	if(angle >= 0 && angle <= 180)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db09      	blt.n	8001cd6 <servo1_control+0x22>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2bb4      	cmp	r3, #180	; 0xb4
 8001cc6:	dc06      	bgt.n	8001cd6 <servo1_control+0x22>
	{
		TIM3->CCR1 = servo_angle(angle);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 f80a 	bl	8001ce4 <servo_angle>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <servo1_control+0x2c>)
 8001cd4:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <servo_angle>:
		TIM3->CCR2 = servo_angle(angle);
	}
}

int servo_angle(int angle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	return (angle * (1000.0 / 90) + 500);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff f8ed 	bl	8000ecc <__aeabi_i2d>
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <servo_angle+0x3c>)
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <servo_angle+0x40>)
 8001cf6:	f7fe fdf1 	bl	80008dc <__aeabi_dmul>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	000b      	movs	r3, r1
 8001cfe:	0010      	movs	r0, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	2200      	movs	r2, #0
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <servo_angle+0x44>)
 8001d06:	f7fe fa89 	bl	800021c <__aeabi_dadd>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	0010      	movs	r0, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	f7ff f8a5 	bl	8000e60 <__aeabi_d2iz>
 8001d16:	0003      	movs	r3, r0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	8e38e38e 	.word	0x8e38e38e
 8001d24:	402638e3 	.word	0x402638e3
 8001d28:	407f4000 	.word	0x407f4000

08001d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d30:	f7ff ffba 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	; (8001d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <LoopForever+0xe>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	; (8001d78 <LoopForever+0x16>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d5a:	f004 feff 	bl	8006b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5e:	f7ff f903 	bl	8000f68 <main>

08001d62 <LoopForever>:

LoopForever:
    b LoopForever
 8001d62:	e7fe      	b.n	8001d62 <LoopForever>
  ldr   r0, =_estack
 8001d64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d70:	08006bfc 	.word	0x08006bfc
  ldr r2, =_sbss
 8001d74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d78:	200002f0 	.word	0x200002f0

08001d7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_COMP_IRQHandler>
	...

08001d80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_Init+0x24>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_Init+0x24>)
 8001d8a:	2110      	movs	r1, #16
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f809 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d96:	f7ff fc99 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	40022000 	.word	0x40022000

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_InitTick+0x5c>)
 8001db2:	681c      	ldr	r4, [r3, #0]
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_InitTick+0x60>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	0019      	movs	r1, r3
 8001dba:	23fa      	movs	r3, #250	; 0xfa
 8001dbc:	0098      	lsls	r0, r3, #2
 8001dbe:	f7fe f9a1 	bl	8000104 <__udivsi3>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	0020      	movs	r0, r4
 8001dc8:	f7fe f99c 	bl	8000104 <__udivsi3>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 f90b 	bl	8001fea <HAL_SYSTICK_Config>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e00f      	b.n	8001dfc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d80b      	bhi.n	8001dfa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	2301      	movs	r3, #1
 8001de6:	425b      	negs	r3, r3
 8001de8:	2200      	movs	r2, #0
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f8d8 	bl	8001fa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_InitTick+0x64>)
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b003      	add	sp, #12
 8001e02:	bd90      	pop	{r4, r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_IncTick+0x1c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	001a      	movs	r2, r3
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_IncTick+0x20>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	18d2      	adds	r2, r2, r3
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_IncTick+0x20>)
 8001e22:	601a      	str	r2, [r3, #0]
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	200002ec 	.word	0x200002ec

08001e34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <HAL_GetTick+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	200002ec 	.word	0x200002ec

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	0002      	movs	r2, r0
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	1dfb      	adds	r3, r7, #7
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b7f      	cmp	r3, #127	; 0x7f
 8001e5a:	d809      	bhi.n	8001e70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	001a      	movs	r2, r3
 8001e62:	231f      	movs	r3, #31
 8001e64:	401a      	ands	r2, r3
 8001e66:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_EnableIRQ+0x30>)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4091      	lsls	r1, r2
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
  }
}
 8001e70:	46c0      	nop			; (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	0002      	movs	r2, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e90:	d828      	bhi.n	8001ee4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e92:	4a2f      	ldr	r2, [pc, #188]	; (8001f50 <__NVIC_SetPriority+0xd4>)
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	33c0      	adds	r3, #192	; 0xc0
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	589b      	ldr	r3, [r3, r2]
 8001ea2:	1dfa      	adds	r2, r7, #7
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	0011      	movs	r1, r2
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	400a      	ands	r2, r1
 8001eac:	00d2      	lsls	r2, r2, #3
 8001eae:	21ff      	movs	r1, #255	; 0xff
 8001eb0:	4091      	lsls	r1, r2
 8001eb2:	000a      	movs	r2, r1
 8001eb4:	43d2      	mvns	r2, r2
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	019b      	lsls	r3, r3, #6
 8001ebe:	22ff      	movs	r2, #255	; 0xff
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	2303      	movs	r3, #3
 8001eca:	4003      	ands	r3, r0
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ed0:	481f      	ldr	r0, [pc, #124]	; (8001f50 <__NVIC_SetPriority+0xd4>)
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	430a      	orrs	r2, r1
 8001edc:	33c0      	adds	r3, #192	; 0xc0
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ee2:	e031      	b.n	8001f48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <__NVIC_SetPriority+0xd8>)
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	0019      	movs	r1, r3
 8001eec:	230f      	movs	r3, #15
 8001eee:	400b      	ands	r3, r1
 8001ef0:	3b08      	subs	r3, #8
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3306      	adds	r3, #6
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	18d3      	adds	r3, r2, r3
 8001efa:	3304      	adds	r3, #4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	1dfa      	adds	r2, r7, #7
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	0011      	movs	r1, r2
 8001f04:	2203      	movs	r2, #3
 8001f06:	400a      	ands	r2, r1
 8001f08:	00d2      	lsls	r2, r2, #3
 8001f0a:	21ff      	movs	r1, #255	; 0xff
 8001f0c:	4091      	lsls	r1, r2
 8001f0e:	000a      	movs	r2, r1
 8001f10:	43d2      	mvns	r2, r2
 8001f12:	401a      	ands	r2, r3
 8001f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	0018      	movs	r0, r3
 8001f24:	2303      	movs	r3, #3
 8001f26:	4003      	ands	r3, r0
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <__NVIC_SetPriority+0xd8>)
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	001c      	movs	r4, r3
 8001f34:	230f      	movs	r3, #15
 8001f36:	4023      	ands	r3, r4
 8001f38:	3b08      	subs	r3, #8
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	3306      	adds	r3, #6
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	18c3      	adds	r3, r0, r3
 8001f44:	3304      	adds	r3, #4
 8001f46:	601a      	str	r2, [r3, #0]
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b003      	add	sp, #12
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	045b      	lsls	r3, r3, #17
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d301      	bcc.n	8001f70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e010      	b.n	8001f92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <SysTick_Config+0x44>)
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	3a01      	subs	r2, #1
 8001f76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f78:	2301      	movs	r3, #1
 8001f7a:	425b      	negs	r3, r3
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7ff ff7c 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <SysTick_Config+0x44>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SysTick_Config+0x44>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	210f      	movs	r1, #15
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	1c02      	adds	r2, r0, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b25b      	sxtb	r3, r3
 8001fba:	0011      	movs	r1, r2
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7ff ff5d 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff ff33 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff ffaf 	bl	8001f58 <SysTick_Config>
 8001ffa:	0003      	movs	r3, r0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e036      	b.n	8002088 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2221      	movs	r2, #33	; 0x21
 800201e:	2102      	movs	r1, #2
 8002020:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_DMA_Init+0x8c>)
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	0018      	movs	r0, r3
 800206c:	f000 f93e 	bl	80022ec <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2221      	movs	r2, #33	; 0x21
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	2100      	movs	r1, #0
 8002084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b004      	add	sp, #16
 800208e:	bd80      	pop	{r7, pc}
 8002090:	ffffc00f 	.word	0xffffc00f

08002094 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2221      	movs	r2, #33	; 0x21
 80020a0:	5c9b      	ldrb	r3, [r3, r2]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d008      	beq.n	80020ba <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2204      	movs	r2, #4
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	2100      	movs	r1, #0
 80020b4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e020      	b.n	80020fc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	210e      	movs	r1, #14
 80020c6:	438a      	bics	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	438a      	bics	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	2101      	movs	r1, #1
 80020e4:	4091      	lsls	r1, r2
 80020e6:	000a      	movs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2221      	movs	r2, #33	; 0x21
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	2100      	movs	r1, #0
 80020f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	210f      	movs	r1, #15
 800210e:	187b      	adds	r3, r7, r1
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2221      	movs	r2, #33	; 0x21
 8002118:	5c9b      	ldrb	r3, [r3, r2]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d006      	beq.n	800212e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2204      	movs	r2, #4
 8002124:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002126:	187b      	adds	r3, r7, r1
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e028      	b.n	8002180 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	210e      	movs	r1, #14
 800213a:	438a      	bics	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	438a      	bics	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	2101      	movs	r1, #1
 8002158:	4091      	lsls	r1, r2
 800215a:	000a      	movs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2221      	movs	r2, #33	; 0x21
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2220      	movs	r2, #32
 800216a:	2100      	movs	r1, #0
 800216c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	0010      	movs	r0, r2
 800217e:	4798      	blx	r3
    }
  }
  return status;
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2204      	movs	r2, #4
 80021ac:	409a      	lsls	r2, r3
 80021ae:	0013      	movs	r3, r2
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4013      	ands	r3, r2
 80021b4:	d024      	beq.n	8002200 <HAL_DMA_IRQHandler+0x72>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2204      	movs	r2, #4
 80021ba:	4013      	ands	r3, r2
 80021bc:	d020      	beq.n	8002200 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2220      	movs	r2, #32
 80021c6:	4013      	ands	r3, r2
 80021c8:	d107      	bne.n	80021da <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2104      	movs	r1, #4
 80021d6:	438a      	bics	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	2104      	movs	r1, #4
 80021e4:	4091      	lsls	r1, r2
 80021e6:	000a      	movs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d100      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x66>
 80021f2:	e06a      	b.n	80022ca <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	0010      	movs	r0, r2
 80021fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021fe:	e064      	b.n	80022ca <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	2202      	movs	r2, #2
 8002206:	409a      	lsls	r2, r3
 8002208:	0013      	movs	r3, r2
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	d02b      	beq.n	8002268 <HAL_DMA_IRQHandler+0xda>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2202      	movs	r2, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d027      	beq.n	8002268 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2220      	movs	r2, #32
 8002220:	4013      	ands	r3, r2
 8002222:	d10b      	bne.n	800223c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	210a      	movs	r1, #10
 8002230:	438a      	bics	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2221      	movs	r2, #33	; 0x21
 8002238:	2101      	movs	r1, #1
 800223a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	2102      	movs	r1, #2
 8002246:	4091      	lsls	r1, r2
 8002248:	000a      	movs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	2100      	movs	r1, #0
 8002252:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	2b00      	cmp	r3, #0
 800225a:	d036      	beq.n	80022ca <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	0010      	movs	r0, r2
 8002264:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002266:	e030      	b.n	80022ca <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	2208      	movs	r2, #8
 800226e:	409a      	lsls	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4013      	ands	r3, r2
 8002276:	d028      	beq.n	80022ca <HAL_DMA_IRQHandler+0x13c>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2208      	movs	r2, #8
 800227c:	4013      	ands	r3, r2
 800227e:	d024      	beq.n	80022ca <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	210e      	movs	r1, #14
 800228c:	438a      	bics	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	2101      	movs	r1, #1
 800229a:	4091      	lsls	r1, r2
 800229c:	000a      	movs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2221      	movs	r2, #33	; 0x21
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2220      	movs	r2, #32
 80022b2:	2100      	movs	r1, #0
 80022b4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	0010      	movs	r0, r2
 80022c6:	4798      	blx	r3
    }
  }
}
 80022c8:	e7ff      	b.n	80022ca <HAL_DMA_IRQHandler+0x13c>
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b004      	add	sp, #16
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2221      	movs	r2, #33	; 0x21
 80022de:	5c9b      	ldrb	r3, [r3, r2]
 80022e0:	b2db      	uxtb	r3, r3
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b002      	add	sp, #8
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	001a      	movs	r2, r3
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <DMA_CalcBaseAndBitshift+0x60>)
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d810      	bhi.n	8002322 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <DMA_CalcBaseAndBitshift+0x64>)
 8002306:	4694      	mov	ip, r2
 8002308:	4463      	add	r3, ip
 800230a:	2114      	movs	r1, #20
 800230c:	0018      	movs	r0, r3
 800230e:	f7fd fef9 	bl	8000104 <__udivsi3>
 8002312:	0003      	movs	r3, r0
 8002314:	009a      	lsls	r2, r3, #2
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <DMA_CalcBaseAndBitshift+0x68>)
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002320:	e00f      	b.n	8002342 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <DMA_CalcBaseAndBitshift+0x6c>)
 8002328:	4694      	mov	ip, r2
 800232a:	4463      	add	r3, ip
 800232c:	2114      	movs	r1, #20
 800232e:	0018      	movs	r0, r3
 8002330:	f7fd fee8 	bl	8000104 <__udivsi3>
 8002334:	0003      	movs	r3, r0
 8002336:	009a      	lsls	r2, r3, #2
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a07      	ldr	r2, [pc, #28]	; (800235c <DMA_CalcBaseAndBitshift+0x70>)
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	b002      	add	sp, #8
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	40020407 	.word	0x40020407
 8002350:	bffdfff8 	.word	0xbffdfff8
 8002354:	40020000 	.word	0x40020000
 8002358:	bffdfbf8 	.word	0xbffdfbf8
 800235c:	40020400 	.word	0x40020400

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236e:	e155      	b.n	800261c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4091      	lsls	r1, r2
 800237a:	000a      	movs	r2, r1
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <HAL_GPIO_Init+0x28>
 8002386:	e146      	b.n	8002616 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2203      	movs	r2, #3
 800238e:	4013      	ands	r3, r2
 8002390:	2b01      	cmp	r3, #1
 8002392:	d005      	beq.n	80023a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800239c:	2b02      	cmp	r3, #2
 800239e:	d130      	bne.n	8002402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	409a      	lsls	r2, r3
 80023ae:	0013      	movs	r3, r2
 80023b0:	43da      	mvns	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	409a      	lsls	r2, r3
 80023c2:	0013      	movs	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d6:	2201      	movs	r2, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	43da      	mvns	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	2201      	movs	r2, #1
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	4013      	ands	r3, r2
 800240a:	2b03      	cmp	r3, #3
 800240c:	d017      	beq.n	800243e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	409a      	lsls	r2, r3
 800241c:	0013      	movs	r3, r2
 800241e:	43da      	mvns	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	4013      	ands	r3, r2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d123      	bne.n	8002492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	58d3      	ldr	r3, [r2, r3]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2207      	movs	r2, #7
 800245c:	4013      	ands	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2107      	movs	r1, #7
 8002476:	400b      	ands	r3, r1
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	0092      	lsls	r2, r2, #2
 800248e:	6939      	ldr	r1, [r7, #16]
 8002490:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2203      	movs	r2, #3
 80024b0:	401a      	ands	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	0013      	movs	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	23c0      	movs	r3, #192	; 0xc0
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	4013      	ands	r3, r2
 80024d0:	d100      	bne.n	80024d4 <HAL_GPIO_Init+0x174>
 80024d2:	e0a0      	b.n	8002616 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d4:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_GPIO_Init+0x2d4>)
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	4b56      	ldr	r3, [pc, #344]	; (8002634 <HAL_GPIO_Init+0x2d4>)
 80024da:	2101      	movs	r1, #1
 80024dc:	430a      	orrs	r2, r1
 80024de:	619a      	str	r2, [r3, #24]
 80024e0:	4b54      	ldr	r3, [pc, #336]	; (8002634 <HAL_GPIO_Init+0x2d4>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2201      	movs	r2, #1
 80024e6:	4013      	ands	r3, r2
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024ec:	4a52      	ldr	r2, [pc, #328]	; (8002638 <HAL_GPIO_Init+0x2d8>)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	3302      	adds	r3, #2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	589b      	ldr	r3, [r3, r2]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2203      	movs	r2, #3
 80024fe:	4013      	ands	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	220f      	movs	r2, #15
 8002504:	409a      	lsls	r2, r3
 8002506:	0013      	movs	r3, r2
 8002508:	43da      	mvns	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	2390      	movs	r3, #144	; 0x90
 8002514:	05db      	lsls	r3, r3, #23
 8002516:	429a      	cmp	r2, r3
 8002518:	d019      	beq.n	800254e <HAL_GPIO_Init+0x1ee>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a47      	ldr	r2, [pc, #284]	; (800263c <HAL_GPIO_Init+0x2dc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0x1ea>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a46      	ldr	r2, [pc, #280]	; (8002640 <HAL_GPIO_Init+0x2e0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00d      	beq.n	8002546 <HAL_GPIO_Init+0x1e6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a45      	ldr	r2, [pc, #276]	; (8002644 <HAL_GPIO_Init+0x2e4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d007      	beq.n	8002542 <HAL_GPIO_Init+0x1e2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a44      	ldr	r2, [pc, #272]	; (8002648 <HAL_GPIO_Init+0x2e8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_GPIO_Init+0x1de>
 800253a:	2304      	movs	r3, #4
 800253c:	e008      	b.n	8002550 <HAL_GPIO_Init+0x1f0>
 800253e:	2305      	movs	r3, #5
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x1f0>
 8002542:	2303      	movs	r3, #3
 8002544:	e004      	b.n	8002550 <HAL_GPIO_Init+0x1f0>
 8002546:	2302      	movs	r3, #2
 8002548:	e002      	b.n	8002550 <HAL_GPIO_Init+0x1f0>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_GPIO_Init+0x1f0>
 800254e:	2300      	movs	r3, #0
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	2103      	movs	r1, #3
 8002554:	400a      	ands	r2, r1
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	4093      	lsls	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002560:	4935      	ldr	r1, [pc, #212]	; (8002638 <HAL_GPIO_Init+0x2d8>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3302      	adds	r3, #2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_GPIO_Init+0x2ec>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43da      	mvns	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	035b      	lsls	r3, r3, #13
 8002586:	4013      	ands	r3, r2
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <HAL_GPIO_Init+0x2ec>)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_GPIO_Init+0x2ec>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43da      	mvns	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	039b      	lsls	r3, r3, #14
 80025b0:	4013      	ands	r3, r2
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_GPIO_Init+0x2ec>)
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_GPIO_Init+0x2ec>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43da      	mvns	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	029b      	lsls	r3, r3, #10
 80025da:	4013      	ands	r3, r2
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_GPIO_Init+0x2ec>)
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_GPIO_Init+0x2ec>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43da      	mvns	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	025b      	lsls	r3, r3, #9
 8002604:	4013      	ands	r3, r2
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_GPIO_Init+0x2ec>)
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	40da      	lsrs	r2, r3
 8002624:	1e13      	subs	r3, r2, #0
 8002626:	d000      	beq.n	800262a <HAL_GPIO_Init+0x2ca>
 8002628:	e6a2      	b.n	8002370 <HAL_GPIO_Init+0x10>
  } 
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b006      	add	sp, #24
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	40010000 	.word	0x40010000
 800263c:	48000400 	.word	0x48000400
 8002640:	48000800 	.word	0x48000800
 8002644:	48000c00 	.word	0x48000c00
 8002648:	48001000 	.word	0x48001000
 800264c:	40010400 	.word	0x40010400

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	0008      	movs	r0, r1
 800265a:	0011      	movs	r1, r2
 800265c:	1cbb      	adds	r3, r7, #2
 800265e:	1c02      	adds	r2, r0, #0
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	1c7b      	adds	r3, r7, #1
 8002664:	1c0a      	adds	r2, r1, #0
 8002666:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002668:	1c7b      	adds	r3, r7, #1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002670:	1cbb      	adds	r3, r7, #2
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002678:	e003      	b.n	8002682 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800267a:	1cbb      	adds	r3, r7, #2
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b002      	add	sp, #8
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e082      	b.n	80027a4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2241      	movs	r2, #65	; 0x41
 80026a2:	5c9b      	ldrb	r3, [r3, r2]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2240      	movs	r2, #64	; 0x40
 80026ae:	2100      	movs	r1, #0
 80026b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff f82d 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2241      	movs	r2, #65	; 0x41
 80026be:	2124      	movs	r1, #36	; 0x24
 80026c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	438a      	bics	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4934      	ldr	r1, [pc, #208]	; (80027ac <HAL_I2C_Init+0x120>)
 80026dc:	400a      	ands	r2, r1
 80026de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4931      	ldr	r1, [pc, #196]	; (80027b0 <HAL_I2C_Init+0x124>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d108      	bne.n	800270a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0209      	lsls	r1, r1, #8
 8002704:	430a      	orrs	r2, r1
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	e007      	b.n	800271a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2184      	movs	r1, #132	; 0x84
 8002714:	0209      	lsls	r1, r1, #8
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d104      	bne.n	800272c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2280      	movs	r2, #128	; 0x80
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	491f      	ldr	r1, [pc, #124]	; (80027b4 <HAL_I2C_Init+0x128>)
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	491a      	ldr	r1, [pc, #104]	; (80027b0 <HAL_I2C_Init+0x124>)
 8002748:	400a      	ands	r2, r1
 800274a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	431a      	orrs	r2, r3
 8002756:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69d9      	ldr	r1, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2241      	movs	r2, #65	; 0x41
 8002790:	2120      	movs	r1, #32
 8002792:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2242      	movs	r2, #66	; 0x42
 800279e:	2100      	movs	r1, #0
 80027a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	f0ffffff 	.word	0xf0ffffff
 80027b0:	ffff7fff 	.word	0xffff7fff
 80027b4:	02008000 	.word	0x02008000

080027b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	000c      	movs	r4, r1
 80027c2:	0010      	movs	r0, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	230a      	movs	r3, #10
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	1c22      	adds	r2, r4, #0
 80027cc:	801a      	strh	r2, [r3, #0]
 80027ce:	2308      	movs	r3, #8
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	1c02      	adds	r2, r0, #0
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	1dbb      	adds	r3, r7, #6
 80027d8:	1c0a      	adds	r2, r1, #0
 80027da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2241      	movs	r2, #65	; 0x41
 80027e0:	5c9b      	ldrb	r3, [r3, r2]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d000      	beq.n	80027ea <HAL_I2C_Mem_Write+0x32>
 80027e8:	e10c      	b.n	8002a04 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <HAL_I2C_Mem_Write+0x42>
 80027f0:	232c      	movs	r3, #44	; 0x2c
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0ff      	b.n	8002a06 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	5c9b      	ldrb	r3, [r3, r2]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_I2C_Mem_Write+0x5c>
 8002810:	2302      	movs	r3, #2
 8002812:	e0f8      	b.n	8002a06 <HAL_I2C_Mem_Write+0x24e>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	2101      	movs	r1, #1
 800281a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800281c:	f7ff fb0a 	bl	8001e34 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	0219      	lsls	r1, r3, #8
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2319      	movs	r3, #25
 8002830:	2201      	movs	r2, #1
 8002832:	f001 f805 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0e3      	b.n	8002a06 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2241      	movs	r2, #65	; 0x41
 8002842:	2121      	movs	r1, #33	; 0x21
 8002844:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2242      	movs	r2, #66	; 0x42
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	222c      	movs	r2, #44	; 0x2c
 800285e:	18ba      	adds	r2, r7, r2
 8002860:	8812      	ldrh	r2, [r2, #0]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800286a:	1dbb      	adds	r3, r7, #6
 800286c:	881c      	ldrh	r4, [r3, #0]
 800286e:	2308      	movs	r3, #8
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	230a      	movs	r3, #10
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	8819      	ldrh	r1, [r3, #0]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	0023      	movs	r3, r4
 8002886:	f000 fb8b 	bl	8002fa0 <I2C_RequestMemoryWrite>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d005      	beq.n	800289a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2240      	movs	r2, #64	; 0x40
 8002892:	2100      	movs	r1, #0
 8002894:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0b5      	b.n	8002a06 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2bff      	cmp	r3, #255	; 0xff
 80028a2:	d911      	bls.n	80028c8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	22ff      	movs	r2, #255	; 0xff
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	045c      	lsls	r4, r3, #17
 80028b4:	230a      	movs	r3, #10
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	8819      	ldrh	r1, [r3, #0]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	2300      	movs	r3, #0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	0023      	movs	r3, r4
 80028c2:	f001 f995 	bl	8003bf0 <I2C_TransferConfig>
 80028c6:	e012      	b.n	80028ee <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	049c      	lsls	r4, r3, #18
 80028dc:	230a      	movs	r3, #10
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	8819      	ldrh	r1, [r3, #0]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	2300      	movs	r3, #0
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	0023      	movs	r3, r4
 80028ea:	f001 f981 	bl	8003bf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fff1 	bl	80038dc <I2C_WaitOnTXISFlagUntilTimeout>
 80028fa:	1e03      	subs	r3, r0, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e081      	b.n	8002a06 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d03a      	beq.n	80029b2 <HAL_I2C_Mem_Write+0x1fa>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	d136      	bne.n	80029b2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	0013      	movs	r3, r2
 800294e:	2200      	movs	r2, #0
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	f000 ff75 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e053      	b.n	8002a06 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	2bff      	cmp	r3, #255	; 0xff
 8002966:	d911      	bls.n	800298c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	b2da      	uxtb	r2, r3
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	045c      	lsls	r4, r3, #17
 8002978:	230a      	movs	r3, #10
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	8819      	ldrh	r1, [r3, #0]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	2300      	movs	r3, #0
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	0023      	movs	r3, r4
 8002986:	f001 f933 	bl	8003bf0 <I2C_TransferConfig>
 800298a:	e012      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	b2da      	uxtb	r2, r3
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	049c      	lsls	r4, r3, #18
 80029a0:	230a      	movs	r3, #10
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	8819      	ldrh	r1, [r3, #0]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	2300      	movs	r3, #0
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	0023      	movs	r3, r4
 80029ae:	f001 f91f 	bl	8003bf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d198      	bne.n	80028ee <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 ffd0 	bl	8003968 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c8:	1e03      	subs	r3, r0, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e01a      	b.n	8002a06 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2220      	movs	r2, #32
 80029d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	490b      	ldr	r1, [pc, #44]	; (8002a10 <HAL_I2C_Mem_Write+0x258>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2241      	movs	r2, #65	; 0x41
 80029ec:	2120      	movs	r1, #32
 80029ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2242      	movs	r2, #66	; 0x42
 80029f4:	2100      	movs	r1, #0
 80029f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2240      	movs	r2, #64	; 0x40
 80029fc:	2100      	movs	r1, #0
 80029fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e000      	b.n	8002a06 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
  }
}
 8002a06:	0018      	movs	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b007      	add	sp, #28
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	fe00e800 	.word	0xfe00e800

08002a14 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	230a      	movs	r3, #10
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	1c0a      	adds	r2, r1, #0
 8002a26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2241      	movs	r2, #65	; 0x41
 8002a30:	5c9b      	ldrb	r3, [r3, r2]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d000      	beq.n	8002a3a <HAL_I2C_IsDeviceReady+0x26>
 8002a38:	e0fd      	b.n	8002c36 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699a      	ldr	r2, [r3, #24]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	401a      	ands	r2, r3
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0f2      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	5c9b      	ldrb	r3, [r3, r2]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2C_IsDeviceReady+0x4c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0eb      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x224>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	2101      	movs	r1, #1
 8002a66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2241      	movs	r2, #65	; 0x41
 8002a6c:	2124      	movs	r1, #36	; 0x24
 8002a6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_I2C_IsDeviceReady+0x7a>
 8002a7e:	230a      	movs	r3, #10
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	059b      	lsls	r3, r3, #22
 8002a86:	0d9b      	lsrs	r3, r3, #22
 8002a88:	4a6d      	ldr	r2, [pc, #436]	; (8002c40 <HAL_I2C_IsDeviceReady+0x22c>)
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	e006      	b.n	8002a9c <HAL_I2C_IsDeviceReady+0x88>
 8002a8e:	230a      	movs	r3, #10
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	059b      	lsls	r3, r3, #22
 8002a96:	0d9b      	lsrs	r3, r3, #22
 8002a98:	4a6a      	ldr	r2, [pc, #424]	; (8002c44 <HAL_I2C_IsDeviceReady+0x230>)
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002aa2:	f7ff f9c7 	bl	8001e34 <HAL_GetTick>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	3b20      	subs	r3, #32
 8002ab6:	425a      	negs	r2, r3
 8002ab8:	4153      	adcs	r3, r2
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	231f      	movs	r3, #31
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2210      	movs	r2, #16
 8002aca:	4013      	ands	r3, r2
 8002acc:	3b10      	subs	r3, #16
 8002ace:	425a      	negs	r2, r3
 8002ad0:	4153      	adcs	r3, r2
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	231e      	movs	r3, #30
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ada:	e035      	b.n	8002b48 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	d01a      	beq.n	8002b18 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7ff f9a7 	bl	8001e34 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <HAL_I2C_IsDeviceReady+0xe4>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10f      	bne.n	8002b18 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2241      	movs	r2, #65	; 0x41
 8002afc:	2120      	movs	r1, #32
 8002afe:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	2220      	movs	r2, #32
 8002b06:	431a      	orrs	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2240      	movs	r2, #64	; 0x40
 8002b10:	2100      	movs	r1, #0
 8002b12:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e08f      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4013      	ands	r3, r2
 8002b22:	3b20      	subs	r3, #32
 8002b24:	425a      	negs	r2, r3
 8002b26:	4153      	adcs	r3, r2
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2210      	movs	r2, #16
 8002b38:	4013      	ands	r3, r2
 8002b3a:	3b10      	subs	r3, #16
 8002b3c:	425a      	negs	r2, r3
 8002b3e:	4153      	adcs	r3, r2
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	231e      	movs	r3, #30
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b48:	231f      	movs	r3, #31
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d104      	bne.n	8002b5c <HAL_I2C_IsDeviceReady+0x148>
 8002b52:	231e      	movs	r3, #30
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0bf      	beq.n	8002adc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2210      	movs	r2, #16
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d01a      	beq.n	8002ba0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	0013      	movs	r3, r2
 8002b74:	2200      	movs	r2, #0
 8002b76:	2120      	movs	r1, #32
 8002b78:	f000 fe62 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 8002b7c:	1e03      	subs	r3, r0, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e059      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2241      	movs	r2, #65	; 0x41
 8002b90:	2120      	movs	r1, #32
 8002b92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e04b      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	0013      	movs	r3, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	2120      	movs	r1, #32
 8002bae:	f000 fe47 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 8002bb2:	1e03      	subs	r3, r0, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e03e      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d119      	bne.n	8002c06 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	01c9      	lsls	r1, r1, #7
 8002be0:	430a      	orrs	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	0013      	movs	r3, r2
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2120      	movs	r1, #32
 8002bf2:	f000 fe25 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e01c      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2220      	movs	r2, #32
 8002c04:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d900      	bls.n	8002c16 <HAL_I2C_IsDeviceReady+0x202>
 8002c14:	e72f      	b.n	8002a76 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2241      	movs	r2, #65	; 0x41
 8002c1a:	2120      	movs	r1, #32
 8002c1c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	2220      	movs	r2, #32
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	2100      	movs	r1, #0
 8002c30:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
  }
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b008      	add	sp, #32
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	02002000 	.word	0x02002000
 8002c44:	02002800 	.word	0x02002800

08002c48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	68f9      	ldr	r1, [r7, #12]
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
  }
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ca4:	d00a      	beq.n	8002cbc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	2201      	movs	r2, #1
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	0052      	lsls	r2, r2, #1
 8002cba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	00d2      	lsls	r2, r2, #3
 8002ce2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4013      	ands	r3, r2
 8002cec:	d00e      	beq.n	8002d0c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002cf4:	d00a      	beq.n	8002d0c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	220b      	movs	r2, #11
 8002d16:	4013      	ands	r3, r2
 8002d18:	d005      	beq.n	8002d26 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	0011      	movs	r1, r2
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 fc21 	bl	8003568 <I2C_ITError>
  }
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b006      	add	sp, #24
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b002      	add	sp, #8
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	0008      	movs	r0, r1
 8002d58:	0011      	movs	r1, r2
 8002d5a:	1cfb      	adds	r3, r7, #3
 8002d5c:	1c02      	adds	r2, r0, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	003b      	movs	r3, r7
 8002d62:	1c0a      	adds	r2, r1, #0
 8002d64:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2240      	movs	r2, #64	; 0x40
 8002dba:	5c9b      	ldrb	r3, [r3, r2]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <I2C_Slave_ISR_IT+0x24>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0e6      	b.n	8002f92 <I2C_Slave_ISR_IT+0x1f2>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2240      	movs	r2, #64	; 0x40
 8002dc8:	2101      	movs	r1, #1
 8002dca:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d009      	beq.n	8002de8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dda:	d005      	beq.n	8002de8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	0011      	movs	r1, r2
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 fa48 	bl	8003278 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2210      	movs	r2, #16
 8002dec:	4013      	ands	r3, r2
 8002dee:	d052      	beq.n	8002e96 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2210      	movs	r2, #16
 8002df4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002df6:	d04e      	beq.n	8002e96 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d12d      	bne.n	8002e5e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2241      	movs	r2, #65	; 0x41
 8002e06:	5c9b      	ldrb	r3, [r3, r2]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b28      	cmp	r3, #40	; 0x28
 8002e0c:	d10b      	bne.n	8002e26 <I2C_Slave_ISR_IT+0x86>
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	049b      	lsls	r3, r3, #18
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d106      	bne.n	8002e26 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 fb4a 	bl	80034b8 <I2C_ITListenCplt>
 8002e24:	e036      	b.n	8002e94 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2241      	movs	r2, #65	; 0x41
 8002e2a:	5c9b      	ldrb	r3, [r3, r2]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b29      	cmp	r3, #41	; 0x29
 8002e30:	d110      	bne.n	8002e54 <I2C_Slave_ISR_IT+0xb4>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	4a59      	ldr	r2, [pc, #356]	; (8002f9c <I2C_Slave_ISR_IT+0x1fc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00c      	beq.n	8002e54 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2210      	movs	r2, #16
 8002e40:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 fcba 	bl	80037be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 f9af 	bl	80031b0 <I2C_ITSlaveSeqCplt>
 8002e52:	e01f      	b.n	8002e94 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e5c:	e091      	b.n	8002f82 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2210      	movs	r2, #16
 8002e64:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <I2C_Slave_ISR_IT+0xe4>
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	045b      	lsls	r3, r3, #17
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d000      	beq.n	8002e84 <I2C_Slave_ISR_IT+0xe4>
 8002e82:	e07e      	b.n	8002f82 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 fb6b 	bl	8003568 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e92:	e076      	b.n	8002f82 <I2C_Slave_ISR_IT+0x1e2>
 8002e94:	e075      	b.n	8002f82 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d02f      	beq.n	8002efe <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ea4:	d02b      	beq.n	8002efe <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d018      	beq.n	8002ee2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d14c      	bne.n	8002f86 <I2C_Slave_ISR_IT+0x1e6>
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <I2C_Slave_ISR_IT+0x1fc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d048      	beq.n	8002f86 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 f95a 	bl	80031b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002efc:	e043      	b.n	8002f86 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2208      	movs	r2, #8
 8002f02:	4013      	ands	r3, r2
 8002f04:	d00a      	beq.n	8002f1c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f0c:	d006      	beq.n	8002f1c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 f8a7 	bl	8003068 <I2C_ITAddrCplt>
 8002f1a:	e035      	b.n	8002f88 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	d031      	beq.n	8002f88 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f2a:	d02d      	beq.n	8002f88 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d018      	beq.n	8002f68 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
 8002f66:	e00f      	b.n	8002f88 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	045b      	lsls	r3, r3, #17
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d002      	beq.n	8002f78 <I2C_Slave_ISR_IT+0x1d8>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d107      	bne.n	8002f88 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 f918 	bl	80031b0 <I2C_ITSlaveSeqCplt>
 8002f80:	e002      	b.n	8002f88 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	e000      	b.n	8002f88 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8002f86:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2240      	movs	r2, #64	; 0x40
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b006      	add	sp, #24
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	ffff0000 	.word	0xffff0000

08002fa0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	000c      	movs	r4, r1
 8002faa:	0010      	movs	r0, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	250a      	movs	r5, #10
 8002fb0:	197b      	adds	r3, r7, r5
 8002fb2:	1c22      	adds	r2, r4, #0
 8002fb4:	801a      	strh	r2, [r3, #0]
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	1c02      	adds	r2, r0, #0
 8002fbc:	801a      	strh	r2, [r3, #0]
 8002fbe:	1dbb      	adds	r3, r7, #6
 8002fc0:	1c0a      	adds	r2, r1, #0
 8002fc2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fc4:	1dbb      	adds	r3, r7, #6
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	045c      	lsls	r4, r3, #17
 8002fce:	197b      	adds	r3, r7, r5
 8002fd0:	8819      	ldrh	r1, [r3, #0]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	4b23      	ldr	r3, [pc, #140]	; (8003064 <I2C_RequestMemoryWrite+0xc4>)
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	0023      	movs	r3, r4
 8002fda:	f000 fe09 	bl	8003bf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe0:	6a39      	ldr	r1, [r7, #32]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 fc79 	bl	80038dc <I2C_WaitOnTXISFlagUntilTimeout>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e033      	b.n	800305a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff2:	1dbb      	adds	r3, r7, #6
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
 8003008:	e019      	b.n	800303e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800300a:	2308      	movs	r3, #8
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	b29b      	uxth	r3, r3
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	6a39      	ldr	r1, [r7, #32]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 fc5a 	bl	80038dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003028:	1e03      	subs	r3, r0, #0
 800302a:	d001      	beq.n	8003030 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e014      	b.n	800305a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003030:	2308      	movs	r3, #8
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800303e:	6a3a      	ldr	r2, [r7, #32]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	0013      	movs	r3, r2
 8003048:	2200      	movs	r2, #0
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	f000 fbf8 	bl	8003840 <I2C_WaitOnFlagUntilTimeout>
 8003050:	1e03      	subs	r3, r0, #0
 8003052:	d001      	beq.n	8003058 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bdb0      	pop	{r4, r5, r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	80002000 	.word	0x80002000

08003068 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2241      	movs	r2, #65	; 0x41
 8003076:	5c9b      	ldrb	r3, [r3, r2]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	001a      	movs	r2, r3
 800307c:	2328      	movs	r3, #40	; 0x28
 800307e:	4013      	ands	r3, r2
 8003080:	2b28      	cmp	r3, #40	; 0x28
 8003082:	d000      	beq.n	8003086 <I2C_ITAddrCplt+0x1e>
 8003084:	e088      	b.n	8003198 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	b2da      	uxtb	r2, r3
 8003090:	250f      	movs	r5, #15
 8003092:	197b      	adds	r3, r7, r5
 8003094:	2101      	movs	r1, #1
 8003096:	400a      	ands	r2, r1
 8003098:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	200c      	movs	r0, #12
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	21fe      	movs	r1, #254	; 0xfe
 80030aa:	400a      	ands	r2, r1
 80030ac:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	240a      	movs	r4, #10
 80030b8:	193b      	adds	r3, r7, r4
 80030ba:	0592      	lsls	r2, r2, #22
 80030bc:	0d92      	lsrs	r2, r2, #22
 80030be:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	2308      	movs	r3, #8
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	21fe      	movs	r1, #254	; 0xfe
 80030ce:	400a      	ands	r2, r1
 80030d0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d148      	bne.n	800316c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80030da:	0021      	movs	r1, r4
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	09db      	lsrs	r3, r3, #7
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	183b      	adds	r3, r7, r0
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	4053      	eors	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	001a      	movs	r2, r3
 80030ee:	2306      	movs	r3, #6
 80030f0:	4013      	ands	r3, r2
 80030f2:	d120      	bne.n	8003136 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	187a      	adds	r2, r7, r1
 80030f8:	8812      	ldrh	r2, [r2, #0]
 80030fa:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310a:	2b02      	cmp	r3, #2
 800310c:	d14c      	bne.n	80031a8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2208      	movs	r2, #8
 800311a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2240      	movs	r2, #64	; 0x40
 8003120:	2100      	movs	r1, #0
 8003122:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003124:	183b      	adds	r3, r7, r0
 8003126:	881a      	ldrh	r2, [r3, #0]
 8003128:	197b      	adds	r3, r7, r5
 800312a:	7819      	ldrb	r1, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0018      	movs	r0, r3
 8003130:	f7ff fe0d 	bl	8002d4e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003134:	e038      	b.n	80031a8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003136:	240c      	movs	r4, #12
 8003138:	193b      	adds	r3, r7, r4
 800313a:	2208      	movs	r2, #8
 800313c:	18ba      	adds	r2, r7, r2
 800313e:	8812      	ldrh	r2, [r2, #0]
 8003140:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	021a      	lsls	r2, r3, #8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0011      	movs	r1, r2
 800314a:	0018      	movs	r0, r3
 800314c:	f000 fd8a 	bl	8003c64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	2100      	movs	r1, #0
 8003156:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003158:	193b      	adds	r3, r7, r4
 800315a:	881a      	ldrh	r2, [r3, #0]
 800315c:	230f      	movs	r3, #15
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	7819      	ldrb	r1, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f7ff fdf2 	bl	8002d4e <HAL_I2C_AddrCallback>
}
 800316a:	e01d      	b.n	80031a8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	021a      	lsls	r2, r3, #8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	0011      	movs	r1, r2
 8003174:	0018      	movs	r0, r3
 8003176:	f000 fd75 	bl	8003c64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	2100      	movs	r1, #0
 8003180:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003182:	230c      	movs	r3, #12
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	230f      	movs	r3, #15
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	7819      	ldrb	r1, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0018      	movs	r0, r3
 8003192:	f7ff fddc 	bl	8002d4e <HAL_I2C_AddrCallback>
}
 8003196:	e007      	b.n	80031a8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2208      	movs	r2, #8
 800319e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2240      	movs	r2, #64	; 0x40
 80031a4:	2100      	movs	r1, #0
 80031a6:	5499      	strb	r1, [r3, r2]
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b004      	add	sp, #16
 80031ae:	bdb0      	pop	{r4, r5, r7, pc}

080031b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2242      	movs	r2, #66	; 0x42
 80031c4:	2100      	movs	r1, #0
 80031c6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	01db      	lsls	r3, r3, #7
 80031ce:	4013      	ands	r3, r2
 80031d0:	d008      	beq.n	80031e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4924      	ldr	r1, [pc, #144]	; (8003270 <I2C_ITSlaveSeqCplt+0xc0>)
 80031de:	400a      	ands	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e00c      	b.n	80031fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	4013      	ands	r3, r2
 80031ec:	d007      	beq.n	80031fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	491e      	ldr	r1, [pc, #120]	; (8003274 <I2C_ITSlaveSeqCplt+0xc4>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2241      	movs	r2, #65	; 0x41
 8003202:	5c9b      	ldrb	r3, [r3, r2]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b29      	cmp	r3, #41	; 0x29
 8003208:	d114      	bne.n	8003234 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2241      	movs	r2, #65	; 0x41
 800320e:	2128      	movs	r1, #40	; 0x28
 8003210:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2221      	movs	r2, #33	; 0x21
 8003216:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2101      	movs	r1, #1
 800321c:	0018      	movs	r0, r3
 800321e:	f000 fd21 	bl	8003c64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2240      	movs	r2, #64	; 0x40
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff fd7e 	bl	8002d2e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003232:	e019      	b.n	8003268 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2241      	movs	r2, #65	; 0x41
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b2a      	cmp	r3, #42	; 0x2a
 800323e:	d113      	bne.n	8003268 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2241      	movs	r2, #65	; 0x41
 8003244:	2128      	movs	r1, #40	; 0x28
 8003246:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2222      	movs	r2, #34	; 0x22
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2102      	movs	r1, #2
 8003252:	0018      	movs	r0, r3
 8003254:	f000 fd06 	bl	8003c64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2240      	movs	r2, #64	; 0x40
 800325c:	2100      	movs	r1, #0
 800325e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	0018      	movs	r0, r3
 8003264:	f7ff fd6b 	bl	8002d3e <HAL_I2C_SlaveRxCpltCallback>
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b004      	add	sp, #16
 800326e:	bd80      	pop	{r7, pc}
 8003270:	ffffbfff 	.word	0xffffbfff
 8003274:	ffff7fff 	.word	0xffff7fff

08003278 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800328e:	200f      	movs	r0, #15
 8003290:	183b      	adds	r3, r7, r0
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	2141      	movs	r1, #65	; 0x41
 8003296:	5c52      	ldrb	r2, [r2, r1]
 8003298:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2220      	movs	r2, #32
 80032a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032a2:	183b      	adds	r3, r7, r0
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b21      	cmp	r3, #33	; 0x21
 80032a8:	d003      	beq.n	80032b2 <I2C_ITSlaveCplt+0x3a>
 80032aa:	183b      	adds	r3, r7, r0
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b29      	cmp	r3, #41	; 0x29
 80032b0:	d109      	bne.n	80032c6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80032b2:	4a7b      	ldr	r2, [pc, #492]	; (80034a0 <I2C_ITSlaveCplt+0x228>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0011      	movs	r1, r2
 80032b8:	0018      	movs	r0, r3
 80032ba:	f000 fcd3 	bl	8003c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
 80032c4:	e011      	b.n	80032ea <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032c6:	220f      	movs	r2, #15
 80032c8:	18bb      	adds	r3, r7, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b22      	cmp	r3, #34	; 0x22
 80032ce:	d003      	beq.n	80032d8 <I2C_ITSlaveCplt+0x60>
 80032d0:	18bb      	adds	r3, r7, r2
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b2a      	cmp	r3, #42	; 0x2a
 80032d6:	d108      	bne.n	80032ea <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032d8:	4a72      	ldr	r2, [pc, #456]	; (80034a4 <I2C_ITSlaveCplt+0x22c>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0011      	movs	r1, r2
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 fcc0 	bl	8003c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2222      	movs	r2, #34	; 0x22
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	0209      	lsls	r1, r1, #8
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4968      	ldr	r1, [pc, #416]	; (80034a8 <I2C_ITSlaveCplt+0x230>)
 8003308:	400a      	ands	r2, r1
 800330a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fa55 	bl	80037be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	01db      	lsls	r3, r3, #7
 800331a:	4013      	ands	r3, r2
 800331c:	d013      	beq.n	8003346 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4960      	ldr	r1, [pc, #384]	; (80034ac <I2C_ITSlaveCplt+0x234>)
 800332a:	400a      	ands	r2, r1
 800332c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01f      	beq.n	8003376 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003344:	e017      	b.n	8003376 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	4013      	ands	r3, r2
 800334e:	d012      	beq.n	8003376 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4955      	ldr	r1, [pc, #340]	; (80034b0 <I2C_ITSlaveCplt+0x238>)
 800335c:	400a      	ands	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	b29a      	uxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2204      	movs	r2, #4
 800337a:	4013      	ands	r3, r2
 800337c:	d020      	beq.n	80033c0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2204      	movs	r2, #4
 8003382:	4393      	bics	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	2204      	movs	r2, #4
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2242      	movs	r2, #66	; 0x42
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0011      	movs	r1, r2
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f8b7 	bl	8003568 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2241      	movs	r2, #65	; 0x41
 80033fe:	5c9b      	ldrb	r3, [r3, r2]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b28      	cmp	r3, #40	; 0x28
 8003404:	d147      	bne.n	8003496 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	0011      	movs	r1, r2
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f853 	bl	80034b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003412:	e040      	b.n	8003496 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	4a26      	ldr	r2, [pc, #152]	; (80034b4 <I2C_ITSlaveCplt+0x23c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d016      	beq.n	800344c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff fec5 	bl	80031b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <I2C_ITSlaveCplt+0x23c>)
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2241      	movs	r2, #65	; 0x41
 8003430:	2120      	movs	r1, #32
 8003432:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2240      	movs	r2, #64	; 0x40
 800343e:	2100      	movs	r1, #0
 8003440:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff fc92 	bl	8002d6e <HAL_I2C_ListenCpltCallback>
}
 800344a:	e024      	b.n	8003496 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2241      	movs	r2, #65	; 0x41
 8003450:	5c9b      	ldrb	r3, [r3, r2]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b22      	cmp	r3, #34	; 0x22
 8003456:	d10f      	bne.n	8003478 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2241      	movs	r2, #65	; 0x41
 800345c:	2120      	movs	r1, #32
 800345e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2240      	movs	r2, #64	; 0x40
 800346a:	2100      	movs	r1, #0
 800346c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff fc64 	bl	8002d3e <HAL_I2C_SlaveRxCpltCallback>
}
 8003476:	e00e      	b.n	8003496 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2241      	movs	r2, #65	; 0x41
 800347c:	2120      	movs	r1, #32
 800347e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2240      	movs	r2, #64	; 0x40
 800348a:	2100      	movs	r1, #0
 800348c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0018      	movs	r0, r3
 8003492:	f7ff fc4c 	bl	8002d2e <HAL_I2C_SlaveTxCpltCallback>
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b006      	add	sp, #24
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	00008001 	.word	0x00008001
 80034a4:	00008002 	.word	0x00008002
 80034a8:	fe00e800 	.word	0xfe00e800
 80034ac:	ffffbfff 	.word	0xffffbfff
 80034b0:	ffff7fff 	.word	0xffff7fff
 80034b4:	ffff0000 	.word	0xffff0000

080034b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a26      	ldr	r2, [pc, #152]	; (8003560 <I2C_ITListenCplt+0xa8>)
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2241      	movs	r2, #65	; 0x41
 80034d2:	2120      	movs	r1, #32
 80034d4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2242      	movs	r2, #66	; 0x42
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2204      	movs	r2, #4
 80034e8:	4013      	ands	r3, r2
 80034ea:	d022      	beq.n	8003532 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	d012      	beq.n	8003532 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	2204      	movs	r2, #4
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003532:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <I2C_ITListenCplt+0xac>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	0011      	movs	r1, r2
 8003538:	0018      	movs	r0, r3
 800353a:	f000 fb93 	bl	8003c64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2210      	movs	r2, #16
 8003544:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2240      	movs	r2, #64	; 0x40
 800354a:	2100      	movs	r1, #0
 800354c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff fc0c 	bl	8002d6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b002      	add	sp, #8
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	ffff0000 	.word	0xffff0000
 8003564:	00008003 	.word	0x00008003

08003568 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003572:	200f      	movs	r0, #15
 8003574:	183b      	adds	r3, r7, r0
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	2141      	movs	r1, #65	; 0x41
 800357a:	5c52      	ldrb	r2, [r2, r1]
 800357c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2242      	movs	r2, #66	; 0x42
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a72      	ldr	r2, [pc, #456]	; (8003754 <I2C_ITError+0x1ec>)
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800359e:	183b      	adds	r3, r7, r0
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b28      	cmp	r3, #40	; 0x28
 80035a4:	d007      	beq.n	80035b6 <I2C_ITError+0x4e>
 80035a6:	183b      	adds	r3, r7, r0
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b29      	cmp	r3, #41	; 0x29
 80035ac:	d003      	beq.n	80035b6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b2a      	cmp	r3, #42	; 0x2a
 80035b4:	d10c      	bne.n	80035d0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2103      	movs	r1, #3
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 fb52 	bl	8003c64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2241      	movs	r2, #65	; 0x41
 80035c4:	2128      	movs	r1, #40	; 0x28
 80035c6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a63      	ldr	r2, [pc, #396]	; (8003758 <I2C_ITError+0x1f0>)
 80035cc:	635a      	str	r2, [r3, #52]	; 0x34
 80035ce:	e032      	b.n	8003636 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035d0:	4a62      	ldr	r2, [pc, #392]	; (800375c <I2C_ITError+0x1f4>)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	0011      	movs	r1, r2
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 fb44 	bl	8003c64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 f8ed 	bl	80037be <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2241      	movs	r2, #65	; 0x41
 80035e8:	5c9b      	ldrb	r3, [r3, r2]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b60      	cmp	r3, #96	; 0x60
 80035ee:	d01f      	beq.n	8003630 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2241      	movs	r2, #65	; 0x41
 80035f4:	2120      	movs	r1, #32
 80035f6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2220      	movs	r2, #32
 8003600:	4013      	ands	r3, r2
 8003602:	2b20      	cmp	r3, #32
 8003604:	d114      	bne.n	8003630 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2210      	movs	r2, #16
 800360e:	4013      	ands	r3, r2
 8003610:	2b10      	cmp	r3, #16
 8003612:	d109      	bne.n	8003628 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2210      	movs	r2, #16
 800361a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	2204      	movs	r2, #4
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2220      	movs	r2, #32
 800362e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03b      	beq.n	80036bc <I2C_ITError+0x154>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b11      	cmp	r3, #17
 8003648:	d002      	beq.n	8003650 <I2C_ITError+0xe8>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b21      	cmp	r3, #33	; 0x21
 800364e:	d135      	bne.n	80036bc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	01db      	lsls	r3, r3, #7
 800365a:	401a      	ands	r2, r3
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	01db      	lsls	r3, r3, #7
 8003660:	429a      	cmp	r2, r3
 8003662:	d107      	bne.n	8003674 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	493c      	ldr	r1, [pc, #240]	; (8003760 <I2C_ITError+0x1f8>)
 8003670:	400a      	ands	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	0018      	movs	r0, r3
 800367a:	f7fe fe2a 	bl	80022d2 <HAL_DMA_GetState>
 800367e:	0003      	movs	r3, r0
 8003680:	2b01      	cmp	r3, #1
 8003682:	d016      	beq.n	80036b2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	4a36      	ldr	r2, [pc, #216]	; (8003764 <I2C_ITError+0x1fc>)
 800368a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2240      	movs	r2, #64	; 0x40
 8003690:	2100      	movs	r1, #0
 8003692:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	0018      	movs	r0, r3
 800369a:	f7fe fd33 	bl	8002104 <HAL_DMA_Abort_IT>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d051      	beq.n	8003746 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	0018      	movs	r0, r3
 80036ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036b0:	e049      	b.n	8003746 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f859 	bl	800376c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036ba:	e044      	b.n	8003746 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d03b      	beq.n	800373c <I2C_ITError+0x1d4>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b12      	cmp	r3, #18
 80036c8:	d002      	beq.n	80036d0 <I2C_ITError+0x168>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b22      	cmp	r3, #34	; 0x22
 80036ce:	d135      	bne.n	800373c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	401a      	ands	r2, r3
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d107      	bne.n	80036f4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	491e      	ldr	r1, [pc, #120]	; (8003768 <I2C_ITError+0x200>)
 80036f0:	400a      	ands	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7fe fdea 	bl	80022d2 <HAL_DMA_GetState>
 80036fe:	0003      	movs	r3, r0
 8003700:	2b01      	cmp	r3, #1
 8003702:	d016      	beq.n	8003732 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	4a16      	ldr	r2, [pc, #88]	; (8003764 <I2C_ITError+0x1fc>)
 800370a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	0018      	movs	r0, r3
 800371a:	f7fe fcf3 	bl	8002104 <HAL_DMA_Abort_IT>
 800371e:	1e03      	subs	r3, r0, #0
 8003720:	d013      	beq.n	800374a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	0018      	movs	r0, r3
 800372e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003730:	e00b      	b.n	800374a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 f819 	bl	800376c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800373a:	e006      	b.n	800374a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 f814 	bl	800376c <I2C_TreatErrorCallback>
  }
}
 8003744:	e002      	b.n	800374c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	e000      	b.n	800374c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800374a:	46c0      	nop			; (mov r8, r8)
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bd80      	pop	{r7, pc}
 8003754:	ffff0000 	.word	0xffff0000
 8003758:	08002da1 	.word	0x08002da1
 800375c:	00008003 	.word	0x00008003
 8003760:	ffffbfff 	.word	0xffffbfff
 8003764:	08003803 	.word	0x08003803
 8003768:	ffff7fff 	.word	0xffff7fff

0800376c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2241      	movs	r2, #65	; 0x41
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b60      	cmp	r3, #96	; 0x60
 800377e:	d10f      	bne.n	80037a0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2241      	movs	r2, #65	; 0x41
 8003784:	2120      	movs	r1, #32
 8003786:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2240      	movs	r2, #64	; 0x40
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0018      	movs	r0, r3
 800379a:	f7ff faf8 	bl	8002d8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800379e:	e00a      	b.n	80037b6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2240      	movs	r2, #64	; 0x40
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7ff fae4 	bl	8002d7e <HAL_I2C_ErrorCallback>
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b002      	add	sp, #8
 80037bc:	bd80      	pop	{r7, pc}

080037be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2202      	movs	r2, #2
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d103      	bne.n	80037dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2200      	movs	r2, #0
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2201      	movs	r2, #1
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d007      	beq.n	80037fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	430a      	orrs	r2, r1
 80037f8:	619a      	str	r2, [r3, #24]
  }
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b002      	add	sp, #8
 8003800:	bd80      	pop	{r7, pc}

08003802 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	2200      	movs	r2, #0
 800381e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	2200      	movs	r2, #0
 800382e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0018      	movs	r0, r3
 8003834:	f7ff ff9a 	bl	800376c <I2C_TreatErrorCallback>
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b004      	add	sp, #16
 800383e:	bd80      	pop	{r7, pc}

08003840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003850:	e030      	b.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	d02d      	beq.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe faec 	bl	8001e34 <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d122      	bne.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4013      	ands	r3, r2
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	425a      	negs	r2, r3
 800387e:	4153      	adcs	r3, r2
 8003880:	b2db      	uxtb	r3, r3
 8003882:	001a      	movs	r2, r3
 8003884:	1dfb      	adds	r3, r7, #7
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d113      	bne.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	2220      	movs	r2, #32
 8003892:	431a      	orrs	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2241      	movs	r2, #65	; 0x41
 800389c:	2120      	movs	r1, #32
 800389e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2242      	movs	r2, #66	; 0x42
 80038a4:	2100      	movs	r1, #0
 80038a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	2100      	movs	r1, #0
 80038ae:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e00f      	b.n	80038d4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4013      	ands	r3, r2
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	425a      	negs	r2, r3
 80038c4:	4153      	adcs	r3, r2
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	001a      	movs	r2, r3
 80038ca:	1dfb      	adds	r3, r7, #7
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d0bf      	beq.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b004      	add	sp, #16
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038e8:	e032      	b.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 f87d 	bl	80039f0 <I2C_IsErrorOccurred>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d001      	beq.n	80038fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e030      	b.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3301      	adds	r3, #1
 8003902:	d025      	beq.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003904:	f7fe fa96 	bl	8001e34 <HAL_GetTick>
 8003908:	0002      	movs	r2, r0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	d302      	bcc.n	800391a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11a      	bne.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2202      	movs	r2, #2
 8003922:	4013      	ands	r3, r2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d013      	beq.n	8003950 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	2220      	movs	r2, #32
 800392e:	431a      	orrs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2241      	movs	r2, #65	; 0x41
 8003938:	2120      	movs	r1, #32
 800393a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2242      	movs	r2, #66	; 0x42
 8003940:	2100      	movs	r1, #0
 8003942:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2240      	movs	r2, #64	; 0x40
 8003948:	2100      	movs	r1, #0
 800394a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e007      	b.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2202      	movs	r2, #2
 8003958:	4013      	ands	r3, r2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d1c5      	bne.n	80038ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b004      	add	sp, #16
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003974:	e02f      	b.n	80039d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	0018      	movs	r0, r3
 800397e:	f000 f837 	bl	80039f0 <I2C_IsErrorOccurred>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e02d      	b.n	80039e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7fe fa53 	bl	8001e34 <HAL_GetTick>
 800398e:	0002      	movs	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11a      	bne.n	80039d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2220      	movs	r2, #32
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d013      	beq.n	80039d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	2220      	movs	r2, #32
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2241      	movs	r2, #65	; 0x41
 80039be:	2120      	movs	r1, #32
 80039c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2242      	movs	r2, #66	; 0x42
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2240      	movs	r2, #64	; 0x40
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e007      	b.n	80039e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2220      	movs	r2, #32
 80039de:	4013      	ands	r3, r2
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d1c8      	bne.n	8003976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b08b      	sub	sp, #44	; 0x2c
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2327      	movs	r3, #39	; 0x27
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2210      	movs	r2, #16
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <I2C_IsErrorOccurred+0x2e>
 8003a1c:	e082      	b.n	8003b24 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2210      	movs	r2, #16
 8003a24:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a26:	e060      	b.n	8003aea <I2C_IsErrorOccurred+0xfa>
 8003a28:	2427      	movs	r4, #39	; 0x27
 8003a2a:	193b      	adds	r3, r7, r4
 8003a2c:	193a      	adds	r2, r7, r4
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3301      	adds	r3, #1
 8003a36:	d058      	beq.n	8003aea <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a38:	f7fe f9fc 	bl	8001e34 <HAL_GetTick>
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d306      	bcc.n	8003a56 <I2C_IsErrorOccurred+0x66>
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	193a      	adds	r2, r7, r4
 8003a4c:	7812      	ldrb	r2, [r2, #0]
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d149      	bne.n	8003aea <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	01db      	lsls	r3, r3, #7
 8003a60:	4013      	ands	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a64:	2013      	movs	r0, #19
 8003a66:	183b      	adds	r3, r7, r0
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	2142      	movs	r1, #66	; 0x42
 8003a6c:	5c52      	ldrb	r2, [r2, r1]
 8003a6e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d126      	bne.n	8003ad2 <I2C_IsErrorOccurred+0xe2>
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	01db      	lsls	r3, r3, #7
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d021      	beq.n	8003ad2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003a8e:	183b      	adds	r3, r7, r0
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d01d      	beq.n	8003ad2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	01c9      	lsls	r1, r1, #7
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003aa8:	f7fe f9c4 	bl	8001e34 <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab0:	e00f      	b.n	8003ad2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ab2:	f7fe f9bf 	bl	8001e34 <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b19      	cmp	r3, #25
 8003abe:	d908      	bls.n	8003ad2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ac8:	2327      	movs	r3, #39	; 0x27
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]

              break;
 8003ad0:	e00b      	b.n	8003aea <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	4013      	ands	r3, r2
 8003adc:	2127      	movs	r1, #39	; 0x27
 8003ade:	187a      	adds	r2, r7, r1
 8003ae0:	1879      	adds	r1, r7, r1
 8003ae2:	7809      	ldrb	r1, [r1, #0]
 8003ae4:	7011      	strb	r1, [r2, #0]
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d1e3      	bne.n	8003ab2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2220      	movs	r2, #32
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d004      	beq.n	8003b02 <I2C_IsErrorOccurred+0x112>
 8003af8:	2327      	movs	r3, #39	; 0x27
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d092      	beq.n	8003a28 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b02:	2327      	movs	r3, #39	; 0x27
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2220      	movs	r2, #32
 8003b12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2204      	movs	r2, #4
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b1c:	2327      	movs	r3, #39	; 0x27
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4013      	ands	r3, r2
 8003b34:	d00c      	beq.n	8003b50 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	0052      	lsls	r2, r2, #1
 8003b46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b48:	2327      	movs	r3, #39	; 0x27
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4013      	ands	r3, r2
 8003b58:	d00c      	beq.n	8003b74 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	00d2      	lsls	r2, r2, #3
 8003b6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b6c:	2327      	movs	r3, #39	; 0x27
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d00c      	beq.n	8003b98 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	2202      	movs	r2, #2
 8003b82:	4313      	orrs	r3, r2
 8003b84:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	0092      	lsls	r2, r2, #2
 8003b8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b90:	2327      	movs	r3, #39	; 0x27
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003b98:	2327      	movs	r3, #39	; 0x27
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01d      	beq.n	8003bde <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7ff fe0a 	bl	80037be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	490d      	ldr	r1, [pc, #52]	; (8003bec <I2C_IsErrorOccurred+0x1fc>)
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2241      	movs	r2, #65	; 0x41
 8003bca:	2120      	movs	r1, #32
 8003bcc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2242      	movs	r2, #66	; 0x42
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2240      	movs	r2, #64	; 0x40
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003bde:	2327      	movs	r3, #39	; 0x27
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	781b      	ldrb	r3, [r3, #0]
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b00b      	add	sp, #44	; 0x2c
 8003bea:	bd90      	pop	{r4, r7, pc}
 8003bec:	fe00e800 	.word	0xfe00e800

08003bf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	0008      	movs	r0, r1
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	240a      	movs	r4, #10
 8003c00:	193b      	adds	r3, r7, r4
 8003c02:	1c02      	adds	r2, r0, #0
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	2009      	movs	r0, #9
 8003c08:	183b      	adds	r3, r7, r0
 8003c0a:	1c0a      	adds	r2, r1, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c0e:	193b      	adds	r3, r7, r4
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	059b      	lsls	r3, r3, #22
 8003c14:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	0419      	lsls	r1, r3, #16
 8003c1c:	23ff      	movs	r3, #255	; 0xff
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c22:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c3a:	0d51      	lsrs	r1, r2, #21
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	00d2      	lsls	r2, r2, #3
 8003c40:	400a      	ands	r2, r1
 8003c42:	4907      	ldr	r1, [pc, #28]	; (8003c60 <I2C_TransferConfig+0x70>)
 8003c44:	430a      	orrs	r2, r1
 8003c46:	43d2      	mvns	r2, r2
 8003c48:	401a      	ands	r2, r3
 8003c4a:	0011      	movs	r1, r2
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b007      	add	sp, #28
 8003c5c:	bd90      	pop	{r4, r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	03ff63ff 	.word	0x03ff63ff

08003c64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	000a      	movs	r2, r1
 8003c6e:	1cbb      	adds	r3, r7, #2
 8003c70:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c76:	1cbb      	adds	r3, r7, #2
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d010      	beq.n	8003ca2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2242      	movs	r2, #66	; 0x42
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2241      	movs	r2, #65	; 0x41
 8003c8c:	5c9b      	ldrb	r3, [r3, r2]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	001a      	movs	r2, r3
 8003c92:	2328      	movs	r3, #40	; 0x28
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b28      	cmp	r3, #40	; 0x28
 8003c98:	d003      	beq.n	8003ca2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	22b0      	movs	r2, #176	; 0xb0
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ca2:	1cbb      	adds	r3, r7, #2
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d010      	beq.n	8003cce <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2244      	movs	r2, #68	; 0x44
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2241      	movs	r2, #65	; 0x41
 8003cb8:	5c9b      	ldrb	r3, [r3, r2]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	2328      	movs	r3, #40	; 0x28
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b28      	cmp	r3, #40	; 0x28
 8003cc4:	d003      	beq.n	8003cce <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	22b0      	movs	r2, #176	; 0xb0
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cce:	1cbb      	adds	r3, r7, #2
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	5e9b      	ldrsh	r3, [r3, r2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	da03      	bge.n	8003ce0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	22b8      	movs	r2, #184	; 0xb8
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ce0:	1cbb      	adds	r3, r7, #2
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d103      	bne.n	8003cf0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2290      	movs	r2, #144	; 0x90
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cf0:	1cbb      	adds	r3, r7, #2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d103      	bne.n	8003d00 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d00:	1cbb      	adds	r3, r7, #2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d103      	bne.n	8003d10 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2240      	movs	r2, #64	; 0x40
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	43d9      	mvns	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	400a      	ands	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b004      	add	sp, #16
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2241      	movs	r2, #65	; 0x41
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d138      	bne.n	8003db4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e032      	b.n	8003db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2240      	movs	r2, #64	; 0x40
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2241      	movs	r2, #65	; 0x41
 8003d5c:	2124      	movs	r1, #36	; 0x24
 8003d5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4911      	ldr	r1, [pc, #68]	; (8003dc0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2241      	movs	r2, #65	; 0x41
 8003da4:	2120      	movs	r1, #32
 8003da6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	2100      	movs	r1, #0
 8003dae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	ffffefff 	.word	0xffffefff

08003dc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2241      	movs	r2, #65	; 0x41
 8003dd2:	5c9b      	ldrb	r3, [r3, r2]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d139      	bne.n	8003e4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2240      	movs	r2, #64	; 0x40
 8003dde:	5c9b      	ldrb	r3, [r3, r2]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e033      	b.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2240      	movs	r2, #64	; 0x40
 8003dec:	2101      	movs	r1, #1
 8003dee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2241      	movs	r2, #65	; 0x41
 8003df4:	2124      	movs	r1, #36	; 0x24
 8003df6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	438a      	bics	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2241      	movs	r2, #65	; 0x41
 8003e3e:	2120      	movs	r1, #32
 8003e40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e000      	b.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
  }
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	fffff0ff 	.word	0xfffff0ff

08003e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f000 fb76 	bl	800455c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2201      	movs	r2, #1
 8003e76:	4013      	ands	r3, r2
 8003e78:	d100      	bne.n	8003e7c <HAL_RCC_OscConfig+0x20>
 8003e7a:	e08e      	b.n	8003f9a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e7c:	4bc5      	ldr	r3, [pc, #788]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	220c      	movs	r2, #12
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d00e      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e88:	4bc2      	ldr	r3, [pc, #776]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	220c      	movs	r2, #12
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d117      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x68>
 8003e94:	4bbf      	ldr	r3, [pc, #764]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	23c0      	movs	r3, #192	; 0xc0
 8003e9a:	025b      	lsls	r3, r3, #9
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	025b      	lsls	r3, r3, #9
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea6:	4bbb      	ldr	r3, [pc, #748]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	029b      	lsls	r3, r3, #10
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d100      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x58>
 8003eb2:	e071      	b.n	8003f98 <HAL_RCC_OscConfig+0x13c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d000      	beq.n	8003ebe <HAL_RCC_OscConfig+0x62>
 8003ebc:	e06c      	b.n	8003f98 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f000 fb4c 	bl	800455c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d107      	bne.n	8003edc <HAL_RCC_OscConfig+0x80>
 8003ecc:	4bb1      	ldr	r3, [pc, #708]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4bb0      	ldr	r3, [pc, #704]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003ed2:	2180      	movs	r1, #128	; 0x80
 8003ed4:	0249      	lsls	r1, r1, #9
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e02f      	b.n	8003f3c <HAL_RCC_OscConfig+0xe0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10c      	bne.n	8003efe <HAL_RCC_OscConfig+0xa2>
 8003ee4:	4bab      	ldr	r3, [pc, #684]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4baa      	ldr	r3, [pc, #680]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003eea:	49ab      	ldr	r1, [pc, #684]	; (8004198 <HAL_RCC_OscConfig+0x33c>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	4ba8      	ldr	r3, [pc, #672]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4ba7      	ldr	r3, [pc, #668]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003ef6:	49a9      	ldr	r1, [pc, #676]	; (800419c <HAL_RCC_OscConfig+0x340>)
 8003ef8:	400a      	ands	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e01e      	b.n	8003f3c <HAL_RCC_OscConfig+0xe0>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	d10e      	bne.n	8003f24 <HAL_RCC_OscConfig+0xc8>
 8003f06:	4ba3      	ldr	r3, [pc, #652]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4ba2      	ldr	r3, [pc, #648]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f0c:	2180      	movs	r1, #128	; 0x80
 8003f0e:	02c9      	lsls	r1, r1, #11
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	4b9f      	ldr	r3, [pc, #636]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b9e      	ldr	r3, [pc, #632]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f1a:	2180      	movs	r1, #128	; 0x80
 8003f1c:	0249      	lsls	r1, r1, #9
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0xe0>
 8003f24:	4b9b      	ldr	r3, [pc, #620]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b9a      	ldr	r3, [pc, #616]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f2a:	499b      	ldr	r1, [pc, #620]	; (8004198 <HAL_RCC_OscConfig+0x33c>)
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	4b98      	ldr	r3, [pc, #608]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b97      	ldr	r3, [pc, #604]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f36:	4999      	ldr	r1, [pc, #612]	; (800419c <HAL_RCC_OscConfig+0x340>)
 8003f38:	400a      	ands	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d014      	beq.n	8003f6e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd ff76 	bl	8001e34 <HAL_GetTick>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f4e:	f7fd ff71 	bl	8001e34 <HAL_GetTick>
 8003f52:	0002      	movs	r2, r0
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b64      	cmp	r3, #100	; 0x64
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e2fd      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f60:	4b8c      	ldr	r3, [pc, #560]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	029b      	lsls	r3, r3, #10
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0xf2>
 8003f6c:	e015      	b.n	8003f9a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fd ff61 	bl	8001e34 <HAL_GetTick>
 8003f72:	0003      	movs	r3, r0
 8003f74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fd ff5c 	bl	8001e34 <HAL_GetTick>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e2e8      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8a:	4b82      	ldr	r3, [pc, #520]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	029b      	lsls	r3, r3, #10
 8003f92:	4013      	ands	r3, r2
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x11c>
 8003f96:	e000      	b.n	8003f9a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x14a>
 8003fa4:	e06c      	b.n	8004080 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fa6:	4b7b      	ldr	r3, [pc, #492]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	220c      	movs	r2, #12
 8003fac:	4013      	ands	r3, r2
 8003fae:	d00e      	beq.n	8003fce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fb0:	4b78      	ldr	r3, [pc, #480]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	220c      	movs	r2, #12
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d11f      	bne.n	8003ffc <HAL_RCC_OscConfig+0x1a0>
 8003fbc:	4b75      	ldr	r3, [pc, #468]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	23c0      	movs	r3, #192	; 0xc0
 8003fc2:	025b      	lsls	r3, r3, #9
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d116      	bne.n	8003ffc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fce:	4b71      	ldr	r3, [pc, #452]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x188>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e2bb      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe4:	4b6b      	ldr	r3, [pc, #428]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	22f8      	movs	r2, #248	; 0xf8
 8003fea:	4393      	bics	r3, r2
 8003fec:	0019      	movs	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00da      	lsls	r2, r3, #3
 8003ff4:	4b67      	ldr	r3, [pc, #412]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffa:	e041      	b.n	8004080 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d024      	beq.n	800404e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004004:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b62      	ldr	r3, [pc, #392]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 800400a:	2101      	movs	r1, #1
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fd ff10 	bl	8001e34 <HAL_GetTick>
 8004014:	0003      	movs	r3, r0
 8004016:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401a:	f7fd ff0b 	bl	8001e34 <HAL_GetTick>
 800401e:	0002      	movs	r2, r0
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e297      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402c:	4b59      	ldr	r3, [pc, #356]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2202      	movs	r2, #2
 8004032:	4013      	ands	r3, r2
 8004034:	d0f1      	beq.n	800401a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004036:	4b57      	ldr	r3, [pc, #348]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	22f8      	movs	r2, #248	; 0xf8
 800403c:	4393      	bics	r3, r2
 800403e:	0019      	movs	r1, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	00da      	lsls	r2, r3, #3
 8004046:	4b53      	ldr	r3, [pc, #332]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e018      	b.n	8004080 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404e:	4b51      	ldr	r3, [pc, #324]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b50      	ldr	r3, [pc, #320]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004054:	2101      	movs	r1, #1
 8004056:	438a      	bics	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fd feeb 	bl	8001e34 <HAL_GetTick>
 800405e:	0003      	movs	r3, r0
 8004060:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004064:	f7fd fee6 	bl	8001e34 <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e272      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2202      	movs	r2, #2
 800407c:	4013      	ands	r3, r2
 800407e:	d1f1      	bne.n	8004064 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2208      	movs	r2, #8
 8004086:	4013      	ands	r3, r2
 8004088:	d036      	beq.n	80040f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d019      	beq.n	80040c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004092:	4b40      	ldr	r3, [pc, #256]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004096:	4b3f      	ldr	r3, [pc, #252]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004098:	2101      	movs	r1, #1
 800409a:	430a      	orrs	r2, r1
 800409c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409e:	f7fd fec9 	bl	8001e34 <HAL_GetTick>
 80040a2:	0003      	movs	r3, r0
 80040a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a8:	f7fd fec4 	bl	8001e34 <HAL_GetTick>
 80040ac:	0002      	movs	r2, r0
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e250      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2202      	movs	r2, #2
 80040c0:	4013      	ands	r3, r2
 80040c2:	d0f1      	beq.n	80040a8 <HAL_RCC_OscConfig+0x24c>
 80040c4:	e018      	b.n	80040f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c6:	4b33      	ldr	r3, [pc, #204]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 80040c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ca:	4b32      	ldr	r3, [pc, #200]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 80040cc:	2101      	movs	r1, #1
 80040ce:	438a      	bics	r2, r1
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d2:	f7fd feaf 	bl	8001e34 <HAL_GetTick>
 80040d6:	0003      	movs	r3, r0
 80040d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fd feaa 	bl	8001e34 <HAL_GetTick>
 80040e0:	0002      	movs	r2, r0
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e236      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ee:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	2202      	movs	r2, #2
 80040f4:	4013      	ands	r3, r2
 80040f6:	d1f1      	bne.n	80040dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2204      	movs	r2, #4
 80040fe:	4013      	ands	r3, r2
 8004100:	d100      	bne.n	8004104 <HAL_RCC_OscConfig+0x2a8>
 8004102:	e0b5      	b.n	8004270 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004104:	201f      	movs	r0, #31
 8004106:	183b      	adds	r3, r7, r0
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410c:	4b21      	ldr	r3, [pc, #132]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	055b      	lsls	r3, r3, #21
 8004114:	4013      	ands	r3, r2
 8004116:	d110      	bne.n	800413a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004118:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	0549      	lsls	r1, r1, #21
 8004122:	430a      	orrs	r2, r1
 8004124:	61da      	str	r2, [r3, #28]
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	055b      	lsls	r3, r3, #21
 800412e:	4013      	ands	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004134:	183b      	adds	r3, r7, r0
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCC_OscConfig+0x344>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4013      	ands	r3, r2
 8004144:	d11a      	bne.n	800417c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <HAL_RCC_OscConfig+0x344>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <HAL_RCC_OscConfig+0x344>)
 800414c:	2180      	movs	r1, #128	; 0x80
 800414e:	0049      	lsls	r1, r1, #1
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004154:	f7fd fe6e 	bl	8001e34 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415e:	f7fd fe69 	bl	8001e34 <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b64      	cmp	r3, #100	; 0x64
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1f5      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_OscConfig+0x344>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4013      	ands	r3, r2
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d10f      	bne.n	80041a4 <HAL_RCC_OscConfig+0x348>
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 8004186:	6a1a      	ldr	r2, [r3, #32]
 8004188:	4b02      	ldr	r3, [pc, #8]	; (8004194 <HAL_RCC_OscConfig+0x338>)
 800418a:	2101      	movs	r1, #1
 800418c:	430a      	orrs	r2, r1
 800418e:	621a      	str	r2, [r3, #32]
 8004190:	e036      	b.n	8004200 <HAL_RCC_OscConfig+0x3a4>
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	40021000 	.word	0x40021000
 8004198:	fffeffff 	.word	0xfffeffff
 800419c:	fffbffff 	.word	0xfffbffff
 80041a0:	40007000 	.word	0x40007000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10c      	bne.n	80041c6 <HAL_RCC_OscConfig+0x36a>
 80041ac:	4bca      	ldr	r3, [pc, #808]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	4bc9      	ldr	r3, [pc, #804]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041b2:	2101      	movs	r1, #1
 80041b4:	438a      	bics	r2, r1
 80041b6:	621a      	str	r2, [r3, #32]
 80041b8:	4bc7      	ldr	r3, [pc, #796]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041ba:	6a1a      	ldr	r2, [r3, #32]
 80041bc:	4bc6      	ldr	r3, [pc, #792]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041be:	2104      	movs	r1, #4
 80041c0:	438a      	bics	r2, r1
 80041c2:	621a      	str	r2, [r3, #32]
 80041c4:	e01c      	b.n	8004200 <HAL_RCC_OscConfig+0x3a4>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x38c>
 80041ce:	4bc2      	ldr	r3, [pc, #776]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	4bc1      	ldr	r3, [pc, #772]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041d4:	2104      	movs	r1, #4
 80041d6:	430a      	orrs	r2, r1
 80041d8:	621a      	str	r2, [r3, #32]
 80041da:	4bbf      	ldr	r3, [pc, #764]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041dc:	6a1a      	ldr	r2, [r3, #32]
 80041de:	4bbe      	ldr	r3, [pc, #760]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041e0:	2101      	movs	r1, #1
 80041e2:	430a      	orrs	r2, r1
 80041e4:	621a      	str	r2, [r3, #32]
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0x3a4>
 80041e8:	4bbb      	ldr	r3, [pc, #748]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041ea:	6a1a      	ldr	r2, [r3, #32]
 80041ec:	4bba      	ldr	r3, [pc, #744]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	621a      	str	r2, [r3, #32]
 80041f4:	4bb8      	ldr	r3, [pc, #736]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	4bb7      	ldr	r3, [pc, #732]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80041fa:	2104      	movs	r1, #4
 80041fc:	438a      	bics	r2, r1
 80041fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d014      	beq.n	8004232 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004208:	f7fd fe14 	bl	8001e34 <HAL_GetTick>
 800420c:	0003      	movs	r3, r0
 800420e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004210:	e009      	b.n	8004226 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd fe0f 	bl	8001e34 <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	4aaf      	ldr	r2, [pc, #700]	; (80044dc <HAL_RCC_OscConfig+0x680>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e19a      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	4bac      	ldr	r3, [pc, #688]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	2202      	movs	r2, #2
 800422c:	4013      	ands	r3, r2
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x3b6>
 8004230:	e013      	b.n	800425a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004232:	f7fd fdff 	bl	8001e34 <HAL_GetTick>
 8004236:	0003      	movs	r3, r0
 8004238:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423a:	e009      	b.n	8004250 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fd fdfa 	bl	8001e34 <HAL_GetTick>
 8004240:	0002      	movs	r2, r0
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	4aa5      	ldr	r2, [pc, #660]	; (80044dc <HAL_RCC_OscConfig+0x680>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e185      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004250:	4ba1      	ldr	r3, [pc, #644]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	2202      	movs	r2, #2
 8004256:	4013      	ands	r3, r2
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800425a:	231f      	movs	r3, #31
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004264:	4b9c      	ldr	r3, [pc, #624]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	4b9b      	ldr	r3, [pc, #620]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800426a:	499d      	ldr	r1, [pc, #628]	; (80044e0 <HAL_RCC_OscConfig+0x684>)
 800426c:	400a      	ands	r2, r1
 800426e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2210      	movs	r2, #16
 8004276:	4013      	ands	r3, r2
 8004278:	d063      	beq.n	8004342 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d12a      	bne.n	80042d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004282:	4b95      	ldr	r3, [pc, #596]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004286:	4b94      	ldr	r3, [pc, #592]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004288:	2104      	movs	r1, #4
 800428a:	430a      	orrs	r2, r1
 800428c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800428e:	4b92      	ldr	r3, [pc, #584]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004292:	4b91      	ldr	r3, [pc, #580]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004294:	2101      	movs	r1, #1
 8004296:	430a      	orrs	r2, r1
 8004298:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429a:	f7fd fdcb 	bl	8001e34 <HAL_GetTick>
 800429e:	0003      	movs	r3, r0
 80042a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80042a4:	f7fd fdc6 	bl	8001e34 <HAL_GetTick>
 80042a8:	0002      	movs	r2, r0
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e152      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042b6:	4b88      	ldr	r3, [pc, #544]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	2202      	movs	r2, #2
 80042bc:	4013      	ands	r3, r2
 80042be:	d0f1      	beq.n	80042a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80042c0:	4b85      	ldr	r3, [pc, #532]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80042c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c4:	22f8      	movs	r2, #248	; 0xf8
 80042c6:	4393      	bics	r3, r2
 80042c8:	0019      	movs	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	00da      	lsls	r2, r3, #3
 80042d0:	4b81      	ldr	r3, [pc, #516]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80042d2:	430a      	orrs	r2, r1
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34
 80042d6:	e034      	b.n	8004342 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	3305      	adds	r3, #5
 80042de:	d111      	bne.n	8004304 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80042e0:	4b7d      	ldr	r3, [pc, #500]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80042e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e4:	4b7c      	ldr	r3, [pc, #496]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80042e6:	2104      	movs	r1, #4
 80042e8:	438a      	bics	r2, r1
 80042ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80042ec:	4b7a      	ldr	r3, [pc, #488]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	22f8      	movs	r2, #248	; 0xf8
 80042f2:	4393      	bics	r3, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	00da      	lsls	r2, r3, #3
 80042fc:	4b76      	ldr	r3, [pc, #472]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80042fe:	430a      	orrs	r2, r1
 8004300:	635a      	str	r2, [r3, #52]	; 0x34
 8004302:	e01e      	b.n	8004342 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004304:	4b74      	ldr	r3, [pc, #464]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004308:	4b73      	ldr	r3, [pc, #460]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800430a:	2104      	movs	r1, #4
 800430c:	430a      	orrs	r2, r1
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004310:	4b71      	ldr	r3, [pc, #452]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004314:	4b70      	ldr	r3, [pc, #448]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004316:	2101      	movs	r1, #1
 8004318:	438a      	bics	r2, r1
 800431a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431c:	f7fd fd8a 	bl	8001e34 <HAL_GetTick>
 8004320:	0003      	movs	r3, r0
 8004322:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004326:	f7fd fd85 	bl	8001e34 <HAL_GetTick>
 800432a:	0002      	movs	r2, r0
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e111      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004338:	4b67      	ldr	r3, [pc, #412]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	2202      	movs	r2, #2
 800433e:	4013      	ands	r3, r2
 8004340:	d1f1      	bne.n	8004326 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2220      	movs	r2, #32
 8004348:	4013      	ands	r3, r2
 800434a:	d05c      	beq.n	8004406 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800434c:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	220c      	movs	r2, #12
 8004352:	4013      	ands	r3, r2
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d00e      	beq.n	8004376 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004358:	4b5f      	ldr	r3, [pc, #380]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	220c      	movs	r2, #12
 800435e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004360:	2b08      	cmp	r3, #8
 8004362:	d114      	bne.n	800438e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004364:	4b5c      	ldr	r3, [pc, #368]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	23c0      	movs	r3, #192	; 0xc0
 800436a:	025b      	lsls	r3, r3, #9
 800436c:	401a      	ands	r2, r3
 800436e:	23c0      	movs	r3, #192	; 0xc0
 8004370:	025b      	lsls	r3, r3, #9
 8004372:	429a      	cmp	r2, r3
 8004374:	d10b      	bne.n	800438e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004376:	4b58      	ldr	r3, [pc, #352]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	029b      	lsls	r3, r3, #10
 800437e:	4013      	ands	r3, r2
 8004380:	d040      	beq.n	8004404 <HAL_RCC_OscConfig+0x5a8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d03c      	beq.n	8004404 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0e6      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01b      	beq.n	80043ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004396:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439a:	4b4f      	ldr	r3, [pc, #316]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	0249      	lsls	r1, r1, #9
 80043a0:	430a      	orrs	r2, r1
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fd fd46 	bl	8001e34 <HAL_GetTick>
 80043a8:	0003      	movs	r3, r0
 80043aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ae:	f7fd fd41 	bl	8001e34 <HAL_GetTick>
 80043b2:	0002      	movs	r2, r0
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0cd      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80043c0:	4b45      	ldr	r3, [pc, #276]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80043c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	029b      	lsls	r3, r3, #10
 80043c8:	4013      	ands	r3, r2
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x552>
 80043cc:	e01b      	b.n	8004406 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80043ce:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80043d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d2:	4b41      	ldr	r3, [pc, #260]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80043d4:	4943      	ldr	r1, [pc, #268]	; (80044e4 <HAL_RCC_OscConfig+0x688>)
 80043d6:	400a      	ands	r2, r1
 80043d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043da:	f7fd fd2b 	bl	8001e34 <HAL_GetTick>
 80043de:	0003      	movs	r3, r0
 80043e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e4:	f7fd fd26 	bl	8001e34 <HAL_GetTick>
 80043e8:	0002      	movs	r2, r0
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0b2      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80043f6:	4b38      	ldr	r3, [pc, #224]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80043f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	029b      	lsls	r3, r3, #10
 80043fe:	4013      	ands	r3, r2
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x588>
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004404:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	d100      	bne.n	8004410 <HAL_RCC_OscConfig+0x5b4>
 800440e:	e0a4      	b.n	800455a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004410:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	220c      	movs	r2, #12
 8004416:	4013      	ands	r3, r2
 8004418:	2b08      	cmp	r3, #8
 800441a:	d100      	bne.n	800441e <HAL_RCC_OscConfig+0x5c2>
 800441c:	e078      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b02      	cmp	r3, #2
 8004424:	d14c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004426:	4b2c      	ldr	r3, [pc, #176]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800442c:	492e      	ldr	r1, [pc, #184]	; (80044e8 <HAL_RCC_OscConfig+0x68c>)
 800442e:	400a      	ands	r2, r1
 8004430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004432:	f7fd fcff 	bl	8001e34 <HAL_GetTick>
 8004436:	0003      	movs	r3, r0
 8004438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fd fcfa 	bl	8001e34 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e086      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	049b      	lsls	r3, r3, #18
 8004456:	4013      	ands	r3, r2
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800445a:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	220f      	movs	r2, #15
 8004460:	4393      	bics	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800446a:	430a      	orrs	r2, r1
 800446c:	62da      	str	r2, [r3, #44]	; 0x2c
 800446e:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <HAL_RCC_OscConfig+0x690>)
 8004474:	4013      	ands	r3, r2
 8004476:	0019      	movs	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	431a      	orrs	r2, r3
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004488:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 800448e:	2180      	movs	r1, #128	; 0x80
 8004490:	0449      	lsls	r1, r1, #17
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fd fccd 	bl	8001e34 <HAL_GetTick>
 800449a:	0003      	movs	r3, r0
 800449c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fd fcc8 	bl	8001e34 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e054      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	049b      	lsls	r3, r3, #18
 80044ba:	4013      	ands	r3, r2
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x644>
 80044be:	e04c      	b.n	800455a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <HAL_RCC_OscConfig+0x67c>)
 80044c6:	4908      	ldr	r1, [pc, #32]	; (80044e8 <HAL_RCC_OscConfig+0x68c>)
 80044c8:	400a      	ands	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fd fcb2 	bl	8001e34 <HAL_GetTick>
 80044d0:	0003      	movs	r3, r0
 80044d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x6a6>
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	40021000 	.word	0x40021000
 80044dc:	00001388 	.word	0x00001388
 80044e0:	efffffff 	.word	0xefffffff
 80044e4:	fffeffff 	.word	0xfffeffff
 80044e8:	feffffff 	.word	0xfeffffff
 80044ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd fca0 	bl	8001e34 <HAL_GetTick>
 80044f4:	0002      	movs	r2, r0
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e02c      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <HAL_RCC_OscConfig+0x708>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	049b      	lsls	r3, r3, #18
 800450a:	4013      	ands	r3, r2
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x694>
 800450e:	e024      	b.n	800455a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e01f      	b.n	800455c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <HAL_RCC_OscConfig+0x708>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_RCC_OscConfig+0x708>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	23c0      	movs	r3, #192	; 0xc0
 800452c:	025b      	lsls	r3, r3, #9
 800452e:	401a      	ands	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	429a      	cmp	r2, r3
 8004536:	d10e      	bne.n	8004556 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	220f      	movs	r2, #15
 800453c:	401a      	ands	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d107      	bne.n	8004556 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	23f0      	movs	r3, #240	; 0xf0
 800454a:	039b      	lsls	r3, r3, #14
 800454c:	401a      	ands	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d001      	beq.n	800455a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b008      	add	sp, #32
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0bf      	b.n	80046fc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b61      	ldr	r3, [pc, #388]	; (8004704 <HAL_RCC_ClockConfig+0x19c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2201      	movs	r2, #1
 8004582:	4013      	ands	r3, r2
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d911      	bls.n	80045ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <HAL_RCC_ClockConfig+0x19c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2201      	movs	r2, #1
 8004590:	4393      	bics	r3, r2
 8004592:	0019      	movs	r1, r3
 8004594:	4b5b      	ldr	r3, [pc, #364]	; (8004704 <HAL_RCC_ClockConfig+0x19c>)
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459c:	4b59      	ldr	r3, [pc, #356]	; (8004704 <HAL_RCC_ClockConfig+0x19c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2201      	movs	r2, #1
 80045a2:	4013      	ands	r3, r2
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d001      	beq.n	80045ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0a6      	b.n	80046fc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2202      	movs	r2, #2
 80045b4:	4013      	ands	r3, r2
 80045b6:	d015      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2204      	movs	r2, #4
 80045be:	4013      	ands	r3, r2
 80045c0:	d006      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045c2:	4b51      	ldr	r3, [pc, #324]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 80045c8:	21e0      	movs	r1, #224	; 0xe0
 80045ca:	00c9      	lsls	r1, r1, #3
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d0:	4b4d      	ldr	r3, [pc, #308]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	22f0      	movs	r2, #240	; 0xf0
 80045d6:	4393      	bics	r3, r2
 80045d8:	0019      	movs	r1, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	4b4a      	ldr	r3, [pc, #296]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	d04c      	beq.n	8004688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	4b44      	ldr	r3, [pc, #272]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	029b      	lsls	r3, r3, #10
 80045fe:	4013      	ands	r3, r2
 8004600:	d120      	bne.n	8004644 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e07a      	b.n	80046fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460e:	4b3e      	ldr	r3, [pc, #248]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	049b      	lsls	r3, r3, #18
 8004616:	4013      	ands	r3, r2
 8004618:	d114      	bne.n	8004644 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e06e      	b.n	80046fc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004626:	4b38      	ldr	r3, [pc, #224]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 8004628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	029b      	lsls	r3, r3, #10
 800462e:	4013      	ands	r3, r2
 8004630:	d108      	bne.n	8004644 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e062      	b.n	80046fc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	4b34      	ldr	r3, [pc, #208]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2202      	movs	r2, #2
 800463c:	4013      	ands	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e05b      	b.n	80046fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004644:	4b30      	ldr	r3, [pc, #192]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2203      	movs	r2, #3
 800464a:	4393      	bics	r3, r2
 800464c:	0019      	movs	r1, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004658:	f7fd fbec 	bl	8001e34 <HAL_GetTick>
 800465c:	0003      	movs	r3, r0
 800465e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004660:	e009      	b.n	8004676 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004662:	f7fd fbe7 	bl	8001e34 <HAL_GetTick>
 8004666:	0002      	movs	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	4a27      	ldr	r2, [pc, #156]	; (800470c <HAL_RCC_ClockConfig+0x1a4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e042      	b.n	80046fc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b24      	ldr	r3, [pc, #144]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	220c      	movs	r2, #12
 800467c:	401a      	ands	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1ec      	bne.n	8004662 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004688:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_RCC_ClockConfig+0x19c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2201      	movs	r2, #1
 800468e:	4013      	ands	r3, r2
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d211      	bcs.n	80046ba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_RCC_ClockConfig+0x19c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2201      	movs	r2, #1
 800469c:	4393      	bics	r3, r2
 800469e:	0019      	movs	r1, r3
 80046a0:	4b18      	ldr	r3, [pc, #96]	; (8004704 <HAL_RCC_ClockConfig+0x19c>)
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a8:	4b16      	ldr	r3, [pc, #88]	; (8004704 <HAL_RCC_ClockConfig+0x19c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2201      	movs	r2, #1
 80046ae:	4013      	ands	r3, r2
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d001      	beq.n	80046ba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e020      	b.n	80046fc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2204      	movs	r2, #4
 80046c0:	4013      	ands	r3, r2
 80046c2:	d009      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b10      	ldr	r3, [pc, #64]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4a11      	ldr	r2, [pc, #68]	; (8004710 <HAL_RCC_ClockConfig+0x1a8>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	0019      	movs	r1, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046d8:	f000 f820 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80046dc:	0001      	movs	r1, r0
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x1a0>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	220f      	movs	r2, #15
 80046e6:	4013      	ands	r3, r2
 80046e8:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <HAL_RCC_ClockConfig+0x1ac>)
 80046ea:	5cd3      	ldrb	r3, [r2, r3]
 80046ec:	000a      	movs	r2, r1
 80046ee:	40da      	lsrs	r2, r3
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <HAL_RCC_ClockConfig+0x1b0>)
 80046f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046f4:	2003      	movs	r0, #3
 80046f6:	f7fd fb57 	bl	8001da8 <HAL_InitTick>
  
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b004      	add	sp, #16
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40022000 	.word	0x40022000
 8004708:	40021000 	.word	0x40021000
 800470c:	00001388 	.word	0x00001388
 8004710:	fffff8ff 	.word	0xfffff8ff
 8004714:	08006bbc 	.word	0x08006bbc
 8004718:	20000000 	.word	0x20000000

0800471c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004736:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	220c      	movs	r2, #12
 8004740:	4013      	ands	r3, r2
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d046      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0xb8>
 8004746:	d848      	bhi.n	80047da <HAL_RCC_GetSysClockFreq+0xbe>
 8004748:	2b04      	cmp	r3, #4
 800474a:	d002      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x36>
 800474c:	2b08      	cmp	r3, #8
 800474e:	d003      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x3c>
 8004750:	e043      	b.n	80047da <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004752:	4b27      	ldr	r3, [pc, #156]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004754:	613b      	str	r3, [r7, #16]
      break;
 8004756:	e043      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	0c9b      	lsrs	r3, r3, #18
 800475c:	220f      	movs	r2, #15
 800475e:	4013      	ands	r3, r2
 8004760:	4a24      	ldr	r2, [pc, #144]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004762:	5cd3      	ldrb	r3, [r2, r3]
 8004764:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004766:	4b21      	ldr	r3, [pc, #132]	; (80047ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	220f      	movs	r2, #15
 800476c:	4013      	ands	r3, r2
 800476e:	4a22      	ldr	r2, [pc, #136]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	23c0      	movs	r3, #192	; 0xc0
 8004778:	025b      	lsls	r3, r3, #9
 800477a:	401a      	ands	r2, r3
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	025b      	lsls	r3, r3, #9
 8004780:	429a      	cmp	r2, r3
 8004782:	d109      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	481a      	ldr	r0, [pc, #104]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004788:	f7fb fcbc 	bl	8000104 <__udivsi3>
 800478c:	0003      	movs	r3, r0
 800478e:	001a      	movs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4353      	muls	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e01a      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	23c0      	movs	r3, #192	; 0xc0
 800479c:	025b      	lsls	r3, r3, #9
 800479e:	401a      	ands	r2, r3
 80047a0:	23c0      	movs	r3, #192	; 0xc0
 80047a2:	025b      	lsls	r3, r3, #9
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d109      	bne.n	80047bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	4814      	ldr	r0, [pc, #80]	; (80047fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80047ac:	f7fb fcaa 	bl	8000104 <__udivsi3>
 80047b0:	0003      	movs	r3, r0
 80047b2:	001a      	movs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4353      	muls	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e008      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	480c      	ldr	r0, [pc, #48]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80047c0:	f7fb fca0 	bl	8000104 <__udivsi3>
 80047c4:	0003      	movs	r3, r0
 80047c6:	001a      	movs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4353      	muls	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	613b      	str	r3, [r7, #16]
      break;
 80047d2:	e005      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80047d6:	613b      	str	r3, [r7, #16]
      break;
 80047d8:	e002      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80047dc:	613b      	str	r3, [r7, #16]
      break;
 80047de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80047e0:	693b      	ldr	r3, [r7, #16]
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b006      	add	sp, #24
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	40021000 	.word	0x40021000
 80047f0:	007a1200 	.word	0x007a1200
 80047f4:	08006bd4 	.word	0x08006bd4
 80047f8:	08006be4 	.word	0x08006be4
 80047fc:	02dc6c00 	.word	0x02dc6c00

08004800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004804:	4b02      	ldr	r3, [pc, #8]	; (8004810 <HAL_RCC_GetHCLKFreq+0x10>)
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	20000000 	.word	0x20000000

08004814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004818:	f7ff fff2 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 800481c:	0001      	movs	r1, r0
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	2207      	movs	r2, #7
 8004826:	4013      	ands	r3, r2
 8004828:	4a04      	ldr	r2, [pc, #16]	; (800483c <HAL_RCC_GetPCLK1Freq+0x28>)
 800482a:	5cd3      	ldrb	r3, [r2, r3]
 800482c:	40d9      	lsrs	r1, r3
 800482e:	000b      	movs	r3, r1
}    
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	40021000 	.word	0x40021000
 800483c:	08006bcc 	.word	0x08006bcc

08004840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	025b      	lsls	r3, r3, #9
 8004858:	4013      	ands	r3, r2
 800485a:	d100      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800485c:	e08e      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800485e:	2017      	movs	r0, #23
 8004860:	183b      	adds	r3, r7, r0
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004866:	4b6e      	ldr	r3, [pc, #440]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	055b      	lsls	r3, r3, #21
 800486e:	4013      	ands	r3, r2
 8004870:	d110      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004872:	4b6b      	ldr	r3, [pc, #428]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	4b6a      	ldr	r3, [pc, #424]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	0549      	lsls	r1, r1, #21
 800487c:	430a      	orrs	r2, r1
 800487e:	61da      	str	r2, [r3, #28]
 8004880:	4b67      	ldr	r3, [pc, #412]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	055b      	lsls	r3, r3, #21
 8004888:	4013      	ands	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488e:	183b      	adds	r3, r7, r0
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004894:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4013      	ands	r3, r2
 800489e:	d11a      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a0:	4b60      	ldr	r3, [pc, #384]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b5f      	ldr	r3, [pc, #380]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048a6:	2180      	movs	r1, #128	; 0x80
 80048a8:	0049      	lsls	r1, r1, #1
 80048aa:	430a      	orrs	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ae:	f7fd fac1 	bl	8001e34 <HAL_GetTick>
 80048b2:	0003      	movs	r3, r0
 80048b4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	e008      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fd fabc 	bl	8001e34 <HAL_GetTick>
 80048bc:	0002      	movs	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0a6      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4013      	ands	r3, r2
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048d6:	4b52      	ldr	r3, [pc, #328]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048d8:	6a1a      	ldr	r2, [r3, #32]
 80048da:	23c0      	movs	r3, #192	; 0xc0
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4013      	ands	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d034      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	23c0      	movs	r3, #192	; 0xc0
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4013      	ands	r3, r2
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d02c      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048f8:	4b49      	ldr	r3, [pc, #292]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	4a4a      	ldr	r2, [pc, #296]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80048fe:	4013      	ands	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004902:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004904:	6a1a      	ldr	r2, [r3, #32]
 8004906:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004908:	2180      	movs	r1, #128	; 0x80
 800490a:	0249      	lsls	r1, r1, #9
 800490c:	430a      	orrs	r2, r1
 800490e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004910:	4b43      	ldr	r3, [pc, #268]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	4b42      	ldr	r3, [pc, #264]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004916:	4945      	ldr	r1, [pc, #276]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004918:	400a      	ands	r2, r1
 800491a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800491c:	4b40      	ldr	r3, [pc, #256]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	4013      	ands	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7fd fa83 	bl	8001e34 <HAL_GetTick>
 800492e:	0003      	movs	r3, r0
 8004930:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004932:	e009      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fd fa7e 	bl	8001e34 <HAL_GetTick>
 8004938:	0002      	movs	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	4a3c      	ldr	r2, [pc, #240]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e067      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	4b35      	ldr	r3, [pc, #212]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	2202      	movs	r2, #2
 800494e:	4013      	ands	r3, r2
 8004950:	d0f0      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004952:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004958:	4013      	ands	r3, r2
 800495a:	0019      	movs	r1, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	4b2f      	ldr	r3, [pc, #188]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004962:	430a      	orrs	r2, r1
 8004964:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004966:	2317      	movs	r3, #23
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d105      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	4b2a      	ldr	r3, [pc, #168]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004976:	492f      	ldr	r1, [pc, #188]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004978:	400a      	ands	r2, r1
 800497a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2201      	movs	r2, #1
 8004982:	4013      	ands	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	2203      	movs	r2, #3
 800498c:	4393      	bics	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004996:	430a      	orrs	r2, r1
 8004998:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2202      	movs	r2, #2
 80049a0:	4013      	ands	r3, r2
 80049a2:	d009      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049a4:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	4a23      	ldr	r2, [pc, #140]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	0019      	movs	r1, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049b4:	430a      	orrs	r2, r1
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	02db      	lsls	r3, r3, #11
 80049c0:	4013      	ands	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	0019      	movs	r1, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049d4:	430a      	orrs	r2, r1
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2220      	movs	r2, #32
 80049de:	4013      	ands	r3, r2
 80049e0:	d009      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049e2:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	2210      	movs	r2, #16
 80049e8:	4393      	bics	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049f2:	430a      	orrs	r2, r1
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4013      	ands	r3, r2
 8004a00:	d009      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	2240      	movs	r2, #64	; 0x40
 8004a08:	4393      	bics	r3, r2
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a12:	430a      	orrs	r2, r1
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b006      	add	sp, #24
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40007000 	.word	0x40007000
 8004a28:	fffffcff 	.word	0xfffffcff
 8004a2c:	fffeffff 	.word	0xfffeffff
 8004a30:	00001388 	.word	0x00001388
 8004a34:	efffffff 	.word	0xefffffff
 8004a38:	fffcffff 	.word	0xfffcffff
 8004a3c:	fff3ffff 	.word	0xfff3ffff

08004a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e042      	b.n	8004ad8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	223d      	movs	r2, #61	; 0x3d
 8004a56:	5c9b      	ldrb	r3, [r3, r2]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	223c      	movs	r2, #60	; 0x3c
 8004a62:	2100      	movs	r1, #0
 8004a64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f7fc ff29 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	223d      	movs	r2, #61	; 0x3d
 8004a72:	2102      	movs	r1, #2
 8004a74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	0019      	movs	r1, r3
 8004a80:	0010      	movs	r0, r2
 8004a82:	f000 fd0f 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2246      	movs	r2, #70	; 0x46
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	223e      	movs	r2, #62	; 0x3e
 8004a92:	2101      	movs	r1, #1
 8004a94:	5499      	strb	r1, [r3, r2]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	223f      	movs	r2, #63	; 0x3f
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	5499      	strb	r1, [r3, r2]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2240      	movs	r2, #64	; 0x40
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	5499      	strb	r1, [r3, r2]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2241      	movs	r2, #65	; 0x41
 8004aaa:	2101      	movs	r1, #1
 8004aac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2242      	movs	r2, #66	; 0x42
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	5499      	strb	r1, [r3, r2]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2243      	movs	r2, #67	; 0x43
 8004aba:	2101      	movs	r1, #1
 8004abc:	5499      	strb	r1, [r3, r2]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2244      	movs	r2, #68	; 0x44
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	5499      	strb	r1, [r3, r2]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2245      	movs	r2, #69	; 0x45
 8004aca:	2101      	movs	r1, #1
 8004acc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	223d      	movs	r2, #61	; 0x3d
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b002      	add	sp, #8
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	223d      	movs	r2, #61	; 0x3d
 8004aec:	5c9b      	ldrb	r3, [r3, r2]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d001      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e03b      	b.n	8004b70 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	223d      	movs	r2, #61	; 0x3d
 8004afc:	2102      	movs	r1, #2
 8004afe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <HAL_TIM_Base_Start_IT+0x98>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00f      	beq.n	8004b3a <HAL_TIM_Base_Start_IT+0x5a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	05db      	lsls	r3, r3, #23
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d009      	beq.n	8004b3a <HAL_TIM_Base_Start_IT+0x5a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <HAL_TIM_Base_Start_IT+0x9c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d004      	beq.n	8004b3a <HAL_TIM_Base_Start_IT+0x5a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a12      	ldr	r2, [pc, #72]	; (8004b80 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d111      	bne.n	8004b5e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2207      	movs	r2, #7
 8004b42:	4013      	ands	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b06      	cmp	r3, #6
 8004b4a:	d010      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2101      	movs	r1, #1
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5c:	e007      	b.n	8004b6e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2101      	movs	r1, #1
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b004      	add	sp, #16
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40014000 	.word	0x40014000

08004b84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e042      	b.n	8004c1c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	223d      	movs	r2, #61	; 0x3d
 8004b9a:	5c9b      	ldrb	r3, [r3, r2]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	223c      	movs	r2, #60	; 0x3c
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 f839 	bl	8004c24 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	223d      	movs	r2, #61	; 0x3d
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	0010      	movs	r0, r2
 8004bc6:	f000 fc6d 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2246      	movs	r2, #70	; 0x46
 8004bce:	2101      	movs	r1, #1
 8004bd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	223e      	movs	r2, #62	; 0x3e
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	5499      	strb	r1, [r3, r2]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	223f      	movs	r2, #63	; 0x3f
 8004bde:	2101      	movs	r1, #1
 8004be0:	5499      	strb	r1, [r3, r2]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2240      	movs	r2, #64	; 0x40
 8004be6:	2101      	movs	r1, #1
 8004be8:	5499      	strb	r1, [r3, r2]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2241      	movs	r2, #65	; 0x41
 8004bee:	2101      	movs	r1, #1
 8004bf0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2242      	movs	r2, #66	; 0x42
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	5499      	strb	r1, [r3, r2]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2243      	movs	r2, #67	; 0x43
 8004bfe:	2101      	movs	r1, #1
 8004c00:	5499      	strb	r1, [r3, r2]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2244      	movs	r2, #68	; 0x44
 8004c06:	2101      	movs	r1, #1
 8004c08:	5499      	strb	r1, [r3, r2]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2245      	movs	r2, #69	; 0x45
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	223d      	movs	r2, #61	; 0x3d
 8004c16:	2101      	movs	r1, #1
 8004c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b002      	add	sp, #8
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e042      	b.n	8004ccc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	223d      	movs	r2, #61	; 0x3d
 8004c4a:	5c9b      	ldrb	r3, [r3, r2]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d107      	bne.n	8004c62 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	223c      	movs	r2, #60	; 0x3c
 8004c56:	2100      	movs	r1, #0
 8004c58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f000 f839 	bl	8004cd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	223d      	movs	r2, #61	; 0x3d
 8004c66:	2102      	movs	r1, #2
 8004c68:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3304      	adds	r3, #4
 8004c72:	0019      	movs	r1, r3
 8004c74:	0010      	movs	r0, r2
 8004c76:	f000 fc15 	bl	80054a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2246      	movs	r2, #70	; 0x46
 8004c7e:	2101      	movs	r1, #1
 8004c80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	223e      	movs	r2, #62	; 0x3e
 8004c86:	2101      	movs	r1, #1
 8004c88:	5499      	strb	r1, [r3, r2]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	223f      	movs	r2, #63	; 0x3f
 8004c8e:	2101      	movs	r1, #1
 8004c90:	5499      	strb	r1, [r3, r2]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2240      	movs	r2, #64	; 0x40
 8004c96:	2101      	movs	r1, #1
 8004c98:	5499      	strb	r1, [r3, r2]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2241      	movs	r2, #65	; 0x41
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2242      	movs	r2, #66	; 0x42
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	5499      	strb	r1, [r3, r2]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2243      	movs	r2, #67	; 0x43
 8004cae:	2101      	movs	r1, #1
 8004cb0:	5499      	strb	r1, [r3, r2]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2244      	movs	r2, #68	; 0x44
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	5499      	strb	r1, [r3, r2]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2245      	movs	r2, #69	; 0x45
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	223d      	movs	r2, #61	; 0x3d
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b002      	add	sp, #8
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d108      	bne.n	8004d06 <HAL_TIM_PWM_Start+0x22>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	223e      	movs	r2, #62	; 0x3e
 8004cf8:	5c9b      	ldrb	r3, [r3, r2]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	1e5a      	subs	r2, r3, #1
 8004d00:	4193      	sbcs	r3, r2
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	e01f      	b.n	8004d46 <HAL_TIM_PWM_Start+0x62>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d108      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x3a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	223f      	movs	r2, #63	; 0x3f
 8004d10:	5c9b      	ldrb	r3, [r3, r2]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	1e5a      	subs	r2, r3, #1
 8004d18:	4193      	sbcs	r3, r2
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e013      	b.n	8004d46 <HAL_TIM_PWM_Start+0x62>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d108      	bne.n	8004d36 <HAL_TIM_PWM_Start+0x52>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2240      	movs	r2, #64	; 0x40
 8004d28:	5c9b      	ldrb	r3, [r3, r2]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	1e5a      	subs	r2, r3, #1
 8004d30:	4193      	sbcs	r3, r2
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e007      	b.n	8004d46 <HAL_TIM_PWM_Start+0x62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2241      	movs	r2, #65	; 0x41
 8004d3a:	5c9b      	ldrb	r3, [r3, r2]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	1e5a      	subs	r2, r3, #1
 8004d42:	4193      	sbcs	r3, r2
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e074      	b.n	8004e38 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x7a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	223e      	movs	r2, #62	; 0x3e
 8004d58:	2102      	movs	r1, #2
 8004d5a:	5499      	strb	r1, [r3, r2]
 8004d5c:	e013      	b.n	8004d86 <HAL_TIM_PWM_Start+0xa2>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_PWM_Start+0x8a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	223f      	movs	r2, #63	; 0x3f
 8004d68:	2102      	movs	r1, #2
 8004d6a:	5499      	strb	r1, [r3, r2]
 8004d6c:	e00b      	b.n	8004d86 <HAL_TIM_PWM_Start+0xa2>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_PWM_Start+0x9a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2240      	movs	r2, #64	; 0x40
 8004d78:	2102      	movs	r1, #2
 8004d7a:	5499      	strb	r1, [r3, r2]
 8004d7c:	e003      	b.n	8004d86 <HAL_TIM_PWM_Start+0xa2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2241      	movs	r2, #65	; 0x41
 8004d82:	2102      	movs	r1, #2
 8004d84:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f000 fe9e 	bl	8005ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <HAL_TIM_PWM_Start+0x15c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_PWM_Start+0xd8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <HAL_TIM_PWM_Start+0x160>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_PWM_Start+0xd8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <HAL_TIM_PWM_Start+0x164>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_PWM_Start+0xd8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <HAL_TIM_PWM_Start+0x168>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIM_PWM_Start+0xdc>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_TIM_PWM_Start+0xde>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	0209      	lsls	r1, r1, #8
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <HAL_TIM_PWM_Start+0x15c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00f      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x11e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	05db      	lsls	r3, r3, #23
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d009      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x11e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <HAL_TIM_PWM_Start+0x16c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x11e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <HAL_TIM_PWM_Start+0x160>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d111      	bne.n	8004e26 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2207      	movs	r2, #7
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b06      	cmp	r3, #6
 8004e12:	d010      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2101      	movs	r1, #1
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e24:	e007      	b.n	8004e36 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2101      	movs	r1, #1
 8004e32:	430a      	orrs	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b004      	add	sp, #16
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40014400 	.word	0x40014400
 8004e4c:	40014800 	.word	0x40014800
 8004e50:	40000400 	.word	0x40000400

08004e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2202      	movs	r2, #2
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d124      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2202      	movs	r2, #2
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d11d      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	4252      	negs	r2, r2
 8004e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2203      	movs	r2, #3
 8004e90:	4013      	ands	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	0018      	movs	r0, r3
 8004e98:	f000 faec 	bl	8005474 <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e007      	b.n	8004eae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f000 fadf 	bl	8005464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f000 faeb 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d125      	bne.n	8004f0e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d11e      	bne.n	8004f0e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2205      	movs	r2, #5
 8004ed6:	4252      	negs	r2, r2
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	23c0      	movs	r3, #192	; 0xc0
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4013      	ands	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f000 fabf 	bl	8005474 <HAL_TIM_IC_CaptureCallback>
 8004ef6:	e007      	b.n	8004f08 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 fab2 	bl	8005464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 fabe 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2208      	movs	r2, #8
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d124      	bne.n	8004f66 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2208      	movs	r2, #8
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d11d      	bne.n	8004f66 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2209      	movs	r2, #9
 8004f30:	4252      	negs	r2, r2
 8004f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2204      	movs	r2, #4
 8004f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	2203      	movs	r2, #3
 8004f42:	4013      	ands	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f000 fa93 	bl	8005474 <HAL_TIM_IC_CaptureCallback>
 8004f4e:	e007      	b.n	8004f60 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 fa86 	bl	8005464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 fa92 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b10      	cmp	r3, #16
 8004f72:	d125      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b10      	cmp	r3, #16
 8004f80:	d11e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2211      	movs	r2, #17
 8004f88:	4252      	negs	r2, r2
 8004f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2208      	movs	r2, #8
 8004f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	23c0      	movs	r3, #192	; 0xc0
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 fa66 	bl	8005474 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e007      	b.n	8004fba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f000 fa59 	bl	8005464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 fa65 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10f      	bne.n	8004fee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d108      	bne.n	8004fee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	4252      	negs	r2, r2
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7fc fb61 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2280      	movs	r2, #128	; 0x80
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b80      	cmp	r3, #128	; 0x80
 8004ffa:	d10f      	bne.n	800501c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2280      	movs	r2, #128	; 0x80
 8005004:	4013      	ands	r3, r2
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d108      	bne.n	800501c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2281      	movs	r2, #129	; 0x81
 8005010:	4252      	negs	r2, r2
 8005012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	0018      	movs	r0, r3
 8005018:	f000 fde4 	bl	8005be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2240      	movs	r2, #64	; 0x40
 8005024:	4013      	ands	r3, r2
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d10f      	bne.n	800504a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2240      	movs	r2, #64	; 0x40
 8005032:	4013      	ands	r3, r2
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d108      	bne.n	800504a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2241      	movs	r2, #65	; 0x41
 800503e:	4252      	negs	r2, r2
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	0018      	movs	r0, r3
 8005046:	f000 fa25 	bl	8005494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2220      	movs	r2, #32
 8005052:	4013      	ands	r3, r2
 8005054:	2b20      	cmp	r3, #32
 8005056:	d10f      	bne.n	8005078 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	4013      	ands	r3, r2
 8005062:	2b20      	cmp	r3, #32
 8005064:	d108      	bne.n	8005078 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2221      	movs	r2, #33	; 0x21
 800506c:	4252      	negs	r2, r2
 800506e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	0018      	movs	r0, r3
 8005074:	f000 fdae 	bl	8005bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005078:	46c0      	nop			; (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	b002      	add	sp, #8
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2317      	movs	r3, #23
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	223c      	movs	r2, #60	; 0x3c
 8005098:	5c9b      	ldrb	r3, [r3, r2]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_OC_ConfigChannel+0x22>
 800509e:	2302      	movs	r3, #2
 80050a0:	e042      	b.n	8005128 <HAL_TIM_OC_ConfigChannel+0xa8>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	223c      	movs	r2, #60	; 0x3c
 80050a6:	2101      	movs	r1, #1
 80050a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d027      	beq.n	8005100 <HAL_TIM_OC_ConfigChannel+0x80>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b0c      	cmp	r3, #12
 80050b4:	d82c      	bhi.n	8005110 <HAL_TIM_OC_ConfigChannel+0x90>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d019      	beq.n	80050f0 <HAL_TIM_OC_ConfigChannel+0x70>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d826      	bhi.n	8005110 <HAL_TIM_OC_ConfigChannel+0x90>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_TIM_OC_ConfigChannel+0x50>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d008      	beq.n	80050e0 <HAL_TIM_OC_ConfigChannel+0x60>
 80050ce:	e01f      	b.n	8005110 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	0011      	movs	r1, r2
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 fa63 	bl	80055a4 <TIM_OC1_SetConfig>
      break;
 80050de:	e01c      	b.n	800511a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0011      	movs	r1, r2
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 fae3 	bl	80056b4 <TIM_OC2_SetConfig>
      break;
 80050ee:	e014      	b.n	800511a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	0011      	movs	r1, r2
 80050f8:	0018      	movs	r0, r3
 80050fa:	f000 fb5f 	bl	80057bc <TIM_OC3_SetConfig>
      break;
 80050fe:	e00c      	b.n	800511a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	0011      	movs	r1, r2
 8005108:	0018      	movs	r0, r3
 800510a:	f000 fbdd 	bl	80058c8 <TIM_OC4_SetConfig>
      break;
 800510e:	e004      	b.n	800511a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005110:	2317      	movs	r3, #23
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	2201      	movs	r2, #1
 8005116:	701a      	strb	r2, [r3, #0]
      break;
 8005118:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	223c      	movs	r2, #60	; 0x3c
 800511e:	2100      	movs	r1, #0
 8005120:	5499      	strb	r1, [r3, r2]

  return status;
 8005122:	2317      	movs	r3, #23
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	781b      	ldrb	r3, [r3, #0]
}
 8005128:	0018      	movs	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	b006      	add	sp, #24
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2317      	movs	r3, #23
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	223c      	movs	r2, #60	; 0x3c
 8005148:	5c9b      	ldrb	r3, [r3, r2]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x22>
 800514e:	2302      	movs	r3, #2
 8005150:	e0ad      	b.n	80052ae <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	223c      	movs	r2, #60	; 0x3c
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d100      	bne.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005160:	e076      	b.n	8005250 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b0c      	cmp	r3, #12
 8005166:	d900      	bls.n	800516a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005168:	e095      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x166>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b08      	cmp	r3, #8
 800516e:	d04e      	beq.n	800520e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b08      	cmp	r3, #8
 8005174:	d900      	bls.n	8005178 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005176:	e08e      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x56>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d021      	beq.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005184:	e087      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0011      	movs	r1, r2
 800518e:	0018      	movs	r0, r3
 8005190:	f000 fa08 	bl	80055a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2108      	movs	r1, #8
 80051a0:	430a      	orrs	r2, r1
 80051a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2104      	movs	r1, #4
 80051b0:	438a      	bics	r2, r1
 80051b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	619a      	str	r2, [r3, #24]
      break;
 80051c6:	e06b      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	0011      	movs	r1, r2
 80051d0:	0018      	movs	r0, r3
 80051d2:	f000 fa6f 	bl	80056b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2180      	movs	r1, #128	; 0x80
 80051e2:	0109      	lsls	r1, r1, #4
 80051e4:	430a      	orrs	r2, r1
 80051e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4931      	ldr	r1, [pc, #196]	; (80052b8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80051f4:	400a      	ands	r2, r1
 80051f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6999      	ldr	r1, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]
      break;
 800520c:	e048      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	0011      	movs	r1, r2
 8005216:	0018      	movs	r0, r3
 8005218:	f000 fad0 	bl	80057bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2108      	movs	r1, #8
 8005228:	430a      	orrs	r2, r1
 800522a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2104      	movs	r1, #4
 8005238:	438a      	bics	r2, r1
 800523a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69d9      	ldr	r1, [r3, #28]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	61da      	str	r2, [r3, #28]
      break;
 800524e:	e027      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	0011      	movs	r1, r2
 8005258:	0018      	movs	r0, r3
 800525a:	f000 fb35 	bl	80058c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2180      	movs	r1, #128	; 0x80
 800526a:	0109      	lsls	r1, r1, #4
 800526c:	430a      	orrs	r2, r1
 800526e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	490f      	ldr	r1, [pc, #60]	; (80052b8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800527c:	400a      	ands	r2, r1
 800527e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69d9      	ldr	r1, [r3, #28]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	021a      	lsls	r2, r3, #8
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	61da      	str	r2, [r3, #28]
      break;
 8005294:	e004      	b.n	80052a0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005296:	2317      	movs	r3, #23
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
      break;
 800529e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	223c      	movs	r2, #60	; 0x3c
 80052a4:	2100      	movs	r1, #0
 80052a6:	5499      	strb	r1, [r3, r2]

  return status;
 80052a8:	2317      	movs	r3, #23
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	781b      	ldrb	r3, [r3, #0]
}
 80052ae:	0018      	movs	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b006      	add	sp, #24
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	fffffbff 	.word	0xfffffbff

080052bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c6:	230f      	movs	r3, #15
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	223c      	movs	r2, #60	; 0x3c
 80052d2:	5c9b      	ldrb	r3, [r3, r2]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_TIM_ConfigClockSource+0x20>
 80052d8:	2302      	movs	r3, #2
 80052da:	e0bc      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x19a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	223c      	movs	r2, #60	; 0x3c
 80052e0:	2101      	movs	r1, #1
 80052e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	223d      	movs	r2, #61	; 0x3d
 80052e8:	2102      	movs	r1, #2
 80052ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2277      	movs	r2, #119	; 0x77
 80052f8:	4393      	bics	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4a58      	ldr	r2, [pc, #352]	; (8005460 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005300:	4013      	ands	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	0192      	lsls	r2, r2, #6
 8005314:	4293      	cmp	r3, r2
 8005316:	d040      	beq.n	800539a <HAL_TIM_ConfigClockSource+0xde>
 8005318:	2280      	movs	r2, #128	; 0x80
 800531a:	0192      	lsls	r2, r2, #6
 800531c:	4293      	cmp	r3, r2
 800531e:	d900      	bls.n	8005322 <HAL_TIM_ConfigClockSource+0x66>
 8005320:	e088      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x178>
 8005322:	2280      	movs	r2, #128	; 0x80
 8005324:	0152      	lsls	r2, r2, #5
 8005326:	4293      	cmp	r3, r2
 8005328:	d100      	bne.n	800532c <HAL_TIM_ConfigClockSource+0x70>
 800532a:	e088      	b.n	800543e <HAL_TIM_ConfigClockSource+0x182>
 800532c:	2280      	movs	r2, #128	; 0x80
 800532e:	0152      	lsls	r2, r2, #5
 8005330:	4293      	cmp	r3, r2
 8005332:	d900      	bls.n	8005336 <HAL_TIM_ConfigClockSource+0x7a>
 8005334:	e07e      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x178>
 8005336:	2b70      	cmp	r3, #112	; 0x70
 8005338:	d018      	beq.n	800536c <HAL_TIM_ConfigClockSource+0xb0>
 800533a:	d900      	bls.n	800533e <HAL_TIM_ConfigClockSource+0x82>
 800533c:	e07a      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x178>
 800533e:	2b60      	cmp	r3, #96	; 0x60
 8005340:	d04f      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x126>
 8005342:	d900      	bls.n	8005346 <HAL_TIM_ConfigClockSource+0x8a>
 8005344:	e076      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x178>
 8005346:	2b50      	cmp	r3, #80	; 0x50
 8005348:	d03b      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x106>
 800534a:	d900      	bls.n	800534e <HAL_TIM_ConfigClockSource+0x92>
 800534c:	e072      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x178>
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d057      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x146>
 8005352:	d900      	bls.n	8005356 <HAL_TIM_ConfigClockSource+0x9a>
 8005354:	e06e      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x178>
 8005356:	2b30      	cmp	r3, #48	; 0x30
 8005358:	d063      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x166>
 800535a:	d86b      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x178>
 800535c:	2b20      	cmp	r3, #32
 800535e:	d060      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x166>
 8005360:	d868      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x178>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d05d      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x166>
 8005366:	2b10      	cmp	r3, #16
 8005368:	d05b      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x166>
 800536a:	e063      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800537c:	f000 fb88 	bl	8005a90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2277      	movs	r2, #119	; 0x77
 800538c:	4313      	orrs	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]
      break;
 8005398:	e052      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053aa:	f000 fb71 	bl	8005a90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2180      	movs	r1, #128	; 0x80
 80053ba:	01c9      	lsls	r1, r1, #7
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]
      break;
 80053c0:	e03e      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ce:	001a      	movs	r2, r3
 80053d0:	f000 fae4 	bl	800599c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2150      	movs	r1, #80	; 0x50
 80053da:	0018      	movs	r0, r3
 80053dc:	f000 fb3e 	bl	8005a5c <TIM_ITRx_SetConfig>
      break;
 80053e0:	e02e      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ee:	001a      	movs	r2, r3
 80053f0:	f000 fb02 	bl	80059f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2160      	movs	r1, #96	; 0x60
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 fb2e 	bl	8005a5c <TIM_ITRx_SetConfig>
      break;
 8005400:	e01e      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800540e:	001a      	movs	r2, r3
 8005410:	f000 fac4 	bl	800599c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2140      	movs	r1, #64	; 0x40
 800541a:	0018      	movs	r0, r3
 800541c:	f000 fb1e 	bl	8005a5c <TIM_ITRx_SetConfig>
      break;
 8005420:	e00e      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	0019      	movs	r1, r3
 800542c:	0010      	movs	r0, r2
 800542e:	f000 fb15 	bl	8005a5c <TIM_ITRx_SetConfig>
      break;
 8005432:	e005      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005434:	230f      	movs	r3, #15
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]
      break;
 800543c:	e000      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800543e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	223d      	movs	r2, #61	; 0x3d
 8005444:	2101      	movs	r1, #1
 8005446:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	223c      	movs	r2, #60	; 0x3c
 800544c:	2100      	movs	r1, #0
 800544e:	5499      	strb	r1, [r3, r2]

  return status;
 8005450:	230f      	movs	r3, #15
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	781b      	ldrb	r3, [r3, #0]
}
 8005456:	0018      	movs	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	b004      	add	sp, #16
 800545c:	bd80      	pop	{r7, pc}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	ffff00ff 	.word	0xffff00ff

08005464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	b002      	add	sp, #8
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800547c:	46c0      	nop			; (mov r8, r8)
 800547e:	46bd      	mov	sp, r7
 8005480:	b002      	add	sp, #8
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800549c:	46c0      	nop			; (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	b002      	add	sp, #8
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a34      	ldr	r2, [pc, #208]	; (8005588 <TIM_Base_SetConfig+0xe4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d008      	beq.n	80054ce <TIM_Base_SetConfig+0x2a>
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	05db      	lsls	r3, r3, #23
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d003      	beq.n	80054ce <TIM_Base_SetConfig+0x2a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a30      	ldr	r2, [pc, #192]	; (800558c <TIM_Base_SetConfig+0xe8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d108      	bne.n	80054e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2270      	movs	r2, #112	; 0x70
 80054d2:	4393      	bics	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a29      	ldr	r2, [pc, #164]	; (8005588 <TIM_Base_SetConfig+0xe4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d018      	beq.n	800551a <TIM_Base_SetConfig+0x76>
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	05db      	lsls	r3, r3, #23
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d013      	beq.n	800551a <TIM_Base_SetConfig+0x76>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a25      	ldr	r2, [pc, #148]	; (800558c <TIM_Base_SetConfig+0xe8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_Base_SetConfig+0x76>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a24      	ldr	r2, [pc, #144]	; (8005590 <TIM_Base_SetConfig+0xec>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_Base_SetConfig+0x76>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a23      	ldr	r2, [pc, #140]	; (8005594 <TIM_Base_SetConfig+0xf0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_Base_SetConfig+0x76>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a22      	ldr	r2, [pc, #136]	; (8005598 <TIM_Base_SetConfig+0xf4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0x76>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a21      	ldr	r2, [pc, #132]	; (800559c <TIM_Base_SetConfig+0xf8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <TIM_Base_SetConfig+0xfc>)
 800551e:	4013      	ands	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	4393      	bics	r3, r2
 8005532:	001a      	movs	r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a0c      	ldr	r2, [pc, #48]	; (8005588 <TIM_Base_SetConfig+0xe4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00b      	beq.n	8005572 <TIM_Base_SetConfig+0xce>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <TIM_Base_SetConfig+0xf0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d007      	beq.n	8005572 <TIM_Base_SetConfig+0xce>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <TIM_Base_SetConfig+0xf4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_Base_SetConfig+0xce>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a0b      	ldr	r2, [pc, #44]	; (800559c <TIM_Base_SetConfig+0xf8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d103      	bne.n	800557a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	615a      	str	r2, [r3, #20]
}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	b004      	add	sp, #16
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40000400 	.word	0x40000400
 8005590:	40002000 	.word	0x40002000
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400
 800559c:	40014800 	.word	0x40014800
 80055a0:	fffffcff 	.word	0xfffffcff

080055a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	2201      	movs	r2, #1
 80055b4:	4393      	bics	r3, r2
 80055b6:	001a      	movs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2270      	movs	r2, #112	; 0x70
 80055d2:	4393      	bics	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2203      	movs	r2, #3
 80055da:	4393      	bics	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2202      	movs	r2, #2
 80055ec:	4393      	bics	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a27      	ldr	r2, [pc, #156]	; (800569c <TIM_OC1_SetConfig+0xf8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_OC1_SetConfig+0x76>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <TIM_OC1_SetConfig+0xfc>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <TIM_OC1_SetConfig+0x76>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a25      	ldr	r2, [pc, #148]	; (80056a4 <TIM_OC1_SetConfig+0x100>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC1_SetConfig+0x76>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <TIM_OC1_SetConfig+0x104>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d10c      	bne.n	8005634 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2208      	movs	r2, #8
 800561e:	4393      	bics	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2204      	movs	r2, #4
 8005630:	4393      	bics	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a19      	ldr	r2, [pc, #100]	; (800569c <TIM_OC1_SetConfig+0xf8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_OC1_SetConfig+0xb0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <TIM_OC1_SetConfig+0xfc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_OC1_SetConfig+0xb0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <TIM_OC1_SetConfig+0x100>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC1_SetConfig+0xb0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <TIM_OC1_SetConfig+0x104>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d111      	bne.n	8005678 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4a15      	ldr	r2, [pc, #84]	; (80056ac <TIM_OC1_SetConfig+0x108>)
 8005658:	4013      	ands	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <TIM_OC1_SetConfig+0x10c>)
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	46bd      	mov	sp, r7
 8005696:	b006      	add	sp, #24
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800
 80056ac:	fffffeff 	.word	0xfffffeff
 80056b0:	fffffdff 	.word	0xfffffdff

080056b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	2210      	movs	r2, #16
 80056c4:	4393      	bics	r3, r2
 80056c6:	001a      	movs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4a2e      	ldr	r2, [pc, #184]	; (800579c <TIM_OC2_SetConfig+0xe8>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a2d      	ldr	r2, [pc, #180]	; (80057a0 <TIM_OC2_SetConfig+0xec>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2220      	movs	r2, #32
 80056fe:	4393      	bics	r3, r2
 8005700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a24      	ldr	r2, [pc, #144]	; (80057a4 <TIM_OC2_SetConfig+0xf0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10d      	bne.n	8005732 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2280      	movs	r2, #128	; 0x80
 800571a:	4393      	bics	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2240      	movs	r2, #64	; 0x40
 800572e:	4393      	bics	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <TIM_OC2_SetConfig+0xf0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00b      	beq.n	8005752 <TIM_OC2_SetConfig+0x9e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <TIM_OC2_SetConfig+0xf4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_OC2_SetConfig+0x9e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <TIM_OC2_SetConfig+0xf8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_OC2_SetConfig+0x9e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <TIM_OC2_SetConfig+0xfc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d113      	bne.n	800577a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <TIM_OC2_SetConfig+0x100>)
 8005756:	4013      	ands	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4a16      	ldr	r2, [pc, #88]	; (80057b8 <TIM_OC2_SetConfig+0x104>)
 800575e:	4013      	ands	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	46bd      	mov	sp, r7
 8005798:	b006      	add	sp, #24
 800579a:	bd80      	pop	{r7, pc}
 800579c:	ffff8fff 	.word	0xffff8fff
 80057a0:	fffffcff 	.word	0xfffffcff
 80057a4:	40012c00 	.word	0x40012c00
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800
 80057b4:	fffffbff 	.word	0xfffffbff
 80057b8:	fffff7ff 	.word	0xfffff7ff

080057bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	4a35      	ldr	r2, [pc, #212]	; (80058a0 <TIM_OC3_SetConfig+0xe4>)
 80057cc:	401a      	ands	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2270      	movs	r2, #112	; 0x70
 80057e8:	4393      	bics	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2203      	movs	r2, #3
 80057f0:	4393      	bics	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	4a28      	ldr	r2, [pc, #160]	; (80058a4 <TIM_OC3_SetConfig+0xe8>)
 8005802:	4013      	ands	r3, r2
 8005804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a24      	ldr	r2, [pc, #144]	; (80058a8 <TIM_OC3_SetConfig+0xec>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d10d      	bne.n	8005836 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	4a23      	ldr	r2, [pc, #140]	; (80058ac <TIM_OC3_SetConfig+0xf0>)
 800581e:	4013      	ands	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <TIM_OC3_SetConfig+0xf4>)
 8005832:	4013      	ands	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <TIM_OC3_SetConfig+0xec>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00b      	beq.n	8005856 <TIM_OC3_SetConfig+0x9a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <TIM_OC3_SetConfig+0xf8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <TIM_OC3_SetConfig+0x9a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <TIM_OC3_SetConfig+0xfc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC3_SetConfig+0x9a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a1a      	ldr	r2, [pc, #104]	; (80058bc <TIM_OC3_SetConfig+0x100>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d113      	bne.n	800587e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4a19      	ldr	r2, [pc, #100]	; (80058c0 <TIM_OC3_SetConfig+0x104>)
 800585a:	4013      	ands	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <TIM_OC3_SetConfig+0x108>)
 8005862:	4013      	ands	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	621a      	str	r2, [r3, #32]
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b006      	add	sp, #24
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	fffffeff 	.word	0xfffffeff
 80058a4:	fffffdff 	.word	0xfffffdff
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	fffff7ff 	.word	0xfffff7ff
 80058b0:	fffffbff 	.word	0xfffffbff
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800
 80058c0:	ffffefff 	.word	0xffffefff
 80058c4:	ffffdfff 	.word	0xffffdfff

080058c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	4a28      	ldr	r2, [pc, #160]	; (8005978 <TIM_OC4_SetConfig+0xb0>)
 80058d8:	401a      	ands	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a22      	ldr	r2, [pc, #136]	; (800597c <TIM_OC4_SetConfig+0xb4>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a21      	ldr	r2, [pc, #132]	; (8005980 <TIM_OC4_SetConfig+0xb8>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <TIM_OC4_SetConfig+0xbc>)
 8005910:	4013      	ands	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	031b      	lsls	r3, r3, #12
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a19      	ldr	r2, [pc, #100]	; (8005988 <TIM_OC4_SetConfig+0xc0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_OC4_SetConfig+0x78>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <TIM_OC4_SetConfig+0xc4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_OC4_SetConfig+0x78>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a17      	ldr	r2, [pc, #92]	; (8005990 <TIM_OC4_SetConfig+0xc8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC4_SetConfig+0x78>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a16      	ldr	r2, [pc, #88]	; (8005994 <TIM_OC4_SetConfig+0xcc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d109      	bne.n	8005954 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4a15      	ldr	r2, [pc, #84]	; (8005998 <TIM_OC4_SetConfig+0xd0>)
 8005944:	4013      	ands	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	019b      	lsls	r3, r3, #6
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b006      	add	sp, #24
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	ffffefff 	.word	0xffffefff
 800597c:	ffff8fff 	.word	0xffff8fff
 8005980:	fffffcff 	.word	0xfffffcff
 8005984:	ffffdfff 	.word	0xffffdfff
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40014000 	.word	0x40014000
 8005990:	40014400 	.word	0x40014400
 8005994:	40014800 	.word	0x40014800
 8005998:	ffffbfff 	.word	0xffffbfff

0800599c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	2201      	movs	r2, #1
 80059b4:	4393      	bics	r3, r2
 80059b6:	001a      	movs	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	22f0      	movs	r2, #240	; 0xf0
 80059c6:	4393      	bics	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	220a      	movs	r2, #10
 80059d8:	4393      	bics	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	621a      	str	r2, [r3, #32]
}
 80059f0:	46c0      	nop			; (mov r8, r8)
 80059f2:	46bd      	mov	sp, r7
 80059f4:	b006      	add	sp, #24
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	2210      	movs	r2, #16
 8005a0a:	4393      	bics	r3, r2
 8005a0c:	001a      	movs	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4a0d      	ldr	r2, [pc, #52]	; (8005a58 <TIM_TI2_ConfigInputStage+0x60>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	031b      	lsls	r3, r3, #12
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	22a0      	movs	r2, #160	; 0xa0
 8005a34:	4393      	bics	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	621a      	str	r2, [r3, #32]
}
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	46bd      	mov	sp, r7
 8005a52:	b006      	add	sp, #24
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	ffff0fff 	.word	0xffff0fff

08005a5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2270      	movs	r2, #112	; 0x70
 8005a70:	4393      	bics	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	2207      	movs	r2, #7
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	609a      	str	r2, [r3, #8]
}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b004      	add	sp, #16
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <TIM_ETR_SetConfig+0x3c>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	609a      	str	r2, [r3, #8]
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b006      	add	sp, #24
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	ffff00ff 	.word	0xffff00ff

08005ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	221f      	movs	r2, #31
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	409a      	lsls	r2, r3
 8005ae6:	0013      	movs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	43d2      	mvns	r2, r2
 8005af2:	401a      	ands	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a1a      	ldr	r2, [r3, #32]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	211f      	movs	r1, #31
 8005b00:	400b      	ands	r3, r1
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4099      	lsls	r1, r3
 8005b06:	000b      	movs	r3, r1
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b006      	add	sp, #24
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	223c      	movs	r2, #60	; 0x3c
 8005b26:	5c9b      	ldrb	r3, [r3, r2]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e047      	b.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	223c      	movs	r2, #60	; 0x3c
 8005b34:	2101      	movs	r1, #1
 8005b36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	223d      	movs	r2, #61	; 0x3d
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2270      	movs	r2, #112	; 0x70
 8005b54:	4393      	bics	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00f      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	05db      	lsls	r3, r3, #23
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d009      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a11      	ldr	r2, [pc, #68]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a10      	ldr	r2, [pc, #64]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10c      	bne.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	4393      	bics	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	223d      	movs	r2, #61	; 0x3d
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	223c      	movs	r2, #60	; 0x3c
 8005bba:	2100      	movs	r1, #0
 8005bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b004      	add	sp, #16
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40014000 	.word	0x40014000

08005bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bdc:	46c0      	nop			; (mov r8, r8)
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b002      	add	sp, #8
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bec:	46c0      	nop			; (mov r8, r8)
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b002      	add	sp, #8
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e044      	b.n	8005c90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d107      	bne.n	8005c1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2278      	movs	r2, #120	; 0x78
 8005c12:	2100      	movs	r1, #0
 8005c14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f7fb ff07 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2224      	movs	r2, #36	; 0x24
 8005c22:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2101      	movs	r1, #1
 8005c30:	438a      	bics	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	0018      	movs	r0, r3
 8005c38:	f000 fb2c 	bl	8006294 <UART_SetConfig>
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e024      	b.n	8005c90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f000 fd07 	bl	8006664 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	490d      	ldr	r1, [pc, #52]	; (8005c98 <HAL_UART_Init+0xa4>)
 8005c62:	400a      	ands	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	212a      	movs	r1, #42	; 0x2a
 8005c72:	438a      	bics	r2, r1
 8005c74:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2101      	movs	r1, #1
 8005c82:	430a      	orrs	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 fd9f 	bl	80067cc <UART_CheckIdleState>
 8005c8e:	0003      	movs	r3, r0
}
 8005c90:	0018      	movs	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b002      	add	sp, #8
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	ffffb7ff 	.word	0xffffb7ff

08005c9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b0ab      	sub	sp, #172	; 0xac
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	22a4      	movs	r2, #164	; 0xa4
 8005cac:	18b9      	adds	r1, r7, r2
 8005cae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	20a0      	movs	r0, #160	; 0xa0
 8005cb8:	1839      	adds	r1, r7, r0
 8005cba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	219c      	movs	r1, #156	; 0x9c
 8005cc4:	1879      	adds	r1, r7, r1
 8005cc6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cc8:	0011      	movs	r1, r2
 8005cca:	18bb      	adds	r3, r7, r2
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a99      	ldr	r2, [pc, #612]	; (8005f34 <HAL_UART_IRQHandler+0x298>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2298      	movs	r2, #152	; 0x98
 8005cd4:	18bc      	adds	r4, r7, r2
 8005cd6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005cd8:	18bb      	adds	r3, r7, r2
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d114      	bne.n	8005d0a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d00f      	beq.n	8005d0a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cea:	183b      	adds	r3, r7, r0
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d00a      	beq.n	8005d0a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d100      	bne.n	8005cfe <HAL_UART_IRQHandler+0x62>
 8005cfc:	e29e      	b.n	800623c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	0010      	movs	r0, r2
 8005d06:	4798      	blx	r3
      }
      return;
 8005d08:	e298      	b.n	800623c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d0a:	2398      	movs	r3, #152	; 0x98
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d100      	bne.n	8005d16 <HAL_UART_IRQHandler+0x7a>
 8005d14:	e114      	b.n	8005f40 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d16:	239c      	movs	r3, #156	; 0x9c
 8005d18:	18fb      	adds	r3, r7, r3
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d106      	bne.n	8005d30 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d22:	23a0      	movs	r3, #160	; 0xa0
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a83      	ldr	r2, [pc, #524]	; (8005f38 <HAL_UART_IRQHandler+0x29c>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d100      	bne.n	8005d30 <HAL_UART_IRQHandler+0x94>
 8005d2e:	e107      	b.n	8005f40 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d30:	23a4      	movs	r3, #164	; 0xa4
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d012      	beq.n	8005d62 <HAL_UART_IRQHandler+0xc6>
 8005d3c:	23a0      	movs	r3, #160	; 0xa0
 8005d3e:	18fb      	adds	r3, r7, r3
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	2380      	movs	r3, #128	; 0x80
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	4013      	ands	r3, r2
 8005d48:	d00b      	beq.n	8005d62 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2284      	movs	r2, #132	; 0x84
 8005d56:	589b      	ldr	r3, [r3, r2]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2184      	movs	r1, #132	; 0x84
 8005d60:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d62:	23a4      	movs	r3, #164	; 0xa4
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d011      	beq.n	8005d92 <HAL_UART_IRQHandler+0xf6>
 8005d6e:	239c      	movs	r3, #156	; 0x9c
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2201      	movs	r2, #1
 8005d76:	4013      	ands	r3, r2
 8005d78:	d00b      	beq.n	8005d92 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2284      	movs	r2, #132	; 0x84
 8005d86:	589b      	ldr	r3, [r3, r2]
 8005d88:	2204      	movs	r2, #4
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2184      	movs	r1, #132	; 0x84
 8005d90:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d92:	23a4      	movs	r3, #164	; 0xa4
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2204      	movs	r2, #4
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d011      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x126>
 8005d9e:	239c      	movs	r3, #156	; 0x9c
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2201      	movs	r2, #1
 8005da6:	4013      	ands	r3, r2
 8005da8:	d00b      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2204      	movs	r2, #4
 8005db0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2284      	movs	r2, #132	; 0x84
 8005db6:	589b      	ldr	r3, [r3, r2]
 8005db8:	2202      	movs	r2, #2
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2184      	movs	r1, #132	; 0x84
 8005dc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dc2:	23a4      	movs	r3, #164	; 0xa4
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2208      	movs	r2, #8
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d017      	beq.n	8005dfe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dce:	23a0      	movs	r3, #160	; 0xa0
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d105      	bne.n	8005de6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dda:	239c      	movs	r3, #156	; 0x9c
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2201      	movs	r2, #1
 8005de2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005de4:	d00b      	beq.n	8005dfe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2208      	movs	r2, #8
 8005dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2284      	movs	r2, #132	; 0x84
 8005df2:	589b      	ldr	r3, [r3, r2]
 8005df4:	2208      	movs	r2, #8
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2184      	movs	r1, #132	; 0x84
 8005dfc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dfe:	23a4      	movs	r3, #164	; 0xa4
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_UART_IRQHandler+0x198>
 8005e0c:	23a0      	movs	r3, #160	; 0xa0
 8005e0e:	18fb      	adds	r3, r7, r3
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	2380      	movs	r3, #128	; 0x80
 8005e14:	04db      	lsls	r3, r3, #19
 8005e16:	4013      	ands	r3, r2
 8005e18:	d00c      	beq.n	8005e34 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2280      	movs	r2, #128	; 0x80
 8005e20:	0112      	lsls	r2, r2, #4
 8005e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2284      	movs	r2, #132	; 0x84
 8005e28:	589b      	ldr	r3, [r3, r2]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2184      	movs	r1, #132	; 0x84
 8005e32:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2284      	movs	r2, #132	; 0x84
 8005e38:	589b      	ldr	r3, [r3, r2]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d100      	bne.n	8005e40 <HAL_UART_IRQHandler+0x1a4>
 8005e3e:	e1ff      	b.n	8006240 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e40:	23a4      	movs	r3, #164	; 0xa4
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2220      	movs	r2, #32
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d00e      	beq.n	8005e6a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e4c:	23a0      	movs	r3, #160	; 0xa0
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2220      	movs	r2, #32
 8005e54:	4013      	ands	r3, r2
 8005e56:	d008      	beq.n	8005e6a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	0010      	movs	r0, r2
 8005e68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2284      	movs	r2, #132	; 0x84
 8005e6e:	589b      	ldr	r3, [r3, r2]
 8005e70:	2194      	movs	r1, #148	; 0x94
 8005e72:	187a      	adds	r2, r7, r1
 8005e74:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2240      	movs	r2, #64	; 0x40
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d004      	beq.n	8005e8e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e84:	187b      	adds	r3, r7, r1
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2228      	movs	r2, #40	; 0x28
 8005e8a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e8c:	d047      	beq.n	8005f1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f000 fdad 	bl	80069f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2240      	movs	r2, #64	; 0x40
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d137      	bne.n	8005f14 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eac:	2090      	movs	r0, #144	; 0x90
 8005eae:	183a      	adds	r2, r7, r0
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eb8:	f383 8810 	msr	PRIMASK, r3
}
 8005ebc:	46c0      	nop			; (mov r8, r8)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2140      	movs	r1, #64	; 0x40
 8005eca:	438a      	bics	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]
 8005ece:	183b      	adds	r3, r7, r0
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ed6:	f383 8810 	msr	PRIMASK, r3
}
 8005eda:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d012      	beq.n	8005f0a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee8:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <HAL_UART_IRQHandler+0x2a0>)
 8005eea:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f7fc f907 	bl	8002104 <HAL_DMA_Abort_IT>
 8005ef6:	1e03      	subs	r3, r0, #0
 8005ef8:	d01a      	beq.n	8005f30 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f04:	0018      	movs	r0, r3
 8005f06:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f08:	e012      	b.n	8005f30 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 f9ad 	bl	800626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f12:	e00d      	b.n	8005f30 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	0018      	movs	r0, r3
 8005f18:	f000 f9a8 	bl	800626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e008      	b.n	8005f30 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0018      	movs	r0, r3
 8005f22:	f000 f9a3 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2284      	movs	r2, #132	; 0x84
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005f2e:	e187      	b.n	8006240 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	46c0      	nop			; (mov r8, r8)
    return;
 8005f32:	e185      	b.n	8006240 <HAL_UART_IRQHandler+0x5a4>
 8005f34:	0000080f 	.word	0x0000080f
 8005f38:	04000120 	.word	0x04000120
 8005f3c:	08006ab9 	.word	0x08006ab9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d000      	beq.n	8005f4a <HAL_UART_IRQHandler+0x2ae>
 8005f48:	e139      	b.n	80061be <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f4a:	23a4      	movs	r3, #164	; 0xa4
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2210      	movs	r2, #16
 8005f52:	4013      	ands	r3, r2
 8005f54:	d100      	bne.n	8005f58 <HAL_UART_IRQHandler+0x2bc>
 8005f56:	e132      	b.n	80061be <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f58:	23a0      	movs	r3, #160	; 0xa0
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2210      	movs	r2, #16
 8005f60:	4013      	ands	r3, r2
 8005f62:	d100      	bne.n	8005f66 <HAL_UART_IRQHandler+0x2ca>
 8005f64:	e12b      	b.n	80061be <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2210      	movs	r2, #16
 8005f6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2240      	movs	r2, #64	; 0x40
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	d000      	beq.n	8005f7e <HAL_UART_IRQHandler+0x2e2>
 8005f7c:	e09f      	b.n	80060be <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	217e      	movs	r1, #126	; 0x7e
 8005f88:	187b      	adds	r3, r7, r1
 8005f8a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005f8c:	187b      	adds	r3, r7, r1
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d100      	bne.n	8005f96 <HAL_UART_IRQHandler+0x2fa>
 8005f94:	e156      	b.n	8006244 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2258      	movs	r2, #88	; 0x58
 8005f9a:	5a9b      	ldrh	r3, [r3, r2]
 8005f9c:	187a      	adds	r2, r7, r1
 8005f9e:	8812      	ldrh	r2, [r2, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d300      	bcc.n	8005fa6 <HAL_UART_IRQHandler+0x30a>
 8005fa4:	e14e      	b.n	8006244 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	187a      	adds	r2, r7, r1
 8005faa:	215a      	movs	r1, #90	; 0x5a
 8005fac:	8812      	ldrh	r2, [r2, #0]
 8005fae:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d06f      	beq.n	800609a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fba:	f3ef 8310 	mrs	r3, PRIMASK
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	f383 8810 	msr	PRIMASK, r3
}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	499e      	ldr	r1, [pc, #632]	; (8006254 <HAL_UART_IRQHandler+0x5b8>)
 8005fdc:	400a      	ands	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	f383 8810 	msr	PRIMASK, r3
}
 8005fea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff4:	677b      	str	r3, [r7, #116]	; 0x74
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffc:	f383 8810 	msr	PRIMASK, r3
}
 8006000:	46c0      	nop			; (mov r8, r8)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2101      	movs	r1, #1
 800600e:	438a      	bics	r2, r1
 8006010:	609a      	str	r2, [r3, #8]
 8006012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006014:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006018:	f383 8810 	msr	PRIMASK, r3
}
 800601c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800601e:	f3ef 8310 	mrs	r3, PRIMASK
 8006022:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006024:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006026:	673b      	str	r3, [r7, #112]	; 0x70
 8006028:	2301      	movs	r3, #1
 800602a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800602c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602e:	f383 8810 	msr	PRIMASK, r3
}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2140      	movs	r1, #64	; 0x40
 8006040:	438a      	bics	r2, r1
 8006042:	609a      	str	r2, [r3, #8]
 8006044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006046:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604a:	f383 8810 	msr	PRIMASK, r3
}
 800604e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2280      	movs	r2, #128	; 0x80
 8006054:	2120      	movs	r1, #32
 8006056:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800605e:	f3ef 8310 	mrs	r3, PRIMASK
 8006062:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006064:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006068:	2301      	movs	r3, #1
 800606a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800606e:	f383 8810 	msr	PRIMASK, r3
}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2110      	movs	r1, #16
 8006080:	438a      	bics	r2, r1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006086:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800608a:	f383 8810 	msr	PRIMASK, r3
}
 800608e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006094:	0018      	movs	r0, r3
 8006096:	f7fb fffd 	bl	8002094 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2258      	movs	r2, #88	; 0x58
 80060a4:	5a9a      	ldrh	r2, [r3, r2]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	215a      	movs	r1, #90	; 0x5a
 80060aa:	5a5b      	ldrh	r3, [r3, r1]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	0011      	movs	r1, r2
 80060b6:	0018      	movs	r0, r3
 80060b8:	f000 f8e0 	bl	800627c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060bc:	e0c2      	b.n	8006244 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2258      	movs	r2, #88	; 0x58
 80060c2:	5a99      	ldrh	r1, [r3, r2]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	225a      	movs	r2, #90	; 0x5a
 80060c8:	5a9b      	ldrh	r3, [r3, r2]
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	208e      	movs	r0, #142	; 0x8e
 80060ce:	183b      	adds	r3, r7, r0
 80060d0:	1a8a      	subs	r2, r1, r2
 80060d2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	225a      	movs	r2, #90	; 0x5a
 80060d8:	5a9b      	ldrh	r3, [r3, r2]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d100      	bne.n	80060e2 <HAL_UART_IRQHandler+0x446>
 80060e0:	e0b2      	b.n	8006248 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80060e2:	183b      	adds	r3, r7, r0
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d100      	bne.n	80060ec <HAL_UART_IRQHandler+0x450>
 80060ea:	e0ad      	b.n	8006248 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ec:	f3ef 8310 	mrs	r3, PRIMASK
 80060f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80060f2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f4:	2488      	movs	r4, #136	; 0x88
 80060f6:	193a      	adds	r2, r7, r4
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	2301      	movs	r3, #1
 80060fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f383 8810 	msr	PRIMASK, r3
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4951      	ldr	r1, [pc, #324]	; (8006258 <HAL_UART_IRQHandler+0x5bc>)
 8006112:	400a      	ands	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	193b      	adds	r3, r7, r4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f383 8810 	msr	PRIMASK, r3
}
 8006122:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006124:	f3ef 8310 	mrs	r3, PRIMASK
 8006128:	61bb      	str	r3, [r7, #24]
  return(result);
 800612a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612c:	2484      	movs	r4, #132	; 0x84
 800612e:	193a      	adds	r2, r7, r4
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	2301      	movs	r3, #1
 8006134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f383 8810 	msr	PRIMASK, r3
}
 800613c:	46c0      	nop			; (mov r8, r8)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2101      	movs	r1, #1
 800614a:	438a      	bics	r2, r1
 800614c:	609a      	str	r2, [r3, #8]
 800614e:	193b      	adds	r3, r7, r4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	f383 8810 	msr	PRIMASK, r3
}
 800615a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2280      	movs	r2, #128	; 0x80
 8006160:	2120      	movs	r1, #32
 8006162:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006170:	f3ef 8310 	mrs	r3, PRIMASK
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006178:	2480      	movs	r4, #128	; 0x80
 800617a:	193a      	adds	r2, r7, r4
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	2301      	movs	r3, #1
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	f383 8810 	msr	PRIMASK, r3
}
 8006188:	46c0      	nop			; (mov r8, r8)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2110      	movs	r1, #16
 8006196:	438a      	bics	r2, r1
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	193b      	adds	r3, r7, r4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	f383 8810 	msr	PRIMASK, r3
}
 80061a6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061ae:	183b      	adds	r3, r7, r0
 80061b0:	881a      	ldrh	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	0011      	movs	r1, r2
 80061b6:	0018      	movs	r0, r3
 80061b8:	f000 f860 	bl	800627c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061bc:	e044      	b.n	8006248 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061be:	23a4      	movs	r3, #164	; 0xa4
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	2380      	movs	r3, #128	; 0x80
 80061c6:	035b      	lsls	r3, r3, #13
 80061c8:	4013      	ands	r3, r2
 80061ca:	d010      	beq.n	80061ee <HAL_UART_IRQHandler+0x552>
 80061cc:	239c      	movs	r3, #156	; 0x9c
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	03db      	lsls	r3, r3, #15
 80061d6:	4013      	ands	r3, r2
 80061d8:	d009      	beq.n	80061ee <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2280      	movs	r2, #128	; 0x80
 80061e0:	0352      	lsls	r2, r2, #13
 80061e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	0018      	movs	r0, r3
 80061e8:	f000 fca8 	bl	8006b3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061ec:	e02f      	b.n	800624e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061ee:	23a4      	movs	r3, #164	; 0xa4
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	4013      	ands	r3, r2
 80061f8:	d00f      	beq.n	800621a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061fa:	23a0      	movs	r3, #160	; 0xa0
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2280      	movs	r2, #128	; 0x80
 8006202:	4013      	ands	r3, r2
 8006204:	d009      	beq.n	800621a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01e      	beq.n	800624c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	0010      	movs	r0, r2
 8006216:	4798      	blx	r3
    }
    return;
 8006218:	e018      	b.n	800624c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800621a:	23a4      	movs	r3, #164	; 0xa4
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2240      	movs	r2, #64	; 0x40
 8006222:	4013      	ands	r3, r2
 8006224:	d013      	beq.n	800624e <HAL_UART_IRQHandler+0x5b2>
 8006226:	23a0      	movs	r3, #160	; 0xa0
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2240      	movs	r2, #64	; 0x40
 800622e:	4013      	ands	r3, r2
 8006230:	d00d      	beq.n	800624e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	0018      	movs	r0, r3
 8006236:	f000 fc56 	bl	8006ae6 <UART_EndTransmit_IT>
    return;
 800623a:	e008      	b.n	800624e <HAL_UART_IRQHandler+0x5b2>
      return;
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	e006      	b.n	800624e <HAL_UART_IRQHandler+0x5b2>
    return;
 8006240:	46c0      	nop			; (mov r8, r8)
 8006242:	e004      	b.n	800624e <HAL_UART_IRQHandler+0x5b2>
      return;
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	e002      	b.n	800624e <HAL_UART_IRQHandler+0x5b2>
      return;
 8006248:	46c0      	nop			; (mov r8, r8)
 800624a:	e000      	b.n	800624e <HAL_UART_IRQHandler+0x5b2>
    return;
 800624c:	46c0      	nop			; (mov r8, r8)
  }

}
 800624e:	46bd      	mov	sp, r7
 8006250:	b02b      	add	sp, #172	; 0xac
 8006252:	bd90      	pop	{r4, r7, pc}
 8006254:	fffffeff 	.word	0xfffffeff
 8006258:	fffffedf 	.word	0xfffffedf

0800625c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006264:	46c0      	nop			; (mov r8, r8)
 8006266:	46bd      	mov	sp, r7
 8006268:	b002      	add	sp, #8
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006274:	46c0      	nop			; (mov r8, r8)
 8006276:	46bd      	mov	sp, r7
 8006278:	b002      	add	sp, #8
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	000a      	movs	r2, r1
 8006286:	1cbb      	adds	r3, r7, #2
 8006288:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b002      	add	sp, #8
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800629c:	231e      	movs	r3, #30
 800629e:	18fb      	adds	r3, r7, r3
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4abe      	ldr	r2, [pc, #760]	; (80065bc <UART_SetConfig+0x328>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	0019      	movs	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4ab9      	ldr	r2, [pc, #740]	; (80065c0 <UART_SetConfig+0x32c>)
 80062da:	4013      	ands	r3, r2
 80062dc:	0019      	movs	r1, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4ab0      	ldr	r2, [pc, #704]	; (80065c4 <UART_SetConfig+0x330>)
 8006302:	4013      	ands	r3, r2
 8006304:	0019      	movs	r1, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4aac      	ldr	r2, [pc, #688]	; (80065c8 <UART_SetConfig+0x334>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d127      	bne.n	800636a <UART_SetConfig+0xd6>
 800631a:	4bac      	ldr	r3, [pc, #688]	; (80065cc <UART_SetConfig+0x338>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	2203      	movs	r2, #3
 8006320:	4013      	ands	r3, r2
 8006322:	2b03      	cmp	r3, #3
 8006324:	d00d      	beq.n	8006342 <UART_SetConfig+0xae>
 8006326:	d81b      	bhi.n	8006360 <UART_SetConfig+0xcc>
 8006328:	2b02      	cmp	r3, #2
 800632a:	d014      	beq.n	8006356 <UART_SetConfig+0xc2>
 800632c:	d818      	bhi.n	8006360 <UART_SetConfig+0xcc>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <UART_SetConfig+0xa4>
 8006332:	2b01      	cmp	r3, #1
 8006334:	d00a      	beq.n	800634c <UART_SetConfig+0xb8>
 8006336:	e013      	b.n	8006360 <UART_SetConfig+0xcc>
 8006338:	231f      	movs	r3, #31
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	e0bd      	b.n	80064be <UART_SetConfig+0x22a>
 8006342:	231f      	movs	r3, #31
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	2202      	movs	r2, #2
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e0b8      	b.n	80064be <UART_SetConfig+0x22a>
 800634c:	231f      	movs	r3, #31
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	2204      	movs	r2, #4
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	e0b3      	b.n	80064be <UART_SetConfig+0x22a>
 8006356:	231f      	movs	r3, #31
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	2208      	movs	r2, #8
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	e0ae      	b.n	80064be <UART_SetConfig+0x22a>
 8006360:	231f      	movs	r3, #31
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	2210      	movs	r2, #16
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	e0a9      	b.n	80064be <UART_SetConfig+0x22a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a98      	ldr	r2, [pc, #608]	; (80065d0 <UART_SetConfig+0x33c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d134      	bne.n	80063de <UART_SetConfig+0x14a>
 8006374:	4b95      	ldr	r3, [pc, #596]	; (80065cc <UART_SetConfig+0x338>)
 8006376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006378:	23c0      	movs	r3, #192	; 0xc0
 800637a:	029b      	lsls	r3, r3, #10
 800637c:	4013      	ands	r3, r2
 800637e:	22c0      	movs	r2, #192	; 0xc0
 8006380:	0292      	lsls	r2, r2, #10
 8006382:	4293      	cmp	r3, r2
 8006384:	d017      	beq.n	80063b6 <UART_SetConfig+0x122>
 8006386:	22c0      	movs	r2, #192	; 0xc0
 8006388:	0292      	lsls	r2, r2, #10
 800638a:	4293      	cmp	r3, r2
 800638c:	d822      	bhi.n	80063d4 <UART_SetConfig+0x140>
 800638e:	2280      	movs	r2, #128	; 0x80
 8006390:	0292      	lsls	r2, r2, #10
 8006392:	4293      	cmp	r3, r2
 8006394:	d019      	beq.n	80063ca <UART_SetConfig+0x136>
 8006396:	2280      	movs	r2, #128	; 0x80
 8006398:	0292      	lsls	r2, r2, #10
 800639a:	4293      	cmp	r3, r2
 800639c:	d81a      	bhi.n	80063d4 <UART_SetConfig+0x140>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <UART_SetConfig+0x118>
 80063a2:	2280      	movs	r2, #128	; 0x80
 80063a4:	0252      	lsls	r2, r2, #9
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00a      	beq.n	80063c0 <UART_SetConfig+0x12c>
 80063aa:	e013      	b.n	80063d4 <UART_SetConfig+0x140>
 80063ac:	231f      	movs	r3, #31
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	e083      	b.n	80064be <UART_SetConfig+0x22a>
 80063b6:	231f      	movs	r3, #31
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	2202      	movs	r2, #2
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e07e      	b.n	80064be <UART_SetConfig+0x22a>
 80063c0:	231f      	movs	r3, #31
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	2204      	movs	r2, #4
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	e079      	b.n	80064be <UART_SetConfig+0x22a>
 80063ca:	231f      	movs	r3, #31
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	2208      	movs	r2, #8
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e074      	b.n	80064be <UART_SetConfig+0x22a>
 80063d4:	231f      	movs	r3, #31
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	2210      	movs	r2, #16
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e06f      	b.n	80064be <UART_SetConfig+0x22a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a7c      	ldr	r2, [pc, #496]	; (80065d4 <UART_SetConfig+0x340>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d134      	bne.n	8006452 <UART_SetConfig+0x1be>
 80063e8:	4b78      	ldr	r3, [pc, #480]	; (80065cc <UART_SetConfig+0x338>)
 80063ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ec:	23c0      	movs	r3, #192	; 0xc0
 80063ee:	031b      	lsls	r3, r3, #12
 80063f0:	4013      	ands	r3, r2
 80063f2:	22c0      	movs	r2, #192	; 0xc0
 80063f4:	0312      	lsls	r2, r2, #12
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d017      	beq.n	800642a <UART_SetConfig+0x196>
 80063fa:	22c0      	movs	r2, #192	; 0xc0
 80063fc:	0312      	lsls	r2, r2, #12
 80063fe:	4293      	cmp	r3, r2
 8006400:	d822      	bhi.n	8006448 <UART_SetConfig+0x1b4>
 8006402:	2280      	movs	r2, #128	; 0x80
 8006404:	0312      	lsls	r2, r2, #12
 8006406:	4293      	cmp	r3, r2
 8006408:	d019      	beq.n	800643e <UART_SetConfig+0x1aa>
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	0312      	lsls	r2, r2, #12
 800640e:	4293      	cmp	r3, r2
 8006410:	d81a      	bhi.n	8006448 <UART_SetConfig+0x1b4>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <UART_SetConfig+0x18c>
 8006416:	2280      	movs	r2, #128	; 0x80
 8006418:	02d2      	lsls	r2, r2, #11
 800641a:	4293      	cmp	r3, r2
 800641c:	d00a      	beq.n	8006434 <UART_SetConfig+0x1a0>
 800641e:	e013      	b.n	8006448 <UART_SetConfig+0x1b4>
 8006420:	231f      	movs	r3, #31
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	e049      	b.n	80064be <UART_SetConfig+0x22a>
 800642a:	231f      	movs	r3, #31
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	2202      	movs	r2, #2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e044      	b.n	80064be <UART_SetConfig+0x22a>
 8006434:	231f      	movs	r3, #31
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	2204      	movs	r2, #4
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	e03f      	b.n	80064be <UART_SetConfig+0x22a>
 800643e:	231f      	movs	r3, #31
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	2208      	movs	r2, #8
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	e03a      	b.n	80064be <UART_SetConfig+0x22a>
 8006448:	231f      	movs	r3, #31
 800644a:	18fb      	adds	r3, r7, r3
 800644c:	2210      	movs	r2, #16
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	e035      	b.n	80064be <UART_SetConfig+0x22a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a60      	ldr	r2, [pc, #384]	; (80065d8 <UART_SetConfig+0x344>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d104      	bne.n	8006466 <UART_SetConfig+0x1d2>
 800645c:	231f      	movs	r3, #31
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	e02b      	b.n	80064be <UART_SetConfig+0x22a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a5c      	ldr	r2, [pc, #368]	; (80065dc <UART_SetConfig+0x348>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d104      	bne.n	800647a <UART_SetConfig+0x1e6>
 8006470:	231f      	movs	r3, #31
 8006472:	18fb      	adds	r3, r7, r3
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e021      	b.n	80064be <UART_SetConfig+0x22a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a58      	ldr	r2, [pc, #352]	; (80065e0 <UART_SetConfig+0x34c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d104      	bne.n	800648e <UART_SetConfig+0x1fa>
 8006484:	231f      	movs	r3, #31
 8006486:	18fb      	adds	r3, r7, r3
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e017      	b.n	80064be <UART_SetConfig+0x22a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a54      	ldr	r2, [pc, #336]	; (80065e4 <UART_SetConfig+0x350>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d104      	bne.n	80064a2 <UART_SetConfig+0x20e>
 8006498:	231f      	movs	r3, #31
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e00d      	b.n	80064be <UART_SetConfig+0x22a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a50      	ldr	r2, [pc, #320]	; (80065e8 <UART_SetConfig+0x354>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d104      	bne.n	80064b6 <UART_SetConfig+0x222>
 80064ac:	231f      	movs	r3, #31
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	e003      	b.n	80064be <UART_SetConfig+0x22a>
 80064b6:	231f      	movs	r3, #31
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	2210      	movs	r2, #16
 80064bc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69da      	ldr	r2, [r3, #28]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d15c      	bne.n	8006584 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80064ca:	231f      	movs	r3, #31
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d015      	beq.n	8006500 <UART_SetConfig+0x26c>
 80064d4:	dc18      	bgt.n	8006508 <UART_SetConfig+0x274>
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d00d      	beq.n	80064f6 <UART_SetConfig+0x262>
 80064da:	dc15      	bgt.n	8006508 <UART_SetConfig+0x274>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <UART_SetConfig+0x252>
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d005      	beq.n	80064f0 <UART_SetConfig+0x25c>
 80064e4:	e010      	b.n	8006508 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e6:	f7fe f995 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 80064ea:	0003      	movs	r3, r0
 80064ec:	61bb      	str	r3, [r7, #24]
        break;
 80064ee:	e012      	b.n	8006516 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b3e      	ldr	r3, [pc, #248]	; (80065ec <UART_SetConfig+0x358>)
 80064f2:	61bb      	str	r3, [r7, #24]
        break;
 80064f4:	e00f      	b.n	8006516 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fe f911 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80064fa:	0003      	movs	r3, r0
 80064fc:	61bb      	str	r3, [r7, #24]
        break;
 80064fe:	e00a      	b.n	8006516 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006500:	2380      	movs	r3, #128	; 0x80
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	61bb      	str	r3, [r7, #24]
        break;
 8006506:	e006      	b.n	8006516 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800650c:	231e      	movs	r3, #30
 800650e:	18fb      	adds	r3, r7, r3
 8006510:	2201      	movs	r2, #1
 8006512:	701a      	strb	r2, [r3, #0]
        break;
 8006514:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d100      	bne.n	800651e <UART_SetConfig+0x28a>
 800651c:	e095      	b.n	800664a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	005a      	lsls	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	18d2      	adds	r2, r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	0019      	movs	r1, r3
 8006530:	0010      	movs	r0, r2
 8006532:	f7f9 fde7 	bl	8000104 <__udivsi3>
 8006536:	0003      	movs	r3, r0
 8006538:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b0f      	cmp	r3, #15
 800653e:	d91c      	bls.n	800657a <UART_SetConfig+0x2e6>
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	025b      	lsls	r3, r3, #9
 8006546:	429a      	cmp	r2, r3
 8006548:	d217      	bcs.n	800657a <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	b29a      	uxth	r2, r3
 800654e:	200e      	movs	r0, #14
 8006550:	183b      	adds	r3, r7, r0
 8006552:	210f      	movs	r1, #15
 8006554:	438a      	bics	r2, r1
 8006556:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	b29b      	uxth	r3, r3
 800655e:	2207      	movs	r2, #7
 8006560:	4013      	ands	r3, r2
 8006562:	b299      	uxth	r1, r3
 8006564:	183b      	adds	r3, r7, r0
 8006566:	183a      	adds	r2, r7, r0
 8006568:	8812      	ldrh	r2, [r2, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	183a      	adds	r2, r7, r0
 8006574:	8812      	ldrh	r2, [r2, #0]
 8006576:	60da      	str	r2, [r3, #12]
 8006578:	e067      	b.n	800664a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800657a:	231e      	movs	r3, #30
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	2201      	movs	r2, #1
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	e062      	b.n	800664a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006584:	231f      	movs	r3, #31
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b08      	cmp	r3, #8
 800658c:	d030      	beq.n	80065f0 <UART_SetConfig+0x35c>
 800658e:	dc33      	bgt.n	80065f8 <UART_SetConfig+0x364>
 8006590:	2b04      	cmp	r3, #4
 8006592:	d00d      	beq.n	80065b0 <UART_SetConfig+0x31c>
 8006594:	dc30      	bgt.n	80065f8 <UART_SetConfig+0x364>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <UART_SetConfig+0x30c>
 800659a:	2b02      	cmp	r3, #2
 800659c:	d005      	beq.n	80065aa <UART_SetConfig+0x316>
 800659e:	e02b      	b.n	80065f8 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a0:	f7fe f938 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 80065a4:	0003      	movs	r3, r0
 80065a6:	61bb      	str	r3, [r7, #24]
        break;
 80065a8:	e02d      	b.n	8006606 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <UART_SetConfig+0x358>)
 80065ac:	61bb      	str	r3, [r7, #24]
        break;
 80065ae:	e02a      	b.n	8006606 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b0:	f7fe f8b4 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80065b4:	0003      	movs	r3, r0
 80065b6:	61bb      	str	r3, [r7, #24]
        break;
 80065b8:	e025      	b.n	8006606 <UART_SetConfig+0x372>
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	efff69f3 	.word	0xefff69f3
 80065c0:	ffffcfff 	.word	0xffffcfff
 80065c4:	fffff4ff 	.word	0xfffff4ff
 80065c8:	40013800 	.word	0x40013800
 80065cc:	40021000 	.word	0x40021000
 80065d0:	40004400 	.word	0x40004400
 80065d4:	40004800 	.word	0x40004800
 80065d8:	40004c00 	.word	0x40004c00
 80065dc:	40005000 	.word	0x40005000
 80065e0:	40011400 	.word	0x40011400
 80065e4:	40011800 	.word	0x40011800
 80065e8:	40011c00 	.word	0x40011c00
 80065ec:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065f0:	2380      	movs	r3, #128	; 0x80
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	61bb      	str	r3, [r7, #24]
        break;
 80065f6:	e006      	b.n	8006606 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065fc:	231e      	movs	r3, #30
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	2201      	movs	r2, #1
 8006602:	701a      	strb	r2, [r3, #0]
        break;
 8006604:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01e      	beq.n	800664a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	085a      	lsrs	r2, r3, #1
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	18d2      	adds	r2, r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	0019      	movs	r1, r3
 800661c:	0010      	movs	r0, r2
 800661e:	f7f9 fd71 	bl	8000104 <__udivsi3>
 8006622:	0003      	movs	r3, r0
 8006624:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b0f      	cmp	r3, #15
 800662a:	d90a      	bls.n	8006642 <UART_SetConfig+0x3ae>
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	2380      	movs	r3, #128	; 0x80
 8006630:	025b      	lsls	r3, r3, #9
 8006632:	429a      	cmp	r2, r3
 8006634:	d205      	bcs.n	8006642 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	b29a      	uxth	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60da      	str	r2, [r3, #12]
 8006640:	e003      	b.n	800664a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006642:	231e      	movs	r3, #30
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	2201      	movs	r2, #1
 8006648:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006656:	231e      	movs	r3, #30
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	781b      	ldrb	r3, [r3, #0]
}
 800665c:	0018      	movs	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	b008      	add	sp, #32
 8006662:	bd80      	pop	{r7, pc}

08006664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	2201      	movs	r2, #1
 8006672:	4013      	ands	r3, r2
 8006674:	d00b      	beq.n	800668e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <UART_AdvFeatureConfig+0x144>)
 800667e:	4013      	ands	r3, r2
 8006680:	0019      	movs	r1, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	2202      	movs	r2, #2
 8006694:	4013      	ands	r3, r2
 8006696:	d00b      	beq.n	80066b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	4a43      	ldr	r2, [pc, #268]	; (80067ac <UART_AdvFeatureConfig+0x148>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	0019      	movs	r1, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	2204      	movs	r2, #4
 80066b6:	4013      	ands	r3, r2
 80066b8:	d00b      	beq.n	80066d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4a3b      	ldr	r2, [pc, #236]	; (80067b0 <UART_AdvFeatureConfig+0x14c>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	0019      	movs	r1, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	2208      	movs	r2, #8
 80066d8:	4013      	ands	r3, r2
 80066da:	d00b      	beq.n	80066f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	4a34      	ldr	r2, [pc, #208]	; (80067b4 <UART_AdvFeatureConfig+0x150>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	0019      	movs	r1, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	2210      	movs	r2, #16
 80066fa:	4013      	ands	r3, r2
 80066fc:	d00b      	beq.n	8006716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	4a2c      	ldr	r2, [pc, #176]	; (80067b8 <UART_AdvFeatureConfig+0x154>)
 8006706:	4013      	ands	r3, r2
 8006708:	0019      	movs	r1, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	2220      	movs	r2, #32
 800671c:	4013      	ands	r3, r2
 800671e:	d00b      	beq.n	8006738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	4a25      	ldr	r2, [pc, #148]	; (80067bc <UART_AdvFeatureConfig+0x158>)
 8006728:	4013      	ands	r3, r2
 800672a:	0019      	movs	r1, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	2240      	movs	r2, #64	; 0x40
 800673e:	4013      	ands	r3, r2
 8006740:	d01d      	beq.n	800677e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	4a1d      	ldr	r2, [pc, #116]	; (80067c0 <UART_AdvFeatureConfig+0x15c>)
 800674a:	4013      	ands	r3, r2
 800674c:	0019      	movs	r1, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800675e:	2380      	movs	r3, #128	; 0x80
 8006760:	035b      	lsls	r3, r3, #13
 8006762:	429a      	cmp	r2, r3
 8006764:	d10b      	bne.n	800677e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4a15      	ldr	r2, [pc, #84]	; (80067c4 <UART_AdvFeatureConfig+0x160>)
 800676e:	4013      	ands	r3, r2
 8006770:	0019      	movs	r1, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	4013      	ands	r3, r2
 8006786:	d00b      	beq.n	80067a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	4a0e      	ldr	r2, [pc, #56]	; (80067c8 <UART_AdvFeatureConfig+0x164>)
 8006790:	4013      	ands	r3, r2
 8006792:	0019      	movs	r1, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
  }
}
 80067a0:	46c0      	nop			; (mov r8, r8)
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b002      	add	sp, #8
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	fffdffff 	.word	0xfffdffff
 80067ac:	fffeffff 	.word	0xfffeffff
 80067b0:	fffbffff 	.word	0xfffbffff
 80067b4:	ffff7fff 	.word	0xffff7fff
 80067b8:	ffffefff 	.word	0xffffefff
 80067bc:	ffffdfff 	.word	0xffffdfff
 80067c0:	ffefffff 	.word	0xffefffff
 80067c4:	ff9fffff 	.word	0xff9fffff
 80067c8:	fff7ffff 	.word	0xfff7ffff

080067cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b092      	sub	sp, #72	; 0x48
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2284      	movs	r2, #132	; 0x84
 80067d8:	2100      	movs	r1, #0
 80067da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067dc:	f7fb fb2a 	bl	8001e34 <HAL_GetTick>
 80067e0:	0003      	movs	r3, r0
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2208      	movs	r2, #8
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	d12c      	bne.n	800684c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f4:	2280      	movs	r2, #128	; 0x80
 80067f6:	0391      	lsls	r1, r2, #14
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4a46      	ldr	r2, [pc, #280]	; (8006914 <UART_CheckIdleState+0x148>)
 80067fc:	9200      	str	r2, [sp, #0]
 80067fe:	2200      	movs	r2, #0
 8006800:	f000 f88c 	bl	800691c <UART_WaitOnFlagUntilTimeout>
 8006804:	1e03      	subs	r3, r0, #0
 8006806:	d021      	beq.n	800684c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006808:	f3ef 8310 	mrs	r3, PRIMASK
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006810:	63bb      	str	r3, [r7, #56]	; 0x38
 8006812:	2301      	movs	r3, #1
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	f383 8810 	msr	PRIMASK, r3
}
 800681c:	46c0      	nop			; (mov r8, r8)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2180      	movs	r1, #128	; 0x80
 800682a:	438a      	bics	r2, r1
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	f383 8810 	msr	PRIMASK, r3
}
 8006838:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2278      	movs	r2, #120	; 0x78
 8006844:	2100      	movs	r1, #0
 8006846:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e05f      	b.n	800690c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2204      	movs	r2, #4
 8006854:	4013      	ands	r3, r2
 8006856:	2b04      	cmp	r3, #4
 8006858:	d146      	bne.n	80068e8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685c:	2280      	movs	r2, #128	; 0x80
 800685e:	03d1      	lsls	r1, r2, #15
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4a2c      	ldr	r2, [pc, #176]	; (8006914 <UART_CheckIdleState+0x148>)
 8006864:	9200      	str	r2, [sp, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	f000 f858 	bl	800691c <UART_WaitOnFlagUntilTimeout>
 800686c:	1e03      	subs	r3, r0, #0
 800686e:	d03b      	beq.n	80068e8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006870:	f3ef 8310 	mrs	r3, PRIMASK
 8006874:	60fb      	str	r3, [r7, #12]
  return(result);
 8006876:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
 800687a:	2301      	movs	r3, #1
 800687c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f383 8810 	msr	PRIMASK, r3
}
 8006884:	46c0      	nop			; (mov r8, r8)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4921      	ldr	r1, [pc, #132]	; (8006918 <UART_CheckIdleState+0x14c>)
 8006892:	400a      	ands	r2, r1
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006898:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f383 8810 	msr	PRIMASK, r3
}
 80068a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a2:	f3ef 8310 	mrs	r3, PRIMASK
 80068a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80068a8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	633b      	str	r3, [r7, #48]	; 0x30
 80068ac:	2301      	movs	r3, #1
 80068ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f383 8810 	msr	PRIMASK, r3
}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2101      	movs	r1, #1
 80068c4:	438a      	bics	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	f383 8810 	msr	PRIMASK, r3
}
 80068d2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2280      	movs	r2, #128	; 0x80
 80068d8:	2120      	movs	r1, #32
 80068da:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2278      	movs	r2, #120	; 0x78
 80068e0:	2100      	movs	r1, #0
 80068e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e011      	b.n	800690c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2280      	movs	r2, #128	; 0x80
 80068f2:	2120      	movs	r1, #32
 80068f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2278      	movs	r2, #120	; 0x78
 8006906:	2100      	movs	r1, #0
 8006908:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	0018      	movs	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	b010      	add	sp, #64	; 0x40
 8006912:	bd80      	pop	{r7, pc}
 8006914:	01ffffff 	.word	0x01ffffff
 8006918:	fffffedf 	.word	0xfffffedf

0800691c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	1dfb      	adds	r3, r7, #7
 800692a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800692c:	e04b      	b.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	3301      	adds	r3, #1
 8006932:	d048      	beq.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006934:	f7fb fa7e 	bl	8001e34 <HAL_GetTick>
 8006938:	0002      	movs	r2, r0
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e04b      	b.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2204      	movs	r2, #4
 8006956:	4013      	ands	r3, r2
 8006958:	d035      	beq.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	2208      	movs	r2, #8
 8006962:	4013      	ands	r3, r2
 8006964:	2b08      	cmp	r3, #8
 8006966:	d111      	bne.n	800698c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2208      	movs	r2, #8
 800696e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	0018      	movs	r0, r3
 8006974:	f000 f83c 	bl	80069f0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2284      	movs	r2, #132	; 0x84
 800697c:	2108      	movs	r1, #8
 800697e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2278      	movs	r2, #120	; 0x78
 8006984:	2100      	movs	r1, #0
 8006986:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e02c      	b.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69da      	ldr	r2, [r3, #28]
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	401a      	ands	r2, r3
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	429a      	cmp	r2, r3
 800699e:	d112      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2280      	movs	r2, #128	; 0x80
 80069a6:	0112      	lsls	r2, r2, #4
 80069a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 f81f 	bl	80069f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2284      	movs	r2, #132	; 0x84
 80069b6:	2120      	movs	r1, #32
 80069b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2278      	movs	r2, #120	; 0x78
 80069be:	2100      	movs	r1, #0
 80069c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e00f      	b.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	4013      	ands	r3, r2
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	425a      	negs	r2, r3
 80069d6:	4153      	adcs	r3, r2
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	001a      	movs	r2, r3
 80069dc:	1dfb      	adds	r3, r7, #7
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d0a4      	beq.n	800692e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	0018      	movs	r0, r3
 80069e8:	46bd      	mov	sp, r7
 80069ea:	b004      	add	sp, #16
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08e      	sub	sp, #56	; 0x38
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f8:	f3ef 8310 	mrs	r3, PRIMASK
 80069fc:	617b      	str	r3, [r7, #20]
  return(result);
 80069fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
 8006a02:	2301      	movs	r3, #1
 8006a04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	f383 8810 	msr	PRIMASK, r3
}
 8006a0c:	46c0      	nop			; (mov r8, r8)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4926      	ldr	r1, [pc, #152]	; (8006ab4 <UART_EndRxTransfer+0xc4>)
 8006a1a:	400a      	ands	r2, r1
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	f383 8810 	msr	PRIMASK, r3
}
 8006a28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a2e:	623b      	str	r3, [r7, #32]
  return(result);
 8006a30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a32:	633b      	str	r3, [r7, #48]	; 0x30
 8006a34:	2301      	movs	r3, #1
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	f383 8810 	msr	PRIMASK, r3
}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	438a      	bics	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	f383 8810 	msr	PRIMASK, r3
}
 8006a5a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d118      	bne.n	8006a96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a64:	f3ef 8310 	mrs	r3, PRIMASK
 8006a68:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f383 8810 	msr	PRIMASK, r3
}
 8006a78:	46c0      	nop			; (mov r8, r8)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2110      	movs	r1, #16
 8006a86:	438a      	bics	r2, r1
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f383 8810 	msr	PRIMASK, r3
}
 8006a94:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2280      	movs	r2, #128	; 0x80
 8006a9a:	2120      	movs	r1, #32
 8006a9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b00e      	add	sp, #56	; 0x38
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	fffffedf 	.word	0xfffffedf

08006ab8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	225a      	movs	r2, #90	; 0x5a
 8006aca:	2100      	movs	r1, #0
 8006acc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2252      	movs	r2, #82	; 0x52
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7ff fbc7 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b004      	add	sp, #16
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aee:	f3ef 8310 	mrs	r3, PRIMASK
 8006af2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006af4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	2301      	movs	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f383 8810 	msr	PRIMASK, r3
}
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2140      	movs	r1, #64	; 0x40
 8006b10:	438a      	bics	r2, r1
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f383 8810 	msr	PRIMASK, r3
}
 8006b1e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f7ff fb94 	bl	800625c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b006      	add	sp, #24
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b44:	46c0      	nop			; (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <memset>:
 8006b4c:	0003      	movs	r3, r0
 8006b4e:	1882      	adds	r2, r0, r2
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d100      	bne.n	8006b56 <memset+0xa>
 8006b54:	4770      	bx	lr
 8006b56:	7019      	strb	r1, [r3, #0]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	e7f9      	b.n	8006b50 <memset+0x4>

08006b5c <__libc_init_array>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	2600      	movs	r6, #0
 8006b60:	4c0c      	ldr	r4, [pc, #48]	; (8006b94 <__libc_init_array+0x38>)
 8006b62:	4d0d      	ldr	r5, [pc, #52]	; (8006b98 <__libc_init_array+0x3c>)
 8006b64:	1b64      	subs	r4, r4, r5
 8006b66:	10a4      	asrs	r4, r4, #2
 8006b68:	42a6      	cmp	r6, r4
 8006b6a:	d109      	bne.n	8006b80 <__libc_init_array+0x24>
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	f000 f819 	bl	8006ba4 <_init>
 8006b72:	4c0a      	ldr	r4, [pc, #40]	; (8006b9c <__libc_init_array+0x40>)
 8006b74:	4d0a      	ldr	r5, [pc, #40]	; (8006ba0 <__libc_init_array+0x44>)
 8006b76:	1b64      	subs	r4, r4, r5
 8006b78:	10a4      	asrs	r4, r4, #2
 8006b7a:	42a6      	cmp	r6, r4
 8006b7c:	d105      	bne.n	8006b8a <__libc_init_array+0x2e>
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	00b3      	lsls	r3, r6, #2
 8006b82:	58eb      	ldr	r3, [r5, r3]
 8006b84:	4798      	blx	r3
 8006b86:	3601      	adds	r6, #1
 8006b88:	e7ee      	b.n	8006b68 <__libc_init_array+0xc>
 8006b8a:	00b3      	lsls	r3, r6, #2
 8006b8c:	58eb      	ldr	r3, [r5, r3]
 8006b8e:	4798      	blx	r3
 8006b90:	3601      	adds	r6, #1
 8006b92:	e7f2      	b.n	8006b7a <__libc_init_array+0x1e>
 8006b94:	08006bf4 	.word	0x08006bf4
 8006b98:	08006bf4 	.word	0x08006bf4
 8006b9c:	08006bf8 	.word	0x08006bf8
 8006ba0:	08006bf4 	.word	0x08006bf4

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
