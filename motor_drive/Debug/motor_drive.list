
motor_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800796c  0800796c  0001796c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a4  080079a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080079a4  080079a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079a4  080079a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080079ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000000c  080079b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080079b8  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001143e  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000242d  00000000  00000000  000314b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  000338e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7c  00000000  00000000  000348a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef5  00000000  00000000  0003551c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001381e  00000000  00000000  00050411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a609e  00000000  00000000  00063c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000394c  00000000  00000000  00109cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010d61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007954 	.word	0x08007954

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08007954 	.word	0x08007954

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 ff59 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f859 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 facb 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800022e:	f000 fa9b 	bl	8000768 <MX_DMA_Init>
  MX_TIM2_Init();
 8000232:	f000 f8eb 	bl	800040c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000236:	f000 f995 	bl	8000564 <MX_TIM3_Init>
  MX_TIM6_Init();
 800023a:	f000 fa29 	bl	8000690 <MX_TIM6_Init>
  MX_I2C2_Init();
 800023e:	f000 f8a5 	bl	800038c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000242:	f000 fa61 	bl	8000708 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <main+0xa8>)
 8000248:	2100      	movs	r1, #0
 800024a:	0018      	movs	r0, r3
 800024c:	f005 f9fc 	bl	8005648 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000250:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <main+0xac>)
 8000252:	2100      	movs	r1, #0
 8000254:	0018      	movs	r0, r3
 8000256:	f005 f9f7 	bl	8005648 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800025a:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <main+0xb0>)
 800025c:	0018      	movs	r0, r3
 800025e:	f005 f8f1 	bl	8005444 <HAL_TIM_Base_Start_IT>

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, 212, 1, 100);
 8000262:	1dfc      	adds	r4, r7, #7
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <main+0xb4>)
 8000266:	2364      	movs	r3, #100	; 0x64
 8000268:	2201      	movs	r2, #1
 800026a:	21d4      	movs	r1, #212	; 0xd4
 800026c:	f002 fa3a 	bl	80026e4 <HAL_I2C_IsDeviceReady>
 8000270:	0003      	movs	r3, r0
 8000272:	7023      	strb	r3, [r4, #0]
  uint8_t gyro_on = 0b10000000;
 8000274:	1dbb      	adds	r3, r7, #6
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	701a      	strb	r2, [r3, #0]
  uint8_t accel_on = 0b10000000;
 800027a:	1d7b      	adds	r3, r7, #5
 800027c:	2280      	movs	r2, #128	; 0x80
 800027e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c2, 212, 0x11, I2C_MEMADD_SIZE_8BIT, &gyro_on, 1, HAL_MAX_DELAY);
 8000280:	4813      	ldr	r0, [pc, #76]	; (80002d0 <main+0xb4>)
 8000282:	2301      	movs	r3, #1
 8000284:	425b      	negs	r3, r3
 8000286:	9302      	str	r3, [sp, #8]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	1dbb      	adds	r3, r7, #6
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2301      	movs	r3, #1
 8000292:	2211      	movs	r2, #17
 8000294:	21d4      	movs	r1, #212	; 0xd4
 8000296:	f002 f8f7 	bl	8002488 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c2, 212, 0x10, I2C_MEMADD_SIZE_8BIT, &accel_on, 1, HAL_MAX_DELAY);
 800029a:	480d      	ldr	r0, [pc, #52]	; (80002d0 <main+0xb4>)
 800029c:	2301      	movs	r3, #1
 800029e:	425b      	negs	r3, r3
 80002a0:	9302      	str	r3, [sp, #8]
 80002a2:	2301      	movs	r3, #1
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	1d7b      	adds	r3, r7, #5
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2301      	movs	r3, #1
 80002ac:	2210      	movs	r2, #16
 80002ae:	21d4      	movs	r1, #212	; 0xd4
 80002b0:	f002 f8ea 	bl	8002488 <HAL_I2C_Mem_Write>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //    HAL_Delay(500);
	  //    HAL_UART_Transmit_DMA(&huart1, test_buff, sizeof(test_buff));
	  HAL_UART_Receive_DMA (&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 80002b4:	4907      	ldr	r1, [pc, #28]	; (80002d4 <main+0xb8>)
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <main+0xbc>)
 80002b8:	2208      	movs	r2, #8
 80002ba:	0018      	movs	r0, r3
 80002bc:	f006 f9a0 	bl	8006600 <HAL_UART_Receive_DMA>
 80002c0:	e7f8      	b.n	80002b4 <main+0x98>
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	20000104 	.word	0x20000104
 80002c8:	2000014c 	.word	0x2000014c
 80002cc:	20000194 	.word	0x20000194
 80002d0:	20000028 	.word	0x20000028
 80002d4:	200002ec 	.word	0x200002ec
 80002d8:	200001dc 	.word	0x200001dc

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b099      	sub	sp, #100	; 0x64
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	242c      	movs	r4, #44	; 0x2c
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	0018      	movs	r0, r3
 80002e8:	2334      	movs	r3, #52	; 0x34
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f007 fb04 	bl	80078fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f2:	231c      	movs	r3, #28
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	0018      	movs	r0, r3
 80002f8:	2310      	movs	r3, #16
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f007 fafc 	bl	80078fa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000302:	003b      	movs	r3, r7
 8000304:	0018      	movs	r0, r3
 8000306:	231c      	movs	r3, #28
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f007 faf5 	bl	80078fa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000310:	0021      	movs	r1, r4
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2202      	movs	r2, #2
 8000316:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2201      	movs	r2, #1
 800031c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2210      	movs	r2, #16
 8000322:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	187b      	adds	r3, r7, r1
 800032c:	0018      	movs	r0, r3
 800032e:	f004 fa47 	bl	80047c0 <HAL_RCC_OscConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000336:	f000 fb75 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	211c      	movs	r1, #28
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2207      	movs	r2, #7
 8000340:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2100      	movs	r1, #0
 8000358:	0018      	movs	r0, r3
 800035a:	f004 fdb7 	bl	8004ecc <HAL_RCC_ClockConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000362:	f000 fb5f 	bl	8000a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000366:	003b      	movs	r3, r7
 8000368:	2201      	movs	r2, #1
 800036a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800036c:	003b      	movs	r3, r7
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000372:	003b      	movs	r3, r7
 8000374:	0018      	movs	r0, r3
 8000376:	f004 ff15 	bl	80051a4 <HAL_RCCEx_PeriphCLKConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800037e:	f000 fb51 	bl	8000a24 <Error_Handler>
  }
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b019      	add	sp, #100	; 0x64
 8000388:	bd90      	pop	{r4, r7, pc}
	...

0800038c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_I2C2_Init+0x74>)
 8000392:	4a1c      	ldr	r2, [pc, #112]	; (8000404 <MX_I2C2_Init+0x78>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00101D37;
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <MX_I2C2_Init+0x74>)
 8000398:	4a1b      	ldr	r2, [pc, #108]	; (8000408 <MX_I2C2_Init+0x7c>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_I2C2_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <MX_I2C2_Init+0x74>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_I2C2_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_I2C2_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_I2C2_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_I2C2_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_I2C2_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_I2C2_Init+0x74>)
 80003c8:	0018      	movs	r0, r3
 80003ca:	f001 fd89 	bl	8001ee0 <HAL_I2C_Init>
 80003ce:	1e03      	subs	r3, r0, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003d2:	f000 fb27 	bl	8000a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <MX_I2C2_Init+0x74>)
 80003d8:	2100      	movs	r1, #0
 80003da:	0018      	movs	r0, r3
 80003dc:	f004 f958 	bl	8004690 <HAL_I2CEx_ConfigAnalogFilter>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003e4:	f000 fb1e 	bl	8000a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_I2C2_Init+0x74>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	0018      	movs	r0, r3
 80003ee:	f004 f99b 	bl	8004728 <HAL_I2CEx_ConfigDigitalFilter>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003f6:	f000 fb15 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000028 	.word	0x20000028
 8000404:	40005800 	.word	0x40005800
 8000408:	00101d37 	.word	0x00101d37

0800040c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08e      	sub	sp, #56	; 0x38
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000412:	2328      	movs	r3, #40	; 0x28
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	0018      	movs	r0, r3
 8000418:	2310      	movs	r3, #16
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f007 fa6c 	bl	80078fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000422:	2320      	movs	r3, #32
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	0018      	movs	r0, r3
 8000428:	2308      	movs	r3, #8
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f007 fa64 	bl	80078fa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	0018      	movs	r0, r3
 8000436:	231c      	movs	r3, #28
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f007 fa5d 	bl	80078fa <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000440:	4b47      	ldr	r3, [pc, #284]	; (8000560 <MX_TIM2_Init+0x154>)
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	05d2      	lsls	r2, r2, #23
 8000446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000448:	4b45      	ldr	r3, [pc, #276]	; (8000560 <MX_TIM2_Init+0x154>)
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044e:	4b44      	ldr	r3, [pc, #272]	; (8000560 <MX_TIM2_Init+0x154>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 106;
 8000454:	4b42      	ldr	r3, [pc, #264]	; (8000560 <MX_TIM2_Init+0x154>)
 8000456:	226a      	movs	r2, #106	; 0x6a
 8000458:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045a:	4b41      	ldr	r3, [pc, #260]	; (8000560 <MX_TIM2_Init+0x154>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000460:	4b3f      	ldr	r3, [pc, #252]	; (8000560 <MX_TIM2_Init+0x154>)
 8000462:	2200      	movs	r2, #0
 8000464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000466:	4b3e      	ldr	r3, [pc, #248]	; (8000560 <MX_TIM2_Init+0x154>)
 8000468:	0018      	movs	r0, r3
 800046a:	f004 ff9b 	bl	80053a4 <HAL_TIM_Base_Init>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000472:	f000 fad7 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000476:	2128      	movs	r1, #40	; 0x28
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	0152      	lsls	r2, r2, #5
 800047e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000480:	187a      	adds	r2, r7, r1
 8000482:	4b37      	ldr	r3, [pc, #220]	; (8000560 <MX_TIM2_Init+0x154>)
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f005 fbca 	bl	8005c20 <HAL_TIM_ConfigClockSource>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000490:	f000 fac8 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000494:	4b32      	ldr	r3, [pc, #200]	; (8000560 <MX_TIM2_Init+0x154>)
 8000496:	0018      	movs	r0, r3
 8000498:	f005 f87e 	bl	8005598 <HAL_TIM_PWM_Init>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004a0:	f000 fac0 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80004a4:	4b2e      	ldr	r3, [pc, #184]	; (8000560 <MX_TIM2_Init+0x154>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f005 f81e 	bl	80054e8 <HAL_TIM_OC_Init>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80004b0:	f000 fab8 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2120      	movs	r1, #32
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2200      	movs	r2, #0
 80004c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004c2:	187a      	adds	r2, r7, r1
 80004c4:	4b26      	ldr	r3, [pc, #152]	; (8000560 <MX_TIM2_Init+0x154>)
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f005 ffd7 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80004d2:	f000 faa7 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2260      	movs	r2, #96	; 0x60
 80004da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ee:	1d39      	adds	r1, r7, #4
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_TIM2_Init+0x154>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f005 facd 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80004fe:	f000 fa91 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2201      	movs	r2, #1
 8000506:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000508:	1d39      	adds	r1, r7, #4
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_TIM2_Init+0x154>)
 800050c:	2204      	movs	r2, #4
 800050e:	0018      	movs	r0, r3
 8000510:	f005 fac0 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000518:	f000 fa84 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000522:	1d39      	adds	r1, r7, #4
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_TIM2_Init+0x154>)
 8000526:	2208      	movs	r2, #8
 8000528:	0018      	movs	r0, r3
 800052a:	f005 fab3 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 8000532:	f000 fa77 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800053c:	1d39      	adds	r1, r7, #4
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_TIM2_Init+0x154>)
 8000540:	220c      	movs	r2, #12
 8000542:	0018      	movs	r0, r3
 8000544:	f005 fa4e 	bl	80059e4 <HAL_TIM_OC_ConfigChannel>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x144>
  {
    Error_Handler();
 800054c:	f000 fa6a 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <MX_TIM2_Init+0x154>)
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fbe8 	bl	8000d28 <HAL_TIM_MspPostInit>

}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b00e      	add	sp, #56	; 0x38
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000104 	.word	0x20000104

08000564 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08e      	sub	sp, #56	; 0x38
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800056a:	2328      	movs	r3, #40	; 0x28
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	0018      	movs	r0, r3
 8000570:	2310      	movs	r3, #16
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f007 f9c0 	bl	80078fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057a:	2320      	movs	r3, #32
 800057c:	18fb      	adds	r3, r7, r3
 800057e:	0018      	movs	r0, r3
 8000580:	2308      	movs	r3, #8
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f007 f9b8 	bl	80078fa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	0018      	movs	r0, r3
 800058e:	231c      	movs	r3, #28
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f007 f9b1 	bl	80078fa <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000598:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <MX_TIM3_Init+0x120>)
 800059a:	4a3b      	ldr	r2, [pc, #236]	; (8000688 <MX_TIM3_Init+0x124>)
 800059c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 800059e:	4b39      	ldr	r3, [pc, #228]	; (8000684 <MX_TIM3_Init+0x120>)
 80005a0:	2207      	movs	r2, #7
 80005a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a4:	4b37      	ldr	r3, [pc, #220]	; (8000684 <MX_TIM3_Init+0x120>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80005aa:	4b36      	ldr	r3, [pc, #216]	; (8000684 <MX_TIM3_Init+0x120>)
 80005ac:	4a37      	ldr	r2, [pc, #220]	; (800068c <MX_TIM3_Init+0x128>)
 80005ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <MX_TIM3_Init+0x120>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b6:	4b33      	ldr	r3, [pc, #204]	; (8000684 <MX_TIM3_Init+0x120>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <MX_TIM3_Init+0x120>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f004 fef0 	bl	80053a4 <HAL_TIM_Base_Init>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005c8:	f000 fa2c 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005cc:	2128      	movs	r1, #40	; 0x28
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	0152      	lsls	r2, r2, #5
 80005d4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005d6:	187a      	adds	r2, r7, r1
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_TIM3_Init+0x120>)
 80005da:	0011      	movs	r1, r2
 80005dc:	0018      	movs	r0, r3
 80005de:	f005 fb1f 	bl	8005c20 <HAL_TIM_ConfigClockSource>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80005e6:	f000 fa1d 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_TIM3_Init+0x120>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f004 ffd3 	bl	8005598 <HAL_TIM_PWM_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80005f6:	f000 fa15 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <MX_TIM3_Init+0x120>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f004 ff73 	bl	80054e8 <HAL_TIM_OC_Init>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000606:	f000 fa0d 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060a:	2120      	movs	r1, #32
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000618:	187a      	adds	r2, r7, r1
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_TIM3_Init+0x120>)
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f005 ff2c 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000628:	f000 f9fc 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2260      	movs	r2, #96	; 0x60
 8000630:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000644:	1d39      	adds	r1, r7, #4
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_TIM3_Init+0x120>)
 8000648:	2200      	movs	r2, #0
 800064a:	0018      	movs	r0, r3
 800064c:	f005 fa22 	bl	8005a94 <HAL_TIM_PWM_ConfigChannel>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8000654:	f000 f9e6 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800065e:	1d39      	adds	r1, r7, #4
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_TIM3_Init+0x120>)
 8000662:	2204      	movs	r2, #4
 8000664:	0018      	movs	r0, r3
 8000666:	f005 f9bd 	bl	80059e4 <HAL_TIM_OC_ConfigChannel>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 800066e:	f000 f9d9 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <MX_TIM3_Init+0x120>)
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fb57 	bl	8000d28 <HAL_TIM_MspPostInit>

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b00e      	add	sp, #56	; 0x38
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	2000014c 	.word	0x2000014c
 8000688:	40000400 	.word	0x40000400
 800068c:	00004e1f 	.word	0x00004e1f

08000690 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000696:	003b      	movs	r3, r7
 8000698:	0018      	movs	r0, r3
 800069a:	2308      	movs	r3, #8
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f007 f92b 	bl	80078fa <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_TIM6_Init+0x6c>)
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_TIM6_Init+0x70>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_TIM6_Init+0x6c>)
 80006ac:	2207      	movs	r2, #7
 80006ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_TIM6_Init+0x6c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1947;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_TIM6_Init+0x6c>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_TIM6_Init+0x74>)
 80006ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_TIM6_Init+0x6c>)
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_TIM6_Init+0x6c>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f004 fe6d 	bl	80053a4 <HAL_TIM_Base_Init>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80006ce:	f000 f9a9 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	003b      	movs	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006de:	003a      	movs	r2, r7
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_TIM6_Init+0x6c>)
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f005 fec9 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80006ee:	f000 f999 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	20000194 	.word	0x20000194
 8000700:	40001000 	.word	0x40001000
 8000704:	0000079b 	.word	0x0000079b

08000708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_USART1_UART_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000714:	22e1      	movs	r2, #225	; 0xe1
 8000716:	0252      	lsls	r2, r2, #9
 8000718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800074c:	0018      	movs	r0, r3
 800074e:	f005 ff03 	bl	8006558 <HAL_UART_Init>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f965 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200001dc 	.word	0x200001dc
 8000764:	40013800 	.word	0x40013800

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_DMA_Init+0x58>)
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_DMA_Init+0x58>)
 8000774:	2101      	movs	r1, #1
 8000776:	430a      	orrs	r2, r1
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_DMA_Init+0x58>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2009      	movs	r0, #9
 800078c:	f000 fdd6 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000790:	2009      	movs	r0, #9
 8000792:	f000 fde8 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200a      	movs	r0, #10
 800079c:	f000 fdce 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80007a0:	200a      	movs	r0, #10
 80007a2:	f000 fde0 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200b      	movs	r0, #11
 80007ac:	f000 fdc6 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80007b0:	200b      	movs	r0, #11
 80007b2:	f000 fdd8 	bl	8001366 <HAL_NVIC_EnableIRQ>

}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b08b      	sub	sp, #44	; 0x2c
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	2414      	movs	r4, #20
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	0018      	movs	r0, r3
 80007d0:	2314      	movs	r3, #20
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f007 f890 	bl	80078fa <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007dc:	695a      	ldr	r2, [r3, #20]
 80007de:	4b29      	ldr	r3, [pc, #164]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	03c9      	lsls	r1, r1, #15
 80007e4:	430a      	orrs	r2, r1
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007ea:	695a      	ldr	r2, [r3, #20]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	03db      	lsls	r3, r3, #15
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0309      	lsls	r1, r1, #12
 8000800:	430a      	orrs	r2, r1
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000806:	695a      	ldr	r2, [r3, #20]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	031b      	lsls	r3, r3, #12
 800080c:	4013      	ands	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0289      	lsls	r1, r1, #10
 800081c:	430a      	orrs	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000822:	695a      	ldr	r2, [r3, #20]
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	029b      	lsls	r3, r3, #10
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000830:	695a      	ldr	r2, [r3, #20]
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	02c9      	lsls	r1, r1, #11
 8000838:	430a      	orrs	r2, r1
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_GPIO_Init+0xc0>)
 800083e:	695a      	ldr	r2, [r3, #20]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	02db      	lsls	r3, r3, #11
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_GPIO_Init+0xc4>)
 800084c:	2200      	movs	r2, #0
 800084e:	2107      	movs	r1, #7
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fb27 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000856:	0021      	movs	r1, r4
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2207      	movs	r2, #7
 800085c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000870:	187b      	adds	r3, r7, r1
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <MX_GPIO_Init+0xc4>)
 8000874:	0019      	movs	r1, r3
 8000876:	0010      	movs	r0, r2
 8000878:	f001 f8c4 	bl	8001a04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b00b      	add	sp, #44	; 0x2c
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	48000800 	.word	0x48000800

0800088c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	b091      	sub	sp, #68	; 0x44
 8000890:	af02      	add	r7, sp, #8
 8000892:	6078      	str	r0, [r7, #4]
	HAL_I2C_DeInit(&hi2c2);
 8000894:	4b59      	ldr	r3, [pc, #356]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000896:	0018      	movs	r0, r3
 8000898:	f001 fbb8 	bl	800200c <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c2);
 800089c:	4b57      	ldr	r3, [pc, #348]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fb1e 	bl	8001ee0 <HAL_I2C_Init>
	uint8_t accelData[6];
	uint8_t gyroData[6];
	//HAL_I2C_Mem_Read(&hi2c2, 212, 0x22, I2C_MEMADD_SIZE_8BIT, gyroData, 6, HAL_MAX_DELAY);
	//HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(&hi2c2, 212, 0x22, I2C_MEMADD_SIZE_8BIT, gyroData, 6);
	//HAL_I2C_StateTypeDef state = HAL_I2C_GetState(&hi2c2);
	uint8_t commandByte = 0x22;
 80008a4:	260f      	movs	r6, #15
 80008a6:	19bb      	adds	r3, r7, r6
 80008a8:	2222      	movs	r2, #34	; 0x22
 80008aa:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status1 = HAL_I2C_Master_Transmit(&hi2c2, 212, &commandByte, 1, HAL_MAX_DELAY);
 80008ac:	2337      	movs	r3, #55	; 0x37
 80008ae:	18fc      	adds	r4, r7, r3
 80008b0:	19ba      	adds	r2, r7, r6
 80008b2:	4852      	ldr	r0, [pc, #328]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 80008b4:	2301      	movs	r3, #1
 80008b6:	425b      	negs	r3, r3
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	21d4      	movs	r1, #212	; 0xd4
 80008be:	f001 fbd5 	bl	800206c <HAL_I2C_Master_Transmit>
 80008c2:	0003      	movs	r3, r0
 80008c4:	7023      	strb	r3, [r4, #0]
	HAL_StatusTypeDef status2 = HAL_I2C_Master_Receive_DMA(&hi2c2, 212, gyroData, sizeof(gyroData));
 80008c6:	2336      	movs	r3, #54	; 0x36
 80008c8:	18fc      	adds	r4, r7, r3
 80008ca:	2510      	movs	r5, #16
 80008cc:	197a      	adds	r2, r7, r5
 80008ce:	484b      	ldr	r0, [pc, #300]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 80008d0:	2306      	movs	r3, #6
 80008d2:	21d4      	movs	r1, #212	; 0xd4
 80008d4:	f001 fcd2 	bl	800227c <HAL_I2C_Master_Receive_DMA>
 80008d8:	0003      	movs	r3, r0
 80008da:	7023      	strb	r3, [r4, #0]
	uint32_t error = HAL_I2C_GetError(&hi2c2);
 80008dc:	4b47      	ldr	r3, [pc, #284]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f002 f8d5 	bl	8002a8e <HAL_I2C_GetError>
 80008e4:	0003      	movs	r3, r0
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_StatusTypeDef dma_state = HAL_DMA_PollForTransfer(&hdma_i2c2_rx, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 80008e8:	232f      	movs	r3, #47	; 0x2f
 80008ea:	18fc      	adds	r4, r7, r3
 80008ec:	2301      	movs	r3, #1
 80008ee:	425a      	negs	r2, r3
 80008f0:	4b43      	ldr	r3, [pc, #268]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 fed7 	bl	80016a8 <HAL_DMA_PollForTransfer>
 80008fa:	0003      	movs	r3, r0
 80008fc:	7023      	strb	r3, [r4, #0]
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, 212, 1, 100);
 80008fe:	232e      	movs	r3, #46	; 0x2e
 8000900:	18fc      	adds	r4, r7, r3
 8000902:	483e      	ldr	r0, [pc, #248]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000904:	2364      	movs	r3, #100	; 0x64
 8000906:	2201      	movs	r2, #1
 8000908:	21d4      	movs	r1, #212	; 0xd4
 800090a:	f001 feeb 	bl	80026e4 <HAL_I2C_IsDeviceReady>
 800090e:	0003      	movs	r3, r0
 8000910:	7023      	strb	r3, [r4, #0]

	HAL_I2C_DeInit(&hi2c2);
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000914:	0018      	movs	r0, r3
 8000916:	f001 fb79 	bl	800200c <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c2);
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fadf 	bl	8001ee0 <HAL_I2C_Init>
	ret = HAL_I2C_IsDeviceReady(&hi2c2, 212, 1, 100);
 8000922:	232e      	movs	r3, #46	; 0x2e
 8000924:	18fc      	adds	r4, r7, r3
 8000926:	4835      	ldr	r0, [pc, #212]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	2201      	movs	r2, #1
 800092c:	21d4      	movs	r1, #212	; 0xd4
 800092e:	f001 fed9 	bl	80026e4 <HAL_I2C_IsDeviceReady>
 8000932:	0003      	movs	r3, r0
 8000934:	7023      	strb	r3, [r4, #0]
	/*while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY)
	{
	}*/
	//HAL_I2C_Mem_Read(&hi2c2, 212, 0x28, I2C_MEMADD_SIZE_8BIT, accelData, 6, HAL_MAX_DELAY);
	//HAL_I2C_Mem_Read_DMA(&hi2c2, 212, 0x28, I2C_MEMADD_SIZE_8BIT, accelData, 6);
	commandByte = 0x28;
 8000936:	19bb      	adds	r3, r7, r6
 8000938:	2228      	movs	r2, #40	; 0x28
 800093a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status3 = HAL_I2C_Master_Transmit(&hi2c2, 212, &commandByte, 1, HAL_MAX_DELAY);
 800093c:	232d      	movs	r3, #45	; 0x2d
 800093e:	18fc      	adds	r4, r7, r3
 8000940:	19ba      	adds	r2, r7, r6
 8000942:	482e      	ldr	r0, [pc, #184]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000944:	2301      	movs	r3, #1
 8000946:	425b      	negs	r3, r3
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2301      	movs	r3, #1
 800094c:	21d4      	movs	r1, #212	; 0xd4
 800094e:	f001 fb8d 	bl	800206c <HAL_I2C_Master_Transmit>
 8000952:	0003      	movs	r3, r0
 8000954:	7023      	strb	r3, [r4, #0]
	HAL_StatusTypeDef status4 = HAL_I2C_Master_Receive_DMA(&hi2c2, 212, accelData, sizeof(accelData));
 8000956:	232c      	movs	r3, #44	; 0x2c
 8000958:	18fc      	adds	r4, r7, r3
 800095a:	2618      	movs	r6, #24
 800095c:	19ba      	adds	r2, r7, r6
 800095e:	4827      	ldr	r0, [pc, #156]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000960:	2306      	movs	r3, #6
 8000962:	21d4      	movs	r1, #212	; 0xd4
 8000964:	f001 fc8a 	bl	800227c <HAL_I2C_Master_Receive_DMA>
 8000968:	0003      	movs	r3, r0
 800096a:	7023      	strb	r3, [r4, #0]
	/*while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY)
	{
	}*/

	int16_t gyroDataX = (int16_t)((gyroData[1] << 8) | gyroData[0]); // X-axis
 800096c:	0028      	movs	r0, r5
 800096e:	183b      	adds	r3, r7, r0
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	b219      	sxth	r1, r3
 8000976:	183b      	adds	r3, r7, r0
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b21a      	sxth	r2, r3
 800097c:	232a      	movs	r3, #42	; 0x2a
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	430a      	orrs	r2, r1
 8000982:	801a      	strh	r2, [r3, #0]
	int16_t gyroDataY = (int16_t)((gyroData[3] << 8) | gyroData[2]); // Y-axis
 8000984:	183b      	adds	r3, r7, r0
 8000986:	78db      	ldrb	r3, [r3, #3]
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	b219      	sxth	r1, r3
 800098c:	183b      	adds	r3, r7, r0
 800098e:	789b      	ldrb	r3, [r3, #2]
 8000990:	b21a      	sxth	r2, r3
 8000992:	2328      	movs	r3, #40	; 0x28
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	430a      	orrs	r2, r1
 8000998:	801a      	strh	r2, [r3, #0]
	int16_t gyroDataZ = (int16_t)((gyroData[5] << 8) | gyroData[4]); // Z-axis
 800099a:	183b      	adds	r3, r7, r0
 800099c:	795b      	ldrb	r3, [r3, #5]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b219      	sxth	r1, r3
 80009a2:	183b      	adds	r3, r7, r0
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	2326      	movs	r3, #38	; 0x26
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	430a      	orrs	r2, r1
 80009ae:	801a      	strh	r2, [r3, #0]

	int16_t accelDataX = (int16_t)((accelData[1] << 8) | accelData[0]); // X-axis
 80009b0:	0030      	movs	r0, r6
 80009b2:	183b      	adds	r3, r7, r0
 80009b4:	785b      	ldrb	r3, [r3, #1]
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	b219      	sxth	r1, r3
 80009ba:	183b      	adds	r3, r7, r0
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b21a      	sxth	r2, r3
 80009c0:	2324      	movs	r3, #36	; 0x24
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	430a      	orrs	r2, r1
 80009c6:	801a      	strh	r2, [r3, #0]
	int16_t accelDataY = (int16_t)((accelData[3] << 8) | accelData[2]); // Y-axis
 80009c8:	183b      	adds	r3, r7, r0
 80009ca:	78db      	ldrb	r3, [r3, #3]
 80009cc:	021b      	lsls	r3, r3, #8
 80009ce:	b219      	sxth	r1, r3
 80009d0:	183b      	adds	r3, r7, r0
 80009d2:	789b      	ldrb	r3, [r3, #2]
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	2322      	movs	r3, #34	; 0x22
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	430a      	orrs	r2, r1
 80009dc:	801a      	strh	r2, [r3, #0]
	int16_t accelDataZ = (int16_t)((accelData[5] << 8) | accelData[4]); // Z-axis
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	795b      	ldrb	r3, [r3, #5]
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	b219      	sxth	r1, r3
 80009e6:	183b      	adds	r3, r7, r0
 80009e8:	791b      	ldrb	r3, [r3, #4]
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	2320      	movs	r3, #32
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	430a      	orrs	r2, r1
 80009f2:	801a      	strh	r2, [r3, #0]
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b00f      	add	sp, #60	; 0x3c
 80009fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fc:	20000028 	.word	0x20000028
 8000a00:	2000007c 	.word	0x2000007c

08000a04 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    // Data has been received
    // Process the data in rxBuffer (accelerometer data)
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
    // Data has been received
    // Process the data in rxBuffer (accelerometer data)
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_MspInit+0x44>)
 8000a38:	699a      	ldr	r2, [r3, #24]
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	619a      	str	r2, [r3, #24]
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_MspInit+0x44>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x44>)
 8000a50:	69da      	ldr	r2, [r3, #28]
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_MspInit+0x44>)
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	0549      	lsls	r1, r1, #21
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	61da      	str	r2, [r3, #28]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_MspInit+0x44>)
 8000a5e:	69da      	ldr	r2, [r3, #28]
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	055b      	lsls	r3, r3, #21
 8000a64:	4013      	ands	r3, r2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b08b      	sub	sp, #44	; 0x2c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	2414      	movs	r4, #20
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f006 ff35 	bl	80078fa <memset>
  if(hi2c->Instance==I2C2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a59      	ldr	r2, [pc, #356]	; (8000bfc <HAL_I2C_MspInit+0x184>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d000      	beq.n	8000a9c <HAL_I2C_MspInit+0x24>
 8000a9a:	e0aa      	b.n	8000bf2 <HAL_I2C_MspInit+0x17a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <HAL_I2C_MspInit+0x188>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	4b57      	ldr	r3, [pc, #348]	; (8000c00 <HAL_I2C_MspInit+0x188>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	02c9      	lsls	r1, r1, #11
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <HAL_I2C_MspInit+0x188>)
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	02db      	lsls	r3, r3, #11
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	22c0      	movs	r2, #192	; 0xc0
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac0:	0021      	movs	r1, r4
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2212      	movs	r2, #18
 8000ac6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	4a49      	ldr	r2, [pc, #292]	; (8000c04 <HAL_I2C_MspInit+0x18c>)
 8000ade:	0019      	movs	r1, r3
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	f000 ff8f 	bl	8001a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ae6:	4b46      	ldr	r3, [pc, #280]	; (8000c00 <HAL_I2C_MspInit+0x188>)
 8000ae8:	69da      	ldr	r2, [r3, #28]
 8000aea:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <HAL_I2C_MspInit+0x188>)
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	03c9      	lsls	r1, r1, #15
 8000af0:	430a      	orrs	r2, r1
 8000af2:	61da      	str	r2, [r3, #28]
 8000af4:	4b42      	ldr	r3, [pc, #264]	; (8000c00 <HAL_I2C_MspInit+0x188>)
 8000af6:	69da      	ldr	r2, [r3, #28]
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	03db      	lsls	r3, r3, #15
 8000afc:	4013      	ands	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8000b02:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b04:	4a41      	ldr	r2, [pc, #260]	; (8000c0c <HAL_I2C_MspInit+0x194>)
 8000b06:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b08:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0e:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b1a:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b20:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	0192      	lsls	r2, r2, #6
 8000b32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000b34:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 fc42 	bl	80013c0 <HAL_DMA_Init>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000b40:	f7ff ff70 	bl	8000a24 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH5_I2C2_RX);
 8000b44:	4a32      	ldr	r2, [pc, #200]	; (8000c10 <HAL_I2C_MspInit+0x198>)
 8000b46:	23a8      	movs	r3, #168	; 0xa8
 8000b48:	58d3      	ldr	r3, [r2, r3]
 8000b4a:	4931      	ldr	r1, [pc, #196]	; (8000c10 <HAL_I2C_MspInit+0x198>)
 8000b4c:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <HAL_I2C_MspInit+0x19c>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	22a8      	movs	r2, #168	; 0xa8
 8000b52:	508b      	str	r3, [r1, r2]
 8000b54:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <HAL_I2C_MspInit+0x198>)
 8000b56:	23a8      	movs	r3, #168	; 0xa8
 8000b58:	58d3      	ldr	r3, [r2, r3]
 8000b5a:	492d      	ldr	r1, [pc, #180]	; (8000c10 <HAL_I2C_MspInit+0x198>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	0292      	lsls	r2, r2, #10
 8000b60:	4313      	orrs	r3, r2
 8000b62:	22a8      	movs	r2, #168	; 0xa8
 8000b64:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000b74:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <HAL_I2C_MspInit+0x1a4>)
 8000b76:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b90:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	0192      	lsls	r2, r2, #6
 8000ba2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fc0a 	bl	80013c0 <HAL_DMA_Init>
 8000bac:	1e03      	subs	r3, r0, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 8000bb0:	f7ff ff38 	bl	8000a24 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_I2C2_TX);
 8000bb4:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <HAL_I2C_MspInit+0x198>)
 8000bb6:	23a8      	movs	r3, #168	; 0xa8
 8000bb8:	58d3      	ldr	r3, [r2, r3]
 8000bba:	4915      	ldr	r1, [pc, #84]	; (8000c10 <HAL_I2C_MspInit+0x198>)
 8000bbc:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <HAL_I2C_MspInit+0x1a8>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	22a8      	movs	r2, #168	; 0xa8
 8000bc2:	508b      	str	r3, [r1, r2]
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <HAL_I2C_MspInit+0x198>)
 8000bc6:	23a8      	movs	r3, #168	; 0xa8
 8000bc8:	58d3      	ldr	r3, [r2, r3]
 8000bca:	4911      	ldr	r1, [pc, #68]	; (8000c10 <HAL_I2C_MspInit+0x198>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	0192      	lsls	r2, r2, #6
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	22a8      	movs	r2, #168	; 0xa8
 8000bd4:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000bda:	639a      	str	r2, [r3, #56]	; 0x38
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2018      	movs	r0, #24
 8000be8:	f000 fba8 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000bec:	2018      	movs	r0, #24
 8000bee:	f000 fbba 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b00b      	add	sp, #44	; 0x2c
 8000bf8:	bd90      	pop	{r4, r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	40005800 	.word	0x40005800
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	2000007c 	.word	0x2000007c
 8000c0c:	40020058 	.word	0x40020058
 8000c10:	40020000 	.word	0x40020000
 8000c14:	fff0ffff 	.word	0xfff0ffff
 8000c18:	200000c0 	.word	0x200000c0
 8000c1c:	40020044 	.word	0x40020044
 8000c20:	ffff0fff 	.word	0xffff0fff

08000c24 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_I2C_MspDeInit+0x5c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d120      	bne.n	8000c78 <HAL_I2C_MspDeInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_I2C_MspDeInit+0x60>)
 8000c38:	69da      	ldr	r2, [r3, #28]
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_I2C_MspDeInit+0x60>)
 8000c3c:	4912      	ldr	r1, [pc, #72]	; (8000c88 <HAL_I2C_MspDeInit+0x64>)
 8000c3e:	400a      	ands	r2, r1
 8000c40:	61da      	str	r2, [r3, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <HAL_I2C_MspDeInit+0x68>)
 8000c48:	0019      	movs	r1, r3
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	f001 f852 	bl	8001cf4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	011b      	lsls	r3, r3, #4
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_I2C_MspDeInit+0x68>)
 8000c56:	0019      	movs	r1, r3
 8000c58:	0010      	movs	r0, r2
 8000c5a:	f001 f84b 	bl	8001cf4 <HAL_GPIO_DeInit>

    /* I2C2 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 fbf4 	bl	8001450 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fbef 	bl	8001450 <HAL_DMA_DeInit>

    /* I2C2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C2_IRQn);
 8000c72:	2018      	movs	r0, #24
 8000c74:	f000 fb87 	bl	8001386 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005800 	.word	0x40005800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	ffbfffff 	.word	0xffbfffff
 8000c8c:	48000400 	.word	0x48000400

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d10c      	bne.n	8000cbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000caa:	2101      	movs	r1, #1
 8000cac:	430a      	orrs	r2, r1
 8000cae:	61da      	str	r2, [r3, #28]
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cbc:	e02a      	b.n	8000d14 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_TIM_Base_MspInit+0x90>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d10c      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cca:	69da      	ldr	r2, [r3, #28]
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cce:	2102      	movs	r1, #2
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	61da      	str	r2, [r3, #28]
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	2202      	movs	r2, #2
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
}
 8000ce0:	e018      	b.n	8000d14 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM6)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <HAL_TIM_Base_MspInit+0x94>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d113      	bne.n	8000d14 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cee:	69da      	ldr	r2, [r3, #28]
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	61da      	str	r2, [r3, #28]
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	2210      	movs	r2, #16
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	2011      	movs	r0, #17
 8000d0a:	f000 fb17 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d0e:	2011      	movs	r0, #17
 8000d10:	f000 fb29 	bl	8001366 <HAL_NVIC_EnableIRQ>
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b006      	add	sp, #24
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40000400 	.word	0x40000400
 8000d24:	40001000 	.word	0x40001000

08000d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	; 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	2414      	movs	r4, #20
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	2314      	movs	r3, #20
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f006 fddd 	bl	80078fa <memset>
  if(htim->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d125      	bne.n	8000d98 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <HAL_TIM_MspPostInit+0xcc>)
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <HAL_TIM_MspPostInit+0xcc>)
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	0289      	lsls	r1, r1, #10
 8000d56:	430a      	orrs	r2, r1
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_TIM_MspPostInit+0xcc>)
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	029b      	lsls	r3, r3, #10
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d68:	0021      	movs	r1, r4
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2202      	movs	r2, #2
 8000d74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2202      	movs	r2, #2
 8000d86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	187a      	adds	r2, r7, r1
 8000d8a:	2390      	movs	r3, #144	; 0x90
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	0011      	movs	r1, r2
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fe37 	bl	8001a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d96:	e029      	b.n	8000dec <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <HAL_TIM_MspPostInit+0xd0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d124      	bne.n	8000dec <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_TIM_MspPostInit+0xcc>)
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_TIM_MspPostInit+0xcc>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0289      	lsls	r1, r1, #10
 8000dac:	430a      	orrs	r2, r1
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_TIM_MspPostInit+0xcc>)
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dbe:	2114      	movs	r1, #20
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	22c0      	movs	r2, #192	; 0xc0
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2201      	movs	r2, #1
 8000ddc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	187a      	adds	r2, r7, r1
 8000de0:	2390      	movs	r3, #144	; 0x90
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	0011      	movs	r1, r2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fe0c 	bl	8001a04 <HAL_GPIO_Init>
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b00b      	add	sp, #44	; 0x2c
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40000400 	.word	0x40000400

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b08b      	sub	sp, #44	; 0x2c
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	2414      	movs	r4, #20
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	0018      	movs	r0, r3
 8000e0a:	2314      	movs	r3, #20
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	2100      	movs	r1, #0
 8000e10:	f006 fd73 	bl	80078fa <memset>
  if(huart->Instance==USART1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a57      	ldr	r2, [pc, #348]	; (8000f78 <HAL_UART_MspInit+0x17c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d000      	beq.n	8000e20 <HAL_UART_MspInit+0x24>
 8000e1e:	e0a7      	b.n	8000f70 <HAL_UART_MspInit+0x174>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e20:	4b56      	ldr	r3, [pc, #344]	; (8000f7c <HAL_UART_MspInit+0x180>)
 8000e22:	699a      	ldr	r2, [r3, #24]
 8000e24:	4b55      	ldr	r3, [pc, #340]	; (8000f7c <HAL_UART_MspInit+0x180>)
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	01c9      	lsls	r1, r1, #7
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	4b53      	ldr	r3, [pc, #332]	; (8000f7c <HAL_UART_MspInit+0x180>)
 8000e30:	699a      	ldr	r2, [r3, #24]
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	01db      	lsls	r3, r3, #7
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <HAL_UART_MspInit+0x180>)
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	4b4e      	ldr	r3, [pc, #312]	; (8000f7c <HAL_UART_MspInit+0x180>)
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	0289      	lsls	r1, r1, #10
 8000e46:	430a      	orrs	r2, r1
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <HAL_UART_MspInit+0x180>)
 8000e4c:	695a      	ldr	r2, [r3, #20]
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	029b      	lsls	r3, r3, #10
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	22c0      	movs	r2, #192	; 0xc0
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	0021      	movs	r1, r4
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2202      	movs	r2, #2
 8000e66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2203      	movs	r2, #3
 8000e72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2201      	movs	r2, #1
 8000e78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	187a      	adds	r2, r7, r1
 8000e7c:	2390      	movs	r3, #144	; 0x90
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	0011      	movs	r1, r2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 fdbe 	bl	8001a04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000e88:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <HAL_UART_MspInit+0x188>)
 8000e8c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e94:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea0:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea6:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000eac:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000eae:	2220      	movs	r2, #32
 8000eb0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000eb8:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fa80 	bl	80013c0 <HAL_DMA_Init>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000ec4:	f7ff fdae 	bl	8000a24 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000ec8:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <HAL_UART_MspInit+0x18c>)
 8000eca:	23a8      	movs	r3, #168	; 0xa8
 8000ecc:	58d3      	ldr	r3, [r2, r3]
 8000ece:	492e      	ldr	r1, [pc, #184]	; (8000f88 <HAL_UART_MspInit+0x18c>)
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	4393      	bics	r3, r2
 8000ed4:	22a8      	movs	r2, #168	; 0xa8
 8000ed6:	508b      	str	r3, [r1, r2]
 8000ed8:	4a2b      	ldr	r2, [pc, #172]	; (8000f88 <HAL_UART_MspInit+0x18c>)
 8000eda:	23a8      	movs	r3, #168	; 0xa8
 8000edc:	58d3      	ldr	r3, [r2, r3]
 8000ede:	492a      	ldr	r1, [pc, #168]	; (8000f88 <HAL_UART_MspInit+0x18c>)
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	22a8      	movs	r2, #168	; 0xa8
 8000ee6:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000eec:	675a      	str	r2, [r3, #116]	; 0x74
 8000eee:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <HAL_UART_MspInit+0x184>)
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000ef6:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <HAL_UART_MspInit+0x194>)
 8000ef8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000efc:	2210      	movs	r2, #16
 8000efe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 fa4a 	bl	80013c0 <HAL_DMA_Init>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000f30:	f7ff fd78 	bl	8000a24 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_UART_MspInit+0x18c>)
 8000f36:	23a8      	movs	r3, #168	; 0xa8
 8000f38:	58d3      	ldr	r3, [r2, r3]
 8000f3a:	4913      	ldr	r1, [pc, #76]	; (8000f88 <HAL_UART_MspInit+0x18c>)
 8000f3c:	22f0      	movs	r2, #240	; 0xf0
 8000f3e:	4393      	bics	r3, r2
 8000f40:	22a8      	movs	r2, #168	; 0xa8
 8000f42:	508b      	str	r3, [r1, r2]
 8000f44:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_UART_MspInit+0x18c>)
 8000f46:	23a8      	movs	r3, #168	; 0xa8
 8000f48:	58d3      	ldr	r3, [r2, r3]
 8000f4a:	490f      	ldr	r1, [pc, #60]	; (8000f88 <HAL_UART_MspInit+0x18c>)
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	22a8      	movs	r2, #168	; 0xa8
 8000f52:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000f58:	671a      	str	r2, [r3, #112]	; 0x70
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_UART_MspInit+0x190>)
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	201b      	movs	r0, #27
 8000f66:	f000 f9e9 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	f000 f9fb 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b00b      	add	sp, #44	; 0x2c
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	20000264 	.word	0x20000264
 8000f84:	40020008 	.word	0x40020008
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	200002a8 	.word	0x200002a8
 8000f90:	4002001c 	.word	0x4002001c

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f8d6 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <DMA1_Ch1_IRQHandler+0x14>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fc05 	bl	80017da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	20000264 	.word	0x20000264

08000fdc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fbf9 	bl	80017da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	200002a8 	.word	0x200002a8

08000ff4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x1c>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 fbed 	bl	80017da <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x20>)
 8001002:	0018      	movs	r0, r3
 8001004:	f000 fbe9 	bl	80017da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	200000c0 	.word	0x200000c0
 8001014:	2000007c 	.word	0x2000007c

08001018 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <TIM6_DAC_IRQHandler+0x14>)
 800101e:	0018      	movs	r0, r3
 8001020:	f004 fbca 	bl	80057b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	20000194 	.word	0x20000194

08001030 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <I2C2_IRQHandler+0x2c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	699a      	ldr	r2, [r3, #24]
 800103a:	23e0      	movs	r3, #224	; 0xe0
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4013      	ands	r3, r2
 8001040:	d004      	beq.n	800104c <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <I2C2_IRQHandler+0x2c>)
 8001044:	0018      	movs	r0, r3
 8001046:	f001 fc81 	bl	800294c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800104a:	e003      	b.n	8001054 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <I2C2_IRQHandler+0x2c>)
 800104e:	0018      	movs	r0, r3
 8001050:	f001 fc62 	bl	8002918 <HAL_I2C_EV_IRQHandler>
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	20000028 	.word	0x20000028

08001060 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <USART1_IRQHandler+0x14>)
 8001066:	0018      	movs	r0, r3
 8001068:	f005 fb22 	bl	80066b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	200001dc 	.word	0x200001dc

08001078 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001086:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001088:	f7ff fff6 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	; (80010c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <LoopForever+0xe>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	; (80010d0 <LoopForever+0x16>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010b2:	f006 fc2b 	bl	800790c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b6:	f7ff f8b1 	bl	800021c <main>

080010ba <LoopForever>:

LoopForever:
    b LoopForever
 80010ba:	e7fe      	b.n	80010ba <LoopForever>
  ldr   r0, =_estack
 80010bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c8:	080079ac 	.word	0x080079ac
  ldr r2, =_sbss
 80010cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010d0:	200002f8 	.word	0x200002f8

080010d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_COMP_IRQHandler>
	...

080010d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_Init+0x24>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_Init+0x24>)
 80010e2:	2110      	movs	r1, #16
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f809 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ee:	f7ff fc9f 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_InitTick+0x5c>)
 800110a:	681c      	ldr	r4, [r3, #0]
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_InitTick+0x60>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	0019      	movs	r1, r3
 8001112:	23fa      	movs	r3, #250	; 0xfa
 8001114:	0098      	lsls	r0, r3, #2
 8001116:	f7fe fff5 	bl	8000104 <__udivsi3>
 800111a:	0003      	movs	r3, r0
 800111c:	0019      	movs	r1, r3
 800111e:	0020      	movs	r0, r4
 8001120:	f7fe fff0 	bl	8000104 <__udivsi3>
 8001124:	0003      	movs	r3, r0
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f93d 	bl	80013a6 <HAL_SYSTICK_Config>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e00f      	b.n	8001154 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d80b      	bhi.n	8001152 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	2301      	movs	r3, #1
 800113e:	425b      	negs	r3, r3
 8001140:	2200      	movs	r2, #0
 8001142:	0018      	movs	r0, r3
 8001144:	f000 f8fa 	bl	800133c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_InitTick+0x64>)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x1c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	001a      	movs	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x20>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	18d2      	adds	r2, r2, r3
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_IncTick+0x20>)
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	20000008 	.word	0x20000008
 8001188:	200002f4 	.word	0x200002f4

0800118c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b02      	ldr	r3, [pc, #8]	; (800119c <HAL_GetTick+0x10>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	200002f4 	.word	0x200002f4

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	0002      	movs	r2, r0
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b7f      	cmp	r3, #127	; 0x7f
 80011b2:	d809      	bhi.n	80011c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	001a      	movs	r2, r3
 80011ba:	231f      	movs	r3, #31
 80011bc:	401a      	ands	r2, r3
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_EnableIRQ+0x30>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	4091      	lsls	r1, r2
 80011c4:	000a      	movs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
  }
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b002      	add	sp, #8
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	0002      	movs	r2, r0
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b7f      	cmp	r3, #127	; 0x7f
 80011e6:	d810      	bhi.n	800120a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	001a      	movs	r2, r3
 80011ee:	231f      	movs	r3, #31
 80011f0:	4013      	ands	r3, r2
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_DisableIRQ+0x40>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011fe:	f3bf 8f4f 	dsb	sy
}
 8001202:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001204:	f3bf 8f6f 	isb	sy
}
 8001208:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	0002      	movs	r2, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b7f      	cmp	r3, #127	; 0x7f
 800122c:	d828      	bhi.n	8001280 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <__NVIC_SetPriority+0xd4>)
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	33c0      	adds	r3, #192	; 0xc0
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	589b      	ldr	r3, [r3, r2]
 800123e:	1dfa      	adds	r2, r7, #7
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	0011      	movs	r1, r2
 8001244:	2203      	movs	r2, #3
 8001246:	400a      	ands	r2, r1
 8001248:	00d2      	lsls	r2, r2, #3
 800124a:	21ff      	movs	r1, #255	; 0xff
 800124c:	4091      	lsls	r1, r2
 800124e:	000a      	movs	r2, r1
 8001250:	43d2      	mvns	r2, r2
 8001252:	401a      	ands	r2, r3
 8001254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	401a      	ands	r2, r3
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	2303      	movs	r3, #3
 8001266:	4003      	ands	r3, r0
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126c:	481f      	ldr	r0, [pc, #124]	; (80012ec <__NVIC_SetPriority+0xd4>)
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	430a      	orrs	r2, r1
 8001278:	33c0      	adds	r3, #192	; 0xc0
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800127e:	e031      	b.n	80012e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <__NVIC_SetPriority+0xd8>)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	0019      	movs	r1, r3
 8001288:	230f      	movs	r3, #15
 800128a:	400b      	ands	r3, r1
 800128c:	3b08      	subs	r3, #8
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3306      	adds	r3, #6
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	3304      	adds	r3, #4
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1dfa      	adds	r2, r7, #7
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	0011      	movs	r1, r2
 80012a0:	2203      	movs	r2, #3
 80012a2:	400a      	ands	r2, r1
 80012a4:	00d2      	lsls	r2, r2, #3
 80012a6:	21ff      	movs	r1, #255	; 0xff
 80012a8:	4091      	lsls	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	43d2      	mvns	r2, r2
 80012ae:	401a      	ands	r2, r3
 80012b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	019b      	lsls	r3, r3, #6
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	401a      	ands	r2, r3
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	0018      	movs	r0, r3
 80012c0:	2303      	movs	r3, #3
 80012c2:	4003      	ands	r3, r0
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <__NVIC_SetPriority+0xd8>)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	001c      	movs	r4, r3
 80012d0:	230f      	movs	r3, #15
 80012d2:	4023      	ands	r3, r4
 80012d4:	3b08      	subs	r3, #8
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	430a      	orrs	r2, r1
 80012da:	3306      	adds	r3, #6
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	18c3      	adds	r3, r0, r3
 80012e0:	3304      	adds	r3, #4
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b003      	add	sp, #12
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	045b      	lsls	r3, r3, #17
 8001304:	429a      	cmp	r2, r3
 8001306:	d301      	bcc.n	800130c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001308:	2301      	movs	r3, #1
 800130a:	e010      	b.n	800132e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <SysTick_Config+0x44>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	3a01      	subs	r2, #1
 8001312:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001314:	2301      	movs	r3, #1
 8001316:	425b      	negs	r3, r3
 8001318:	2103      	movs	r1, #3
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff ff7c 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x44>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x44>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	210f      	movs	r1, #15
 8001348:	187b      	adds	r3, r7, r1
 800134a:	1c02      	adds	r2, r0, #0
 800134c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	187b      	adds	r3, r7, r1
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	0011      	movs	r1, r2
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	0002      	movs	r2, r0
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b25b      	sxtb	r3, r3
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ff11 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	0002      	movs	r2, r0
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b25b      	sxtb	r3, r3
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ff1b 	bl	80011d4 <__NVIC_DisableIRQ>
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff ff9f 	bl	80012f4 <SysTick_Config>
 80013b6:	0003      	movs	r3, r0
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b002      	add	sp, #8
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e036      	b.n	8001444 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2221      	movs	r2, #33	; 0x21
 80013da:	2102      	movs	r1, #2
 80013dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4a18      	ldr	r2, [pc, #96]	; (800144c <HAL_DMA_Init+0x8c>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	0018      	movs	r0, r3
 8001428:	f000 fab2 	bl	8001990 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2221      	movs	r2, #33	; 0x21
 8001436:	2101      	movs	r1, #1
 8001438:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2220      	movs	r2, #32
 800143e:	2100      	movs	r1, #0
 8001440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b004      	add	sp, #16
 800144a:	bd80      	pop	{r7, pc}
 800144c:	ffffc00f 	.word	0xffffc00f

08001450 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e03b      	b.n	80014da <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	438a      	bics	r2, r1
 8001470:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0018      	movs	r0, r3
 8001496:	f000 fa7b 	bl	8001990 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a2:	2101      	movs	r1, #1
 80014a4:	4091      	lsls	r1, r2
 80014a6:	000a      	movs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2221      	movs	r2, #33	; 0x21
 80014cc:	2100      	movs	r1, #0
 80014ce:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2220      	movs	r2, #32
 80014d4:	2100      	movs	r1, #0
 80014d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014f0:	2317      	movs	r3, #23
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2220      	movs	r2, #32
 80014fc:	5c9b      	ldrb	r3, [r3, r2]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_DMA_Start_IT+0x24>
 8001502:	2302      	movs	r3, #2
 8001504:	e04f      	b.n	80015a6 <HAL_DMA_Start_IT+0xc4>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2220      	movs	r2, #32
 800150a:	2101      	movs	r1, #1
 800150c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2221      	movs	r2, #33	; 0x21
 8001512:	5c9b      	ldrb	r3, [r3, r2]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d13a      	bne.n	8001590 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2221      	movs	r2, #33	; 0x21
 800151e:	2102      	movs	r1, #2
 8001520:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2101      	movs	r1, #1
 8001534:	438a      	bics	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f9f9 	bl	8001936 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	210e      	movs	r1, #14
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e00f      	b.n	800157e <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	210a      	movs	r1, #10
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2104      	movs	r1, #4
 800157a:	438a      	bics	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2101      	movs	r1, #1
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e007      	b.n	80015a0 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2220      	movs	r2, #32
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001598:	2317      	movs	r3, #23
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2202      	movs	r2, #2
 800159e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80015a0:	2317      	movs	r3, #23
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	781b      	ldrb	r3, [r3, #0]
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b006      	add	sp, #24
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2221      	movs	r2, #33	; 0x21
 80015ba:	5c9b      	ldrb	r3, [r3, r2]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d008      	beq.n	80015d4 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2204      	movs	r2, #4
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	2100      	movs	r1, #0
 80015ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e020      	b.n	8001616 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	210e      	movs	r1, #14
 80015e0:	438a      	bics	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2101      	movs	r1, #1
 80015f0:	438a      	bics	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fc:	2101      	movs	r1, #1
 80015fe:	4091      	lsls	r1, r2
 8001600:	000a      	movs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2221      	movs	r2, #33	; 0x21
 8001608:	2101      	movs	r1, #1
 800160a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2220      	movs	r2, #32
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b002      	add	sp, #8
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001626:	210f      	movs	r1, #15
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2221      	movs	r2, #33	; 0x21
 8001632:	5c9b      	ldrb	r3, [r3, r2]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d006      	beq.n	8001648 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2204      	movs	r2, #4
 800163e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e028      	b.n	800169a <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	210e      	movs	r1, #14
 8001654:	438a      	bics	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2101      	movs	r1, #1
 8001664:	438a      	bics	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	2101      	movs	r1, #1
 8001672:	4091      	lsls	r1, r2
 8001674:	000a      	movs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2221      	movs	r2, #33	; 0x21
 800167c:	2101      	movs	r1, #1
 800167e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2220      	movs	r2, #32
 8001684:	2100      	movs	r1, #0
 8001686:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	0010      	movs	r0, r2
 8001698:	4798      	blx	r3
    }
  }
  return status;
 800169a:	230f      	movs	r3, #15
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	781b      	ldrb	r3, [r3, #0]
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2221      	movs	r2, #33	; 0x21
 80016bc:	5c9b      	ldrb	r3, [r3, r2]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d008      	beq.n	80016d6 <HAL_DMA_PollForTransfer+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2204      	movs	r2, #4
 80016c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2220      	movs	r2, #32
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07d      	b.n	80017d2 <HAL_DMA_PollForTransfer+0x12a>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2220      	movs	r2, #32
 80016de:	4013      	ands	r3, r2
 80016e0:	d005      	beq.n	80016ee <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	0052      	lsls	r2, r2, #1
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e071      	b.n	80017d2 <HAL_DMA_PollForTransfer+0x12a>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d106      	bne.n	8001702 <HAL_DMA_PollForTransfer+0x5a>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	2202      	movs	r2, #2
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e005      	b.n	800170e <HAL_DMA_PollForTransfer+0x66>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2204      	movs	r2, #4
 8001708:	409a      	lsls	r2, r3
 800170a:	0013      	movs	r3, r2
 800170c:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800170e:	f7ff fd3d 	bl	800118c <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	613b      	str	r3, [r7, #16]

  while (RESET == (hdma->DmaBaseAddress->ISR & temp))
 8001716:	e039      	b.n	800178c <HAL_DMA_PollForTransfer+0xe4>
  {
    if (RESET != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << hdma->ChannelIndex)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2108      	movs	r1, #8
 8001724:	4099      	lsls	r1, r3
 8001726:	000b      	movs	r3, r1
 8001728:	4013      	ands	r3, r2
 800172a:	d014      	beq.n	8001756 <HAL_DMA_PollForTransfer+0xae>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001734:	2101      	movs	r1, #1
 8001736:	4091      	lsls	r1, r2
 8001738:	000a      	movs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2221      	movs	r2, #33	; 0x21
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2220      	movs	r2, #32
 800174e:	2100      	movs	r1, #0
 8001750:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e03d      	b.n	80017d2 <HAL_DMA_PollForTransfer+0x12a>
    }
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3301      	adds	r3, #1
 800175a:	d017      	beq.n	800178c <HAL_DMA_PollForTransfer+0xe4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_DMA_PollForTransfer+0xca>
 8001762:	f7ff fd13 	bl	800118c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	d20c      	bcs.n	800178c <HAL_DMA_PollForTransfer+0xe4>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2220      	movs	r2, #32
 8001776:	639a      	str	r2, [r3, #56]	; 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2221      	movs	r2, #33	; 0x21
 800177c:	2101      	movs	r1, #1
 800177e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2220      	movs	r2, #32
 8001784:	2100      	movs	r1, #0
 8001786:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e022      	b.n	80017d2 <HAL_DMA_PollForTransfer+0x12a>
  while (RESET == (hdma->DmaBaseAddress->ISR & temp))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4013      	ands	r3, r2
 8001796:	d0bf      	beq.n	8001718 <HAL_DMA_PollForTransfer+0x70>
      }
    }
  }

  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <HAL_DMA_PollForTransfer+0x110>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a6:	2102      	movs	r1, #2
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2221      	movs	r2, #33	; 0x21
 80017b2:	2101      	movs	r1, #1
 80017b4:	5499      	strb	r1, [r3, r2]
 80017b6:	e007      	b.n	80017c8 <HAL_DMA_PollForTransfer+0x120>
  }
  else
  {
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	2104      	movs	r1, #4
 80017c2:	4091      	lsls	r1, r2
 80017c4:	000a      	movs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2220      	movs	r2, #32
 80017cc:	2100      	movs	r1, #0
 80017ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b006      	add	sp, #24
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2204      	movs	r2, #4
 80017f8:	409a      	lsls	r2, r3
 80017fa:	0013      	movs	r3, r2
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	d024      	beq.n	800184c <HAL_DMA_IRQHandler+0x72>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2204      	movs	r2, #4
 8001806:	4013      	ands	r3, r2
 8001808:	d020      	beq.n	800184c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2220      	movs	r2, #32
 8001812:	4013      	ands	r3, r2
 8001814:	d107      	bne.n	8001826 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2104      	movs	r1, #4
 8001822:	438a      	bics	r2, r1
 8001824:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182e:	2104      	movs	r1, #4
 8001830:	4091      	lsls	r1, r2
 8001832:	000a      	movs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <HAL_DMA_IRQHandler+0x66>
 800183e:	e06a      	b.n	8001916 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	0010      	movs	r0, r2
 8001848:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800184a:	e064      	b.n	8001916 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	2202      	movs	r2, #2
 8001852:	409a      	lsls	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	d02b      	beq.n	80018b4 <HAL_DMA_IRQHandler+0xda>
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d027      	beq.n	80018b4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2220      	movs	r2, #32
 800186c:	4013      	ands	r3, r2
 800186e:	d10b      	bne.n	8001888 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	210a      	movs	r1, #10
 800187c:	438a      	bics	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2221      	movs	r2, #33	; 0x21
 8001884:	2101      	movs	r1, #1
 8001886:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001890:	2102      	movs	r1, #2
 8001892:	4091      	lsls	r1, r2
 8001894:	000a      	movs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2220      	movs	r2, #32
 800189c:	2100      	movs	r1, #0
 800189e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d036      	beq.n	8001916 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	0010      	movs	r0, r2
 80018b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018b2:	e030      	b.n	8001916 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2208      	movs	r2, #8
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	d028      	beq.n	8001916 <HAL_DMA_IRQHandler+0x13c>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2208      	movs	r2, #8
 80018c8:	4013      	ands	r3, r2
 80018ca:	d024      	beq.n	8001916 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	210e      	movs	r1, #14
 80018d8:	438a      	bics	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	2101      	movs	r1, #1
 80018e6:	4091      	lsls	r1, r2
 80018e8:	000a      	movs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2221      	movs	r2, #33	; 0x21
 80018f6:	2101      	movs	r1, #1
 80018f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2220      	movs	r2, #32
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	0010      	movs	r0, r2
 8001912:	4798      	blx	r3
    }
  }
}
 8001914:	e7ff      	b.n	8001916 <HAL_DMA_IRQHandler+0x13c>
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b004      	add	sp, #16
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2221      	movs	r2, #33	; 0x21
 800192a:	5c9b      	ldrb	r3, [r3, r2]
 800192c:	b2db      	uxtb	r3, r3
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}

08001936 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194c:	2101      	movs	r1, #1
 800194e:	4091      	lsls	r1, r2
 8001950:	000a      	movs	r2, r1
 8001952:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b10      	cmp	r3, #16
 8001962:	d108      	bne.n	8001976 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001974:	e007      	b.n	8001986 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	60da      	str	r2, [r3, #12]
}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b004      	add	sp, #16
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	001a      	movs	r2, r3
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <DMA_CalcBaseAndBitshift+0x60>)
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d810      	bhi.n	80019c6 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <DMA_CalcBaseAndBitshift+0x64>)
 80019aa:	4694      	mov	ip, r2
 80019ac:	4463      	add	r3, ip
 80019ae:	2114      	movs	r1, #20
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7fe fba7 	bl	8000104 <__udivsi3>
 80019b6:	0003      	movs	r3, r0
 80019b8:	009a      	lsls	r2, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <DMA_CalcBaseAndBitshift+0x68>)
 80019c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80019c4:	e00f      	b.n	80019e6 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <DMA_CalcBaseAndBitshift+0x6c>)
 80019cc:	4694      	mov	ip, r2
 80019ce:	4463      	add	r3, ip
 80019d0:	2114      	movs	r1, #20
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7fe fb96 	bl	8000104 <__udivsi3>
 80019d8:	0003      	movs	r3, r0
 80019da:	009a      	lsls	r2, r3, #2
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <DMA_CalcBaseAndBitshift+0x70>)
 80019e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40020407 	.word	0x40020407
 80019f4:	bffdfff8 	.word	0xbffdfff8
 80019f8:	40020000 	.word	0x40020000
 80019fc:	bffdfbf8 	.word	0xbffdfbf8
 8001a00:	40020400 	.word	0x40020400

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	e155      	b.n	8001cc0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4091      	lsls	r1, r2
 8001a1e:	000a      	movs	r2, r1
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <HAL_GPIO_Init+0x28>
 8001a2a:	e146      	b.n	8001cba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d005      	beq.n	8001a44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d130      	bne.n	8001aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	409a      	lsls	r2, r3
 8001a52:	0013      	movs	r3, r2
 8001a54:	43da      	mvns	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	409a      	lsls	r2, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	2201      	movs	r2, #1
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2203      	movs	r2, #3
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d017      	beq.n	8001ae2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d123      	bne.n	8001b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	58d3      	ldr	r3, [r2, r3]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2207      	movs	r2, #7
 8001b00:	4013      	ands	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2107      	movs	r1, #7
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	6939      	ldr	r1, [r7, #16]
 8001b34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	401a      	ands	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	23c0      	movs	r3, #192	; 0xc0
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	4013      	ands	r3, r2
 8001b74:	d100      	bne.n	8001b78 <HAL_GPIO_Init+0x174>
 8001b76:	e0a0      	b.n	8001cba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b78:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_GPIO_Init+0x2d4>)
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <HAL_GPIO_Init+0x2d4>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	430a      	orrs	r2, r1
 8001b82:	619a      	str	r2, [r3, #24]
 8001b84:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <HAL_GPIO_Init+0x2d4>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b90:	4a52      	ldr	r2, [pc, #328]	; (8001cdc <HAL_GPIO_Init+0x2d8>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	589b      	ldr	r3, [r3, r2]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	0013      	movs	r3, r2
 8001bac:	43da      	mvns	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	2390      	movs	r3, #144	; 0x90
 8001bb8:	05db      	lsls	r3, r3, #23
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0x1ee>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a47      	ldr	r2, [pc, #284]	; (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x1ea>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a46      	ldr	r2, [pc, #280]	; (8001ce4 <HAL_GPIO_Init+0x2e0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x1e6>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a45      	ldr	r2, [pc, #276]	; (8001ce8 <HAL_GPIO_Init+0x2e4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x1e2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a44      	ldr	r2, [pc, #272]	; (8001cec <HAL_GPIO_Init+0x2e8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x1de>
 8001bde:	2304      	movs	r3, #4
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x1f0>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x1f0>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x1f0>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x1f0>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x1f0>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_GPIO_Init+0x2d8>)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	035b      	lsls	r3, r3, #13
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c36:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43da      	mvns	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	039b      	lsls	r3, r3, #14
 8001c54:	4013      	ands	r3, r2
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	029b      	lsls	r3, r3, #10
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	025b      	lsls	r3, r3, #9
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	40da      	lsrs	r2, r3
 8001cc8:	1e13      	subs	r3, r2, #0
 8001cca:	d000      	beq.n	8001cce <HAL_GPIO_Init+0x2ca>
 8001ccc:	e6a2      	b.n	8001a14 <HAL_GPIO_Init+0x10>
  } 
}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b006      	add	sp, #24
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	48000800 	.word	0x48000800
 8001ce8:	48000c00 	.word	0x48000c00
 8001cec:	48001000 	.word	0x48001000
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001d02:	e0b7      	b.n	8001e74 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d04:	2201      	movs	r2, #1
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <HAL_GPIO_DeInit+0x24>
 8001d16:	e0aa      	b.n	8001e6e <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001d18:	4a5c      	ldr	r2, [pc, #368]	; (8001e8c <HAL_GPIO_DeInit+0x198>)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	589b      	ldr	r3, [r3, r2]
 8001d24:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	409a      	lsls	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	2390      	movs	r3, #144	; 0x90
 8001d3c:	05db      	lsls	r3, r3, #23
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d019      	beq.n	8001d76 <HAL_GPIO_DeInit+0x82>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <HAL_GPIO_DeInit+0x19c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_DeInit+0x7e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a51      	ldr	r2, [pc, #324]	; (8001e94 <HAL_GPIO_DeInit+0x1a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_DeInit+0x7a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a50      	ldr	r2, [pc, #320]	; (8001e98 <HAL_GPIO_DeInit+0x1a4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_DeInit+0x76>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4f      	ldr	r2, [pc, #316]	; (8001e9c <HAL_GPIO_DeInit+0x1a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_DeInit+0x72>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_DeInit+0x84>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_DeInit+0x84>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_DeInit+0x84>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_DeInit+0x84>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_DeInit+0x84>
 8001d76:	2300      	movs	r3, #0
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	2103      	movs	r1, #3
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d132      	bne.n	8001dee <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001d88:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <HAL_GPIO_DeInit+0x1ac>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_GPIO_DeInit+0x1ac>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001d96:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <HAL_GPIO_DeInit+0x1ac>)
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43d9      	mvns	r1, r3
 8001d9e:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <HAL_GPIO_DeInit+0x1ac>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001da4:	4b3e      	ldr	r3, [pc, #248]	; (8001ea0 <HAL_GPIO_DeInit+0x1ac>)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <HAL_GPIO_DeInit+0x1ac>)
 8001dae:	400a      	ands	r2, r1
 8001db0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_GPIO_DeInit+0x1ac>)
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43d9      	mvns	r1, r3
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_GPIO_DeInit+0x1ac>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	0013      	movs	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001dd0:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <HAL_GPIO_DeInit+0x198>)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	589a      	ldr	r2, [r3, r2]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	482a      	ldr	r0, [pc, #168]	; (8001e8c <HAL_GPIO_DeInit+0x198>)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	400a      	ands	r2, r1
 8001de8:	3302      	adds	r3, #2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	0052      	lsls	r2, r2, #1
 8001df6:	2103      	movs	r1, #3
 8001df8:	4091      	lsls	r1, r2
 8001dfa:	000a      	movs	r2, r1
 8001dfc:	43d2      	mvns	r2, r2
 8001dfe:	401a      	ands	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	58d3      	ldr	r3, [r2, r3]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	2107      	movs	r1, #7
 8001e14:	400a      	ands	r2, r1
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	210f      	movs	r1, #15
 8001e1a:	4091      	lsls	r1, r2
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	43d1      	mvns	r1, r2
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	08d2      	lsrs	r2, r2, #3
 8001e24:	4019      	ands	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	0052      	lsls	r2, r2, #1
 8001e36:	2103      	movs	r1, #3
 8001e38:	4091      	lsls	r1, r2
 8001e3a:	000a      	movs	r2, r1
 8001e3c:	43d2      	mvns	r2, r2
 8001e3e:	401a      	ands	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4091      	lsls	r1, r2
 8001e4e:	000a      	movs	r2, r1
 8001e50:	43d2      	mvns	r2, r2
 8001e52:	401a      	ands	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	0052      	lsls	r2, r2, #1
 8001e60:	2103      	movs	r1, #3
 8001e62:	4091      	lsls	r1, r2
 8001e64:	000a      	movs	r2, r1
 8001e66:	43d2      	mvns	r2, r2
 8001e68:	401a      	ands	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

    }

    position++;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	40da      	lsrs	r2, r3
 8001e7a:	1e13      	subs	r3, r2, #0
 8001e7c:	d000      	beq.n	8001e80 <HAL_GPIO_DeInit+0x18c>
 8001e7e:	e741      	b.n	8001d04 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b006      	add	sp, #24
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	48000800 	.word	0x48000800
 8001e98:	48000c00 	.word	0x48000c00
 8001e9c:	48001000 	.word	0x48001000
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	0008      	movs	r0, r1
 8001eae:	0011      	movs	r1, r2
 8001eb0:	1cbb      	adds	r3, r7, #2
 8001eb2:	1c02      	adds	r2, r0, #0
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	1c7b      	adds	r3, r7, #1
 8001eb8:	1c0a      	adds	r2, r1, #0
 8001eba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebc:	1c7b      	adds	r3, r7, #1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec4:	1cbb      	adds	r3, r7, #2
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ece:	1cbb      	adds	r3, r7, #2
 8001ed0:	881a      	ldrh	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e082      	b.n	8001ff8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2241      	movs	r2, #65	; 0x41
 8001ef6:	5c9b      	ldrb	r3, [r3, r2]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7fe fdb5 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2241      	movs	r2, #65	; 0x41
 8001f12:	2124      	movs	r1, #36	; 0x24
 8001f14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	438a      	bics	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4934      	ldr	r1, [pc, #208]	; (8002000 <HAL_I2C_Init+0x120>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4931      	ldr	r1, [pc, #196]	; (8002004 <HAL_I2C_Init+0x124>)
 8001f40:	400a      	ands	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d108      	bne.n	8001f5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0209      	lsls	r1, r1, #8
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e007      	b.n	8001f6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2184      	movs	r1, #132	; 0x84
 8001f68:	0209      	lsls	r1, r1, #8
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d104      	bne.n	8001f80 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	491f      	ldr	r1, [pc, #124]	; (8002008 <HAL_I2C_Init+0x128>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	491a      	ldr	r1, [pc, #104]	; (8002004 <HAL_I2C_Init+0x124>)
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69d9      	ldr	r1, [r3, #28]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2241      	movs	r2, #65	; 0x41
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2242      	movs	r2, #66	; 0x42
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	f0ffffff 	.word	0xf0ffffff
 8002004:	ffff7fff 	.word	0xffff7fff
 8002008:	02008000 	.word	0x02008000

0800200c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e022      	b.n	8002064 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2241      	movs	r2, #65	; 0x41
 8002022:	2124      	movs	r1, #36	; 0x24
 8002024:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	438a      	bics	r2, r1
 8002034:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe fdf3 	bl	8000c24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2241      	movs	r2, #65	; 0x41
 8002048:	2100      	movs	r1, #0
 800204a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2242      	movs	r2, #66	; 0x42
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	2100      	movs	r1, #0
 8002060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	0008      	movs	r0, r1
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	0019      	movs	r1, r3
 800207a:	230a      	movs	r3, #10
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	1c02      	adds	r2, r0, #0
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	2308      	movs	r3, #8
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	1c0a      	adds	r2, r1, #0
 8002088:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2241      	movs	r2, #65	; 0x41
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	d000      	beq.n	8002098 <HAL_I2C_Master_Transmit+0x2c>
 8002096:	e0e7      	b.n	8002268 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	5c9b      	ldrb	r3, [r3, r2]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_I2C_Master_Transmit+0x3a>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0e1      	b.n	800226a <HAL_I2C_Master_Transmit+0x1fe>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ae:	f7ff f86d 	bl	800118c <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	0219      	lsls	r1, r3, #8
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2319      	movs	r3, #25
 80020c2:	2201      	movs	r2, #1
 80020c4:	f001 ffe0 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 80020c8:	1e03      	subs	r3, r0, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0cc      	b.n	800226a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2241      	movs	r2, #65	; 0x41
 80020d4:	2121      	movs	r1, #33	; 0x21
 80020d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2242      	movs	r2, #66	; 0x42
 80020dc:	2110      	movs	r1, #16
 80020de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2208      	movs	r2, #8
 80020f0:	18ba      	adds	r2, r7, r2
 80020f2:	8812      	ldrh	r2, [r2, #0]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	2bff      	cmp	r3, #255	; 0xff
 8002104:	d911      	bls.n	800212a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	22ff      	movs	r2, #255	; 0xff
 800210a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	b2da      	uxtb	r2, r3
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	045c      	lsls	r4, r3, #17
 8002116:	230a      	movs	r3, #10
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	8819      	ldrh	r1, [r3, #0]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_I2C_Master_Transmit+0x208>)
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	0023      	movs	r3, r4
 8002124:	f002 f988 	bl	8004438 <I2C_TransferConfig>
 8002128:	e075      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002138:	b2da      	uxtb	r2, r3
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	049c      	lsls	r4, r3, #18
 800213e:	230a      	movs	r3, #10
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	8819      	ldrh	r1, [r3, #0]
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <HAL_I2C_Master_Transmit+0x208>)
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	0023      	movs	r3, r4
 800214c:	f002 f974 	bl	8004438 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002150:	e061      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0018      	movs	r0, r3
 800215a:	f001 ffe3 	bl	8004124 <I2C_WaitOnTXISFlagUntilTimeout>
 800215e:	1e03      	subs	r3, r0, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e081      	b.n	800226a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d03a      	beq.n	8002216 <HAL_I2C_Master_Transmit+0x1aa>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d136      	bne.n	8002216 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	0013      	movs	r3, r2
 80021b2:	2200      	movs	r2, #0
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	f001 ff67 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 80021ba:	1e03      	subs	r3, r0, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e053      	b.n	800226a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2bff      	cmp	r3, #255	; 0xff
 80021ca:	d911      	bls.n	80021f0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	22ff      	movs	r2, #255	; 0xff
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	045c      	lsls	r4, r3, #17
 80021dc:	230a      	movs	r3, #10
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	8819      	ldrh	r1, [r3, #0]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	2300      	movs	r3, #0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	0023      	movs	r3, r4
 80021ea:	f002 f925 	bl	8004438 <I2C_TransferConfig>
 80021ee:	e012      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	049c      	lsls	r4, r3, #18
 8002204:	230a      	movs	r3, #10
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	8819      	ldrh	r1, [r3, #0]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	2300      	movs	r3, #0
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	0023      	movs	r3, r4
 8002212:	f002 f911 	bl	8004438 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d198      	bne.n	8002152 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	0018      	movs	r0, r3
 8002228:	f001 ffc2 	bl	80041b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e01a      	b.n	800226a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2220      	movs	r2, #32
 800223a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	490c      	ldr	r1, [pc, #48]	; (8002278 <HAL_I2C_Master_Transmit+0x20c>)
 8002248:	400a      	ands	r2, r1
 800224a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2241      	movs	r2, #65	; 0x41
 8002250:	2120      	movs	r1, #32
 8002252:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2242      	movs	r2, #66	; 0x42
 8002258:	2100      	movs	r1, #0
 800225a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e000      	b.n	800226a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
  }
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b007      	add	sp, #28
 8002270:	bd90      	pop	{r4, r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	80002000 	.word	0x80002000
 8002278:	fe00e800 	.word	0xfe00e800

0800227c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	0008      	movs	r0, r1
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	0019      	movs	r1, r3
 800228a:	230a      	movs	r3, #10
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	1c02      	adds	r2, r0, #0
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	2308      	movs	r3, #8
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	1c0a      	adds	r2, r1, #0
 8002298:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2241      	movs	r2, #65	; 0x41
 800229e:	5c9b      	ldrb	r3, [r3, r2]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d000      	beq.n	80022a8 <HAL_I2C_Master_Receive_DMA+0x2c>
 80022a6:	e0dd      	b.n	8002464 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	401a      	ands	r2, r3
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d101      	bne.n	80022c0 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
 80022be:	e0d2      	b.n	8002466 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	5c9b      	ldrb	r3, [r3, r2]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Master_Receive_DMA+0x52>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0cb      	b.n	8002466 <HAL_I2C_Master_Receive_DMA+0x1ea>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2240      	movs	r2, #64	; 0x40
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2241      	movs	r2, #65	; 0x41
 80022da:	2122      	movs	r1, #34	; 0x22
 80022dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2242      	movs	r2, #66	; 0x42
 80022e2:	2110      	movs	r1, #16
 80022e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2208      	movs	r2, #8
 80022f6:	18ba      	adds	r2, r7, r2
 80022f8:	8812      	ldrh	r2, [r2, #0]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a5c      	ldr	r2, [pc, #368]	; (8002470 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4a5b      	ldr	r2, [pc, #364]	; (8002474 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8002306:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2bff      	cmp	r3, #255	; 0xff
 8002310:	d906      	bls.n	8002320 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	22ff      	movs	r2, #255	; 0xff
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	045b      	lsls	r3, r3, #17
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e007      	b.n	8002330 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	049b      	lsls	r3, r3, #18
 800232e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d100      	bne.n	800233a <HAL_I2C_Master_Receive_DMA+0xbe>
 8002338:	e078      	b.n	800242c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d023      	beq.n	800238a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8002348:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	4a4b      	ldr	r2, [pc, #300]	; (800247c <HAL_I2C_Master_Receive_DMA+0x200>)
 8002350:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	2200      	movs	r2, #0
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	2200      	movs	r2, #0
 8002360:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3324      	adds	r3, #36	; 0x24
 800236c:	0019      	movs	r1, r3
 800236e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002374:	2513      	movs	r5, #19
 8002376:	197c      	adds	r4, r7, r5
 8002378:	f7ff f8b3 	bl	80014e2 <HAL_DMA_Start_IT>
 800237c:	0003      	movs	r3, r0
 800237e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002380:	197b      	adds	r3, r7, r5
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d13d      	bne.n	8002404 <HAL_I2C_Master_Receive_DMA+0x188>
 8002388:	e013      	b.n	80023b2 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2241      	movs	r2, #65	; 0x41
 800238e:	2120      	movs	r1, #32
 8002390:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2242      	movs	r2, #66	; 0x42
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	2100      	movs	r1, #0
 80023ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e059      	b.n	8002466 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	697c      	ldr	r4, [r7, #20]
 80023ba:	230a      	movs	r3, #10
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	8819      	ldrh	r1, [r3, #0]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <HAL_I2C_Master_Receive_DMA+0x204>)
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	0023      	movs	r3, r4
 80023c8:	f002 f836 	bl	8004438 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2240      	movs	r2, #64	; 0x40
 80023e2:	2100      	movs	r1, #0
 80023e4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2110      	movs	r1, #16
 80023ea:	0018      	movs	r0, r3
 80023ec:	f002 f85e 	bl	80044ac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	0209      	lsls	r1, r1, #8
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e02d      	b.n	8002460 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2241      	movs	r2, #65	; 0x41
 8002408:	2120      	movs	r1, #32
 800240a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2242      	movs	r2, #66	; 0x42
 8002410:	2100      	movs	r1, #0
 8002412:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	2210      	movs	r2, #16
 800241a:	431a      	orrs	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	2100      	movs	r1, #0
 8002426:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e01c      	b.n	8002466 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4a15      	ldr	r2, [pc, #84]	; (8002484 <HAL_I2C_Master_Receive_DMA+0x208>)
 8002430:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	b2da      	uxtb	r2, r3
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	049c      	lsls	r4, r3, #18
 800243c:	230a      	movs	r3, #10
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	8819      	ldrh	r1, [r3, #0]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_I2C_Master_Receive_DMA+0x204>)
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	0023      	movs	r3, r4
 800244a:	f001 fff5 	bl	8004438 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2240      	movs	r2, #64	; 0x40
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2101      	movs	r1, #1
 800245a:	0018      	movs	r0, r3
 800245c:	f002 f826 	bl	80044ac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b006      	add	sp, #24
 800246c:	bdb0      	pop	{r4, r5, r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	ffff0000 	.word	0xffff0000
 8002474:	08002ef9 	.word	0x08002ef9
 8002478:	08003f79 	.word	0x08003f79
 800247c:	08004019 	.word	0x08004019
 8002480:	80002400 	.word	0x80002400
 8002484:	08002aa5 	.word	0x08002aa5

08002488 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	000c      	movs	r4, r1
 8002492:	0010      	movs	r0, r2
 8002494:	0019      	movs	r1, r3
 8002496:	230a      	movs	r3, #10
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	1c22      	adds	r2, r4, #0
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	2308      	movs	r3, #8
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	1c02      	adds	r2, r0, #0
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	1dbb      	adds	r3, r7, #6
 80024a8:	1c0a      	adds	r2, r1, #0
 80024aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2241      	movs	r2, #65	; 0x41
 80024b0:	5c9b      	ldrb	r3, [r3, r2]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d000      	beq.n	80024ba <HAL_I2C_Mem_Write+0x32>
 80024b8:	e10c      	b.n	80026d4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <HAL_I2C_Mem_Write+0x42>
 80024c0:	232c      	movs	r3, #44	; 0x2c
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0ff      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_I2C_Mem_Write+0x5c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0f8      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	2101      	movs	r1, #1
 80024ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024ec:	f7fe fe4e 	bl	800118c <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	0219      	lsls	r1, r3, #8
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2319      	movs	r3, #25
 8002500:	2201      	movs	r2, #1
 8002502:	f001 fdc1 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0e3      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2241      	movs	r2, #65	; 0x41
 8002512:	2121      	movs	r1, #33	; 0x21
 8002514:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2242      	movs	r2, #66	; 0x42
 800251a:	2140      	movs	r1, #64	; 0x40
 800251c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	222c      	movs	r2, #44	; 0x2c
 800252e:	18ba      	adds	r2, r7, r2
 8002530:	8812      	ldrh	r2, [r2, #0]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800253a:	1dbb      	adds	r3, r7, #6
 800253c:	881c      	ldrh	r4, [r3, #0]
 800253e:	2308      	movs	r3, #8
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	230a      	movs	r3, #10
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	8819      	ldrh	r1, [r3, #0]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	0023      	movs	r3, r4
 8002556:	f000 ffcd 	bl	80034f4 <I2C_RequestMemoryWrite>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d005      	beq.n	800256a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2240      	movs	r2, #64	; 0x40
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0b5      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2bff      	cmp	r3, #255	; 0xff
 8002572:	d911      	bls.n	8002598 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	22ff      	movs	r2, #255	; 0xff
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	b2da      	uxtb	r2, r3
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	045c      	lsls	r4, r3, #17
 8002584:	230a      	movs	r3, #10
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	8819      	ldrh	r1, [r3, #0]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	2300      	movs	r3, #0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	0023      	movs	r3, r4
 8002592:	f001 ff51 	bl	8004438 <I2C_TransferConfig>
 8002596:	e012      	b.n	80025be <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	049c      	lsls	r4, r3, #18
 80025ac:	230a      	movs	r3, #10
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	8819      	ldrh	r1, [r3, #0]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	2300      	movs	r3, #0
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	0023      	movs	r3, r4
 80025ba:	f001 ff3d 	bl	8004438 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f001 fdad 	bl	8004124 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ca:	1e03      	subs	r3, r0, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e081      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d03a      	beq.n	8002682 <HAL_I2C_Mem_Write+0x1fa>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	d136      	bne.n	8002682 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	0013      	movs	r3, r2
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	f001 fd31 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e053      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	2bff      	cmp	r3, #255	; 0xff
 8002636:	d911      	bls.n	800265c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	b2da      	uxtb	r2, r3
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	045c      	lsls	r4, r3, #17
 8002648:	230a      	movs	r3, #10
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	8819      	ldrh	r1, [r3, #0]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	0023      	movs	r3, r4
 8002656:	f001 feef 	bl	8004438 <I2C_TransferConfig>
 800265a:	e012      	b.n	8002682 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	049c      	lsls	r4, r3, #18
 8002670:	230a      	movs	r3, #10
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	8819      	ldrh	r1, [r3, #0]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	2300      	movs	r3, #0
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	0023      	movs	r3, r4
 800267e:	f001 fedb 	bl	8004438 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d198      	bne.n	80025be <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0018      	movs	r0, r3
 8002694:	f001 fd8c 	bl	80041b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e01a      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2220      	movs	r2, #32
 80026a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	490b      	ldr	r1, [pc, #44]	; (80026e0 <HAL_I2C_Mem_Write+0x258>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2241      	movs	r2, #65	; 0x41
 80026bc:	2120      	movs	r1, #32
 80026be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2242      	movs	r2, #66	; 0x42
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	2100      	movs	r1, #0
 80026ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b007      	add	sp, #28
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	fe00e800 	.word	0xfe00e800

080026e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	230a      	movs	r3, #10
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	1c0a      	adds	r2, r1, #0
 80026f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2241      	movs	r2, #65	; 0x41
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	d000      	beq.n	800270a <HAL_I2C_IsDeviceReady+0x26>
 8002708:	e0fd      	b.n	8002906 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	401a      	ands	r2, r3
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	429a      	cmp	r2, r3
 800271c:	d101      	bne.n	8002722 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	e0f2      	b.n	8002908 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2240      	movs	r2, #64	; 0x40
 8002726:	5c9b      	ldrb	r3, [r3, r2]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_I2C_IsDeviceReady+0x4c>
 800272c:	2302      	movs	r3, #2
 800272e:	e0eb      	b.n	8002908 <HAL_I2C_IsDeviceReady+0x224>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	2101      	movs	r1, #1
 8002736:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2241      	movs	r2, #65	; 0x41
 800273c:	2124      	movs	r1, #36	; 0x24
 800273e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_I2C_IsDeviceReady+0x7a>
 800274e:	230a      	movs	r3, #10
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	059b      	lsls	r3, r3, #22
 8002756:	0d9b      	lsrs	r3, r3, #22
 8002758:	4a6d      	ldr	r2, [pc, #436]	; (8002910 <HAL_I2C_IsDeviceReady+0x22c>)
 800275a:	431a      	orrs	r2, r3
 800275c:	e006      	b.n	800276c <HAL_I2C_IsDeviceReady+0x88>
 800275e:	230a      	movs	r3, #10
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	059b      	lsls	r3, r3, #22
 8002766:	0d9b      	lsrs	r3, r3, #22
 8002768:	4a6a      	ldr	r2, [pc, #424]	; (8002914 <HAL_I2C_IsDeviceReady+0x230>)
 800276a:	431a      	orrs	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fd0b 	bl	800118c <HAL_GetTick>
 8002776:	0003      	movs	r3, r0
 8002778:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2220      	movs	r2, #32
 8002782:	4013      	ands	r3, r2
 8002784:	3b20      	subs	r3, #32
 8002786:	425a      	negs	r2, r3
 8002788:	4153      	adcs	r3, r2
 800278a:	b2da      	uxtb	r2, r3
 800278c:	231f      	movs	r3, #31
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2210      	movs	r2, #16
 800279a:	4013      	ands	r3, r2
 800279c:	3b10      	subs	r3, #16
 800279e:	425a      	negs	r2, r3
 80027a0:	4153      	adcs	r3, r2
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	231e      	movs	r3, #30
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80027aa:	e035      	b.n	8002818 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3301      	adds	r3, #1
 80027b0:	d01a      	beq.n	80027e8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027b2:	f7fe fceb 	bl	800118c <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <HAL_I2C_IsDeviceReady+0xe4>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10f      	bne.n	80027e8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2241      	movs	r2, #65	; 0x41
 80027cc:	2120      	movs	r1, #32
 80027ce:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	2220      	movs	r2, #32
 80027d6:	431a      	orrs	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e08f      	b.n	8002908 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2220      	movs	r2, #32
 80027f0:	4013      	ands	r3, r2
 80027f2:	3b20      	subs	r3, #32
 80027f4:	425a      	negs	r2, r3
 80027f6:	4153      	adcs	r3, r2
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	231f      	movs	r3, #31
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2210      	movs	r2, #16
 8002808:	4013      	ands	r3, r2
 800280a:	3b10      	subs	r3, #16
 800280c:	425a      	negs	r2, r3
 800280e:	4153      	adcs	r3, r2
 8002810:	b2da      	uxtb	r2, r3
 8002812:	231e      	movs	r3, #30
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002818:	231f      	movs	r3, #31
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <HAL_I2C_IsDeviceReady+0x148>
 8002822:	231e      	movs	r3, #30
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0bf      	beq.n	80027ac <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2210      	movs	r2, #16
 8002834:	4013      	ands	r3, r2
 8002836:	2b10      	cmp	r3, #16
 8002838:	d01a      	beq.n	8002870 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	0013      	movs	r3, r2
 8002844:	2200      	movs	r2, #0
 8002846:	2120      	movs	r1, #32
 8002848:	f001 fc1e 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e059      	b.n	8002908 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2220      	movs	r2, #32
 800285a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2241      	movs	r2, #65	; 0x41
 8002860:	2120      	movs	r1, #32
 8002862:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e04b      	b.n	8002908 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	0013      	movs	r3, r2
 800287a:	2200      	movs	r2, #0
 800287c:	2120      	movs	r1, #32
 800287e:	f001 fc03 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e03e      	b.n	8002908 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2210      	movs	r2, #16
 8002890:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2220      	movs	r2, #32
 8002898:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d119      	bne.n	80028d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	01c9      	lsls	r1, r1, #7
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	0013      	movs	r3, r2
 80028be:	2200      	movs	r2, #0
 80028c0:	2120      	movs	r1, #32
 80028c2:	f001 fbe1 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e01c      	b.n	8002908 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2220      	movs	r2, #32
 80028d4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d900      	bls.n	80028e6 <HAL_I2C_IsDeviceReady+0x202>
 80028e4:	e72f      	b.n	8002746 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2241      	movs	r2, #65	; 0x41
 80028ea:	2120      	movs	r1, #32
 80028ec:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	2220      	movs	r2, #32
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	2100      	movs	r1, #0
 8002900:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b008      	add	sp, #32
 800290e:	bd80      	pop	{r7, pc}
 8002910:	02002000 	.word	0x02002000
 8002914:	02002800 	.word	0x02002800

08002918 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
  }
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b004      	add	sp, #16
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4013      	ands	r3, r2
 800296c:	d00e      	beq.n	800298c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002974:	d00a      	beq.n	800298c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	2201      	movs	r2, #1
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	0052      	lsls	r2, r2, #1
 800298a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4013      	ands	r3, r2
 8002994:	d00e      	beq.n	80029b4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800299c:	d00a      	beq.n	80029b4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	2208      	movs	r2, #8
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	00d2      	lsls	r2, r2, #3
 80029b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4013      	ands	r3, r2
 80029bc:	d00e      	beq.n	80029dc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029c4:	d00a      	beq.n	80029dc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	2202      	movs	r2, #2
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	0092      	lsls	r2, r2, #2
 80029da:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	220b      	movs	r2, #11
 80029e6:	4013      	ands	r3, r2
 80029e8:	d005      	beq.n	80029f6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0011      	movs	r1, r2
 80029f0:	0018      	movs	r0, r3
 80029f2:	f001 f973 	bl	8003cdc <I2C_ITError>
  }
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b006      	add	sp, #24
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b002      	add	sp, #8
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	0008      	movs	r0, r1
 8002a28:	0011      	movs	r1, r2
 8002a2a:	1cfb      	adds	r3, r7, #3
 8002a2c:	1c02      	adds	r2, r0, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	003b      	movs	r3, r7
 8002a32:	1c0a      	adds	r2, r1, #0
 8002a34:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2240      	movs	r2, #64	; 0x40
 8002ab8:	5c9b      	ldrb	r3, [r3, r2]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <I2C_Master_ISR_IT+0x1e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e113      	b.n	8002cea <I2C_Master_ISR_IT+0x246>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2240      	movs	r2, #64	; 0x40
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2210      	movs	r2, #16
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d012      	beq.n	8002af8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ad8:	d00e      	beq.n	8002af8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2210      	movs	r2, #16
 8002ae0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f001 fa1e 	bl	8003f32 <I2C_Flush_TXDR>
 8002af6:	e0e5      	b.n	8002cc4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2204      	movs	r2, #4
 8002afc:	4013      	ands	r3, r2
 8002afe:	d021      	beq.n	8002b44 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2204      	movs	r2, #4
 8002b04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b06:	d01d      	beq.n	8002b44 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b42:	e0bf      	b.n	8002cc4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d01c      	beq.n	8002b86 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b52:	d018      	beq.n	8002b86 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b84:	e09e      	b.n	8002cc4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d100      	bne.n	8002b90 <I2C_Master_ISR_IT+0xec>
 8002b8e:	e069      	b.n	8002c64 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2240      	movs	r2, #64	; 0x40
 8002b94:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b96:	d065      	beq.n	8002c64 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04a      	beq.n	8002c38 <I2C_Master_ISR_IT+0x194>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d146      	bne.n	8002c38 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	2112      	movs	r1, #18
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	0592      	lsls	r2, r2, #22
 8002bb8:	0d92      	lsrs	r2, r2, #22
 8002bba:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2bff      	cmp	r3, #255	; 0xff
 8002bc4:	d910      	bls.n	8002be8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	22ff      	movs	r2, #255	; 0xff
 8002bca:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	045c      	lsls	r4, r3, #17
 8002bd6:	187b      	adds	r3, r7, r1
 8002bd8:	8819      	ldrh	r1, [r3, #0]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	0023      	movs	r3, r4
 8002be2:	f001 fc29 	bl	8004438 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be6:	e03c      	b.n	8002c62 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <I2C_Master_ISR_IT+0x250>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6adc      	ldr	r4, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002c06:	2312      	movs	r3, #18
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	8819      	ldrh	r1, [r3, #0]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	0023      	movs	r3, r4
 8002c14:	f001 fc10 	bl	8004438 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c18:	e023      	b.n	8002c62 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	049c      	lsls	r4, r3, #18
 8002c24:	2312      	movs	r3, #18
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	8819      	ldrh	r1, [r3, #0]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	0023      	movs	r3, r4
 8002c32:	f001 fc01 	bl	8004438 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c36:	e014      	b.n	8002c62 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	049b      	lsls	r3, r3, #18
 8002c42:	401a      	ands	r2, r3
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	049b      	lsls	r3, r3, #18
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d004      	beq.n	8002c56 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 fd58 	bl	8003704 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c54:	e036      	b.n	8002cc4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2140      	movs	r1, #64	; 0x40
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f001 f83e 	bl	8003cdc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c60:	e030      	b.n	8002cc4 <I2C_Master_ISR_IT+0x220>
 8002c62:	e02f      	b.n	8002cc4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d02b      	beq.n	8002cc4 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002c72:	d027      	beq.n	8002cc4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11d      	bne.n	8002cba <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	049b      	lsls	r3, r3, #18
 8002c88:	401a      	ands	r2, r3
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	049b      	lsls	r3, r3, #18
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d018      	beq.n	8002cc4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <I2C_Master_ISR_IT+0x250>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d109      	bne.n	8002cb0 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	01c9      	lsls	r1, r1, #7
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	e009      	b.n	8002cc4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 fd26 	bl	8003704 <I2C_ITMasterSeqCplt>
 8002cb8:	e004      	b.n	8002cc4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2140      	movs	r1, #64	; 0x40
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f001 f80c 	bl	8003cdc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cd2:	d005      	beq.n	8002ce0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fdb8 	bl	8003850 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b007      	add	sp, #28
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	ffff0000 	.word	0xffff0000

08002cf8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2240      	movs	r2, #64	; 0x40
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <I2C_Slave_ISR_IT+0x24>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0e6      	b.n	8002eea <I2C_Slave_ISR_IT+0x1f2>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	2101      	movs	r1, #1
 8002d22:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2220      	movs	r2, #32
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d32:	d005      	beq.n	8002d40 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	0011      	movs	r1, r2
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 fe56 	bl	80039ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2210      	movs	r2, #16
 8002d44:	4013      	ands	r3, r2
 8002d46:	d052      	beq.n	8002dee <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d4e:	d04e      	beq.n	8002dee <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d12d      	bne.n	8002db6 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2241      	movs	r2, #65	; 0x41
 8002d5e:	5c9b      	ldrb	r3, [r3, r2]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b28      	cmp	r3, #40	; 0x28
 8002d64:	d10b      	bne.n	8002d7e <I2C_Slave_ISR_IT+0x86>
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	049b      	lsls	r3, r3, #18
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	0011      	movs	r1, r2
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 ff58 	bl	8003c2c <I2C_ITListenCplt>
 8002d7c:	e036      	b.n	8002dec <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2241      	movs	r2, #65	; 0x41
 8002d82:	5c9b      	ldrb	r3, [r3, r2]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b29      	cmp	r3, #41	; 0x29
 8002d88:	d110      	bne.n	8002dac <I2C_Slave_ISR_IT+0xb4>
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	4a59      	ldr	r2, [pc, #356]	; (8002ef4 <I2C_Slave_ISR_IT+0x1fc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00c      	beq.n	8002dac <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2210      	movs	r2, #16
 8002d98:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f001 f8c8 	bl	8003f32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f000 fcef 	bl	8003788 <I2C_ITSlaveSeqCplt>
 8002daa:	e01f      	b.n	8002dec <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2210      	movs	r2, #16
 8002db2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002db4:	e091      	b.n	8002eda <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2210      	movs	r2, #16
 8002dbc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <I2C_Slave_ISR_IT+0xe4>
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	045b      	lsls	r3, r3, #17
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d000      	beq.n	8002ddc <I2C_Slave_ISR_IT+0xe4>
 8002dda:	e07e      	b.n	8002eda <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	0011      	movs	r1, r2
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 ff79 	bl	8003cdc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002dea:	e076      	b.n	8002eda <I2C_Slave_ISR_IT+0x1e2>
 8002dec:	e075      	b.n	8002eda <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2204      	movs	r2, #4
 8002df2:	4013      	ands	r3, r2
 8002df4:	d02f      	beq.n	8002e56 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002dfc:	d02b      	beq.n	8002e56 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d018      	beq.n	8002e3a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d14c      	bne.n	8002ede <I2C_Slave_ISR_IT+0x1e6>
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <I2C_Slave_ISR_IT+0x1fc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d048      	beq.n	8002ede <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 fc9a 	bl	8003788 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002e54:	e043      	b.n	8002ede <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d00a      	beq.n	8002e74 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2208      	movs	r2, #8
 8002e62:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e64:	d006      	beq.n	8002e74 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	0011      	movs	r1, r2
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 fba5 	bl	80035bc <I2C_ITAddrCplt>
 8002e72:	e035      	b.n	8002ee0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2202      	movs	r2, #2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d031      	beq.n	8002ee0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e82:	d02d      	beq.n	8002ee0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d018      	beq.n	8002ec0 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	851a      	strh	r2, [r3, #40]	; 0x28
 8002ebe:	e00f      	b.n	8002ee0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	045b      	lsls	r3, r3, #17
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d002      	beq.n	8002ed0 <I2C_Slave_ISR_IT+0x1d8>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 fc58 	bl	8003788 <I2C_ITSlaveSeqCplt>
 8002ed8:	e002      	b.n	8002ee0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	e000      	b.n	8002ee0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8002ede:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2240      	movs	r2, #64	; 0x40
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b006      	add	sp, #24
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	ffff0000 	.word	0xffff0000

08002ef8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	5c9b      	ldrb	r3, [r3, r2]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <I2C_Master_ISR_DMA+0x1a>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0e7      	b.n	80030e2 <I2C_Master_ISR_DMA+0x1ea>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d017      	beq.n	8002f52 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2210      	movs	r2, #16
 8002f26:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f28:	d013      	beq.n	8002f52 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	2204      	movs	r2, #4
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2120      	movs	r1, #32
 8002f42:	0018      	movs	r0, r3
 8002f44:	f001 fab2 	bl	80044ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 fff1 	bl	8003f32 <I2C_Flush_TXDR>
 8002f50:	e0c2      	b.n	80030d8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	4013      	ands	r3, r2
 8002f58:	d100      	bne.n	8002f5c <I2C_Master_ISR_DMA+0x64>
 8002f5a:	e07c      	b.n	8003056 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f62:	d100      	bne.n	8002f66 <I2C_Master_ISR_DMA+0x6e>
 8002f64:	e077      	b.n	8003056 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2140      	movs	r1, #64	; 0x40
 8002f72:	438a      	bics	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d055      	beq.n	800302c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	2312      	movs	r3, #18
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	0592      	lsls	r2, r2, #22
 8002f8e:	0d92      	lsrs	r2, r2, #22
 8002f90:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2bff      	cmp	r3, #255	; 0xff
 8002f9a:	d906      	bls.n	8002faa <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	22ff      	movs	r2, #255	; 0xff
 8002fa0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	045b      	lsls	r3, r3, #17
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e010      	b.n	8002fcc <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	4a4c      	ldr	r2, [pc, #304]	; (80030ec <I2C_Master_ISR_DMA+0x1f4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e002      	b.n	8002fcc <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	049b      	lsls	r3, r3, #18
 8002fca:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	697c      	ldr	r4, [r7, #20]
 8002fd4:	2312      	movs	r3, #18
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	8819      	ldrh	r1, [r3, #0]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	0023      	movs	r3, r4
 8002fe2:	f001 fa29 	bl	8004438 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2241      	movs	r2, #65	; 0x41
 8002ffc:	5c9b      	ldrb	r3, [r3, r2]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b22      	cmp	r3, #34	; 0x22
 8003002:	d109      	bne.n	8003018 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	0209      	lsls	r1, r1, #8
 8003012:	430a      	orrs	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003016:	e05f      	b.n	80030d8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	01c9      	lsls	r1, r1, #7
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800302a:	e055      	b.n	80030d8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	049b      	lsls	r3, r3, #18
 8003036:	401a      	ands	r2, r3
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	049b      	lsls	r3, r3, #18
 800303c:	429a      	cmp	r2, r3
 800303e:	d004      	beq.n	800304a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fb5e 	bl	8003704 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003048:	e046      	b.n	80030d8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2140      	movs	r1, #64	; 0x40
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fe44 	bl	8003cdc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003054:	e040      	b.n	80030d8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2240      	movs	r2, #64	; 0x40
 800305a:	4013      	ands	r3, r2
 800305c:	d02c      	beq.n	80030b8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2240      	movs	r2, #64	; 0x40
 8003062:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003064:	d028      	beq.n	80030b8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d11d      	bne.n	80030ac <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	049b      	lsls	r3, r3, #18
 800307a:	401a      	ands	r2, r3
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	049b      	lsls	r3, r3, #18
 8003080:	429a      	cmp	r2, r3
 8003082:	d028      	beq.n	80030d6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	4a18      	ldr	r2, [pc, #96]	; (80030ec <I2C_Master_ISR_DMA+0x1f4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d109      	bne.n	80030a2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2180      	movs	r1, #128	; 0x80
 800309a:	01c9      	lsls	r1, r1, #7
 800309c:	430a      	orrs	r2, r1
 800309e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80030a0:	e019      	b.n	80030d6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 fb2d 	bl	8003704 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80030aa:	e014      	b.n	80030d6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 fe13 	bl	8003cdc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80030b6:	e00e      	b.n	80030d6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2220      	movs	r2, #32
 80030bc:	4013      	ands	r3, r2
 80030be:	d00b      	beq.n	80030d8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030c6:	d007      	beq.n	80030d8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fbbe 	bl	8003850 <I2C_ITMasterCplt>
 80030d4:	e000      	b.n	80030d8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80030d6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2240      	movs	r2, #64	; 0x40
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b007      	add	sp, #28
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	ffff0000 	.word	0xffff0000

080030f0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80030fc:	4b88      	ldr	r3, [pc, #544]	; (8003320 <I2C_Mem_ISR_DMA+0x230>)
 80030fe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <I2C_Mem_ISR_DMA+0x1e>
 800310a:	2302      	movs	r3, #2
 800310c:	e104      	b.n	8003318 <I2C_Mem_ISR_DMA+0x228>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2240      	movs	r2, #64	; 0x40
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2210      	movs	r2, #16
 800311a:	4013      	ands	r3, r2
 800311c:	d017      	beq.n	800314e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2210      	movs	r2, #16
 8003122:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003124:	d013      	beq.n	800314e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2210      	movs	r2, #16
 800312c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	2204      	movs	r2, #4
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2120      	movs	r1, #32
 800313e:	0018      	movs	r0, r3
 8003140:	f001 f9b4 	bl	80044ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	0018      	movs	r0, r3
 8003148:	f000 fef3 	bl	8003f32 <I2C_Flush_TXDR>
 800314c:	e0df      	b.n	800330e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2202      	movs	r2, #2
 8003152:	4013      	ands	r3, r2
 8003154:	d00d      	beq.n	8003172 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2202      	movs	r2, #2
 800315a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800315c:	d009      	beq.n	8003172 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003166:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	4252      	negs	r2, r2
 800316e:	651a      	str	r2, [r3, #80]	; 0x50
 8003170:	e0cd      	b.n	800330e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	4013      	ands	r3, r2
 8003178:	d05e      	beq.n	8003238 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003180:	d05a      	beq.n	8003238 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2110      	movs	r1, #16
 8003186:	0018      	movs	r0, r3
 8003188:	f001 f990 	bl	80044ac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d04a      	beq.n	800322c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	2bff      	cmp	r3, #255	; 0xff
 800319e:	d910      	bls.n	80031c2 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	22ff      	movs	r2, #255	; 0xff
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	b299      	uxth	r1, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	045b      	lsls	r3, r3, #17
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	2400      	movs	r4, #0
 80031ba:	9400      	str	r4, [sp, #0]
 80031bc:	f001 f93c 	bl	8004438 <I2C_TransferConfig>
 80031c0:	e011      	b.n	80031e6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	b299      	uxth	r1, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	049b      	lsls	r3, r3, #18
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	2400      	movs	r4, #0
 80031e0:	9400      	str	r4, [sp, #0]
 80031e2:	f001 f929 	bl	8004438 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2241      	movs	r2, #65	; 0x41
 80031fc:	5c9b      	ldrb	r3, [r3, r2]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b22      	cmp	r3, #34	; 0x22
 8003202:	d109      	bne.n	8003218 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	0209      	lsls	r1, r1, #8
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003216:	e07a      	b.n	800330e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	01c9      	lsls	r1, r1, #7
 8003226:	430a      	orrs	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800322a:	e070      	b.n	800330e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2140      	movs	r1, #64	; 0x40
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fd53 	bl	8003cdc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003236:	e06a      	b.n	800330e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	4013      	ands	r3, r2
 800323e:	d058      	beq.n	80032f2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003246:	d054      	beq.n	80032f2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2241      	movs	r2, #65	; 0x41
 800324c:	5c9b      	ldrb	r3, [r3, r2]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b22      	cmp	r3, #34	; 0x22
 8003252:	d101      	bne.n	8003258 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8003254:	4b33      	ldr	r3, [pc, #204]	; (8003324 <I2C_Mem_ISR_DMA+0x234>)
 8003256:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2bff      	cmp	r3, #255	; 0xff
 8003260:	d911      	bls.n	8003286 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326c:	b299      	uxth	r1, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	b2da      	uxtb	r2, r3
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	045c      	lsls	r4, r3, #17
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	0023      	movs	r3, r4
 8003280:	f001 f8da 	bl	8004438 <I2C_TransferConfig>
 8003284:	e012      	b.n	80032ac <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003294:	b299      	uxth	r1, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	b2da      	uxtb	r2, r3
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	049c      	lsls	r4, r3, #18
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	0023      	movs	r3, r4
 80032a8:	f001 f8c6 	bl	8004438 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2241      	movs	r2, #65	; 0x41
 80032c2:	5c9b      	ldrb	r3, [r3, r2]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b22      	cmp	r3, #34	; 0x22
 80032c8:	d109      	bne.n	80032de <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0209      	lsls	r1, r1, #8
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032dc:	e017      	b.n	800330e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	01c9      	lsls	r1, r1, #7
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032f0:	e00d      	b.n	800330e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2220      	movs	r2, #32
 80032f6:	4013      	ands	r3, r2
 80032f8:	d009      	beq.n	800330e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003300:	d005      	beq.n	800330e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	0011      	movs	r1, r2
 8003308:	0018      	movs	r0, r3
 800330a:	f000 faa1 	bl	8003850 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2240      	movs	r2, #64	; 0x40
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b007      	add	sp, #28
 800331e:	bd90      	pop	{r4, r7, pc}
 8003320:	80002000 	.word	0x80002000
 8003324:	80002400 	.word	0x80002400

08003328 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2240      	movs	r2, #64	; 0x40
 8003342:	5c9b      	ldrb	r3, [r3, r2]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <I2C_Slave_ISR_DMA+0x24>
 8003348:	2302      	movs	r3, #2
 800334a:	e0cd      	b.n	80034e8 <I2C_Slave_ISR_DMA+0x1c0>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	2101      	movs	r1, #1
 8003352:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2220      	movs	r2, #32
 8003358:	4013      	ands	r3, r2
 800335a:	d009      	beq.n	8003370 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003362:	d005      	beq.n	8003370 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	0011      	movs	r1, r2
 800336a:	0018      	movs	r0, r3
 800336c:	f000 fb3e 	bl	80039ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2210      	movs	r2, #16
 8003374:	4013      	ands	r3, r2
 8003376:	d100      	bne.n	800337a <I2C_Slave_ISR_DMA+0x52>
 8003378:	e0a3      	b.n	80034c2 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2210      	movs	r2, #16
 800337e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003380:	d100      	bne.n	8003384 <I2C_Slave_ISR_DMA+0x5c>
 8003382:	e09e      	b.n	80034c2 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	01db      	lsls	r3, r3, #7
 800338a:	4013      	ands	r3, r2
 800338c:	d105      	bne.n	800339a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003396:	d100      	bne.n	800339a <I2C_Slave_ISR_DMA+0x72>
 8003398:	e08c      	b.n	80034b4 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00c      	beq.n	80033bc <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	4013      	ands	r3, r2
 80033aa:	d007      	beq.n	80033bc <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 80033b8:	2301      	movs	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00c      	beq.n	80033de <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	01db      	lsls	r3, r3, #7
 80033ca:	4013      	ands	r3, r2
 80033cc:	d007      	beq.n	80033de <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 80033da:	2301      	movs	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d12d      	bne.n	8003440 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2241      	movs	r2, #65	; 0x41
 80033e8:	5c9b      	ldrb	r3, [r3, r2]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b28      	cmp	r3, #40	; 0x28
 80033ee:	d10b      	bne.n	8003408 <I2C_Slave_ISR_DMA+0xe0>
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	049b      	lsls	r3, r3, #18
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d106      	bne.n	8003408 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	0011      	movs	r1, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fc13 	bl	8003c2c <I2C_ITListenCplt>
 8003406:	e054      	b.n	80034b2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2241      	movs	r2, #65	; 0x41
 800340c:	5c9b      	ldrb	r3, [r3, r2]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b29      	cmp	r3, #41	; 0x29
 8003412:	d110      	bne.n	8003436 <I2C_Slave_ISR_DMA+0x10e>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <I2C_Slave_ISR_DMA+0x1c8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00c      	beq.n	8003436 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2210      	movs	r2, #16
 8003422:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 fd83 	bl	8003f32 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	0018      	movs	r0, r3
 8003430:	f000 f9aa 	bl	8003788 <I2C_ITSlaveSeqCplt>
 8003434:	e03d      	b.n	80034b2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2210      	movs	r2, #16
 800343c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800343e:	e03e      	b.n	80034be <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2210      	movs	r2, #16
 8003446:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	2204      	movs	r2, #4
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003454:	2317      	movs	r3, #23
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	2141      	movs	r1, #65	; 0x41
 800345c:	5c52      	ldrb	r2, [r2, r1]
 800345e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <I2C_Slave_ISR_DMA+0x148>
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	045b      	lsls	r3, r3, #17
 800346c:	429a      	cmp	r2, r3
 800346e:	d126      	bne.n	80034be <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003470:	2217      	movs	r2, #23
 8003472:	18bb      	adds	r3, r7, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b21      	cmp	r3, #33	; 0x21
 8003478:	d003      	beq.n	8003482 <I2C_Slave_ISR_DMA+0x15a>
 800347a:	18bb      	adds	r3, r7, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b29      	cmp	r3, #41	; 0x29
 8003480:	d103      	bne.n	800348a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2221      	movs	r2, #33	; 0x21
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
 8003488:	e00b      	b.n	80034a2 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800348a:	2217      	movs	r2, #23
 800348c:	18bb      	adds	r3, r7, r2
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b22      	cmp	r3, #34	; 0x22
 8003492:	d003      	beq.n	800349c <I2C_Slave_ISR_DMA+0x174>
 8003494:	18bb      	adds	r3, r7, r2
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b2a      	cmp	r3, #42	; 0x2a
 800349a:	d102      	bne.n	80034a2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2222      	movs	r2, #34	; 0x22
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	0011      	movs	r1, r2
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 fc16 	bl	8003cdc <I2C_ITError>
      if (treatdmanack == 1U)
 80034b0:	e005      	b.n	80034be <I2C_Slave_ISR_DMA+0x196>
 80034b2:	e004      	b.n	80034be <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2210      	movs	r2, #16
 80034ba:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034bc:	e00f      	b.n	80034de <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 80034be:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034c0:	e00d      	b.n	80034de <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2208      	movs	r2, #8
 80034c6:	4013      	ands	r3, r2
 80034c8:	d009      	beq.n	80034de <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2208      	movs	r2, #8
 80034ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034d0:	d005      	beq.n	80034de <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	0011      	movs	r1, r2
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 f86f 	bl	80035bc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2240      	movs	r2, #64	; 0x40
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b008      	add	sp, #32
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	ffff0000 	.word	0xffff0000

080034f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80034f4:	b5b0      	push	{r4, r5, r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	000c      	movs	r4, r1
 80034fe:	0010      	movs	r0, r2
 8003500:	0019      	movs	r1, r3
 8003502:	250a      	movs	r5, #10
 8003504:	197b      	adds	r3, r7, r5
 8003506:	1c22      	adds	r2, r4, #0
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	2308      	movs	r3, #8
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	1c02      	adds	r2, r0, #0
 8003510:	801a      	strh	r2, [r3, #0]
 8003512:	1dbb      	adds	r3, r7, #6
 8003514:	1c0a      	adds	r2, r1, #0
 8003516:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003518:	1dbb      	adds	r3, r7, #6
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	045c      	lsls	r4, r3, #17
 8003522:	197b      	adds	r3, r7, r5
 8003524:	8819      	ldrh	r1, [r3, #0]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <I2C_RequestMemoryWrite+0xc4>)
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	0023      	movs	r3, r4
 800352e:	f000 ff83 	bl	8004438 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	6a39      	ldr	r1, [r7, #32]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0018      	movs	r0, r3
 800353a:	f000 fdf3 	bl	8004124 <I2C_WaitOnTXISFlagUntilTimeout>
 800353e:	1e03      	subs	r3, r0, #0
 8003540:	d001      	beq.n	8003546 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e033      	b.n	80035ae <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003546:	1dbb      	adds	r3, r7, #6
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800354e:	2308      	movs	r3, #8
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
 800355c:	e019      	b.n	8003592 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800355e:	2308      	movs	r3, #8
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	b29b      	uxth	r3, r3
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003572:	6a39      	ldr	r1, [r7, #32]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	0018      	movs	r0, r3
 8003578:	f000 fdd4 	bl	8004124 <I2C_WaitOnTXISFlagUntilTimeout>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e014      	b.n	80035ae <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003584:	2308      	movs	r3, #8
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003592:	6a3a      	ldr	r2, [r7, #32]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	0013      	movs	r3, r2
 800359c:	2200      	movs	r2, #0
 800359e:	2180      	movs	r1, #128	; 0x80
 80035a0:	f000 fd72 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 80035a4:	1e03      	subs	r3, r0, #0
 80035a6:	d001      	beq.n	80035ac <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b004      	add	sp, #16
 80035b4:	bdb0      	pop	{r4, r5, r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	80002000 	.word	0x80002000

080035bc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035bc:	b5b0      	push	{r4, r5, r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2241      	movs	r2, #65	; 0x41
 80035ca:	5c9b      	ldrb	r3, [r3, r2]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	001a      	movs	r2, r3
 80035d0:	2328      	movs	r3, #40	; 0x28
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b28      	cmp	r3, #40	; 0x28
 80035d6:	d000      	beq.n	80035da <I2C_ITAddrCplt+0x1e>
 80035d8:	e088      	b.n	80036ec <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	250f      	movs	r5, #15
 80035e6:	197b      	adds	r3, r7, r5
 80035e8:	2101      	movs	r1, #1
 80035ea:	400a      	ands	r2, r1
 80035ec:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	200c      	movs	r0, #12
 80035fa:	183b      	adds	r3, r7, r0
 80035fc:	21fe      	movs	r1, #254	; 0xfe
 80035fe:	400a      	ands	r2, r1
 8003600:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	b29a      	uxth	r2, r3
 800360a:	240a      	movs	r4, #10
 800360c:	193b      	adds	r3, r7, r4
 800360e:	0592      	lsls	r2, r2, #22
 8003610:	0d92      	lsrs	r2, r2, #22
 8003612:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	b29a      	uxth	r2, r3
 800361c:	2308      	movs	r3, #8
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	21fe      	movs	r1, #254	; 0xfe
 8003622:	400a      	ands	r2, r1
 8003624:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d148      	bne.n	80036c0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800362e:	0021      	movs	r1, r4
 8003630:	187b      	adds	r3, r7, r1
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	09db      	lsrs	r3, r3, #7
 8003636:	b29a      	uxth	r2, r3
 8003638:	183b      	adds	r3, r7, r0
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	4053      	eors	r3, r2
 800363e:	b29b      	uxth	r3, r3
 8003640:	001a      	movs	r2, r3
 8003642:	2306      	movs	r3, #6
 8003644:	4013      	ands	r3, r2
 8003646:	d120      	bne.n	800368a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003648:	183b      	adds	r3, r7, r0
 800364a:	187a      	adds	r2, r7, r1
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365e:	2b02      	cmp	r3, #2
 8003660:	d14c      	bne.n	80036fc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2208      	movs	r2, #8
 800366e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2240      	movs	r2, #64	; 0x40
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003678:	183b      	adds	r3, r7, r0
 800367a:	881a      	ldrh	r2, [r3, #0]
 800367c:	197b      	adds	r3, r7, r5
 800367e:	7819      	ldrb	r1, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	0018      	movs	r0, r3
 8003684:	f7ff f9cb 	bl	8002a1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003688:	e038      	b.n	80036fc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800368a:	240c      	movs	r4, #12
 800368c:	193b      	adds	r3, r7, r4
 800368e:	2208      	movs	r2, #8
 8003690:	18ba      	adds	r2, r7, r2
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	021a      	lsls	r2, r3, #8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0011      	movs	r1, r2
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 ff92 	bl	80045c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036ac:	193b      	adds	r3, r7, r4
 80036ae:	881a      	ldrh	r2, [r3, #0]
 80036b0:	230f      	movs	r3, #15
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	7819      	ldrb	r1, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7ff f9b0 	bl	8002a1e <HAL_I2C_AddrCallback>
}
 80036be:	e01d      	b.n	80036fc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	021a      	lsls	r2, r3, #8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0011      	movs	r1, r2
 80036c8:	0018      	movs	r0, r3
 80036ca:	f000 ff7d 	bl	80045c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2240      	movs	r2, #64	; 0x40
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036d6:	230c      	movs	r3, #12
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	230f      	movs	r3, #15
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	7819      	ldrb	r1, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7ff f99a 	bl	8002a1e <HAL_I2C_AddrCallback>
}
 80036ea:	e007      	b.n	80036fc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2208      	movs	r2, #8
 80036f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bdb0      	pop	{r4, r5, r7, pc}

08003704 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2242      	movs	r2, #66	; 0x42
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2241      	movs	r2, #65	; 0x41
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b21      	cmp	r3, #33	; 0x21
 800371e:	d117      	bne.n	8003750 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2241      	movs	r2, #65	; 0x41
 8003724:	2120      	movs	r1, #32
 8003726:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2211      	movs	r2, #17
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2101      	movs	r1, #1
 8003738:	0018      	movs	r0, r3
 800373a:	f000 ff45 	bl	80045c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2240      	movs	r2, #64	; 0x40
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0018      	movs	r0, r3
 800374a:	f7fd f963 	bl	8000a14 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800374e:	e016      	b.n	800377e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2241      	movs	r2, #65	; 0x41
 8003754:	2120      	movs	r1, #32
 8003756:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2212      	movs	r2, #18
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2102      	movs	r1, #2
 8003768:	0018      	movs	r0, r3
 800376a:	f000 ff2d 	bl	80045c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	2100      	movs	r1, #0
 8003774:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0018      	movs	r0, r3
 800377a:	f7fd f943 	bl	8000a04 <HAL_I2C_MasterRxCpltCallback>
}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2242      	movs	r2, #66	; 0x42
 800379c:	2100      	movs	r1, #0
 800379e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	01db      	lsls	r3, r3, #7
 80037a6:	4013      	ands	r3, r2
 80037a8:	d008      	beq.n	80037bc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4924      	ldr	r1, [pc, #144]	; (8003848 <I2C_ITSlaveSeqCplt+0xc0>)
 80037b6:	400a      	ands	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e00c      	b.n	80037d6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	4013      	ands	r3, r2
 80037c4:	d007      	beq.n	80037d6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	491e      	ldr	r1, [pc, #120]	; (800384c <I2C_ITSlaveSeqCplt+0xc4>)
 80037d2:	400a      	ands	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2241      	movs	r2, #65	; 0x41
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b29      	cmp	r3, #41	; 0x29
 80037e0:	d114      	bne.n	800380c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2241      	movs	r2, #65	; 0x41
 80037e6:	2128      	movs	r1, #40	; 0x28
 80037e8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2221      	movs	r2, #33	; 0x21
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2101      	movs	r1, #1
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 fee7 	bl	80045c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2240      	movs	r2, #64	; 0x40
 80037fe:	2100      	movs	r1, #0
 8003800:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0018      	movs	r0, r3
 8003806:	f7ff f8fa 	bl	80029fe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800380a:	e019      	b.n	8003840 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2241      	movs	r2, #65	; 0x41
 8003810:	5c9b      	ldrb	r3, [r3, r2]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b2a      	cmp	r3, #42	; 0x2a
 8003816:	d113      	bne.n	8003840 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2241      	movs	r2, #65	; 0x41
 800381c:	2128      	movs	r1, #40	; 0x28
 800381e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2222      	movs	r2, #34	; 0x22
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2102      	movs	r1, #2
 800382a:	0018      	movs	r0, r3
 800382c:	f000 fecc 	bl	80045c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2240      	movs	r2, #64	; 0x40
 8003834:	2100      	movs	r1, #0
 8003836:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0018      	movs	r0, r3
 800383c:	f7ff f8e7 	bl	8002a0e <HAL_I2C_SlaveRxCpltCallback>
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b004      	add	sp, #16
 8003846:	bd80      	pop	{r7, pc}
 8003848:	ffffbfff 	.word	0xffffbfff
 800384c:	ffff7fff 	.word	0xffff7fff

08003850 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2220      	movs	r2, #32
 8003864:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2241      	movs	r2, #65	; 0x41
 800386a:	5c9b      	ldrb	r3, [r3, r2]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b21      	cmp	r3, #33	; 0x21
 8003870:	d108      	bne.n	8003884 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2101      	movs	r1, #1
 8003876:	0018      	movs	r0, r3
 8003878:	f000 fea6 	bl	80045c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2211      	movs	r2, #17
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
 8003882:	e00d      	b.n	80038a0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2241      	movs	r2, #65	; 0x41
 8003888:	5c9b      	ldrb	r3, [r3, r2]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b22      	cmp	r3, #34	; 0x22
 800388e:	d107      	bne.n	80038a0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2102      	movs	r1, #2
 8003894:	0018      	movs	r0, r3
 8003896:	f000 fe97 	bl	80045c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2212      	movs	r2, #18
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	494e      	ldr	r1, [pc, #312]	; (80039e4 <I2C_ITMasterCplt+0x194>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4b      	ldr	r2, [pc, #300]	; (80039e8 <I2C_ITMasterCplt+0x198>)
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2210      	movs	r2, #16
 80038c0:	4013      	ands	r3, r2
 80038c2:	d009      	beq.n	80038d8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2210      	movs	r2, #16
 80038ca:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	2204      	movs	r2, #4
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2241      	movs	r2, #65	; 0x41
 80038dc:	5c9b      	ldrb	r3, [r3, r2]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b60      	cmp	r3, #96	; 0x60
 80038e2:	d109      	bne.n	80038f8 <I2C_ITMasterCplt+0xa8>
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2204      	movs	r2, #4
 80038e8:	4013      	ands	r3, r2
 80038ea:	d005      	beq.n	80038f8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80038f6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 fb19 	bl	8003f32 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2241      	movs	r2, #65	; 0x41
 800390a:	5c9b      	ldrb	r3, [r3, r2]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b60      	cmp	r3, #96	; 0x60
 8003910:	d002      	beq.n	8003918 <I2C_ITMasterCplt+0xc8>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f000 f9db 	bl	8003cdc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003926:	e058      	b.n	80039da <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2241      	movs	r2, #65	; 0x41
 800392c:	5c9b      	ldrb	r3, [r3, r2]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b21      	cmp	r3, #33	; 0x21
 8003932:	d126      	bne.n	8003982 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2241      	movs	r2, #65	; 0x41
 8003938:	2120      	movs	r1, #32
 800393a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2242      	movs	r2, #66	; 0x42
 8003946:	5c9b      	ldrb	r3, [r3, r2]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d10c      	bne.n	8003968 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2242      	movs	r2, #66	; 0x42
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2240      	movs	r2, #64	; 0x40
 800395a:	2100      	movs	r1, #0
 800395c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f7ff f874 	bl	8002a4e <HAL_I2C_MemTxCpltCallback>
}
 8003966:	e038      	b.n	80039da <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2242      	movs	r2, #66	; 0x42
 800396c:	2100      	movs	r1, #0
 800396e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	2100      	movs	r1, #0
 8003976:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	0018      	movs	r0, r3
 800397c:	f7fd f84a 	bl	8000a14 <HAL_I2C_MasterTxCpltCallback>
}
 8003980:	e02b      	b.n	80039da <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2241      	movs	r2, #65	; 0x41
 8003986:	5c9b      	ldrb	r3, [r3, r2]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b22      	cmp	r3, #34	; 0x22
 800398c:	d125      	bne.n	80039da <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2241      	movs	r2, #65	; 0x41
 8003992:	2120      	movs	r1, #32
 8003994:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2242      	movs	r2, #66	; 0x42
 80039a0:	5c9b      	ldrb	r3, [r3, r2]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d10c      	bne.n	80039c2 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2242      	movs	r2, #66	; 0x42
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	2100      	movs	r1, #0
 80039b6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff f84f 	bl	8002a5e <HAL_I2C_MemRxCpltCallback>
}
 80039c0:	e00b      	b.n	80039da <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2242      	movs	r2, #66	; 0x42
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2240      	movs	r2, #64	; 0x40
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7fd f815 	bl	8000a04 <HAL_I2C_MasterRxCpltCallback>
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	b006      	add	sp, #24
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	fe00e800 	.word	0xfe00e800
 80039e8:	ffff0000 	.word	0xffff0000

080039ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a02:	200f      	movs	r0, #15
 8003a04:	183b      	adds	r3, r7, r0
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	2141      	movs	r1, #65	; 0x41
 8003a0a:	5c52      	ldrb	r2, [r2, r1]
 8003a0c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2220      	movs	r2, #32
 8003a14:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a16:	183b      	adds	r3, r7, r0
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b21      	cmp	r3, #33	; 0x21
 8003a1c:	d003      	beq.n	8003a26 <I2C_ITSlaveCplt+0x3a>
 8003a1e:	183b      	adds	r3, r7, r0
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b29      	cmp	r3, #41	; 0x29
 8003a24:	d109      	bne.n	8003a3a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003a26:	4a7b      	ldr	r2, [pc, #492]	; (8003c14 <I2C_ITSlaveCplt+0x228>)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 fdcb 	bl	80045c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2221      	movs	r2, #33	; 0x21
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
 8003a38:	e011      	b.n	8003a5e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	18bb      	adds	r3, r7, r2
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b22      	cmp	r3, #34	; 0x22
 8003a42:	d003      	beq.n	8003a4c <I2C_ITSlaveCplt+0x60>
 8003a44:	18bb      	adds	r3, r7, r2
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4a:	d108      	bne.n	8003a5e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003a4c:	4a72      	ldr	r2, [pc, #456]	; (8003c18 <I2C_ITSlaveCplt+0x22c>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 fdb8 	bl	80045c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2222      	movs	r2, #34	; 0x22
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2180      	movs	r1, #128	; 0x80
 8003a6a:	0209      	lsls	r1, r1, #8
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4968      	ldr	r1, [pc, #416]	; (8003c1c <I2C_ITSlaveCplt+0x230>)
 8003a7c:	400a      	ands	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 fa55 	bl	8003f32 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	01db      	lsls	r3, r3, #7
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d013      	beq.n	8003aba <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4960      	ldr	r1, [pc, #384]	; (8003c20 <I2C_ITSlaveCplt+0x234>)
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01f      	beq.n	8003aea <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ab8:	e017      	b.n	8003aea <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d012      	beq.n	8003aea <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4955      	ldr	r1, [pc, #340]	; (8003c24 <I2C_ITSlaveCplt+0x238>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2204      	movs	r2, #4
 8003aee:	4013      	ands	r3, r2
 8003af0:	d020      	beq.n	8003b34 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2204      	movs	r2, #4
 8003af6:	4393      	bics	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	2204      	movs	r2, #4
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2242      	movs	r2, #66	; 0x42
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	0011      	movs	r1, r2
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 f8b7 	bl	8003cdc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2241      	movs	r2, #65	; 0x41
 8003b72:	5c9b      	ldrb	r3, [r3, r2]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b28      	cmp	r3, #40	; 0x28
 8003b78:	d147      	bne.n	8003c0a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0011      	movs	r1, r2
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 f853 	bl	8003c2c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b86:	e040      	b.n	8003c0a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	4a26      	ldr	r2, [pc, #152]	; (8003c28 <I2C_ITSlaveCplt+0x23c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d016      	beq.n	8003bc0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7ff fdf7 	bl	8003788 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <I2C_ITSlaveCplt+0x23c>)
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2241      	movs	r2, #65	; 0x41
 8003ba4:	2120      	movs	r1, #32
 8003ba6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7fe ff40 	bl	8002a3e <HAL_I2C_ListenCpltCallback>
}
 8003bbe:	e024      	b.n	8003c0a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2241      	movs	r2, #65	; 0x41
 8003bc4:	5c9b      	ldrb	r3, [r3, r2]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b22      	cmp	r3, #34	; 0x22
 8003bca:	d10f      	bne.n	8003bec <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2241      	movs	r2, #65	; 0x41
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fe ff12 	bl	8002a0e <HAL_I2C_SlaveRxCpltCallback>
}
 8003bea:	e00e      	b.n	8003c0a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2241      	movs	r2, #65	; 0x41
 8003bf0:	2120      	movs	r1, #32
 8003bf2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2240      	movs	r2, #64	; 0x40
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	0018      	movs	r0, r3
 8003c06:	f7fe fefa 	bl	80029fe <HAL_I2C_SlaveTxCpltCallback>
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b006      	add	sp, #24
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	00008001 	.word	0x00008001
 8003c18:	00008002 	.word	0x00008002
 8003c1c:	fe00e800 	.word	0xfe00e800
 8003c20:	ffffbfff 	.word	0xffffbfff
 8003c24:	ffff7fff 	.word	0xffff7fff
 8003c28:	ffff0000 	.word	0xffff0000

08003c2c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <I2C_ITListenCplt+0xa8>)
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2241      	movs	r2, #65	; 0x41
 8003c46:	2120      	movs	r1, #32
 8003c48:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2242      	movs	r2, #66	; 0x42
 8003c4e:	2100      	movs	r1, #0
 8003c50:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d012      	beq.n	8003ca6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	; (8003cd8 <I2C_ITListenCplt+0xac>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	0011      	movs	r1, r2
 8003cac:	0018      	movs	r0, r3
 8003cae:	f000 fc8b 	bl	80045c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2210      	movs	r2, #16
 8003cb8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2240      	movs	r2, #64	; 0x40
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7fe feba 	bl	8002a3e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	ffff0000 	.word	0xffff0000
 8003cd8:	00008003 	.word	0x00008003

08003cdc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ce6:	200f      	movs	r0, #15
 8003ce8:	183b      	adds	r3, r7, r0
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	2141      	movs	r1, #65	; 0x41
 8003cee:	5c52      	ldrb	r2, [r2, r1]
 8003cf0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2242      	movs	r2, #66	; 0x42
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a72      	ldr	r2, [pc, #456]	; (8003ec8 <I2C_ITError+0x1ec>)
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003d12:	183b      	adds	r3, r7, r0
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b28      	cmp	r3, #40	; 0x28
 8003d18:	d007      	beq.n	8003d2a <I2C_ITError+0x4e>
 8003d1a:	183b      	adds	r3, r7, r0
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b29      	cmp	r3, #41	; 0x29
 8003d20:	d003      	beq.n	8003d2a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003d22:	183b      	adds	r3, r7, r0
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b2a      	cmp	r3, #42	; 0x2a
 8003d28:	d10c      	bne.n	8003d44 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2103      	movs	r1, #3
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 fc4a 	bl	80045c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2241      	movs	r2, #65	; 0x41
 8003d38:	2128      	movs	r1, #40	; 0x28
 8003d3a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a63      	ldr	r2, [pc, #396]	; (8003ecc <I2C_ITError+0x1f0>)
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34
 8003d42:	e032      	b.n	8003daa <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d44:	4a62      	ldr	r2, [pc, #392]	; (8003ed0 <I2C_ITError+0x1f4>)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0011      	movs	r1, r2
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 fc3c 	bl	80045c8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 f8ed 	bl	8003f32 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2241      	movs	r2, #65	; 0x41
 8003d5c:	5c9b      	ldrb	r3, [r3, r2]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b60      	cmp	r3, #96	; 0x60
 8003d62:	d01f      	beq.n	8003da4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2241      	movs	r2, #65	; 0x41
 8003d68:	2120      	movs	r1, #32
 8003d6a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2220      	movs	r2, #32
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d114      	bne.n	8003da4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2210      	movs	r2, #16
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d109      	bne.n	8003d9c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	2204      	movs	r2, #4
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2220      	movs	r2, #32
 8003da2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d03b      	beq.n	8003e30 <I2C_ITError+0x154>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b11      	cmp	r3, #17
 8003dbc:	d002      	beq.n	8003dc4 <I2C_ITError+0xe8>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b21      	cmp	r3, #33	; 0x21
 8003dc2:	d135      	bne.n	8003e30 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	01db      	lsls	r3, r3, #7
 8003dce:	401a      	ands	r2, r3
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	01db      	lsls	r3, r3, #7
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d107      	bne.n	8003de8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	493c      	ldr	r1, [pc, #240]	; (8003ed4 <I2C_ITError+0x1f8>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7fd fd96 	bl	800191e <HAL_DMA_GetState>
 8003df2:	0003      	movs	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d016      	beq.n	8003e26 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	4a36      	ldr	r2, [pc, #216]	; (8003ed8 <I2C_ITError+0x1fc>)
 8003dfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2240      	movs	r2, #64	; 0x40
 8003e04:	2100      	movs	r1, #0
 8003e06:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7fd fc06 	bl	800161e <HAL_DMA_Abort_IT>
 8003e12:	1e03      	subs	r3, r0, #0
 8003e14:	d051      	beq.n	8003eba <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	0018      	movs	r0, r3
 8003e22:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e24:	e049      	b.n	8003eba <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 f859 	bl	8003ee0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e2e:	e044      	b.n	8003eba <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d03b      	beq.n	8003eb0 <I2C_ITError+0x1d4>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b12      	cmp	r3, #18
 8003e3c:	d002      	beq.n	8003e44 <I2C_ITError+0x168>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b22      	cmp	r3, #34	; 0x22
 8003e42:	d135      	bne.n	8003eb0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	401a      	ands	r2, r3
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	491e      	ldr	r1, [pc, #120]	; (8003edc <I2C_ITError+0x200>)
 8003e64:	400a      	ands	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fd fd56 	bl	800191e <HAL_DMA_GetState>
 8003e72:	0003      	movs	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d016      	beq.n	8003ea6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7c:	4a16      	ldr	r2, [pc, #88]	; (8003ed8 <I2C_ITError+0x1fc>)
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2240      	movs	r2, #64	; 0x40
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7fd fbc6 	bl	800161e <HAL_DMA_Abort_IT>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d013      	beq.n	8003ebe <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ea4:	e00b      	b.n	8003ebe <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 f819 	bl	8003ee0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003eae:	e006      	b.n	8003ebe <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f000 f814 	bl	8003ee0 <I2C_TreatErrorCallback>
  }
}
 8003eb8:	e002      	b.n	8003ec0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	e000      	b.n	8003ec0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ebe:	46c0      	nop			; (mov r8, r8)
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	ffff0000 	.word	0xffff0000
 8003ecc:	08002cf9 	.word	0x08002cf9
 8003ed0:	00008003 	.word	0x00008003
 8003ed4:	ffffbfff 	.word	0xffffbfff
 8003ed8:	0800404b 	.word	0x0800404b
 8003edc:	ffff7fff 	.word	0xffff7fff

08003ee0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2241      	movs	r2, #65	; 0x41
 8003eec:	5c9b      	ldrb	r3, [r3, r2]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b60      	cmp	r3, #96	; 0x60
 8003ef2:	d10f      	bne.n	8003f14 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2241      	movs	r2, #65	; 0x41
 8003ef8:	2120      	movs	r1, #32
 8003efa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2240      	movs	r2, #64	; 0x40
 8003f06:	2100      	movs	r1, #0
 8003f08:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7fe fdb6 	bl	8002a7e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f12:	e00a      	b.n	8003f2a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2240      	movs	r2, #64	; 0x40
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7fe fda2 	bl	8002a6e <HAL_I2C_ErrorCallback>
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b002      	add	sp, #8
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2202      	movs	r2, #2
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d103      	bne.n	8003f50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2201      	movs	r2, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d007      	beq.n	8003f6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	619a      	str	r2, [r3, #24]
  }
}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b002      	add	sp, #8
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4920      	ldr	r1, [pc, #128]	; (8004014 <I2C_DMAMasterReceiveCplt+0x9c>)
 8003f92:	400a      	ands	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2120      	movs	r1, #32
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 fa81 	bl	80044ac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8003faa:	e02e      	b.n	800400a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003fb4:	189a      	adds	r2, r3, r2
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2bff      	cmp	r3, #255	; 0xff
 8003fc2:	d903      	bls.n	8003fcc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	22ff      	movs	r2, #255	; 0xff
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
 8003fca:	e004      	b.n	8003fd6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3324      	adds	r3, #36	; 0x24
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8003fec:	f7fd fa79 	bl	80014e2 <HAL_DMA_Start_IT>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d005      	beq.n	8004000 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7ff fe6f 	bl	8003cdc <I2C_ITError>
}
 8003ffe:	e004      	b.n	800400a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2140      	movs	r1, #64	; 0x40
 8004004:	0018      	movs	r0, r3
 8004006:	f000 fa51 	bl	80044ac <I2C_Enable_IRQ>
}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	46bd      	mov	sp, r7
 800400e:	b004      	add	sp, #16
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	ffff7fff 	.word	0xffff7fff

08004018 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2180      	movs	r1, #128	; 0x80
 8004032:	0209      	lsls	r1, r1, #8
 8004034:	430a      	orrs	r2, r1
 8004036:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2110      	movs	r1, #16
 800403c:	0018      	movs	r0, r3
 800403e:	f7ff fe4d 	bl	8003cdc <I2C_ITError>
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b004      	add	sp, #16
 8004048:	bd80      	pop	{r7, pc}

0800404a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2200      	movs	r2, #0
 8004066:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	2200      	movs	r2, #0
 8004076:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff ff30 	bl	8003ee0 <I2C_TreatErrorCallback>
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b004      	add	sp, #16
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	1dfb      	adds	r3, r7, #7
 8004096:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004098:	e030      	b.n	80040fc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	d02d      	beq.n	80040fc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a0:	f7fd f874 	bl	800118c <HAL_GetTick>
 80040a4:	0002      	movs	r2, r0
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d302      	bcc.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d122      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	425a      	negs	r2, r3
 80040c6:	4153      	adcs	r3, r2
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	001a      	movs	r2, r3
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d113      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d8:	2220      	movs	r2, #32
 80040da:	431a      	orrs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2241      	movs	r2, #65	; 0x41
 80040e4:	2120      	movs	r1, #32
 80040e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2242      	movs	r2, #66	; 0x42
 80040ec:	2100      	movs	r1, #0
 80040ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2240      	movs	r2, #64	; 0x40
 80040f4:	2100      	movs	r1, #0
 80040f6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e00f      	b.n	800411c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	425a      	negs	r2, r3
 800410c:	4153      	adcs	r3, r2
 800410e:	b2db      	uxtb	r3, r3
 8004110:	001a      	movs	r2, r3
 8004112:	1dfb      	adds	r3, r7, #7
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d0bf      	beq.n	800409a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004130:	e032      	b.n	8004198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	0018      	movs	r0, r3
 800413a:	f000 f87d 	bl	8004238 <I2C_IsErrorOccurred>
 800413e:	1e03      	subs	r3, r0, #0
 8004140:	d001      	beq.n	8004146 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e030      	b.n	80041a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	3301      	adds	r3, #1
 800414a:	d025      	beq.n	8004198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414c:	f7fd f81e 	bl	800118c <HAL_GetTick>
 8004150:	0002      	movs	r2, r0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	d302      	bcc.n	8004162 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11a      	bne.n	8004198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2202      	movs	r2, #2
 800416a:	4013      	ands	r3, r2
 800416c:	2b02      	cmp	r3, #2
 800416e:	d013      	beq.n	8004198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	2220      	movs	r2, #32
 8004176:	431a      	orrs	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2241      	movs	r2, #65	; 0x41
 8004180:	2120      	movs	r1, #32
 8004182:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2242      	movs	r2, #66	; 0x42
 8004188:	2100      	movs	r1, #0
 800418a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e007      	b.n	80041a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2202      	movs	r2, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d1c5      	bne.n	8004132 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b004      	add	sp, #16
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041bc:	e02f      	b.n	800421e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 f837 	bl	8004238 <I2C_IsErrorOccurred>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e02d      	b.n	800422e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fc ffdb 	bl	800118c <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d11a      	bne.n	800421e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2220      	movs	r2, #32
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d013      	beq.n	800421e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	2220      	movs	r2, #32
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2241      	movs	r2, #65	; 0x41
 8004206:	2120      	movs	r1, #32
 8004208:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2242      	movs	r2, #66	; 0x42
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2240      	movs	r2, #64	; 0x40
 8004216:	2100      	movs	r1, #0
 8004218:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e007      	b.n	800422e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2220      	movs	r2, #32
 8004226:	4013      	ands	r3, r2
 8004228:	2b20      	cmp	r3, #32
 800422a:	d1c8      	bne.n	80041be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b004      	add	sp, #16
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b590      	push	{r4, r7, lr}
 800423a:	b08b      	sub	sp, #44	; 0x2c
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004244:	2327      	movs	r3, #39	; 0x27
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2210      	movs	r2, #16
 8004260:	4013      	ands	r3, r2
 8004262:	d100      	bne.n	8004266 <I2C_IsErrorOccurred+0x2e>
 8004264:	e082      	b.n	800436c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2210      	movs	r2, #16
 800426c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800426e:	e060      	b.n	8004332 <I2C_IsErrorOccurred+0xfa>
 8004270:	2427      	movs	r4, #39	; 0x27
 8004272:	193b      	adds	r3, r7, r4
 8004274:	193a      	adds	r2, r7, r4
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3301      	adds	r3, #1
 800427e:	d058      	beq.n	8004332 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004280:	f7fc ff84 	bl	800118c <HAL_GetTick>
 8004284:	0002      	movs	r2, r0
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	d306      	bcc.n	800429e <I2C_IsErrorOccurred+0x66>
 8004290:	193b      	adds	r3, r7, r4
 8004292:	193a      	adds	r2, r7, r4
 8004294:	7812      	ldrb	r2, [r2, #0]
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d149      	bne.n	8004332 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	2380      	movs	r3, #128	; 0x80
 80042a6:	01db      	lsls	r3, r3, #7
 80042a8:	4013      	ands	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042ac:	2013      	movs	r0, #19
 80042ae:	183b      	adds	r3, r7, r0
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	2142      	movs	r1, #66	; 0x42
 80042b4:	5c52      	ldrb	r2, [r2, r1]
 80042b6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	401a      	ands	r2, r3
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d126      	bne.n	800431a <I2C_IsErrorOccurred+0xe2>
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	01db      	lsls	r3, r3, #7
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d021      	beq.n	800431a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80042d6:	183b      	adds	r3, r7, r0
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d01d      	beq.n	800431a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	01c9      	lsls	r1, r1, #7
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042f0:	f7fc ff4c 	bl	800118c <HAL_GetTick>
 80042f4:	0003      	movs	r3, r0
 80042f6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042f8:	e00f      	b.n	800431a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042fa:	f7fc ff47 	bl	800118c <HAL_GetTick>
 80042fe:	0002      	movs	r2, r0
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b19      	cmp	r3, #25
 8004306:	d908      	bls.n	800431a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	2220      	movs	r2, #32
 800430c:	4313      	orrs	r3, r2
 800430e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004310:	2327      	movs	r3, #39	; 0x27
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]

              break;
 8004318:	e00b      	b.n	8004332 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2220      	movs	r2, #32
 8004322:	4013      	ands	r3, r2
 8004324:	2127      	movs	r1, #39	; 0x27
 8004326:	187a      	adds	r2, r7, r1
 8004328:	1879      	adds	r1, r7, r1
 800432a:	7809      	ldrb	r1, [r1, #0]
 800432c:	7011      	strb	r1, [r2, #0]
 800432e:	2b20      	cmp	r3, #32
 8004330:	d1e3      	bne.n	80042fa <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2220      	movs	r2, #32
 800433a:	4013      	ands	r3, r2
 800433c:	2b20      	cmp	r3, #32
 800433e:	d004      	beq.n	800434a <I2C_IsErrorOccurred+0x112>
 8004340:	2327      	movs	r3, #39	; 0x27
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d092      	beq.n	8004270 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800434a:	2327      	movs	r3, #39	; 0x27
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2220      	movs	r2, #32
 800435a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2204      	movs	r2, #4
 8004360:	4313      	orrs	r3, r2
 8004362:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004364:	2327      	movs	r3, #39	; 0x27
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4013      	ands	r3, r2
 800437c:	d00c      	beq.n	8004398 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	2201      	movs	r2, #1
 8004382:	4313      	orrs	r3, r2
 8004384:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2280      	movs	r2, #128	; 0x80
 800438c:	0052      	lsls	r2, r2, #1
 800438e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004390:	2327      	movs	r3, #39	; 0x27
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4013      	ands	r3, r2
 80043a0:	d00c      	beq.n	80043bc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	2208      	movs	r2, #8
 80043a6:	4313      	orrs	r3, r2
 80043a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	00d2      	lsls	r2, r2, #3
 80043b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043b4:	2327      	movs	r3, #39	; 0x27
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4013      	ands	r3, r2
 80043c4:	d00c      	beq.n	80043e0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	2202      	movs	r2, #2
 80043ca:	4313      	orrs	r3, r2
 80043cc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	0092      	lsls	r2, r2, #2
 80043d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043d8:	2327      	movs	r3, #39	; 0x27
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80043e0:	2327      	movs	r3, #39	; 0x27
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01d      	beq.n	8004426 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f7ff fda0 	bl	8003f32 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	490d      	ldr	r1, [pc, #52]	; (8004434 <I2C_IsErrorOccurred+0x1fc>)
 80043fe:	400a      	ands	r2, r1
 8004400:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2241      	movs	r2, #65	; 0x41
 8004412:	2120      	movs	r1, #32
 8004414:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2242      	movs	r2, #66	; 0x42
 800441a:	2100      	movs	r1, #0
 800441c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2240      	movs	r2, #64	; 0x40
 8004422:	2100      	movs	r1, #0
 8004424:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004426:	2327      	movs	r3, #39	; 0x27
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	781b      	ldrb	r3, [r3, #0]
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b00b      	add	sp, #44	; 0x2c
 8004432:	bd90      	pop	{r4, r7, pc}
 8004434:	fe00e800 	.word	0xfe00e800

08004438 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	0008      	movs	r0, r1
 8004442:	0011      	movs	r1, r2
 8004444:	607b      	str	r3, [r7, #4]
 8004446:	240a      	movs	r4, #10
 8004448:	193b      	adds	r3, r7, r4
 800444a:	1c02      	adds	r2, r0, #0
 800444c:	801a      	strh	r2, [r3, #0]
 800444e:	2009      	movs	r0, #9
 8004450:	183b      	adds	r3, r7, r0
 8004452:	1c0a      	adds	r2, r1, #0
 8004454:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004456:	193b      	adds	r3, r7, r4
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	059b      	lsls	r3, r3, #22
 800445c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800445e:	183b      	adds	r3, r7, r0
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	0419      	lsls	r1, r3, #16
 8004464:	23ff      	movs	r3, #255	; 0xff
 8004466:	041b      	lsls	r3, r3, #16
 8004468:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800446a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	4313      	orrs	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004482:	0d51      	lsrs	r1, r2, #21
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	00d2      	lsls	r2, r2, #3
 8004488:	400a      	ands	r2, r1
 800448a:	4907      	ldr	r1, [pc, #28]	; (80044a8 <I2C_TransferConfig+0x70>)
 800448c:	430a      	orrs	r2, r1
 800448e:	43d2      	mvns	r2, r2
 8004490:	401a      	ands	r2, r3
 8004492:	0011      	movs	r1, r2
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b007      	add	sp, #28
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	03ff63ff 	.word	0x03ff63ff

080044ac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	000a      	movs	r2, r1
 80044b6:	1cbb      	adds	r3, r7, #2
 80044b8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c2:	4b3e      	ldr	r3, [pc, #248]	; (80045bc <I2C_Enable_IRQ+0x110>)
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d035      	beq.n	8004534 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80044cc:	4b3c      	ldr	r3, [pc, #240]	; (80045c0 <I2C_Enable_IRQ+0x114>)
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d030      	beq.n	8004534 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80044d6:	4b3b      	ldr	r3, [pc, #236]	; (80045c4 <I2C_Enable_IRQ+0x118>)
 80044d8:	429a      	cmp	r2, r3
 80044da:	d02b      	beq.n	8004534 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044dc:	1cbb      	adds	r3, r7, #2
 80044de:	2200      	movs	r2, #0
 80044e0:	5e9b      	ldrsh	r3, [r3, r2]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da03      	bge.n	80044ee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	22b8      	movs	r2, #184	; 0xb8
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044ee:	1cbb      	adds	r3, r7, #2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	2201      	movs	r2, #1
 80044f4:	4013      	ands	r3, r2
 80044f6:	d003      	beq.n	8004500 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	22f2      	movs	r2, #242	; 0xf2
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004500:	1cbb      	adds	r3, r7, #2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	2202      	movs	r2, #2
 8004506:	4013      	ands	r3, r2
 8004508:	d003      	beq.n	8004512 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	22f4      	movs	r2, #244	; 0xf4
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004512:	1cbb      	adds	r3, r7, #2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	2b10      	cmp	r3, #16
 8004518:	d103      	bne.n	8004522 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2290      	movs	r2, #144	; 0x90
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004522:	1cbb      	adds	r3, r7, #2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	2b20      	cmp	r3, #32
 8004528:	d13c      	bne.n	80045a4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004532:	e037      	b.n	80045a4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004534:	1cbb      	adds	r3, r7, #2
 8004536:	2200      	movs	r2, #0
 8004538:	5e9b      	ldrsh	r3, [r3, r2]
 800453a:	2b00      	cmp	r3, #0
 800453c:	da03      	bge.n	8004546 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	22b8      	movs	r2, #184	; 0xb8
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004546:	1cbb      	adds	r3, r7, #2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	2201      	movs	r2, #1
 800454c:	4013      	ands	r3, r2
 800454e:	d003      	beq.n	8004558 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	22f2      	movs	r2, #242	; 0xf2
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004558:	1cbb      	adds	r3, r7, #2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	2202      	movs	r2, #2
 800455e:	4013      	ands	r3, r2
 8004560:	d003      	beq.n	800456a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22f4      	movs	r2, #244	; 0xf4
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800456a:	1cbb      	adds	r3, r7, #2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	2b10      	cmp	r3, #16
 8004570:	d103      	bne.n	800457a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2290      	movs	r2, #144	; 0x90
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800457a:	1cbb      	adds	r3, r7, #2
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	2b20      	cmp	r3, #32
 8004580:	d103      	bne.n	800458a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2260      	movs	r2, #96	; 0x60
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <I2C_Enable_IRQ+0x118>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d007      	beq.n	80045a4 <I2C_Enable_IRQ+0xf8>
 8004594:	1cbb      	adds	r3, r7, #2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d103      	bne.n	80045a4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2240      	movs	r2, #64	; 0x40
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6819      	ldr	r1, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	46c0      	nop			; (mov r8, r8)
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b004      	add	sp, #16
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	08002ef9 	.word	0x08002ef9
 80045c0:	08003329 	.word	0x08003329
 80045c4:	080030f1 	.word	0x080030f1

080045c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	000a      	movs	r2, r1
 80045d2:	1cbb      	adds	r3, r7, #2
 80045d4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80045da:	1cbb      	adds	r3, r7, #2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	2201      	movs	r2, #1
 80045e0:	4013      	ands	r3, r2
 80045e2:	d010      	beq.n	8004606 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2242      	movs	r2, #66	; 0x42
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2241      	movs	r2, #65	; 0x41
 80045f0:	5c9b      	ldrb	r3, [r3, r2]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	001a      	movs	r2, r3
 80045f6:	2328      	movs	r3, #40	; 0x28
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b28      	cmp	r3, #40	; 0x28
 80045fc:	d003      	beq.n	8004606 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	22b0      	movs	r2, #176	; 0xb0
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004606:	1cbb      	adds	r3, r7, #2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2202      	movs	r2, #2
 800460c:	4013      	ands	r3, r2
 800460e:	d010      	beq.n	8004632 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2244      	movs	r2, #68	; 0x44
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2241      	movs	r2, #65	; 0x41
 800461c:	5c9b      	ldrb	r3, [r3, r2]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	001a      	movs	r2, r3
 8004622:	2328      	movs	r3, #40	; 0x28
 8004624:	4013      	ands	r3, r2
 8004626:	2b28      	cmp	r3, #40	; 0x28
 8004628:	d003      	beq.n	8004632 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	22b0      	movs	r2, #176	; 0xb0
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004632:	1cbb      	adds	r3, r7, #2
 8004634:	2200      	movs	r2, #0
 8004636:	5e9b      	ldrsh	r3, [r3, r2]
 8004638:	2b00      	cmp	r3, #0
 800463a:	da03      	bge.n	8004644 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	22b8      	movs	r2, #184	; 0xb8
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004644:	1cbb      	adds	r3, r7, #2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	2b10      	cmp	r3, #16
 800464a:	d103      	bne.n	8004654 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2290      	movs	r2, #144	; 0x90
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004654:	1cbb      	adds	r3, r7, #2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	2b20      	cmp	r3, #32
 800465a:	d103      	bne.n	8004664 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004664:	1cbb      	adds	r3, r7, #2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d103      	bne.n	8004674 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2240      	movs	r2, #64	; 0x40
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	43d9      	mvns	r1, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	400a      	ands	r2, r1
 8004684:	601a      	str	r2, [r3, #0]
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	46bd      	mov	sp, r7
 800468a:	b004      	add	sp, #16
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2241      	movs	r2, #65	; 0x41
 800469e:	5c9b      	ldrb	r3, [r3, r2]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d138      	bne.n	8004718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2240      	movs	r2, #64	; 0x40
 80046aa:	5c9b      	ldrb	r3, [r3, r2]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e032      	b.n	800471a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2240      	movs	r2, #64	; 0x40
 80046b8:	2101      	movs	r1, #1
 80046ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2241      	movs	r2, #65	; 0x41
 80046c0:	2124      	movs	r1, #36	; 0x24
 80046c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2101      	movs	r1, #1
 80046d0:	438a      	bics	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4911      	ldr	r1, [pc, #68]	; (8004724 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2101      	movs	r1, #1
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2241      	movs	r2, #65	; 0x41
 8004708:	2120      	movs	r1, #32
 800470a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2240      	movs	r2, #64	; 0x40
 8004710:	2100      	movs	r1, #0
 8004712:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	0018      	movs	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	b002      	add	sp, #8
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	ffffefff 	.word	0xffffefff

08004728 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2241      	movs	r2, #65	; 0x41
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b20      	cmp	r3, #32
 800473c:	d139      	bne.n	80047b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2240      	movs	r2, #64	; 0x40
 8004742:	5c9b      	ldrb	r3, [r3, r2]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004748:	2302      	movs	r3, #2
 800474a:	e033      	b.n	80047b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2240      	movs	r2, #64	; 0x40
 8004750:	2101      	movs	r1, #1
 8004752:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2241      	movs	r2, #65	; 0x41
 8004758:	2124      	movs	r1, #36	; 0x24
 800475a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2101      	movs	r1, #1
 8004768:	438a      	bics	r2, r1
 800476a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a11      	ldr	r2, [pc, #68]	; (80047bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2101      	movs	r1, #1
 800479a:	430a      	orrs	r2, r1
 800479c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2241      	movs	r2, #65	; 0x41
 80047a2:	2120      	movs	r1, #32
 80047a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2240      	movs	r2, #64	; 0x40
 80047aa:	2100      	movs	r1, #0
 80047ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e000      	b.n	80047b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047b2:	2302      	movs	r3, #2
  }
}
 80047b4:	0018      	movs	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b004      	add	sp, #16
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	fffff0ff 	.word	0xfffff0ff

080047c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f000 fb76 	bl	8004ec0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2201      	movs	r2, #1
 80047da:	4013      	ands	r3, r2
 80047dc:	d100      	bne.n	80047e0 <HAL_RCC_OscConfig+0x20>
 80047de:	e08e      	b.n	80048fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047e0:	4bc5      	ldr	r3, [pc, #788]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	220c      	movs	r2, #12
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d00e      	beq.n	800480a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047ec:	4bc2      	ldr	r3, [pc, #776]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	220c      	movs	r2, #12
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d117      	bne.n	8004828 <HAL_RCC_OscConfig+0x68>
 80047f8:	4bbf      	ldr	r3, [pc, #764]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	23c0      	movs	r3, #192	; 0xc0
 80047fe:	025b      	lsls	r3, r3, #9
 8004800:	401a      	ands	r2, r3
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	025b      	lsls	r3, r3, #9
 8004806:	429a      	cmp	r2, r3
 8004808:	d10e      	bne.n	8004828 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480a:	4bbb      	ldr	r3, [pc, #748]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	029b      	lsls	r3, r3, #10
 8004812:	4013      	ands	r3, r2
 8004814:	d100      	bne.n	8004818 <HAL_RCC_OscConfig+0x58>
 8004816:	e071      	b.n	80048fc <HAL_RCC_OscConfig+0x13c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d000      	beq.n	8004822 <HAL_RCC_OscConfig+0x62>
 8004820:	e06c      	b.n	80048fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f000 fb4c 	bl	8004ec0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d107      	bne.n	8004840 <HAL_RCC_OscConfig+0x80>
 8004830:	4bb1      	ldr	r3, [pc, #708]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4bb0      	ldr	r3, [pc, #704]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	0249      	lsls	r1, r1, #9
 800483a:	430a      	orrs	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e02f      	b.n	80048a0 <HAL_RCC_OscConfig+0xe0>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10c      	bne.n	8004862 <HAL_RCC_OscConfig+0xa2>
 8004848:	4bab      	ldr	r3, [pc, #684]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4baa      	ldr	r3, [pc, #680]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800484e:	49ab      	ldr	r1, [pc, #684]	; (8004afc <HAL_RCC_OscConfig+0x33c>)
 8004850:	400a      	ands	r2, r1
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	4ba8      	ldr	r3, [pc, #672]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4ba7      	ldr	r3, [pc, #668]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800485a:	49a9      	ldr	r1, [pc, #676]	; (8004b00 <HAL_RCC_OscConfig+0x340>)
 800485c:	400a      	ands	r2, r1
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e01e      	b.n	80048a0 <HAL_RCC_OscConfig+0xe0>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b05      	cmp	r3, #5
 8004868:	d10e      	bne.n	8004888 <HAL_RCC_OscConfig+0xc8>
 800486a:	4ba3      	ldr	r3, [pc, #652]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4ba2      	ldr	r3, [pc, #648]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004870:	2180      	movs	r1, #128	; 0x80
 8004872:	02c9      	lsls	r1, r1, #11
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	4b9f      	ldr	r3, [pc, #636]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b9e      	ldr	r3, [pc, #632]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800487e:	2180      	movs	r1, #128	; 0x80
 8004880:	0249      	lsls	r1, r1, #9
 8004882:	430a      	orrs	r2, r1
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0xe0>
 8004888:	4b9b      	ldr	r3, [pc, #620]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b9a      	ldr	r3, [pc, #616]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800488e:	499b      	ldr	r1, [pc, #620]	; (8004afc <HAL_RCC_OscConfig+0x33c>)
 8004890:	400a      	ands	r2, r1
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	4b98      	ldr	r3, [pc, #608]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b97      	ldr	r3, [pc, #604]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800489a:	4999      	ldr	r1, [pc, #612]	; (8004b00 <HAL_RCC_OscConfig+0x340>)
 800489c:	400a      	ands	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d014      	beq.n	80048d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fc fc70 	bl	800118c <HAL_GetTick>
 80048ac:	0003      	movs	r3, r0
 80048ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b2:	f7fc fc6b 	bl	800118c <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b64      	cmp	r3, #100	; 0x64
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e2fd      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c4:	4b8c      	ldr	r3, [pc, #560]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	029b      	lsls	r3, r3, #10
 80048cc:	4013      	ands	r3, r2
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0xf2>
 80048d0:	e015      	b.n	80048fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d2:	f7fc fc5b 	bl	800118c <HAL_GetTick>
 80048d6:	0003      	movs	r3, r0
 80048d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fc fc56 	bl	800118c <HAL_GetTick>
 80048e0:	0002      	movs	r2, r0
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e2e8      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	4b82      	ldr	r3, [pc, #520]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	029b      	lsls	r3, r3, #10
 80048f6:	4013      	ands	r3, r2
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x11c>
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2202      	movs	r2, #2
 8004904:	4013      	ands	r3, r2
 8004906:	d100      	bne.n	800490a <HAL_RCC_OscConfig+0x14a>
 8004908:	e06c      	b.n	80049e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800490a:	4b7b      	ldr	r3, [pc, #492]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	220c      	movs	r2, #12
 8004910:	4013      	ands	r3, r2
 8004912:	d00e      	beq.n	8004932 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004914:	4b78      	ldr	r3, [pc, #480]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	220c      	movs	r2, #12
 800491a:	4013      	ands	r3, r2
 800491c:	2b08      	cmp	r3, #8
 800491e:	d11f      	bne.n	8004960 <HAL_RCC_OscConfig+0x1a0>
 8004920:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	23c0      	movs	r3, #192	; 0xc0
 8004926:	025b      	lsls	r3, r3, #9
 8004928:	401a      	ands	r2, r3
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	429a      	cmp	r2, r3
 8004930:	d116      	bne.n	8004960 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004932:	4b71      	ldr	r3, [pc, #452]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2202      	movs	r2, #2
 8004938:	4013      	ands	r3, r2
 800493a:	d005      	beq.n	8004948 <HAL_RCC_OscConfig+0x188>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d001      	beq.n	8004948 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e2bb      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004948:	4b6b      	ldr	r3, [pc, #428]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	22f8      	movs	r2, #248	; 0xf8
 800494e:	4393      	bics	r3, r2
 8004950:	0019      	movs	r1, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	00da      	lsls	r2, r3, #3
 8004958:	4b67      	ldr	r3, [pc, #412]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800495a:	430a      	orrs	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495e:	e041      	b.n	80049e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d024      	beq.n	80049b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004968:	4b63      	ldr	r3, [pc, #396]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b62      	ldr	r3, [pc, #392]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800496e:	2101      	movs	r1, #1
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fc fc0a 	bl	800118c <HAL_GetTick>
 8004978:	0003      	movs	r3, r0
 800497a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800497e:	f7fc fc05 	bl	800118c <HAL_GetTick>
 8004982:	0002      	movs	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e297      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2202      	movs	r2, #2
 8004996:	4013      	ands	r3, r2
 8004998:	d0f1      	beq.n	800497e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499a:	4b57      	ldr	r3, [pc, #348]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	22f8      	movs	r2, #248	; 0xf8
 80049a0:	4393      	bics	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	00da      	lsls	r2, r3, #3
 80049aa:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	e018      	b.n	80049e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b2:	4b51      	ldr	r3, [pc, #324]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80049b8:	2101      	movs	r1, #1
 80049ba:	438a      	bics	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049be:	f7fc fbe5 	bl	800118c <HAL_GetTick>
 80049c2:	0003      	movs	r3, r0
 80049c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c8:	f7fc fbe0 	bl	800118c <HAL_GetTick>
 80049cc:	0002      	movs	r2, r0
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e272      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	4b47      	ldr	r3, [pc, #284]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2202      	movs	r2, #2
 80049e0:	4013      	ands	r3, r2
 80049e2:	d1f1      	bne.n	80049c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2208      	movs	r2, #8
 80049ea:	4013      	ands	r3, r2
 80049ec:	d036      	beq.n	8004a5c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d019      	beq.n	8004a2a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f6:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80049f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049fa:	4b3f      	ldr	r3, [pc, #252]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 80049fc:	2101      	movs	r1, #1
 80049fe:	430a      	orrs	r2, r1
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a02:	f7fc fbc3 	bl	800118c <HAL_GetTick>
 8004a06:	0003      	movs	r3, r0
 8004a08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a0c:	f7fc fbbe 	bl	800118c <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e250      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2202      	movs	r2, #2
 8004a24:	4013      	ands	r3, r2
 8004a26:	d0f1      	beq.n	8004a0c <HAL_RCC_OscConfig+0x24c>
 8004a28:	e018      	b.n	8004a5c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a2a:	4b33      	ldr	r3, [pc, #204]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a2e:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004a30:	2101      	movs	r1, #1
 8004a32:	438a      	bics	r2, r1
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a36:	f7fc fba9 	bl	800118c <HAL_GetTick>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a40:	f7fc fba4 	bl	800118c <HAL_GetTick>
 8004a44:	0002      	movs	r2, r0
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e236      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a52:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2202      	movs	r2, #2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d1f1      	bne.n	8004a40 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2204      	movs	r2, #4
 8004a62:	4013      	ands	r3, r2
 8004a64:	d100      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2a8>
 8004a66:	e0b5      	b.n	8004bd4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a68:	201f      	movs	r0, #31
 8004a6a:	183b      	adds	r3, r7, r0
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a70:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	055b      	lsls	r3, r3, #21
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d110      	bne.n	8004a9e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7c:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004a82:	2180      	movs	r1, #128	; 0x80
 8004a84:	0549      	lsls	r1, r1, #21
 8004a86:	430a      	orrs	r2, r1
 8004a88:	61da      	str	r2, [r3, #28]
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	055b      	lsls	r3, r3, #21
 8004a92:	4013      	ands	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a98:	183b      	adds	r3, r7, r0
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9e:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <HAL_RCC_OscConfig+0x344>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	2380      	movs	r3, #128	; 0x80
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d11a      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aaa:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <HAL_RCC_OscConfig+0x344>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_RCC_OscConfig+0x344>)
 8004ab0:	2180      	movs	r1, #128	; 0x80
 8004ab2:	0049      	lsls	r1, r1, #1
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab8:	f7fc fb68 	bl	800118c <HAL_GetTick>
 8004abc:	0003      	movs	r3, r0
 8004abe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac2:	f7fc fb63 	bl	800118c <HAL_GetTick>
 8004ac6:	0002      	movs	r2, r0
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b64      	cmp	r3, #100	; 0x64
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e1f5      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCC_OscConfig+0x344>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4013      	ands	r3, r2
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10f      	bne.n	8004b08 <HAL_RCC_OscConfig+0x348>
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	4b02      	ldr	r3, [pc, #8]	; (8004af8 <HAL_RCC_OscConfig+0x338>)
 8004aee:	2101      	movs	r1, #1
 8004af0:	430a      	orrs	r2, r1
 8004af2:	621a      	str	r2, [r3, #32]
 8004af4:	e036      	b.n	8004b64 <HAL_RCC_OscConfig+0x3a4>
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	40021000 	.word	0x40021000
 8004afc:	fffeffff 	.word	0xfffeffff
 8004b00:	fffbffff 	.word	0xfffbffff
 8004b04:	40007000 	.word	0x40007000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCC_OscConfig+0x36a>
 8004b10:	4bca      	ldr	r3, [pc, #808]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b12:	6a1a      	ldr	r2, [r3, #32]
 8004b14:	4bc9      	ldr	r3, [pc, #804]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b16:	2101      	movs	r1, #1
 8004b18:	438a      	bics	r2, r1
 8004b1a:	621a      	str	r2, [r3, #32]
 8004b1c:	4bc7      	ldr	r3, [pc, #796]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b1e:	6a1a      	ldr	r2, [r3, #32]
 8004b20:	4bc6      	ldr	r3, [pc, #792]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b22:	2104      	movs	r1, #4
 8004b24:	438a      	bics	r2, r1
 8004b26:	621a      	str	r2, [r3, #32]
 8004b28:	e01c      	b.n	8004b64 <HAL_RCC_OscConfig+0x3a4>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x38c>
 8004b32:	4bc2      	ldr	r3, [pc, #776]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b34:	6a1a      	ldr	r2, [r3, #32]
 8004b36:	4bc1      	ldr	r3, [pc, #772]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b38:	2104      	movs	r1, #4
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	621a      	str	r2, [r3, #32]
 8004b3e:	4bbf      	ldr	r3, [pc, #764]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b40:	6a1a      	ldr	r2, [r3, #32]
 8004b42:	4bbe      	ldr	r3, [pc, #760]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b44:	2101      	movs	r1, #1
 8004b46:	430a      	orrs	r2, r1
 8004b48:	621a      	str	r2, [r3, #32]
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCC_OscConfig+0x3a4>
 8004b4c:	4bbb      	ldr	r3, [pc, #748]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b4e:	6a1a      	ldr	r2, [r3, #32]
 8004b50:	4bba      	ldr	r3, [pc, #744]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b52:	2101      	movs	r1, #1
 8004b54:	438a      	bics	r2, r1
 8004b56:	621a      	str	r2, [r3, #32]
 8004b58:	4bb8      	ldr	r3, [pc, #736]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b5a:	6a1a      	ldr	r2, [r3, #32]
 8004b5c:	4bb7      	ldr	r3, [pc, #732]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b5e:	2104      	movs	r1, #4
 8004b60:	438a      	bics	r2, r1
 8004b62:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d014      	beq.n	8004b96 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6c:	f7fc fb0e 	bl	800118c <HAL_GetTick>
 8004b70:	0003      	movs	r3, r0
 8004b72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	e009      	b.n	8004b8a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fc fb09 	bl	800118c <HAL_GetTick>
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	4aaf      	ldr	r2, [pc, #700]	; (8004e40 <HAL_RCC_OscConfig+0x680>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e19a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8a:	4bac      	ldr	r3, [pc, #688]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	4013      	ands	r3, r2
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x3b6>
 8004b94:	e013      	b.n	8004bbe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b96:	f7fc faf9 	bl	800118c <HAL_GetTick>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9e:	e009      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba0:	f7fc faf4 	bl	800118c <HAL_GetTick>
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	4aa5      	ldr	r2, [pc, #660]	; (8004e40 <HAL_RCC_OscConfig+0x680>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e185      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb4:	4ba1      	ldr	r3, [pc, #644]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bbe:	231f      	movs	r3, #31
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc8:	4b9c      	ldr	r3, [pc, #624]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	4b9b      	ldr	r3, [pc, #620]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004bce:	499d      	ldr	r1, [pc, #628]	; (8004e44 <HAL_RCC_OscConfig+0x684>)
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2210      	movs	r2, #16
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d063      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d12a      	bne.n	8004c3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004be6:	4b95      	ldr	r3, [pc, #596]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bea:	4b94      	ldr	r3, [pc, #592]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004bec:	2104      	movs	r1, #4
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004bf2:	4b92      	ldr	r3, [pc, #584]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf6:	4b91      	ldr	r3, [pc, #580]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfe:	f7fc fac5 	bl	800118c <HAL_GetTick>
 8004c02:	0003      	movs	r3, r0
 8004c04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c08:	f7fc fac0 	bl	800118c <HAL_GetTick>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e152      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c1a:	4b88      	ldr	r3, [pc, #544]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	2202      	movs	r2, #2
 8004c20:	4013      	ands	r3, r2
 8004c22:	d0f1      	beq.n	8004c08 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c24:	4b85      	ldr	r3, [pc, #532]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c28:	22f8      	movs	r2, #248	; 0xf8
 8004c2a:	4393      	bics	r3, r2
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	00da      	lsls	r2, r3, #3
 8004c34:	4b81      	ldr	r3, [pc, #516]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c36:	430a      	orrs	r2, r1
 8004c38:	635a      	str	r2, [r3, #52]	; 0x34
 8004c3a:	e034      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	3305      	adds	r3, #5
 8004c42:	d111      	bne.n	8004c68 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004c44:	4b7d      	ldr	r3, [pc, #500]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c48:	4b7c      	ldr	r3, [pc, #496]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c4a:	2104      	movs	r1, #4
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c50:	4b7a      	ldr	r3, [pc, #488]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c54:	22f8      	movs	r2, #248	; 0xf8
 8004c56:	4393      	bics	r3, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	00da      	lsls	r2, r3, #3
 8004c60:	4b76      	ldr	r3, [pc, #472]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c62:	430a      	orrs	r2, r1
 8004c64:	635a      	str	r2, [r3, #52]	; 0x34
 8004c66:	e01e      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c68:	4b74      	ldr	r3, [pc, #464]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c6c:	4b73      	ldr	r3, [pc, #460]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c6e:	2104      	movs	r1, #4
 8004c70:	430a      	orrs	r2, r1
 8004c72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004c74:	4b71      	ldr	r3, [pc, #452]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c78:	4b70      	ldr	r3, [pc, #448]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	438a      	bics	r2, r1
 8004c7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c80:	f7fc fa84 	bl	800118c <HAL_GetTick>
 8004c84:	0003      	movs	r3, r0
 8004c86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c8a:	f7fc fa7f 	bl	800118c <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e111      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c9c:	4b67      	ldr	r3, [pc, #412]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d1f1      	bne.n	8004c8a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2220      	movs	r2, #32
 8004cac:	4013      	ands	r3, r2
 8004cae:	d05c      	beq.n	8004d6a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004cb0:	4b62      	ldr	r3, [pc, #392]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	220c      	movs	r2, #12
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b0c      	cmp	r3, #12
 8004cba:	d00e      	beq.n	8004cda <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004cbc:	4b5f      	ldr	r3, [pc, #380]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	220c      	movs	r2, #12
 8004cc2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d114      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004cc8:	4b5c      	ldr	r3, [pc, #368]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	23c0      	movs	r3, #192	; 0xc0
 8004cce:	025b      	lsls	r3, r3, #9
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	23c0      	movs	r3, #192	; 0xc0
 8004cd4:	025b      	lsls	r3, r3, #9
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004cda:	4b58      	ldr	r3, [pc, #352]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	029b      	lsls	r3, r3, #10
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d040      	beq.n	8004d68 <HAL_RCC_OscConfig+0x5a8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d03c      	beq.n	8004d68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0e6      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01b      	beq.n	8004d32 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004cfa:	4b50      	ldr	r3, [pc, #320]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfe:	4b4f      	ldr	r3, [pc, #316]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004d00:	2180      	movs	r1, #128	; 0x80
 8004d02:	0249      	lsls	r1, r1, #9
 8004d04:	430a      	orrs	r2, r1
 8004d06:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fc fa40 	bl	800118c <HAL_GetTick>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d12:	f7fc fa3b 	bl	800118c <HAL_GetTick>
 8004d16:	0002      	movs	r2, r0
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e0cd      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	029b      	lsls	r3, r3, #10
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x552>
 8004d30:	e01b      	b.n	8004d6a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004d32:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d36:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004d38:	4943      	ldr	r1, [pc, #268]	; (8004e48 <HAL_RCC_OscConfig+0x688>)
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3e:	f7fc fa25 	bl	800118c <HAL_GetTick>
 8004d42:	0003      	movs	r3, r0
 8004d44:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d48:	f7fc fa20 	bl	800118c <HAL_GetTick>
 8004d4c:	0002      	movs	r2, r0
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0b2      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004d5a:	4b38      	ldr	r3, [pc, #224]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	029b      	lsls	r3, r3, #10
 8004d62:	4013      	ands	r3, r2
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x588>
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004d68:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d100      	bne.n	8004d74 <HAL_RCC_OscConfig+0x5b4>
 8004d72:	e0a4      	b.n	8004ebe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d74:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	220c      	movs	r2, #12
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d100      	bne.n	8004d82 <HAL_RCC_OscConfig+0x5c2>
 8004d80:	e078      	b.n	8004e74 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d14c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8a:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004d90:	492e      	ldr	r1, [pc, #184]	; (8004e4c <HAL_RCC_OscConfig+0x68c>)
 8004d92:	400a      	ands	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d96:	f7fc f9f9 	bl	800118c <HAL_GetTick>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fc f9f4 	bl	800118c <HAL_GetTick>
 8004da4:	0002      	movs	r2, r0
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e086      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004db2:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	049b      	lsls	r3, r3, #18
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	4393      	bics	r3, r2
 8004dc6:	0019      	movs	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <HAL_RCC_OscConfig+0x690>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	431a      	orrs	r2, r3
 8004de6:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dec:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	0449      	lsls	r1, r1, #17
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfa:	f7fc f9c7 	bl	800118c <HAL_GetTick>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fc f9c2 	bl	800118c <HAL_GetTick>
 8004e08:	0002      	movs	r2, r0
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e054      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e16:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	049b      	lsls	r3, r3, #18
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x644>
 8004e22:	e04c      	b.n	8004ebe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <HAL_RCC_OscConfig+0x67c>)
 8004e2a:	4908      	ldr	r1, [pc, #32]	; (8004e4c <HAL_RCC_OscConfig+0x68c>)
 8004e2c:	400a      	ands	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7fc f9ac 	bl	800118c <HAL_GetTick>
 8004e34:	0003      	movs	r3, r0
 8004e36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e38:	e015      	b.n	8004e66 <HAL_RCC_OscConfig+0x6a6>
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	00001388 	.word	0x00001388
 8004e44:	efffffff 	.word	0xefffffff
 8004e48:	fffeffff 	.word	0xfffeffff
 8004e4c:	feffffff 	.word	0xfeffffff
 8004e50:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fc f99a 	bl	800118c <HAL_GetTick>
 8004e58:	0002      	movs	r2, r0
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e02c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e66:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <HAL_RCC_OscConfig+0x708>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	049b      	lsls	r3, r3, #18
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x694>
 8004e72:	e024      	b.n	8004ebe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e01f      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004e80:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCC_OscConfig+0x708>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <HAL_RCC_OscConfig+0x708>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	23c0      	movs	r3, #192	; 0xc0
 8004e90:	025b      	lsls	r3, r3, #9
 8004e92:	401a      	ands	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d10e      	bne.n	8004eba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	23f0      	movs	r3, #240	; 0xf0
 8004eae:	039b      	lsls	r3, r3, #14
 8004eb0:	401a      	ands	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d001      	beq.n	8004ebe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b008      	add	sp, #32
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000

08004ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0bf      	b.n	8005060 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b61      	ldr	r3, [pc, #388]	; (8005068 <HAL_RCC_ClockConfig+0x19c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d911      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b5e      	ldr	r3, [pc, #376]	; (8005068 <HAL_RCC_ClockConfig+0x19c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	4b5b      	ldr	r3, [pc, #364]	; (8005068 <HAL_RCC_ClockConfig+0x19c>)
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f00:	4b59      	ldr	r3, [pc, #356]	; (8005068 <HAL_RCC_ClockConfig+0x19c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2201      	movs	r2, #1
 8004f06:	4013      	ands	r3, r2
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e0a6      	b.n	8005060 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2202      	movs	r2, #2
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2204      	movs	r2, #4
 8004f22:	4013      	ands	r3, r2
 8004f24:	d006      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f26:	4b51      	ldr	r3, [pc, #324]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	4b50      	ldr	r3, [pc, #320]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004f2c:	21e0      	movs	r1, #224	; 0xe0
 8004f2e:	00c9      	lsls	r1, r1, #3
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f34:	4b4d      	ldr	r3, [pc, #308]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	22f0      	movs	r2, #240	; 0xf0
 8004f3a:	4393      	bics	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	4b4a      	ldr	r3, [pc, #296]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d04c      	beq.n	8004fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	4b44      	ldr	r3, [pc, #272]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	4013      	ands	r3, r2
 8004f64:	d120      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e07a      	b.n	8005060 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f72:	4b3e      	ldr	r3, [pc, #248]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	049b      	lsls	r3, r3, #18
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d114      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06e      	b.n	8005060 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004f8a:	4b38      	ldr	r3, [pc, #224]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	4013      	ands	r3, r2
 8004f94:	d108      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e062      	b.n	8005060 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9a:	4b34      	ldr	r3, [pc, #208]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e05b      	b.n	8005060 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fa8:	4b30      	ldr	r3, [pc, #192]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2203      	movs	r2, #3
 8004fae:	4393      	bics	r3, r2
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	4b2d      	ldr	r3, [pc, #180]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fbc:	f7fc f8e6 	bl	800118c <HAL_GetTick>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc4:	e009      	b.n	8004fda <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc6:	f7fc f8e1 	bl	800118c <HAL_GetTick>
 8004fca:	0002      	movs	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <HAL_RCC_ClockConfig+0x1a4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e042      	b.n	8005060 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	220c      	movs	r2, #12
 8004fe0:	401a      	ands	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1ec      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fec:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <HAL_RCC_ClockConfig+0x19c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d211      	bcs.n	800501e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_ClockConfig+0x19c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2201      	movs	r2, #1
 8005000:	4393      	bics	r3, r2
 8005002:	0019      	movs	r1, r3
 8005004:	4b18      	ldr	r3, [pc, #96]	; (8005068 <HAL_RCC_ClockConfig+0x19c>)
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500c:	4b16      	ldr	r3, [pc, #88]	; (8005068 <HAL_RCC_ClockConfig+0x19c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2201      	movs	r2, #1
 8005012:	4013      	ands	r3, r2
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d001      	beq.n	800501e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e020      	b.n	8005060 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2204      	movs	r2, #4
 8005024:	4013      	ands	r3, r2
 8005026:	d009      	beq.n	800503c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005028:	4b10      	ldr	r3, [pc, #64]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	4a11      	ldr	r2, [pc, #68]	; (8005074 <HAL_RCC_ClockConfig+0x1a8>)
 800502e:	4013      	ands	r3, r2
 8005030:	0019      	movs	r1, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8005038:	430a      	orrs	r2, r1
 800503a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800503c:	f000 f820 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 8005040:	0001      	movs	r1, r0
 8005042:	4b0a      	ldr	r3, [pc, #40]	; (800506c <HAL_RCC_ClockConfig+0x1a0>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	220f      	movs	r2, #15
 800504a:	4013      	ands	r3, r2
 800504c:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <HAL_RCC_ClockConfig+0x1ac>)
 800504e:	5cd3      	ldrb	r3, [r2, r3]
 8005050:	000a      	movs	r2, r1
 8005052:	40da      	lsrs	r2, r3
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_RCC_ClockConfig+0x1b0>)
 8005056:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005058:	2003      	movs	r0, #3
 800505a:	f7fc f851 	bl	8001100 <HAL_InitTick>
  
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	0018      	movs	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	b004      	add	sp, #16
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40022000 	.word	0x40022000
 800506c:	40021000 	.word	0x40021000
 8005070:	00001388 	.word	0x00001388
 8005074:	fffff8ff 	.word	0xfffff8ff
 8005078:	0800796c 	.word	0x0800796c
 800507c:	20000000 	.word	0x20000000

08005080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800509a:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <HAL_RCC_GetSysClockFreq+0xd0>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	220c      	movs	r2, #12
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d046      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0xb8>
 80050aa:	d848      	bhi.n	800513e <HAL_RCC_GetSysClockFreq+0xbe>
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d002      	beq.n	80050b6 <HAL_RCC_GetSysClockFreq+0x36>
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d003      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x3c>
 80050b4:	e043      	b.n	800513e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050b6:	4b27      	ldr	r3, [pc, #156]	; (8005154 <HAL_RCC_GetSysClockFreq+0xd4>)
 80050b8:	613b      	str	r3, [r7, #16]
      break;
 80050ba:	e043      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	0c9b      	lsrs	r3, r3, #18
 80050c0:	220f      	movs	r2, #15
 80050c2:	4013      	ands	r3, r2
 80050c4:	4a24      	ldr	r2, [pc, #144]	; (8005158 <HAL_RCC_GetSysClockFreq+0xd8>)
 80050c6:	5cd3      	ldrb	r3, [r2, r3]
 80050c8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80050ca:	4b21      	ldr	r3, [pc, #132]	; (8005150 <HAL_RCC_GetSysClockFreq+0xd0>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	220f      	movs	r2, #15
 80050d0:	4013      	ands	r3, r2
 80050d2:	4a22      	ldr	r2, [pc, #136]	; (800515c <HAL_RCC_GetSysClockFreq+0xdc>)
 80050d4:	5cd3      	ldrb	r3, [r2, r3]
 80050d6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	23c0      	movs	r3, #192	; 0xc0
 80050dc:	025b      	lsls	r3, r3, #9
 80050de:	401a      	ands	r2, r3
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	025b      	lsls	r3, r3, #9
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d109      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	481a      	ldr	r0, [pc, #104]	; (8005154 <HAL_RCC_GetSysClockFreq+0xd4>)
 80050ec:	f7fb f80a 	bl	8000104 <__udivsi3>
 80050f0:	0003      	movs	r3, r0
 80050f2:	001a      	movs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4353      	muls	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	e01a      	b.n	8005132 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	23c0      	movs	r3, #192	; 0xc0
 8005100:	025b      	lsls	r3, r3, #9
 8005102:	401a      	ands	r2, r3
 8005104:	23c0      	movs	r3, #192	; 0xc0
 8005106:	025b      	lsls	r3, r3, #9
 8005108:	429a      	cmp	r2, r3
 800510a:	d109      	bne.n	8005120 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4814      	ldr	r0, [pc, #80]	; (8005160 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005110:	f7fa fff8 	bl	8000104 <__udivsi3>
 8005114:	0003      	movs	r3, r0
 8005116:	001a      	movs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4353      	muls	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e008      	b.n	8005132 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	480c      	ldr	r0, [pc, #48]	; (8005154 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005124:	f7fa ffee 	bl	8000104 <__udivsi3>
 8005128:	0003      	movs	r3, r0
 800512a:	001a      	movs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4353      	muls	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	613b      	str	r3, [r7, #16]
      break;
 8005136:	e005      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005138:	4b09      	ldr	r3, [pc, #36]	; (8005160 <HAL_RCC_GetSysClockFreq+0xe0>)
 800513a:	613b      	str	r3, [r7, #16]
      break;
 800513c:	e002      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005140:	613b      	str	r3, [r7, #16]
      break;
 8005142:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005144:	693b      	ldr	r3, [r7, #16]
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b006      	add	sp, #24
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	40021000 	.word	0x40021000
 8005154:	007a1200 	.word	0x007a1200
 8005158:	08007984 	.word	0x08007984
 800515c:	08007994 	.word	0x08007994
 8005160:	02dc6c00 	.word	0x02dc6c00

08005164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005168:	4b02      	ldr	r3, [pc, #8]	; (8005174 <HAL_RCC_GetHCLKFreq+0x10>)
 800516a:	681b      	ldr	r3, [r3, #0]
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	20000000 	.word	0x20000000

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800517c:	f7ff fff2 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8005180:	0001      	movs	r1, r0
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	2207      	movs	r2, #7
 800518a:	4013      	ands	r3, r2
 800518c:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800518e:	5cd3      	ldrb	r3, [r2, r3]
 8005190:	40d9      	lsrs	r1, r3
 8005192:	000b      	movs	r3, r1
}    
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	40021000 	.word	0x40021000
 80051a0:	0800797c 	.word	0x0800797c

080051a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	025b      	lsls	r3, r3, #9
 80051bc:	4013      	ands	r3, r2
 80051be:	d100      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80051c0:	e08e      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80051c2:	2017      	movs	r0, #23
 80051c4:	183b      	adds	r3, r7, r0
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ca:	4b6e      	ldr	r3, [pc, #440]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	055b      	lsls	r3, r3, #21
 80051d2:	4013      	ands	r3, r2
 80051d4:	d110      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	4b6b      	ldr	r3, [pc, #428]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051d8:	69da      	ldr	r2, [r3, #28]
 80051da:	4b6a      	ldr	r3, [pc, #424]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051dc:	2180      	movs	r1, #128	; 0x80
 80051de:	0549      	lsls	r1, r1, #21
 80051e0:	430a      	orrs	r2, r1
 80051e2:	61da      	str	r2, [r3, #28]
 80051e4:	4b67      	ldr	r3, [pc, #412]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	055b      	lsls	r3, r3, #21
 80051ec:	4013      	ands	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f2:	183b      	adds	r3, r7, r0
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f8:	4b63      	ldr	r3, [pc, #396]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4013      	ands	r3, r2
 8005202:	d11a      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005204:	4b60      	ldr	r3, [pc, #384]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b5f      	ldr	r3, [pc, #380]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	0049      	lsls	r1, r1, #1
 800520e:	430a      	orrs	r2, r1
 8005210:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005212:	f7fb ffbb 	bl	800118c <HAL_GetTick>
 8005216:	0003      	movs	r3, r0
 8005218:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521a:	e008      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521c:	f7fb ffb6 	bl	800118c <HAL_GetTick>
 8005220:	0002      	movs	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b64      	cmp	r3, #100	; 0x64
 8005228:	d901      	bls.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e0a6      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522e:	4b56      	ldr	r3, [pc, #344]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4013      	ands	r3, r2
 8005238:	d0f0      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800523a:	4b52      	ldr	r3, [pc, #328]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	23c0      	movs	r3, #192	; 0xc0
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4013      	ands	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d034      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	23c0      	movs	r3, #192	; 0xc0
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4013      	ands	r3, r2
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	429a      	cmp	r2, r3
 800525a:	d02c      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800525c:	4b49      	ldr	r3, [pc, #292]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4a4a      	ldr	r2, [pc, #296]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005262:	4013      	ands	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005266:	4b47      	ldr	r3, [pc, #284]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005268:	6a1a      	ldr	r2, [r3, #32]
 800526a:	4b46      	ldr	r3, [pc, #280]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	0249      	lsls	r1, r1, #9
 8005270:	430a      	orrs	r2, r1
 8005272:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005274:	4b43      	ldr	r3, [pc, #268]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	4b42      	ldr	r3, [pc, #264]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800527a:	4945      	ldr	r1, [pc, #276]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800527c:	400a      	ands	r2, r1
 800527e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005280:	4b40      	ldr	r3, [pc, #256]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	4013      	ands	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528e:	f7fb ff7d 	bl	800118c <HAL_GetTick>
 8005292:	0003      	movs	r3, r0
 8005294:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005296:	e009      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005298:	f7fb ff78 	bl	800118c <HAL_GetTick>
 800529c:	0002      	movs	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a3c      	ldr	r2, [pc, #240]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e067      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ac:	4b35      	ldr	r3, [pc, #212]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	2202      	movs	r2, #2
 80052b2:	4013      	ands	r3, r2
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052b6:	4b33      	ldr	r3, [pc, #204]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	4a34      	ldr	r2, [pc, #208]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80052bc:	4013      	ands	r3, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4b2f      	ldr	r3, [pc, #188]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052c6:	430a      	orrs	r2, r1
 80052c8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052ca:	2317      	movs	r3, #23
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d105      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d4:	4b2b      	ldr	r3, [pc, #172]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052da:	492f      	ldr	r1, [pc, #188]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80052dc:	400a      	ands	r2, r1
 80052de:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4013      	ands	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052ea:	4b26      	ldr	r3, [pc, #152]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	2203      	movs	r2, #3
 80052f0:	4393      	bics	r3, r2
 80052f2:	0019      	movs	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	4b22      	ldr	r3, [pc, #136]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052fa:	430a      	orrs	r2, r1
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2202      	movs	r2, #2
 8005304:	4013      	ands	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	4a23      	ldr	r2, [pc, #140]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800530e:	4013      	ands	r3, r2
 8005310:	0019      	movs	r1, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005318:	430a      	orrs	r2, r1
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	02db      	lsls	r3, r3, #11
 8005324:	4013      	ands	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005328:	4b16      	ldr	r3, [pc, #88]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800532e:	4013      	ands	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005338:	430a      	orrs	r2, r1
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2220      	movs	r2, #32
 8005342:	4013      	ands	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005346:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	2210      	movs	r2, #16
 800534c:	4393      	bics	r3, r2
 800534e:	0019      	movs	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005356:	430a      	orrs	r2, r1
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	2380      	movs	r3, #128	; 0x80
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4013      	ands	r3, r2
 8005364:	d009      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005366:	4b07      	ldr	r3, [pc, #28]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	2240      	movs	r2, #64	; 0x40
 800536c:	4393      	bics	r3, r2
 800536e:	0019      	movs	r1, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	4b03      	ldr	r3, [pc, #12]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005376:	430a      	orrs	r2, r1
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	b006      	add	sp, #24
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40021000 	.word	0x40021000
 8005388:	40007000 	.word	0x40007000
 800538c:	fffffcff 	.word	0xfffffcff
 8005390:	fffeffff 	.word	0xfffeffff
 8005394:	00001388 	.word	0x00001388
 8005398:	efffffff 	.word	0xefffffff
 800539c:	fffcffff 	.word	0xfffcffff
 80053a0:	fff3ffff 	.word	0xfff3ffff

080053a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e042      	b.n	800543c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	223d      	movs	r2, #61	; 0x3d
 80053ba:	5c9b      	ldrb	r3, [r3, r2]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d107      	bne.n	80053d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	223c      	movs	r2, #60	; 0x3c
 80053c6:	2100      	movs	r1, #0
 80053c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f7fb fc5f 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	223d      	movs	r2, #61	; 0x3d
 80053d6:	2102      	movs	r1, #2
 80053d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3304      	adds	r3, #4
 80053e2:	0019      	movs	r1, r3
 80053e4:	0010      	movs	r0, r2
 80053e6:	f000 fd0f 	bl	8005e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2246      	movs	r2, #70	; 0x46
 80053ee:	2101      	movs	r1, #1
 80053f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	223e      	movs	r2, #62	; 0x3e
 80053f6:	2101      	movs	r1, #1
 80053f8:	5499      	strb	r1, [r3, r2]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	223f      	movs	r2, #63	; 0x3f
 80053fe:	2101      	movs	r1, #1
 8005400:	5499      	strb	r1, [r3, r2]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2240      	movs	r2, #64	; 0x40
 8005406:	2101      	movs	r1, #1
 8005408:	5499      	strb	r1, [r3, r2]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2241      	movs	r2, #65	; 0x41
 800540e:	2101      	movs	r1, #1
 8005410:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2242      	movs	r2, #66	; 0x42
 8005416:	2101      	movs	r1, #1
 8005418:	5499      	strb	r1, [r3, r2]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2243      	movs	r2, #67	; 0x43
 800541e:	2101      	movs	r1, #1
 8005420:	5499      	strb	r1, [r3, r2]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2244      	movs	r2, #68	; 0x44
 8005426:	2101      	movs	r1, #1
 8005428:	5499      	strb	r1, [r3, r2]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2245      	movs	r2, #69	; 0x45
 800542e:	2101      	movs	r1, #1
 8005430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	223d      	movs	r2, #61	; 0x3d
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	223d      	movs	r2, #61	; 0x3d
 8005450:	5c9b      	ldrb	r3, [r3, r2]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	d001      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e03b      	b.n	80054d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	223d      	movs	r2, #61	; 0x3d
 8005460:	2102      	movs	r1, #2
 8005462:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2101      	movs	r1, #1
 8005470:	430a      	orrs	r2, r1
 8005472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a18      	ldr	r2, [pc, #96]	; (80054dc <HAL_TIM_Base_Start_IT+0x98>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00f      	beq.n	800549e <HAL_TIM_Base_Start_IT+0x5a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	2380      	movs	r3, #128	; 0x80
 8005484:	05db      	lsls	r3, r3, #23
 8005486:	429a      	cmp	r2, r3
 8005488:	d009      	beq.n	800549e <HAL_TIM_Base_Start_IT+0x5a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d004      	beq.n	800549e <HAL_TIM_Base_Start_IT+0x5a>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d111      	bne.n	80054c2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2207      	movs	r2, #7
 80054a6:	4013      	ands	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b06      	cmp	r3, #6
 80054ae:	d010      	beq.n	80054d2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2101      	movs	r1, #1
 80054bc:	430a      	orrs	r2, r1
 80054be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c0:	e007      	b.n	80054d2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2101      	movs	r1, #1
 80054ce:	430a      	orrs	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	0018      	movs	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b004      	add	sp, #16
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40014000 	.word	0x40014000

080054e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e042      	b.n	8005580 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	223d      	movs	r2, #61	; 0x3d
 80054fe:	5c9b      	ldrb	r3, [r3, r2]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d107      	bne.n	8005516 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	223c      	movs	r2, #60	; 0x3c
 800550a:	2100      	movs	r1, #0
 800550c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0018      	movs	r0, r3
 8005512:	f000 f839 	bl	8005588 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	223d      	movs	r2, #61	; 0x3d
 800551a:	2102      	movs	r1, #2
 800551c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3304      	adds	r3, #4
 8005526:	0019      	movs	r1, r3
 8005528:	0010      	movs	r0, r2
 800552a:	f000 fc6d 	bl	8005e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2246      	movs	r2, #70	; 0x46
 8005532:	2101      	movs	r1, #1
 8005534:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	223e      	movs	r2, #62	; 0x3e
 800553a:	2101      	movs	r1, #1
 800553c:	5499      	strb	r1, [r3, r2]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	223f      	movs	r2, #63	; 0x3f
 8005542:	2101      	movs	r1, #1
 8005544:	5499      	strb	r1, [r3, r2]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2240      	movs	r2, #64	; 0x40
 800554a:	2101      	movs	r1, #1
 800554c:	5499      	strb	r1, [r3, r2]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2241      	movs	r2, #65	; 0x41
 8005552:	2101      	movs	r1, #1
 8005554:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2242      	movs	r2, #66	; 0x42
 800555a:	2101      	movs	r1, #1
 800555c:	5499      	strb	r1, [r3, r2]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2243      	movs	r2, #67	; 0x43
 8005562:	2101      	movs	r1, #1
 8005564:	5499      	strb	r1, [r3, r2]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2244      	movs	r2, #68	; 0x44
 800556a:	2101      	movs	r1, #1
 800556c:	5499      	strb	r1, [r3, r2]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2245      	movs	r2, #69	; 0x45
 8005572:	2101      	movs	r1, #1
 8005574:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	223d      	movs	r2, #61	; 0x3d
 800557a:	2101      	movs	r1, #1
 800557c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	0018      	movs	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	b002      	add	sp, #8
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	46bd      	mov	sp, r7
 8005594:	b002      	add	sp, #8
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e042      	b.n	8005630 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	223d      	movs	r2, #61	; 0x3d
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	223c      	movs	r2, #60	; 0x3c
 80055ba:	2100      	movs	r1, #0
 80055bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f000 f839 	bl	8005638 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	223d      	movs	r2, #61	; 0x3d
 80055ca:	2102      	movs	r1, #2
 80055cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3304      	adds	r3, #4
 80055d6:	0019      	movs	r1, r3
 80055d8:	0010      	movs	r0, r2
 80055da:	f000 fc15 	bl	8005e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2246      	movs	r2, #70	; 0x46
 80055e2:	2101      	movs	r1, #1
 80055e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	223e      	movs	r2, #62	; 0x3e
 80055ea:	2101      	movs	r1, #1
 80055ec:	5499      	strb	r1, [r3, r2]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	223f      	movs	r2, #63	; 0x3f
 80055f2:	2101      	movs	r1, #1
 80055f4:	5499      	strb	r1, [r3, r2]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2240      	movs	r2, #64	; 0x40
 80055fa:	2101      	movs	r1, #1
 80055fc:	5499      	strb	r1, [r3, r2]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2241      	movs	r2, #65	; 0x41
 8005602:	2101      	movs	r1, #1
 8005604:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2242      	movs	r2, #66	; 0x42
 800560a:	2101      	movs	r1, #1
 800560c:	5499      	strb	r1, [r3, r2]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2243      	movs	r2, #67	; 0x43
 8005612:	2101      	movs	r1, #1
 8005614:	5499      	strb	r1, [r3, r2]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2244      	movs	r2, #68	; 0x44
 800561a:	2101      	movs	r1, #1
 800561c:	5499      	strb	r1, [r3, r2]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2245      	movs	r2, #69	; 0x45
 8005622:	2101      	movs	r1, #1
 8005624:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	223d      	movs	r2, #61	; 0x3d
 800562a:	2101      	movs	r1, #1
 800562c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	0018      	movs	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b002      	add	sp, #8
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d108      	bne.n	800566a <HAL_TIM_PWM_Start+0x22>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	223e      	movs	r2, #62	; 0x3e
 800565c:	5c9b      	ldrb	r3, [r3, r2]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	1e5a      	subs	r2, r3, #1
 8005664:	4193      	sbcs	r3, r2
 8005666:	b2db      	uxtb	r3, r3
 8005668:	e01f      	b.n	80056aa <HAL_TIM_PWM_Start+0x62>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d108      	bne.n	8005682 <HAL_TIM_PWM_Start+0x3a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	223f      	movs	r2, #63	; 0x3f
 8005674:	5c9b      	ldrb	r3, [r3, r2]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	1e5a      	subs	r2, r3, #1
 800567c:	4193      	sbcs	r3, r2
 800567e:	b2db      	uxtb	r3, r3
 8005680:	e013      	b.n	80056aa <HAL_TIM_PWM_Start+0x62>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d108      	bne.n	800569a <HAL_TIM_PWM_Start+0x52>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	5c9b      	ldrb	r3, [r3, r2]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	1e5a      	subs	r2, r3, #1
 8005694:	4193      	sbcs	r3, r2
 8005696:	b2db      	uxtb	r3, r3
 8005698:	e007      	b.n	80056aa <HAL_TIM_PWM_Start+0x62>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2241      	movs	r2, #65	; 0x41
 800569e:	5c9b      	ldrb	r3, [r3, r2]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	4193      	sbcs	r3, r2
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e074      	b.n	800579c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <HAL_TIM_PWM_Start+0x7a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	223e      	movs	r2, #62	; 0x3e
 80056bc:	2102      	movs	r1, #2
 80056be:	5499      	strb	r1, [r3, r2]
 80056c0:	e013      	b.n	80056ea <HAL_TIM_PWM_Start+0xa2>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_PWM_Start+0x8a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	223f      	movs	r2, #63	; 0x3f
 80056cc:	2102      	movs	r1, #2
 80056ce:	5499      	strb	r1, [r3, r2]
 80056d0:	e00b      	b.n	80056ea <HAL_TIM_PWM_Start+0xa2>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_PWM_Start+0x9a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2240      	movs	r2, #64	; 0x40
 80056dc:	2102      	movs	r1, #2
 80056de:	5499      	strb	r1, [r3, r2]
 80056e0:	e003      	b.n	80056ea <HAL_TIM_PWM_Start+0xa2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2241      	movs	r2, #65	; 0x41
 80056e6:	2102      	movs	r1, #2
 80056e8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6839      	ldr	r1, [r7, #0]
 80056f0:	2201      	movs	r2, #1
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 fe9e 	bl	8006434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <HAL_TIM_PWM_Start+0x15c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00e      	beq.n	8005720 <HAL_TIM_PWM_Start+0xd8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a28      	ldr	r2, [pc, #160]	; (80057a8 <HAL_TIM_PWM_Start+0x160>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_TIM_PWM_Start+0xd8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a26      	ldr	r2, [pc, #152]	; (80057ac <HAL_TIM_PWM_Start+0x164>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <HAL_TIM_PWM_Start+0xd8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <HAL_TIM_PWM_Start+0x168>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d101      	bne.n	8005724 <HAL_TIM_PWM_Start+0xdc>
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <HAL_TIM_PWM_Start+0xde>
 8005724:	2300      	movs	r3, #0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2180      	movs	r1, #128	; 0x80
 8005736:	0209      	lsls	r1, r1, #8
 8005738:	430a      	orrs	r2, r1
 800573a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_TIM_PWM_Start+0x15c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00f      	beq.n	8005766 <HAL_TIM_PWM_Start+0x11e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	05db      	lsls	r3, r3, #23
 800574e:	429a      	cmp	r2, r3
 8005750:	d009      	beq.n	8005766 <HAL_TIM_PWM_Start+0x11e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <HAL_TIM_PWM_Start+0x16c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_TIM_PWM_Start+0x11e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a11      	ldr	r2, [pc, #68]	; (80057a8 <HAL_TIM_PWM_Start+0x160>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d111      	bne.n	800578a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2207      	movs	r2, #7
 800576e:	4013      	ands	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b06      	cmp	r3, #6
 8005776:	d010      	beq.n	800579a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2101      	movs	r1, #1
 8005784:	430a      	orrs	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005788:	e007      	b.n	800579a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2101      	movs	r1, #1
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	0018      	movs	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	b004      	add	sp, #16
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40012c00 	.word	0x40012c00
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800
 80057b4:	40000400 	.word	0x40000400

080057b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2202      	movs	r2, #2
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d124      	bne.n	8005818 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2202      	movs	r2, #2
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d11d      	bne.n	8005818 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2203      	movs	r2, #3
 80057e2:	4252      	negs	r2, r2
 80057e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2203      	movs	r2, #3
 80057f4:	4013      	ands	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	0018      	movs	r0, r3
 80057fc:	f000 faec 	bl	8005dd8 <HAL_TIM_IC_CaptureCallback>
 8005800:	e007      	b.n	8005812 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	0018      	movs	r0, r3
 8005806:	f000 fadf 	bl	8005dc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0018      	movs	r0, r3
 800580e:	f000 faeb 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2204      	movs	r2, #4
 8005820:	4013      	ands	r3, r2
 8005822:	2b04      	cmp	r3, #4
 8005824:	d125      	bne.n	8005872 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2204      	movs	r2, #4
 800582e:	4013      	ands	r3, r2
 8005830:	2b04      	cmp	r3, #4
 8005832:	d11e      	bne.n	8005872 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2205      	movs	r2, #5
 800583a:	4252      	negs	r2, r2
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	23c0      	movs	r3, #192	; 0xc0
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4013      	ands	r3, r2
 8005850:	d004      	beq.n	800585c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	0018      	movs	r0, r3
 8005856:	f000 fabf 	bl	8005dd8 <HAL_TIM_IC_CaptureCallback>
 800585a:	e007      	b.n	800586c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	0018      	movs	r0, r3
 8005860:	f000 fab2 	bl	8005dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	0018      	movs	r0, r3
 8005868:	f000 fabe 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2208      	movs	r2, #8
 800587a:	4013      	ands	r3, r2
 800587c:	2b08      	cmp	r3, #8
 800587e:	d124      	bne.n	80058ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2208      	movs	r2, #8
 8005888:	4013      	ands	r3, r2
 800588a:	2b08      	cmp	r3, #8
 800588c:	d11d      	bne.n	80058ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2209      	movs	r2, #9
 8005894:	4252      	negs	r2, r2
 8005896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2204      	movs	r2, #4
 800589c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	2203      	movs	r2, #3
 80058a6:	4013      	ands	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 fa93 	bl	8005dd8 <HAL_TIM_IC_CaptureCallback>
 80058b2:	e007      	b.n	80058c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 fa86 	bl	8005dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	0018      	movs	r0, r3
 80058c0:	f000 fa92 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2210      	movs	r2, #16
 80058d2:	4013      	ands	r3, r2
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d125      	bne.n	8005924 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	2210      	movs	r2, #16
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d11e      	bne.n	8005924 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2211      	movs	r2, #17
 80058ec:	4252      	negs	r2, r2
 80058ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2208      	movs	r2, #8
 80058f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	23c0      	movs	r3, #192	; 0xc0
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4013      	ands	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	0018      	movs	r0, r3
 8005908:	f000 fa66 	bl	8005dd8 <HAL_TIM_IC_CaptureCallback>
 800590c:	e007      	b.n	800591e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	0018      	movs	r0, r3
 8005912:	f000 fa59 	bl	8005dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	0018      	movs	r0, r3
 800591a:	f000 fa65 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2201      	movs	r2, #1
 800592c:	4013      	ands	r3, r2
 800592e:	2b01      	cmp	r3, #1
 8005930:	d10f      	bne.n	8005952 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	4013      	ands	r3, r2
 800593c:	2b01      	cmp	r3, #1
 800593e:	d108      	bne.n	8005952 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2202      	movs	r2, #2
 8005946:	4252      	negs	r2, r2
 8005948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	0018      	movs	r0, r3
 800594e:	f7fa ff9d 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	4013      	ands	r3, r2
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d10f      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2280      	movs	r2, #128	; 0x80
 8005968:	4013      	ands	r3, r2
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d108      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2281      	movs	r2, #129	; 0x81
 8005974:	4252      	negs	r2, r2
 8005976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	0018      	movs	r0, r3
 800597c:	f000 fde4 	bl	8006548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2240      	movs	r2, #64	; 0x40
 8005988:	4013      	ands	r3, r2
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d10f      	bne.n	80059ae <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2240      	movs	r2, #64	; 0x40
 8005996:	4013      	ands	r3, r2
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d108      	bne.n	80059ae <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2241      	movs	r2, #65	; 0x41
 80059a2:	4252      	negs	r2, r2
 80059a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	0018      	movs	r0, r3
 80059aa:	f000 fa25 	bl	8005df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2220      	movs	r2, #32
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d10f      	bne.n	80059dc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d108      	bne.n	80059dc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2221      	movs	r2, #33	; 0x21
 80059d0:	4252      	negs	r2, r2
 80059d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 fdae 	bl	8006538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b002      	add	sp, #8
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f0:	2317      	movs	r3, #23
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	223c      	movs	r2, #60	; 0x3c
 80059fc:	5c9b      	ldrb	r3, [r3, r2]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_TIM_OC_ConfigChannel+0x22>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e042      	b.n	8005a8c <HAL_TIM_OC_ConfigChannel+0xa8>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	223c      	movs	r2, #60	; 0x3c
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	d027      	beq.n	8005a64 <HAL_TIM_OC_ConfigChannel+0x80>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d82c      	bhi.n	8005a74 <HAL_TIM_OC_ConfigChannel+0x90>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d019      	beq.n	8005a54 <HAL_TIM_OC_ConfigChannel+0x70>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d826      	bhi.n	8005a74 <HAL_TIM_OC_ConfigChannel+0x90>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_TIM_OC_ConfigChannel+0x50>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d008      	beq.n	8005a44 <HAL_TIM_OC_ConfigChannel+0x60>
 8005a32:	e01f      	b.n	8005a74 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	0011      	movs	r1, r2
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f000 fa63 	bl	8005f08 <TIM_OC1_SetConfig>
      break;
 8005a42:	e01c      	b.n	8005a7e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f000 fae3 	bl	8006018 <TIM_OC2_SetConfig>
      break;
 8005a52:	e014      	b.n	8005a7e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	0011      	movs	r1, r2
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f000 fb5f 	bl	8006120 <TIM_OC3_SetConfig>
      break;
 8005a62:	e00c      	b.n	8005a7e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	0011      	movs	r1, r2
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 fbdd 	bl	800622c <TIM_OC4_SetConfig>
      break;
 8005a72:	e004      	b.n	8005a7e <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005a74:	2317      	movs	r3, #23
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	2201      	movs	r2, #1
 8005a7a:	701a      	strb	r2, [r3, #0]
      break;
 8005a7c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	223c      	movs	r2, #60	; 0x3c
 8005a82:	2100      	movs	r1, #0
 8005a84:	5499      	strb	r1, [r3, r2]

  return status;
 8005a86:	2317      	movs	r3, #23
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	781b      	ldrb	r3, [r3, #0]
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b006      	add	sp, #24
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa0:	2317      	movs	r3, #23
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	223c      	movs	r2, #60	; 0x3c
 8005aac:	5c9b      	ldrb	r3, [r3, r2]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e0ad      	b.n	8005c12 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	223c      	movs	r2, #60	; 0x3c
 8005aba:	2101      	movs	r1, #1
 8005abc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b0c      	cmp	r3, #12
 8005ac2:	d100      	bne.n	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005ac4:	e076      	b.n	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	d900      	bls.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005acc:	e095      	b.n	8005bfa <HAL_TIM_PWM_ConfigChannel+0x166>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d04e      	beq.n	8005b72 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d900      	bls.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x48>
 8005ada:	e08e      	b.n	8005bfa <HAL_TIM_PWM_ConfigChannel+0x166>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_TIM_PWM_ConfigChannel+0x56>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d021      	beq.n	8005b2c <HAL_TIM_PWM_ConfigChannel+0x98>
 8005ae8:	e087      	b.n	8005bfa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	0011      	movs	r1, r2
 8005af2:	0018      	movs	r0, r3
 8005af4:	f000 fa08 	bl	8005f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2108      	movs	r1, #8
 8005b04:	430a      	orrs	r2, r1
 8005b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2104      	movs	r1, #4
 8005b14:	438a      	bics	r2, r1
 8005b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6999      	ldr	r1, [r3, #24]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	619a      	str	r2, [r3, #24]
      break;
 8005b2a:	e06b      	b.n	8005c04 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	0011      	movs	r1, r2
 8005b34:	0018      	movs	r0, r3
 8005b36:	f000 fa6f 	bl	8006018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2180      	movs	r1, #128	; 0x80
 8005b46:	0109      	lsls	r1, r1, #4
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4931      	ldr	r1, [pc, #196]	; (8005c1c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005b58:	400a      	ands	r2, r1
 8005b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6999      	ldr	r1, [r3, #24]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	021a      	lsls	r2, r3, #8
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	619a      	str	r2, [r3, #24]
      break;
 8005b70:	e048      	b.n	8005c04 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0011      	movs	r1, r2
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f000 fad0 	bl	8006120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69da      	ldr	r2, [r3, #28]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2108      	movs	r1, #8
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2104      	movs	r1, #4
 8005b9c:	438a      	bics	r2, r1
 8005b9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69d9      	ldr	r1, [r3, #28]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	61da      	str	r2, [r3, #28]
      break;
 8005bb2:	e027      	b.n	8005c04 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	0011      	movs	r1, r2
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 fb35 	bl	800622c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2180      	movs	r1, #128	; 0x80
 8005bce:	0109      	lsls	r1, r1, #4
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	490f      	ldr	r1, [pc, #60]	; (8005c1c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005be0:	400a      	ands	r2, r1
 8005be2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69d9      	ldr	r1, [r3, #28]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	61da      	str	r2, [r3, #28]
      break;
 8005bf8:	e004      	b.n	8005c04 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005bfa:	2317      	movs	r3, #23
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
      break;
 8005c02:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	223c      	movs	r2, #60	; 0x3c
 8005c08:	2100      	movs	r1, #0
 8005c0a:	5499      	strb	r1, [r3, r2]

  return status;
 8005c0c:	2317      	movs	r3, #23
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	781b      	ldrb	r3, [r3, #0]
}
 8005c12:	0018      	movs	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b006      	add	sp, #24
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	fffffbff 	.word	0xfffffbff

08005c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2a:	230f      	movs	r3, #15
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	223c      	movs	r2, #60	; 0x3c
 8005c36:	5c9b      	ldrb	r3, [r3, r2]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIM_ConfigClockSource+0x20>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e0bc      	b.n	8005dba <HAL_TIM_ConfigClockSource+0x19a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	223c      	movs	r2, #60	; 0x3c
 8005c44:	2101      	movs	r1, #1
 8005c46:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	223d      	movs	r2, #61	; 0x3d
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2277      	movs	r2, #119	; 0x77
 8005c5c:	4393      	bics	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4a58      	ldr	r2, [pc, #352]	; (8005dc4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2280      	movs	r2, #128	; 0x80
 8005c76:	0192      	lsls	r2, r2, #6
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d040      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0xde>
 8005c7c:	2280      	movs	r2, #128	; 0x80
 8005c7e:	0192      	lsls	r2, r2, #6
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d900      	bls.n	8005c86 <HAL_TIM_ConfigClockSource+0x66>
 8005c84:	e088      	b.n	8005d98 <HAL_TIM_ConfigClockSource+0x178>
 8005c86:	2280      	movs	r2, #128	; 0x80
 8005c88:	0152      	lsls	r2, r2, #5
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d100      	bne.n	8005c90 <HAL_TIM_ConfigClockSource+0x70>
 8005c8e:	e088      	b.n	8005da2 <HAL_TIM_ConfigClockSource+0x182>
 8005c90:	2280      	movs	r2, #128	; 0x80
 8005c92:	0152      	lsls	r2, r2, #5
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d900      	bls.n	8005c9a <HAL_TIM_ConfigClockSource+0x7a>
 8005c98:	e07e      	b.n	8005d98 <HAL_TIM_ConfigClockSource+0x178>
 8005c9a:	2b70      	cmp	r3, #112	; 0x70
 8005c9c:	d018      	beq.n	8005cd0 <HAL_TIM_ConfigClockSource+0xb0>
 8005c9e:	d900      	bls.n	8005ca2 <HAL_TIM_ConfigClockSource+0x82>
 8005ca0:	e07a      	b.n	8005d98 <HAL_TIM_ConfigClockSource+0x178>
 8005ca2:	2b60      	cmp	r3, #96	; 0x60
 8005ca4:	d04f      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x126>
 8005ca6:	d900      	bls.n	8005caa <HAL_TIM_ConfigClockSource+0x8a>
 8005ca8:	e076      	b.n	8005d98 <HAL_TIM_ConfigClockSource+0x178>
 8005caa:	2b50      	cmp	r3, #80	; 0x50
 8005cac:	d03b      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x106>
 8005cae:	d900      	bls.n	8005cb2 <HAL_TIM_ConfigClockSource+0x92>
 8005cb0:	e072      	b.n	8005d98 <HAL_TIM_ConfigClockSource+0x178>
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d057      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x146>
 8005cb6:	d900      	bls.n	8005cba <HAL_TIM_ConfigClockSource+0x9a>
 8005cb8:	e06e      	b.n	8005d98 <HAL_TIM_ConfigClockSource+0x178>
 8005cba:	2b30      	cmp	r3, #48	; 0x30
 8005cbc:	d063      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x166>
 8005cbe:	d86b      	bhi.n	8005d98 <HAL_TIM_ConfigClockSource+0x178>
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d060      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x166>
 8005cc4:	d868      	bhi.n	8005d98 <HAL_TIM_ConfigClockSource+0x178>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d05d      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x166>
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d05b      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x166>
 8005cce:	e063      	b.n	8005d98 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ce0:	f000 fb88 	bl	80063f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2277      	movs	r2, #119	; 0x77
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	609a      	str	r2, [r3, #8]
      break;
 8005cfc:	e052      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d0e:	f000 fb71 	bl	80063f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	01c9      	lsls	r1, r1, #7
 8005d20:	430a      	orrs	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]
      break;
 8005d24:	e03e      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d32:	001a      	movs	r2, r3
 8005d34:	f000 fae4 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2150      	movs	r1, #80	; 0x50
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 fb3e 	bl	80063c0 <TIM_ITRx_SetConfig>
      break;
 8005d44:	e02e      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d52:	001a      	movs	r2, r3
 8005d54:	f000 fb02 	bl	800635c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2160      	movs	r1, #96	; 0x60
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 fb2e 	bl	80063c0 <TIM_ITRx_SetConfig>
      break;
 8005d64:	e01e      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d72:	001a      	movs	r2, r3
 8005d74:	f000 fac4 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2140      	movs	r1, #64	; 0x40
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f000 fb1e 	bl	80063c0 <TIM_ITRx_SetConfig>
      break;
 8005d84:	e00e      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	0019      	movs	r1, r3
 8005d90:	0010      	movs	r0, r2
 8005d92:	f000 fb15 	bl	80063c0 <TIM_ITRx_SetConfig>
      break;
 8005d96:	e005      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005d98:	230f      	movs	r3, #15
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
      break;
 8005da0:	e000      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005da2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	223d      	movs	r2, #61	; 0x3d
 8005da8:	2101      	movs	r1, #1
 8005daa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	223c      	movs	r2, #60	; 0x3c
 8005db0:	2100      	movs	r1, #0
 8005db2:	5499      	strb	r1, [r3, r2]

  return status;
 8005db4:	230f      	movs	r3, #15
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	781b      	ldrb	r3, [r3, #0]
}
 8005dba:	0018      	movs	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b004      	add	sp, #16
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	ffff00ff 	.word	0xffff00ff

08005dc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dd0:	46c0      	nop			; (mov r8, r8)
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005de0:	46c0      	nop			; (mov r8, r8)
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b002      	add	sp, #8
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005df0:	46c0      	nop			; (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b002      	add	sp, #8
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e00:	46c0      	nop			; (mov r8, r8)
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b002      	add	sp, #8
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a34      	ldr	r2, [pc, #208]	; (8005eec <TIM_Base_SetConfig+0xe4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d008      	beq.n	8005e32 <TIM_Base_SetConfig+0x2a>
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	2380      	movs	r3, #128	; 0x80
 8005e24:	05db      	lsls	r3, r3, #23
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d003      	beq.n	8005e32 <TIM_Base_SetConfig+0x2a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a30      	ldr	r2, [pc, #192]	; (8005ef0 <TIM_Base_SetConfig+0xe8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d108      	bne.n	8005e44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2270      	movs	r2, #112	; 0x70
 8005e36:	4393      	bics	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a29      	ldr	r2, [pc, #164]	; (8005eec <TIM_Base_SetConfig+0xe4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <TIM_Base_SetConfig+0x76>
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	05db      	lsls	r3, r3, #23
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d013      	beq.n	8005e7e <TIM_Base_SetConfig+0x76>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a25      	ldr	r2, [pc, #148]	; (8005ef0 <TIM_Base_SetConfig+0xe8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00f      	beq.n	8005e7e <TIM_Base_SetConfig+0x76>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a24      	ldr	r2, [pc, #144]	; (8005ef4 <TIM_Base_SetConfig+0xec>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <TIM_Base_SetConfig+0x76>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a23      	ldr	r2, [pc, #140]	; (8005ef8 <TIM_Base_SetConfig+0xf0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_Base_SetConfig+0x76>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a22      	ldr	r2, [pc, #136]	; (8005efc <TIM_Base_SetConfig+0xf4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_Base_SetConfig+0x76>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <TIM_Base_SetConfig+0xf8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d108      	bne.n	8005e90 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <TIM_Base_SetConfig+0xfc>)
 8005e82:	4013      	ands	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2280      	movs	r2, #128	; 0x80
 8005e94:	4393      	bics	r3, r2
 8005e96:	001a      	movs	r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <TIM_Base_SetConfig+0xe4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xce>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a0d      	ldr	r2, [pc, #52]	; (8005ef8 <TIM_Base_SetConfig+0xf0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d007      	beq.n	8005ed6 <TIM_Base_SetConfig+0xce>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a0c      	ldr	r2, [pc, #48]	; (8005efc <TIM_Base_SetConfig+0xf4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_Base_SetConfig+0xce>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a0b      	ldr	r2, [pc, #44]	; (8005f00 <TIM_Base_SetConfig+0xf8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d103      	bne.n	8005ede <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	615a      	str	r2, [r3, #20]
}
 8005ee4:	46c0      	nop			; (mov r8, r8)
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b004      	add	sp, #16
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40002000 	.word	0x40002000
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40014400 	.word	0x40014400
 8005f00:	40014800 	.word	0x40014800
 8005f04:	fffffcff 	.word	0xfffffcff

08005f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	2201      	movs	r2, #1
 8005f18:	4393      	bics	r3, r2
 8005f1a:	001a      	movs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2270      	movs	r2, #112	; 0x70
 8005f36:	4393      	bics	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	4393      	bics	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	4393      	bics	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a27      	ldr	r2, [pc, #156]	; (8006000 <TIM_OC1_SetConfig+0xf8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00b      	beq.n	8005f7e <TIM_OC1_SetConfig+0x76>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a26      	ldr	r2, [pc, #152]	; (8006004 <TIM_OC1_SetConfig+0xfc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <TIM_OC1_SetConfig+0x76>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a25      	ldr	r2, [pc, #148]	; (8006008 <TIM_OC1_SetConfig+0x100>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_OC1_SetConfig+0x76>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a24      	ldr	r2, [pc, #144]	; (800600c <TIM_OC1_SetConfig+0x104>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d10c      	bne.n	8005f98 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2208      	movs	r2, #8
 8005f82:	4393      	bics	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2204      	movs	r2, #4
 8005f94:	4393      	bics	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a19      	ldr	r2, [pc, #100]	; (8006000 <TIM_OC1_SetConfig+0xf8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00b      	beq.n	8005fb8 <TIM_OC1_SetConfig+0xb0>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	; (8006004 <TIM_OC1_SetConfig+0xfc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d007      	beq.n	8005fb8 <TIM_OC1_SetConfig+0xb0>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a17      	ldr	r2, [pc, #92]	; (8006008 <TIM_OC1_SetConfig+0x100>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_OC1_SetConfig+0xb0>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a16      	ldr	r2, [pc, #88]	; (800600c <TIM_OC1_SetConfig+0x104>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d111      	bne.n	8005fdc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4a15      	ldr	r2, [pc, #84]	; (8006010 <TIM_OC1_SetConfig+0x108>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4a14      	ldr	r2, [pc, #80]	; (8006014 <TIM_OC1_SetConfig+0x10c>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b006      	add	sp, #24
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	40012c00 	.word	0x40012c00
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800
 8006010:	fffffeff 	.word	0xfffffeff
 8006014:	fffffdff 	.word	0xfffffdff

08006018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	2210      	movs	r2, #16
 8006028:	4393      	bics	r3, r2
 800602a:	001a      	movs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a2e      	ldr	r2, [pc, #184]	; (8006100 <TIM_OC2_SetConfig+0xe8>)
 8006046:	4013      	ands	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <TIM_OC2_SetConfig+0xec>)
 800604e:	4013      	ands	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2220      	movs	r2, #32
 8006062:	4393      	bics	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a24      	ldr	r2, [pc, #144]	; (8006108 <TIM_OC2_SetConfig+0xf0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d10d      	bne.n	8006096 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2280      	movs	r2, #128	; 0x80
 800607e:	4393      	bics	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2240      	movs	r2, #64	; 0x40
 8006092:	4393      	bics	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <TIM_OC2_SetConfig+0xf0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_OC2_SetConfig+0x9e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1a      	ldr	r2, [pc, #104]	; (800610c <TIM_OC2_SetConfig+0xf4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d007      	beq.n	80060b6 <TIM_OC2_SetConfig+0x9e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a19      	ldr	r2, [pc, #100]	; (8006110 <TIM_OC2_SetConfig+0xf8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_OC2_SetConfig+0x9e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a18      	ldr	r2, [pc, #96]	; (8006114 <TIM_OC2_SetConfig+0xfc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d113      	bne.n	80060de <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4a17      	ldr	r2, [pc, #92]	; (8006118 <TIM_OC2_SetConfig+0x100>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4a16      	ldr	r2, [pc, #88]	; (800611c <TIM_OC2_SetConfig+0x104>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	621a      	str	r2, [r3, #32]
}
 80060f8:	46c0      	nop			; (mov r8, r8)
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b006      	add	sp, #24
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	ffff8fff 	.word	0xffff8fff
 8006104:	fffffcff 	.word	0xfffffcff
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40014000 	.word	0x40014000
 8006110:	40014400 	.word	0x40014400
 8006114:	40014800 	.word	0x40014800
 8006118:	fffffbff 	.word	0xfffffbff
 800611c:	fffff7ff 	.word	0xfffff7ff

08006120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	4a35      	ldr	r2, [pc, #212]	; (8006204 <TIM_OC3_SetConfig+0xe4>)
 8006130:	401a      	ands	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2270      	movs	r2, #112	; 0x70
 800614c:	4393      	bics	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2203      	movs	r2, #3
 8006154:	4393      	bics	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	4a28      	ldr	r2, [pc, #160]	; (8006208 <TIM_OC3_SetConfig+0xe8>)
 8006166:	4013      	ands	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a24      	ldr	r2, [pc, #144]	; (800620c <TIM_OC3_SetConfig+0xec>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d10d      	bne.n	800619a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4a23      	ldr	r2, [pc, #140]	; (8006210 <TIM_OC3_SetConfig+0xf0>)
 8006182:	4013      	ands	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <TIM_OC3_SetConfig+0xf4>)
 8006196:	4013      	ands	r3, r2
 8006198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1b      	ldr	r2, [pc, #108]	; (800620c <TIM_OC3_SetConfig+0xec>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00b      	beq.n	80061ba <TIM_OC3_SetConfig+0x9a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1c      	ldr	r2, [pc, #112]	; (8006218 <TIM_OC3_SetConfig+0xf8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d007      	beq.n	80061ba <TIM_OC3_SetConfig+0x9a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1b      	ldr	r2, [pc, #108]	; (800621c <TIM_OC3_SetConfig+0xfc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_OC3_SetConfig+0x9a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1a      	ldr	r2, [pc, #104]	; (8006220 <TIM_OC3_SetConfig+0x100>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d113      	bne.n	80061e2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4a19      	ldr	r2, [pc, #100]	; (8006224 <TIM_OC3_SetConfig+0x104>)
 80061be:	4013      	ands	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4a18      	ldr	r2, [pc, #96]	; (8006228 <TIM_OC3_SetConfig+0x108>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	621a      	str	r2, [r3, #32]
}
 80061fc:	46c0      	nop			; (mov r8, r8)
 80061fe:	46bd      	mov	sp, r7
 8006200:	b006      	add	sp, #24
 8006202:	bd80      	pop	{r7, pc}
 8006204:	fffffeff 	.word	0xfffffeff
 8006208:	fffffdff 	.word	0xfffffdff
 800620c:	40012c00 	.word	0x40012c00
 8006210:	fffff7ff 	.word	0xfffff7ff
 8006214:	fffffbff 	.word	0xfffffbff
 8006218:	40014000 	.word	0x40014000
 800621c:	40014400 	.word	0x40014400
 8006220:	40014800 	.word	0x40014800
 8006224:	ffffefff 	.word	0xffffefff
 8006228:	ffffdfff 	.word	0xffffdfff

0800622c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	4a28      	ldr	r2, [pc, #160]	; (80062dc <TIM_OC4_SetConfig+0xb0>)
 800623c:	401a      	ands	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a22      	ldr	r2, [pc, #136]	; (80062e0 <TIM_OC4_SetConfig+0xb4>)
 8006258:	4013      	ands	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <TIM_OC4_SetConfig+0xb8>)
 8006260:	4013      	ands	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <TIM_OC4_SetConfig+0xbc>)
 8006274:	4013      	ands	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	031b      	lsls	r3, r3, #12
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a19      	ldr	r2, [pc, #100]	; (80062ec <TIM_OC4_SetConfig+0xc0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00b      	beq.n	80062a4 <TIM_OC4_SetConfig+0x78>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <TIM_OC4_SetConfig+0xc4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_OC4_SetConfig+0x78>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <TIM_OC4_SetConfig+0xc8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_OC4_SetConfig+0x78>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a16      	ldr	r2, [pc, #88]	; (80062f8 <TIM_OC4_SetConfig+0xcc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d109      	bne.n	80062b8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	4a15      	ldr	r2, [pc, #84]	; (80062fc <TIM_OC4_SetConfig+0xd0>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	019b      	lsls	r3, r3, #6
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b006      	add	sp, #24
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	ffffefff 	.word	0xffffefff
 80062e0:	ffff8fff 	.word	0xffff8fff
 80062e4:	fffffcff 	.word	0xfffffcff
 80062e8:	ffffdfff 	.word	0xffffdfff
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	ffffbfff 	.word	0xffffbfff

08006300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	2201      	movs	r2, #1
 8006318:	4393      	bics	r3, r2
 800631a:	001a      	movs	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	22f0      	movs	r2, #240	; 0xf0
 800632a:	4393      	bics	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	220a      	movs	r2, #10
 800633c:	4393      	bics	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	621a      	str	r2, [r3, #32]
}
 8006354:	46c0      	nop			; (mov r8, r8)
 8006356:	46bd      	mov	sp, r7
 8006358:	b006      	add	sp, #24
 800635a:	bd80      	pop	{r7, pc}

0800635c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	2210      	movs	r2, #16
 800636e:	4393      	bics	r3, r2
 8006370:	001a      	movs	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	4a0d      	ldr	r2, [pc, #52]	; (80063bc <TIM_TI2_ConfigInputStage+0x60>)
 8006386:	4013      	ands	r3, r2
 8006388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	031b      	lsls	r3, r3, #12
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	22a0      	movs	r2, #160	; 0xa0
 8006398:	4393      	bics	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b006      	add	sp, #24
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	ffff0fff 	.word	0xffff0fff

080063c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2270      	movs	r2, #112	; 0x70
 80063d4:	4393      	bics	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	2207      	movs	r2, #7
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	609a      	str	r2, [r3, #8]
}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	46bd      	mov	sp, r7
 80063ee:	b004      	add	sp, #16
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	4a09      	ldr	r2, [pc, #36]	; (8006430 <TIM_ETR_SetConfig+0x3c>)
 800640c:	4013      	ands	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	431a      	orrs	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4313      	orrs	r3, r2
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46bd      	mov	sp, r7
 800642c:	b006      	add	sp, #24
 800642e:	bd80      	pop	{r7, pc}
 8006430:	ffff00ff 	.word	0xffff00ff

08006434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	221f      	movs	r2, #31
 8006444:	4013      	ands	r3, r2
 8006446:	2201      	movs	r2, #1
 8006448:	409a      	lsls	r2, r3
 800644a:	0013      	movs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	43d2      	mvns	r2, r2
 8006456:	401a      	ands	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1a      	ldr	r2, [r3, #32]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	211f      	movs	r1, #31
 8006464:	400b      	ands	r3, r1
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4099      	lsls	r1, r3
 800646a:	000b      	movs	r3, r1
 800646c:	431a      	orrs	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	46bd      	mov	sp, r7
 8006476:	b006      	add	sp, #24
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	223c      	movs	r2, #60	; 0x3c
 800648a:	5c9b      	ldrb	r3, [r3, r2]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006490:	2302      	movs	r3, #2
 8006492:	e047      	b.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	223c      	movs	r2, #60	; 0x3c
 8006498:	2101      	movs	r1, #1
 800649a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	223d      	movs	r2, #61	; 0x3d
 80064a0:	2102      	movs	r1, #2
 80064a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2270      	movs	r2, #112	; 0x70
 80064b8:	4393      	bics	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a16      	ldr	r2, [pc, #88]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00f      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	05db      	lsls	r3, r3, #23
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d009      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a11      	ldr	r2, [pc, #68]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d004      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a10      	ldr	r2, [pc, #64]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10c      	bne.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2280      	movs	r2, #128	; 0x80
 80064fc:	4393      	bics	r3, r2
 80064fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	4313      	orrs	r3, r2
 8006508:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	223d      	movs	r2, #61	; 0x3d
 8006516:	2101      	movs	r1, #1
 8006518:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	223c      	movs	r2, #60	; 0x3c
 800651e:	2100      	movs	r1, #0
 8006520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	0018      	movs	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	b004      	add	sp, #16
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40000400 	.word	0x40000400
 8006534:	40014000 	.word	0x40014000

08006538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006540:	46c0      	nop			; (mov r8, r8)
 8006542:	46bd      	mov	sp, r7
 8006544:	b002      	add	sp, #8
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006550:	46c0      	nop			; (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e044      	b.n	80065f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2278      	movs	r2, #120	; 0x78
 8006576:	2100      	movs	r1, #0
 8006578:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0018      	movs	r0, r3
 800657e:	f7fa fc3d 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2224      	movs	r2, #36	; 0x24
 8006586:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2101      	movs	r1, #1
 8006594:	438a      	bics	r2, r1
 8006596:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	0018      	movs	r0, r3
 800659c:	f000 fb94 	bl	8006cc8 <UART_SetConfig>
 80065a0:	0003      	movs	r3, r0
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e024      	b.n	80065f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f000 fd6f 	bl	8007098 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	490d      	ldr	r1, [pc, #52]	; (80065fc <HAL_UART_Init+0xa4>)
 80065c6:	400a      	ands	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	212a      	movs	r1, #42	; 0x2a
 80065d6:	438a      	bics	r2, r1
 80065d8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2101      	movs	r1, #1
 80065e6:	430a      	orrs	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fe07 	bl	8007200 <UART_CheckIdleState>
 80065f2:	0003      	movs	r3, r0
}
 80065f4:	0018      	movs	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b002      	add	sp, #8
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	ffffb7ff 	.word	0xffffb7ff

08006600 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	1dbb      	adds	r3, r7, #6
 800660c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2280      	movs	r2, #128	; 0x80
 8006612:	589b      	ldr	r3, [r3, r2]
 8006614:	2b20      	cmp	r3, #32
 8006616:	d145      	bne.n	80066a4 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_UART_Receive_DMA+0x26>
 800661e:	1dbb      	adds	r3, r7, #6
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e03d      	b.n	80066a6 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	2380      	movs	r3, #128	; 0x80
 8006630:	015b      	lsls	r3, r3, #5
 8006632:	429a      	cmp	r2, r3
 8006634:	d109      	bne.n	800664a <HAL_UART_Receive_DMA+0x4a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d105      	bne.n	800664a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2201      	movs	r2, #1
 8006642:	4013      	ands	r3, r2
 8006644:	d001      	beq.n	800664a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e02d      	b.n	80066a6 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	2380      	movs	r3, #128	; 0x80
 8006658:	041b      	lsls	r3, r3, #16
 800665a:	4013      	ands	r3, r2
 800665c:	d019      	beq.n	8006692 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665e:	f3ef 8310 	mrs	r3, PRIMASK
 8006662:	613b      	str	r3, [r7, #16]
  return(result);
 8006664:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f383 8810 	msr	PRIMASK, r3
}
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2180      	movs	r1, #128	; 0x80
 8006680:	04c9      	lsls	r1, r1, #19
 8006682:	430a      	orrs	r2, r1
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	f383 8810 	msr	PRIMASK, r3
}
 8006690:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006692:	1dbb      	adds	r3, r7, #6
 8006694:	881a      	ldrh	r2, [r3, #0]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	0018      	movs	r0, r3
 800669c:	f000 fec2 	bl	8007424 <UART_Start_Receive_DMA>
 80066a0:	0003      	movs	r3, r0
 80066a2:	e000      	b.n	80066a6 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
  }
}
 80066a6:	0018      	movs	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b008      	add	sp, #32
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066b0:	b590      	push	{r4, r7, lr}
 80066b2:	b0ab      	sub	sp, #172	; 0xac
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	22a4      	movs	r2, #164	; 0xa4
 80066c0:	18b9      	adds	r1, r7, r2
 80066c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	20a0      	movs	r0, #160	; 0xa0
 80066cc:	1839      	adds	r1, r7, r0
 80066ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	219c      	movs	r1, #156	; 0x9c
 80066d8:	1879      	adds	r1, r7, r1
 80066da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066dc:	0011      	movs	r1, r2
 80066de:	18bb      	adds	r3, r7, r2
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a99      	ldr	r2, [pc, #612]	; (8006948 <HAL_UART_IRQHandler+0x298>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	2298      	movs	r2, #152	; 0x98
 80066e8:	18bc      	adds	r4, r7, r2
 80066ea:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80066ec:	18bb      	adds	r3, r7, r2
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d114      	bne.n	800671e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066f4:	187b      	adds	r3, r7, r1
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2220      	movs	r2, #32
 80066fa:	4013      	ands	r3, r2
 80066fc:	d00f      	beq.n	800671e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066fe:	183b      	adds	r3, r7, r0
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2220      	movs	r2, #32
 8006704:	4013      	ands	r3, r2
 8006706:	d00a      	beq.n	800671e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800670c:	2b00      	cmp	r3, #0
 800670e:	d100      	bne.n	8006712 <HAL_UART_IRQHandler+0x62>
 8006710:	e29e      	b.n	8006c50 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	0010      	movs	r0, r2
 800671a:	4798      	blx	r3
      }
      return;
 800671c:	e298      	b.n	8006c50 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800671e:	2398      	movs	r3, #152	; 0x98
 8006720:	18fb      	adds	r3, r7, r3
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d100      	bne.n	800672a <HAL_UART_IRQHandler+0x7a>
 8006728:	e114      	b.n	8006954 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800672a:	239c      	movs	r3, #156	; 0x9c
 800672c:	18fb      	adds	r3, r7, r3
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2201      	movs	r2, #1
 8006732:	4013      	ands	r3, r2
 8006734:	d106      	bne.n	8006744 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006736:	23a0      	movs	r3, #160	; 0xa0
 8006738:	18fb      	adds	r3, r7, r3
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a83      	ldr	r2, [pc, #524]	; (800694c <HAL_UART_IRQHandler+0x29c>)
 800673e:	4013      	ands	r3, r2
 8006740:	d100      	bne.n	8006744 <HAL_UART_IRQHandler+0x94>
 8006742:	e107      	b.n	8006954 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006744:	23a4      	movs	r3, #164	; 0xa4
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2201      	movs	r2, #1
 800674c:	4013      	ands	r3, r2
 800674e:	d012      	beq.n	8006776 <HAL_UART_IRQHandler+0xc6>
 8006750:	23a0      	movs	r3, #160	; 0xa0
 8006752:	18fb      	adds	r3, r7, r3
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	2380      	movs	r3, #128	; 0x80
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	4013      	ands	r3, r2
 800675c:	d00b      	beq.n	8006776 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2201      	movs	r2, #1
 8006764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2284      	movs	r2, #132	; 0x84
 800676a:	589b      	ldr	r3, [r3, r2]
 800676c:	2201      	movs	r2, #1
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2184      	movs	r1, #132	; 0x84
 8006774:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006776:	23a4      	movs	r3, #164	; 0xa4
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2202      	movs	r2, #2
 800677e:	4013      	ands	r3, r2
 8006780:	d011      	beq.n	80067a6 <HAL_UART_IRQHandler+0xf6>
 8006782:	239c      	movs	r3, #156	; 0x9c
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2201      	movs	r2, #1
 800678a:	4013      	ands	r3, r2
 800678c:	d00b      	beq.n	80067a6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2202      	movs	r2, #2
 8006794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2284      	movs	r2, #132	; 0x84
 800679a:	589b      	ldr	r3, [r3, r2]
 800679c:	2204      	movs	r2, #4
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2184      	movs	r1, #132	; 0x84
 80067a4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067a6:	23a4      	movs	r3, #164	; 0xa4
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2204      	movs	r2, #4
 80067ae:	4013      	ands	r3, r2
 80067b0:	d011      	beq.n	80067d6 <HAL_UART_IRQHandler+0x126>
 80067b2:	239c      	movs	r3, #156	; 0x9c
 80067b4:	18fb      	adds	r3, r7, r3
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2201      	movs	r2, #1
 80067ba:	4013      	ands	r3, r2
 80067bc:	d00b      	beq.n	80067d6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2204      	movs	r2, #4
 80067c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2284      	movs	r2, #132	; 0x84
 80067ca:	589b      	ldr	r3, [r3, r2]
 80067cc:	2202      	movs	r2, #2
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2184      	movs	r1, #132	; 0x84
 80067d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067d6:	23a4      	movs	r3, #164	; 0xa4
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2208      	movs	r2, #8
 80067de:	4013      	ands	r3, r2
 80067e0:	d017      	beq.n	8006812 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067e2:	23a0      	movs	r3, #160	; 0xa0
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2220      	movs	r2, #32
 80067ea:	4013      	ands	r3, r2
 80067ec:	d105      	bne.n	80067fa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067ee:	239c      	movs	r3, #156	; 0x9c
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2201      	movs	r2, #1
 80067f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067f8:	d00b      	beq.n	8006812 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2208      	movs	r2, #8
 8006800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2284      	movs	r2, #132	; 0x84
 8006806:	589b      	ldr	r3, [r3, r2]
 8006808:	2208      	movs	r2, #8
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2184      	movs	r1, #132	; 0x84
 8006810:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006812:	23a4      	movs	r3, #164	; 0xa4
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	2380      	movs	r3, #128	; 0x80
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	4013      	ands	r3, r2
 800681e:	d013      	beq.n	8006848 <HAL_UART_IRQHandler+0x198>
 8006820:	23a0      	movs	r3, #160	; 0xa0
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	04db      	lsls	r3, r3, #19
 800682a:	4013      	ands	r3, r2
 800682c:	d00c      	beq.n	8006848 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2280      	movs	r2, #128	; 0x80
 8006834:	0112      	lsls	r2, r2, #4
 8006836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2284      	movs	r2, #132	; 0x84
 800683c:	589b      	ldr	r3, [r3, r2]
 800683e:	2220      	movs	r2, #32
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2184      	movs	r1, #132	; 0x84
 8006846:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2284      	movs	r2, #132	; 0x84
 800684c:	589b      	ldr	r3, [r3, r2]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d100      	bne.n	8006854 <HAL_UART_IRQHandler+0x1a4>
 8006852:	e1ff      	b.n	8006c54 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006854:	23a4      	movs	r3, #164	; 0xa4
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2220      	movs	r2, #32
 800685c:	4013      	ands	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006860:	23a0      	movs	r3, #160	; 0xa0
 8006862:	18fb      	adds	r3, r7, r3
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2220      	movs	r2, #32
 8006868:	4013      	ands	r3, r2
 800686a:	d008      	beq.n	800687e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006870:	2b00      	cmp	r3, #0
 8006872:	d004      	beq.n	800687e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	0010      	movs	r0, r2
 800687c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2284      	movs	r2, #132	; 0x84
 8006882:	589b      	ldr	r3, [r3, r2]
 8006884:	2194      	movs	r1, #148	; 0x94
 8006886:	187a      	adds	r2, r7, r1
 8006888:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2240      	movs	r2, #64	; 0x40
 8006892:	4013      	ands	r3, r2
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	d004      	beq.n	80068a2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006898:	187b      	adds	r3, r7, r1
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2228      	movs	r2, #40	; 0x28
 800689e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068a0:	d047      	beq.n	8006932 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0018      	movs	r0, r3
 80068a6:	f000 fe81 	bl	80075ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2240      	movs	r2, #64	; 0x40
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d137      	bne.n	8006928 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b8:	f3ef 8310 	mrs	r3, PRIMASK
 80068bc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80068be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c0:	2090      	movs	r0, #144	; 0x90
 80068c2:	183a      	adds	r2, r7, r0
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	2301      	movs	r3, #1
 80068c8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068cc:	f383 8810 	msr	PRIMASK, r3
}
 80068d0:	46c0      	nop			; (mov r8, r8)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2140      	movs	r1, #64	; 0x40
 80068de:	438a      	bics	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]
 80068e2:	183b      	adds	r3, r7, r0
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ea:	f383 8810 	msr	PRIMASK, r3
}
 80068ee:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d012      	beq.n	800691e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fc:	4a14      	ldr	r2, [pc, #80]	; (8006950 <HAL_UART_IRQHandler+0x2a0>)
 80068fe:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006904:	0018      	movs	r0, r3
 8006906:	f7fa fe8a 	bl	800161e <HAL_DMA_Abort_IT>
 800690a:	1e03      	subs	r3, r0, #0
 800690c:	d01a      	beq.n	8006944 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006918:	0018      	movs	r0, r3
 800691a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691c:	e012      	b.n	8006944 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	0018      	movs	r0, r3
 8006922:	f000 f9bd 	bl	8006ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006926:	e00d      	b.n	8006944 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	0018      	movs	r0, r3
 800692c:	f000 f9b8 	bl	8006ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	e008      	b.n	8006944 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 f9b3 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2284      	movs	r2, #132	; 0x84
 800693e:	2100      	movs	r1, #0
 8006940:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006942:	e187      	b.n	8006c54 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	46c0      	nop			; (mov r8, r8)
    return;
 8006946:	e185      	b.n	8006c54 <HAL_UART_IRQHandler+0x5a4>
 8006948:	0000080f 	.word	0x0000080f
 800694c:	04000120 	.word	0x04000120
 8006950:	08007867 	.word	0x08007867

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006958:	2b01      	cmp	r3, #1
 800695a:	d000      	beq.n	800695e <HAL_UART_IRQHandler+0x2ae>
 800695c:	e139      	b.n	8006bd2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800695e:	23a4      	movs	r3, #164	; 0xa4
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2210      	movs	r2, #16
 8006966:	4013      	ands	r3, r2
 8006968:	d100      	bne.n	800696c <HAL_UART_IRQHandler+0x2bc>
 800696a:	e132      	b.n	8006bd2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800696c:	23a0      	movs	r3, #160	; 0xa0
 800696e:	18fb      	adds	r3, r7, r3
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2210      	movs	r2, #16
 8006974:	4013      	ands	r3, r2
 8006976:	d100      	bne.n	800697a <HAL_UART_IRQHandler+0x2ca>
 8006978:	e12b      	b.n	8006bd2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2210      	movs	r2, #16
 8006980:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2240      	movs	r2, #64	; 0x40
 800698a:	4013      	ands	r3, r2
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	d000      	beq.n	8006992 <HAL_UART_IRQHandler+0x2e2>
 8006990:	e09f      	b.n	8006ad2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	217e      	movs	r1, #126	; 0x7e
 800699c:	187b      	adds	r3, r7, r1
 800699e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80069a0:	187b      	adds	r3, r7, r1
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d100      	bne.n	80069aa <HAL_UART_IRQHandler+0x2fa>
 80069a8:	e156      	b.n	8006c58 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2258      	movs	r2, #88	; 0x58
 80069ae:	5a9b      	ldrh	r3, [r3, r2]
 80069b0:	187a      	adds	r2, r7, r1
 80069b2:	8812      	ldrh	r2, [r2, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d300      	bcc.n	80069ba <HAL_UART_IRQHandler+0x30a>
 80069b8:	e14e      	b.n	8006c58 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	187a      	adds	r2, r7, r1
 80069be:	215a      	movs	r1, #90	; 0x5a
 80069c0:	8812      	ldrh	r2, [r2, #0]
 80069c2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d06f      	beq.n	8006aae <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ce:	f3ef 8310 	mrs	r3, PRIMASK
 80069d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80069d8:	2301      	movs	r3, #1
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069de:	f383 8810 	msr	PRIMASK, r3
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	499e      	ldr	r1, [pc, #632]	; (8006c68 <HAL_UART_IRQHandler+0x5b8>)
 80069f0:	400a      	ands	r2, r1
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	f383 8810 	msr	PRIMASK, r3
}
 80069fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a00:	f3ef 8310 	mrs	r3, PRIMASK
 8006a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a08:	677b      	str	r3, [r7, #116]	; 0x74
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a10:	f383 8810 	msr	PRIMASK, r3
}
 8006a14:	46c0      	nop			; (mov r8, r8)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2101      	movs	r1, #1
 8006a22:	438a      	bics	r2, r1
 8006a24:	609a      	str	r2, [r3, #8]
 8006a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a28:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2c:	f383 8810 	msr	PRIMASK, r3
}
 8006a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a32:	f3ef 8310 	mrs	r3, PRIMASK
 8006a36:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a3a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a42:	f383 8810 	msr	PRIMASK, r3
}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2140      	movs	r1, #64	; 0x40
 8006a54:	438a      	bics	r2, r1
 8006a56:	609a      	str	r2, [r3, #8]
 8006a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a5a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5e:	f383 8810 	msr	PRIMASK, r3
}
 8006a62:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2280      	movs	r2, #128	; 0x80
 8006a68:	2120      	movs	r1, #32
 8006a6a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a72:	f3ef 8310 	mrs	r3, PRIMASK
 8006a76:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a82:	f383 8810 	msr	PRIMASK, r3
}
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2110      	movs	r1, #16
 8006a94:	438a      	bics	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a9e:	f383 8810 	msr	PRIMASK, r3
}
 8006aa2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7fa fd80 	bl	80015ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2258      	movs	r2, #88	; 0x58
 8006ab8:	5a9a      	ldrh	r2, [r3, r2]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	215a      	movs	r1, #90	; 0x5a
 8006abe:	5a5b      	ldrh	r3, [r3, r1]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0011      	movs	r1, r2
 8006aca:	0018      	movs	r0, r3
 8006acc:	f000 f8f0 	bl	8006cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ad0:	e0c2      	b.n	8006c58 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2258      	movs	r2, #88	; 0x58
 8006ad6:	5a99      	ldrh	r1, [r3, r2]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	225a      	movs	r2, #90	; 0x5a
 8006adc:	5a9b      	ldrh	r3, [r3, r2]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	208e      	movs	r0, #142	; 0x8e
 8006ae2:	183b      	adds	r3, r7, r0
 8006ae4:	1a8a      	subs	r2, r1, r2
 8006ae6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	225a      	movs	r2, #90	; 0x5a
 8006aec:	5a9b      	ldrh	r3, [r3, r2]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d100      	bne.n	8006af6 <HAL_UART_IRQHandler+0x446>
 8006af4:	e0b2      	b.n	8006c5c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8006af6:	183b      	adds	r3, r7, r0
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d100      	bne.n	8006b00 <HAL_UART_IRQHandler+0x450>
 8006afe:	e0ad      	b.n	8006c5c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b00:	f3ef 8310 	mrs	r3, PRIMASK
 8006b04:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b06:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b08:	2488      	movs	r4, #136	; 0x88
 8006b0a:	193a      	adds	r2, r7, r4
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	2301      	movs	r3, #1
 8006b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f383 8810 	msr	PRIMASK, r3
}
 8006b18:	46c0      	nop			; (mov r8, r8)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4951      	ldr	r1, [pc, #324]	; (8006c6c <HAL_UART_IRQHandler+0x5bc>)
 8006b26:	400a      	ands	r2, r1
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	193b      	adds	r3, r7, r4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f383 8810 	msr	PRIMASK, r3
}
 8006b36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b38:	f3ef 8310 	mrs	r3, PRIMASK
 8006b3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b3e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b40:	2484      	movs	r4, #132	; 0x84
 8006b42:	193a      	adds	r2, r7, r4
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	2301      	movs	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f383 8810 	msr	PRIMASK, r3
}
 8006b50:	46c0      	nop			; (mov r8, r8)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	438a      	bics	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
 8006b62:	193b      	adds	r3, r7, r4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	f383 8810 	msr	PRIMASK, r3
}
 8006b6e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2280      	movs	r2, #128	; 0x80
 8006b74:	2120      	movs	r1, #32
 8006b76:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b84:	f3ef 8310 	mrs	r3, PRIMASK
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8c:	2480      	movs	r4, #128	; 0x80
 8006b8e:	193a      	adds	r2, r7, r4
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	2301      	movs	r3, #1
 8006b94:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	46c0      	nop			; (mov r8, r8)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2110      	movs	r1, #16
 8006baa:	438a      	bics	r2, r1
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	193b      	adds	r3, r7, r4
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	f383 8810 	msr	PRIMASK, r3
}
 8006bba:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bc2:	183b      	adds	r3, r7, r0
 8006bc4:	881a      	ldrh	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	0011      	movs	r1, r2
 8006bca:	0018      	movs	r0, r3
 8006bcc:	f000 f870 	bl	8006cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bd0:	e044      	b.n	8006c5c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bd2:	23a4      	movs	r3, #164	; 0xa4
 8006bd4:	18fb      	adds	r3, r7, r3
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	2380      	movs	r3, #128	; 0x80
 8006bda:	035b      	lsls	r3, r3, #13
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d010      	beq.n	8006c02 <HAL_UART_IRQHandler+0x552>
 8006be0:	239c      	movs	r3, #156	; 0x9c
 8006be2:	18fb      	adds	r3, r7, r3
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	2380      	movs	r3, #128	; 0x80
 8006be8:	03db      	lsls	r3, r3, #15
 8006bea:	4013      	ands	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2280      	movs	r2, #128	; 0x80
 8006bf4:	0352      	lsls	r2, r2, #13
 8006bf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f000 fe75 	bl	80078ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c00:	e02f      	b.n	8006c62 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c02:	23a4      	movs	r3, #164	; 0xa4
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2280      	movs	r2, #128	; 0x80
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c0e:	23a0      	movs	r3, #160	; 0xa0
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2280      	movs	r2, #128	; 0x80
 8006c16:	4013      	ands	r3, r2
 8006c18:	d009      	beq.n	8006c2e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01e      	beq.n	8006c60 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	0010      	movs	r0, r2
 8006c2a:	4798      	blx	r3
    }
    return;
 8006c2c:	e018      	b.n	8006c60 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c2e:	23a4      	movs	r3, #164	; 0xa4
 8006c30:	18fb      	adds	r3, r7, r3
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2240      	movs	r2, #64	; 0x40
 8006c36:	4013      	ands	r3, r2
 8006c38:	d013      	beq.n	8006c62 <HAL_UART_IRQHandler+0x5b2>
 8006c3a:	23a0      	movs	r3, #160	; 0xa0
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2240      	movs	r2, #64	; 0x40
 8006c42:	4013      	ands	r3, r2
 8006c44:	d00d      	beq.n	8006c62 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f000 fe23 	bl	8007894 <UART_EndTransmit_IT>
    return;
 8006c4e:	e008      	b.n	8006c62 <HAL_UART_IRQHandler+0x5b2>
      return;
 8006c50:	46c0      	nop			; (mov r8, r8)
 8006c52:	e006      	b.n	8006c62 <HAL_UART_IRQHandler+0x5b2>
    return;
 8006c54:	46c0      	nop			; (mov r8, r8)
 8006c56:	e004      	b.n	8006c62 <HAL_UART_IRQHandler+0x5b2>
      return;
 8006c58:	46c0      	nop			; (mov r8, r8)
 8006c5a:	e002      	b.n	8006c62 <HAL_UART_IRQHandler+0x5b2>
      return;
 8006c5c:	46c0      	nop			; (mov r8, r8)
 8006c5e:	e000      	b.n	8006c62 <HAL_UART_IRQHandler+0x5b2>
    return;
 8006c60:	46c0      	nop			; (mov r8, r8)
  }

}
 8006c62:	46bd      	mov	sp, r7
 8006c64:	b02b      	add	sp, #172	; 0xac
 8006c66:	bd90      	pop	{r4, r7, pc}
 8006c68:	fffffeff 	.word	0xfffffeff
 8006c6c:	fffffedf 	.word	0xfffffedf

08006c70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c78:	46c0      	nop			; (mov r8, r8)
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b002      	add	sp, #8
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006c88:	46c0      	nop			; (mov r8, r8)
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	b002      	add	sp, #8
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c98:	46c0      	nop			; (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b002      	add	sp, #8
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ca8:	46c0      	nop			; (mov r8, r8)
 8006caa:	46bd      	mov	sp, r7
 8006cac:	b002      	add	sp, #8
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	000a      	movs	r2, r1
 8006cba:	1cbb      	adds	r3, r7, #2
 8006cbc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b002      	add	sp, #8
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cd0:	231e      	movs	r3, #30
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4abe      	ldr	r2, [pc, #760]	; (8006ff0 <UART_SetConfig+0x328>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	0019      	movs	r1, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	4ab9      	ldr	r2, [pc, #740]	; (8006ff4 <UART_SetConfig+0x32c>)
 8006d0e:	4013      	ands	r3, r2
 8006d10:	0019      	movs	r1, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	4ab0      	ldr	r2, [pc, #704]	; (8006ff8 <UART_SetConfig+0x330>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	0019      	movs	r1, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4aac      	ldr	r2, [pc, #688]	; (8006ffc <UART_SetConfig+0x334>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d127      	bne.n	8006d9e <UART_SetConfig+0xd6>
 8006d4e:	4bac      	ldr	r3, [pc, #688]	; (8007000 <UART_SetConfig+0x338>)
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	2203      	movs	r2, #3
 8006d54:	4013      	ands	r3, r2
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d00d      	beq.n	8006d76 <UART_SetConfig+0xae>
 8006d5a:	d81b      	bhi.n	8006d94 <UART_SetConfig+0xcc>
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d014      	beq.n	8006d8a <UART_SetConfig+0xc2>
 8006d60:	d818      	bhi.n	8006d94 <UART_SetConfig+0xcc>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <UART_SetConfig+0xa4>
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d00a      	beq.n	8006d80 <UART_SetConfig+0xb8>
 8006d6a:	e013      	b.n	8006d94 <UART_SetConfig+0xcc>
 8006d6c:	231f      	movs	r3, #31
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	e0bd      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006d76:	231f      	movs	r3, #31
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e0b8      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006d80:	231f      	movs	r3, #31
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	2204      	movs	r2, #4
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	e0b3      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006d8a:	231f      	movs	r3, #31
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	2208      	movs	r2, #8
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	e0ae      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006d94:	231f      	movs	r3, #31
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	2210      	movs	r2, #16
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	e0a9      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a98      	ldr	r2, [pc, #608]	; (8007004 <UART_SetConfig+0x33c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d134      	bne.n	8006e12 <UART_SetConfig+0x14a>
 8006da8:	4b95      	ldr	r3, [pc, #596]	; (8007000 <UART_SetConfig+0x338>)
 8006daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dac:	23c0      	movs	r3, #192	; 0xc0
 8006dae:	029b      	lsls	r3, r3, #10
 8006db0:	4013      	ands	r3, r2
 8006db2:	22c0      	movs	r2, #192	; 0xc0
 8006db4:	0292      	lsls	r2, r2, #10
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <UART_SetConfig+0x122>
 8006dba:	22c0      	movs	r2, #192	; 0xc0
 8006dbc:	0292      	lsls	r2, r2, #10
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d822      	bhi.n	8006e08 <UART_SetConfig+0x140>
 8006dc2:	2280      	movs	r2, #128	; 0x80
 8006dc4:	0292      	lsls	r2, r2, #10
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d019      	beq.n	8006dfe <UART_SetConfig+0x136>
 8006dca:	2280      	movs	r2, #128	; 0x80
 8006dcc:	0292      	lsls	r2, r2, #10
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d81a      	bhi.n	8006e08 <UART_SetConfig+0x140>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <UART_SetConfig+0x118>
 8006dd6:	2280      	movs	r2, #128	; 0x80
 8006dd8:	0252      	lsls	r2, r2, #9
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00a      	beq.n	8006df4 <UART_SetConfig+0x12c>
 8006dde:	e013      	b.n	8006e08 <UART_SetConfig+0x140>
 8006de0:	231f      	movs	r3, #31
 8006de2:	18fb      	adds	r3, r7, r3
 8006de4:	2200      	movs	r2, #0
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	e083      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006dea:	231f      	movs	r3, #31
 8006dec:	18fb      	adds	r3, r7, r3
 8006dee:	2202      	movs	r2, #2
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	e07e      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006df4:	231f      	movs	r3, #31
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	2204      	movs	r2, #4
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	e079      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006dfe:	231f      	movs	r3, #31
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	2208      	movs	r2, #8
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	e074      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006e08:	231f      	movs	r3, #31
 8006e0a:	18fb      	adds	r3, r7, r3
 8006e0c:	2210      	movs	r2, #16
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	e06f      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a7c      	ldr	r2, [pc, #496]	; (8007008 <UART_SetConfig+0x340>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d134      	bne.n	8006e86 <UART_SetConfig+0x1be>
 8006e1c:	4b78      	ldr	r3, [pc, #480]	; (8007000 <UART_SetConfig+0x338>)
 8006e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e20:	23c0      	movs	r3, #192	; 0xc0
 8006e22:	031b      	lsls	r3, r3, #12
 8006e24:	4013      	ands	r3, r2
 8006e26:	22c0      	movs	r2, #192	; 0xc0
 8006e28:	0312      	lsls	r2, r2, #12
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d017      	beq.n	8006e5e <UART_SetConfig+0x196>
 8006e2e:	22c0      	movs	r2, #192	; 0xc0
 8006e30:	0312      	lsls	r2, r2, #12
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d822      	bhi.n	8006e7c <UART_SetConfig+0x1b4>
 8006e36:	2280      	movs	r2, #128	; 0x80
 8006e38:	0312      	lsls	r2, r2, #12
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d019      	beq.n	8006e72 <UART_SetConfig+0x1aa>
 8006e3e:	2280      	movs	r2, #128	; 0x80
 8006e40:	0312      	lsls	r2, r2, #12
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d81a      	bhi.n	8006e7c <UART_SetConfig+0x1b4>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <UART_SetConfig+0x18c>
 8006e4a:	2280      	movs	r2, #128	; 0x80
 8006e4c:	02d2      	lsls	r2, r2, #11
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00a      	beq.n	8006e68 <UART_SetConfig+0x1a0>
 8006e52:	e013      	b.n	8006e7c <UART_SetConfig+0x1b4>
 8006e54:	231f      	movs	r3, #31
 8006e56:	18fb      	adds	r3, r7, r3
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e049      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006e5e:	231f      	movs	r3, #31
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	2202      	movs	r2, #2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e044      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006e68:	231f      	movs	r3, #31
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e03f      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006e72:	231f      	movs	r3, #31
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	2208      	movs	r2, #8
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e03a      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006e7c:	231f      	movs	r3, #31
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	2210      	movs	r2, #16
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	e035      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a60      	ldr	r2, [pc, #384]	; (800700c <UART_SetConfig+0x344>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d104      	bne.n	8006e9a <UART_SetConfig+0x1d2>
 8006e90:	231f      	movs	r3, #31
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e02b      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a5c      	ldr	r2, [pc, #368]	; (8007010 <UART_SetConfig+0x348>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d104      	bne.n	8006eae <UART_SetConfig+0x1e6>
 8006ea4:	231f      	movs	r3, #31
 8006ea6:	18fb      	adds	r3, r7, r3
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e021      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a58      	ldr	r2, [pc, #352]	; (8007014 <UART_SetConfig+0x34c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d104      	bne.n	8006ec2 <UART_SetConfig+0x1fa>
 8006eb8:	231f      	movs	r3, #31
 8006eba:	18fb      	adds	r3, r7, r3
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e017      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a54      	ldr	r2, [pc, #336]	; (8007018 <UART_SetConfig+0x350>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d104      	bne.n	8006ed6 <UART_SetConfig+0x20e>
 8006ecc:	231f      	movs	r3, #31
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	e00d      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a50      	ldr	r2, [pc, #320]	; (800701c <UART_SetConfig+0x354>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d104      	bne.n	8006eea <UART_SetConfig+0x222>
 8006ee0:	231f      	movs	r3, #31
 8006ee2:	18fb      	adds	r3, r7, r3
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e003      	b.n	8006ef2 <UART_SetConfig+0x22a>
 8006eea:	231f      	movs	r3, #31
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	2210      	movs	r2, #16
 8006ef0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69da      	ldr	r2, [r3, #28]
 8006ef6:	2380      	movs	r3, #128	; 0x80
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d15c      	bne.n	8006fb8 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8006efe:	231f      	movs	r3, #31
 8006f00:	18fb      	adds	r3, r7, r3
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d015      	beq.n	8006f34 <UART_SetConfig+0x26c>
 8006f08:	dc18      	bgt.n	8006f3c <UART_SetConfig+0x274>
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d00d      	beq.n	8006f2a <UART_SetConfig+0x262>
 8006f0e:	dc15      	bgt.n	8006f3c <UART_SetConfig+0x274>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <UART_SetConfig+0x252>
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d005      	beq.n	8006f24 <UART_SetConfig+0x25c>
 8006f18:	e010      	b.n	8006f3c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1a:	f7fe f92d 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8006f1e:	0003      	movs	r3, r0
 8006f20:	61bb      	str	r3, [r7, #24]
        break;
 8006f22:	e012      	b.n	8006f4a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f24:	4b3e      	ldr	r3, [pc, #248]	; (8007020 <UART_SetConfig+0x358>)
 8006f26:	61bb      	str	r3, [r7, #24]
        break;
 8006f28:	e00f      	b.n	8006f4a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2a:	f7fe f8a9 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 8006f2e:	0003      	movs	r3, r0
 8006f30:	61bb      	str	r3, [r7, #24]
        break;
 8006f32:	e00a      	b.n	8006f4a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f34:	2380      	movs	r3, #128	; 0x80
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	61bb      	str	r3, [r7, #24]
        break;
 8006f3a:	e006      	b.n	8006f4a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f40:	231e      	movs	r3, #30
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
        break;
 8006f48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d100      	bne.n	8006f52 <UART_SetConfig+0x28a>
 8006f50:	e095      	b.n	800707e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	005a      	lsls	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	18d2      	adds	r2, r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	0019      	movs	r1, r3
 8006f64:	0010      	movs	r0, r2
 8006f66:	f7f9 f8cd 	bl	8000104 <__udivsi3>
 8006f6a:	0003      	movs	r3, r0
 8006f6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b0f      	cmp	r3, #15
 8006f72:	d91c      	bls.n	8006fae <UART_SetConfig+0x2e6>
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	2380      	movs	r3, #128	; 0x80
 8006f78:	025b      	lsls	r3, r3, #9
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d217      	bcs.n	8006fae <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	200e      	movs	r0, #14
 8006f84:	183b      	adds	r3, r7, r0
 8006f86:	210f      	movs	r1, #15
 8006f88:	438a      	bics	r2, r1
 8006f8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2207      	movs	r2, #7
 8006f94:	4013      	ands	r3, r2
 8006f96:	b299      	uxth	r1, r3
 8006f98:	183b      	adds	r3, r7, r0
 8006f9a:	183a      	adds	r2, r7, r0
 8006f9c:	8812      	ldrh	r2, [r2, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	183a      	adds	r2, r7, r0
 8006fa8:	8812      	ldrh	r2, [r2, #0]
 8006faa:	60da      	str	r2, [r3, #12]
 8006fac:	e067      	b.n	800707e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006fae:	231e      	movs	r3, #30
 8006fb0:	18fb      	adds	r3, r7, r3
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	e062      	b.n	800707e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fb8:	231f      	movs	r3, #31
 8006fba:	18fb      	adds	r3, r7, r3
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	d030      	beq.n	8007024 <UART_SetConfig+0x35c>
 8006fc2:	dc33      	bgt.n	800702c <UART_SetConfig+0x364>
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d00d      	beq.n	8006fe4 <UART_SetConfig+0x31c>
 8006fc8:	dc30      	bgt.n	800702c <UART_SetConfig+0x364>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <UART_SetConfig+0x30c>
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d005      	beq.n	8006fde <UART_SetConfig+0x316>
 8006fd2:	e02b      	b.n	800702c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd4:	f7fe f8d0 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8006fd8:	0003      	movs	r3, r0
 8006fda:	61bb      	str	r3, [r7, #24]
        break;
 8006fdc:	e02d      	b.n	800703a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fde:	4b10      	ldr	r3, [pc, #64]	; (8007020 <UART_SetConfig+0x358>)
 8006fe0:	61bb      	str	r3, [r7, #24]
        break;
 8006fe2:	e02a      	b.n	800703a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe4:	f7fe f84c 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	61bb      	str	r3, [r7, #24]
        break;
 8006fec:	e025      	b.n	800703a <UART_SetConfig+0x372>
 8006fee:	46c0      	nop			; (mov r8, r8)
 8006ff0:	efff69f3 	.word	0xefff69f3
 8006ff4:	ffffcfff 	.word	0xffffcfff
 8006ff8:	fffff4ff 	.word	0xfffff4ff
 8006ffc:	40013800 	.word	0x40013800
 8007000:	40021000 	.word	0x40021000
 8007004:	40004400 	.word	0x40004400
 8007008:	40004800 	.word	0x40004800
 800700c:	40004c00 	.word	0x40004c00
 8007010:	40005000 	.word	0x40005000
 8007014:	40011400 	.word	0x40011400
 8007018:	40011800 	.word	0x40011800
 800701c:	40011c00 	.word	0x40011c00
 8007020:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	61bb      	str	r3, [r7, #24]
        break;
 800702a:	e006      	b.n	800703a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007030:	231e      	movs	r3, #30
 8007032:	18fb      	adds	r3, r7, r3
 8007034:	2201      	movs	r2, #1
 8007036:	701a      	strb	r2, [r3, #0]
        break;
 8007038:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01e      	beq.n	800707e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	085a      	lsrs	r2, r3, #1
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	18d2      	adds	r2, r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	0019      	movs	r1, r3
 8007050:	0010      	movs	r0, r2
 8007052:	f7f9 f857 	bl	8000104 <__udivsi3>
 8007056:	0003      	movs	r3, r0
 8007058:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b0f      	cmp	r3, #15
 800705e:	d90a      	bls.n	8007076 <UART_SetConfig+0x3ae>
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	2380      	movs	r3, #128	; 0x80
 8007064:	025b      	lsls	r3, r3, #9
 8007066:	429a      	cmp	r2, r3
 8007068:	d205      	bcs.n	8007076 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60da      	str	r2, [r3, #12]
 8007074:	e003      	b.n	800707e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007076:	231e      	movs	r3, #30
 8007078:	18fb      	adds	r3, r7, r3
 800707a:	2201      	movs	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800708a:	231e      	movs	r3, #30
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	781b      	ldrb	r3, [r3, #0]
}
 8007090:	0018      	movs	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	b008      	add	sp, #32
 8007096:	bd80      	pop	{r7, pc}

08007098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	2201      	movs	r2, #1
 80070a6:	4013      	ands	r3, r2
 80070a8:	d00b      	beq.n	80070c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	4a4a      	ldr	r2, [pc, #296]	; (80071dc <UART_AdvFeatureConfig+0x144>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	0019      	movs	r1, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	2202      	movs	r2, #2
 80070c8:	4013      	ands	r3, r2
 80070ca:	d00b      	beq.n	80070e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	4a43      	ldr	r2, [pc, #268]	; (80071e0 <UART_AdvFeatureConfig+0x148>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	0019      	movs	r1, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2204      	movs	r2, #4
 80070ea:	4013      	ands	r3, r2
 80070ec:	d00b      	beq.n	8007106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	4a3b      	ldr	r2, [pc, #236]	; (80071e4 <UART_AdvFeatureConfig+0x14c>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	0019      	movs	r1, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2208      	movs	r2, #8
 800710c:	4013      	ands	r3, r2
 800710e:	d00b      	beq.n	8007128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	4a34      	ldr	r2, [pc, #208]	; (80071e8 <UART_AdvFeatureConfig+0x150>)
 8007118:	4013      	ands	r3, r2
 800711a:	0019      	movs	r1, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2210      	movs	r2, #16
 800712e:	4013      	ands	r3, r2
 8007130:	d00b      	beq.n	800714a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	4a2c      	ldr	r2, [pc, #176]	; (80071ec <UART_AdvFeatureConfig+0x154>)
 800713a:	4013      	ands	r3, r2
 800713c:	0019      	movs	r1, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	2220      	movs	r2, #32
 8007150:	4013      	ands	r3, r2
 8007152:	d00b      	beq.n	800716c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	4a25      	ldr	r2, [pc, #148]	; (80071f0 <UART_AdvFeatureConfig+0x158>)
 800715c:	4013      	ands	r3, r2
 800715e:	0019      	movs	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	2240      	movs	r2, #64	; 0x40
 8007172:	4013      	ands	r3, r2
 8007174:	d01d      	beq.n	80071b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <UART_AdvFeatureConfig+0x15c>)
 800717e:	4013      	ands	r3, r2
 8007180:	0019      	movs	r1, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007192:	2380      	movs	r3, #128	; 0x80
 8007194:	035b      	lsls	r3, r3, #13
 8007196:	429a      	cmp	r2, r3
 8007198:	d10b      	bne.n	80071b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a15      	ldr	r2, [pc, #84]	; (80071f8 <UART_AdvFeatureConfig+0x160>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	0019      	movs	r1, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2280      	movs	r2, #128	; 0x80
 80071b8:	4013      	ands	r3, r2
 80071ba:	d00b      	beq.n	80071d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	4a0e      	ldr	r2, [pc, #56]	; (80071fc <UART_AdvFeatureConfig+0x164>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	0019      	movs	r1, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }
}
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b002      	add	sp, #8
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	fffdffff 	.word	0xfffdffff
 80071e0:	fffeffff 	.word	0xfffeffff
 80071e4:	fffbffff 	.word	0xfffbffff
 80071e8:	ffff7fff 	.word	0xffff7fff
 80071ec:	ffffefff 	.word	0xffffefff
 80071f0:	ffffdfff 	.word	0xffffdfff
 80071f4:	ffefffff 	.word	0xffefffff
 80071f8:	ff9fffff 	.word	0xff9fffff
 80071fc:	fff7ffff 	.word	0xfff7ffff

08007200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b092      	sub	sp, #72	; 0x48
 8007204:	af02      	add	r7, sp, #8
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2284      	movs	r2, #132	; 0x84
 800720c:	2100      	movs	r1, #0
 800720e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007210:	f7f9 ffbc 	bl	800118c <HAL_GetTick>
 8007214:	0003      	movs	r3, r0
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2208      	movs	r2, #8
 8007220:	4013      	ands	r3, r2
 8007222:	2b08      	cmp	r3, #8
 8007224:	d12c      	bne.n	8007280 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007228:	2280      	movs	r2, #128	; 0x80
 800722a:	0391      	lsls	r1, r2, #14
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4a46      	ldr	r2, [pc, #280]	; (8007348 <UART_CheckIdleState+0x148>)
 8007230:	9200      	str	r2, [sp, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	f000 f88c 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 8007238:	1e03      	subs	r3, r0, #0
 800723a:	d021      	beq.n	8007280 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800723c:	f3ef 8310 	mrs	r3, PRIMASK
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007244:	63bb      	str	r3, [r7, #56]	; 0x38
 8007246:	2301      	movs	r3, #1
 8007248:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	f383 8810 	msr	PRIMASK, r3
}
 8007250:	46c0      	nop			; (mov r8, r8)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2180      	movs	r1, #128	; 0x80
 800725e:	438a      	bics	r2, r1
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	f383 8810 	msr	PRIMASK, r3
}
 800726c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2278      	movs	r2, #120	; 0x78
 8007278:	2100      	movs	r1, #0
 800727a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e05f      	b.n	8007340 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2204      	movs	r2, #4
 8007288:	4013      	ands	r3, r2
 800728a:	2b04      	cmp	r3, #4
 800728c:	d146      	bne.n	800731c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007290:	2280      	movs	r2, #128	; 0x80
 8007292:	03d1      	lsls	r1, r2, #15
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4a2c      	ldr	r2, [pc, #176]	; (8007348 <UART_CheckIdleState+0x148>)
 8007298:	9200      	str	r2, [sp, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	f000 f858 	bl	8007350 <UART_WaitOnFlagUntilTimeout>
 80072a0:	1e03      	subs	r3, r0, #0
 80072a2:	d03b      	beq.n	800731c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072a4:	f3ef 8310 	mrs	r3, PRIMASK
 80072a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80072aa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
 80072ae:	2301      	movs	r3, #1
 80072b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f383 8810 	msr	PRIMASK, r3
}
 80072b8:	46c0      	nop			; (mov r8, r8)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4921      	ldr	r1, [pc, #132]	; (800734c <UART_CheckIdleState+0x14c>)
 80072c6:	400a      	ands	r2, r1
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f383 8810 	msr	PRIMASK, r3
}
 80072d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d6:	f3ef 8310 	mrs	r3, PRIMASK
 80072da:	61bb      	str	r3, [r7, #24]
  return(result);
 80072dc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072de:	633b      	str	r3, [r7, #48]	; 0x30
 80072e0:	2301      	movs	r3, #1
 80072e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f383 8810 	msr	PRIMASK, r3
}
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2101      	movs	r1, #1
 80072f8:	438a      	bics	r2, r1
 80072fa:	609a      	str	r2, [r3, #8]
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	f383 8810 	msr	PRIMASK, r3
}
 8007306:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2280      	movs	r2, #128	; 0x80
 800730c:	2120      	movs	r1, #32
 800730e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2278      	movs	r2, #120	; 0x78
 8007314:	2100      	movs	r1, #0
 8007316:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e011      	b.n	8007340 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2220      	movs	r2, #32
 8007320:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2280      	movs	r2, #128	; 0x80
 8007326:	2120      	movs	r1, #32
 8007328:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2278      	movs	r2, #120	; 0x78
 800733a:	2100      	movs	r1, #0
 800733c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	0018      	movs	r0, r3
 8007342:	46bd      	mov	sp, r7
 8007344:	b010      	add	sp, #64	; 0x40
 8007346:	bd80      	pop	{r7, pc}
 8007348:	01ffffff 	.word	0x01ffffff
 800734c:	fffffedf 	.word	0xfffffedf

08007350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	1dfb      	adds	r3, r7, #7
 800735e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007360:	e04b      	b.n	80073fa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	3301      	adds	r3, #1
 8007366:	d048      	beq.n	80073fa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007368:	f7f9 ff10 	bl	800118c <HAL_GetTick>
 800736c:	0002      	movs	r2, r0
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	429a      	cmp	r2, r3
 8007376:	d302      	bcc.n	800737e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e04b      	b.n	800741a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2204      	movs	r2, #4
 800738a:	4013      	ands	r3, r2
 800738c:	d035      	beq.n	80073fa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	2208      	movs	r2, #8
 8007396:	4013      	ands	r3, r2
 8007398:	2b08      	cmp	r3, #8
 800739a:	d111      	bne.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2208      	movs	r2, #8
 80073a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	0018      	movs	r0, r3
 80073a8:	f000 f900 	bl	80075ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2284      	movs	r2, #132	; 0x84
 80073b0:	2108      	movs	r1, #8
 80073b2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2278      	movs	r2, #120	; 0x78
 80073b8:	2100      	movs	r1, #0
 80073ba:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e02c      	b.n	800741a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69da      	ldr	r2, [r3, #28]
 80073c6:	2380      	movs	r3, #128	; 0x80
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	401a      	ands	r2, r3
 80073cc:	2380      	movs	r3, #128	; 0x80
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d112      	bne.n	80073fa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2280      	movs	r2, #128	; 0x80
 80073da:	0112      	lsls	r2, r2, #4
 80073dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	0018      	movs	r0, r3
 80073e2:	f000 f8e3 	bl	80075ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2284      	movs	r2, #132	; 0x84
 80073ea:	2120      	movs	r1, #32
 80073ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2278      	movs	r2, #120	; 0x78
 80073f2:	2100      	movs	r1, #0
 80073f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e00f      	b.n	800741a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	4013      	ands	r3, r2
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	425a      	negs	r2, r3
 800740a:	4153      	adcs	r3, r2
 800740c:	b2db      	uxtb	r3, r3
 800740e:	001a      	movs	r2, r3
 8007410:	1dfb      	adds	r3, r7, #7
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d0a4      	beq.n	8007362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	0018      	movs	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	b004      	add	sp, #16
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b090      	sub	sp, #64	; 0x40
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	1dbb      	adds	r3, r7, #6
 8007430:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	1dba      	adds	r2, r7, #6
 800743c:	2158      	movs	r1, #88	; 0x58
 800743e:	8812      	ldrh	r2, [r2, #0]
 8007440:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2284      	movs	r2, #132	; 0x84
 8007446:	2100      	movs	r1, #0
 8007448:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2280      	movs	r2, #128	; 0x80
 800744e:	2122      	movs	r1, #34	; 0x22
 8007450:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007456:	2b00      	cmp	r3, #0
 8007458:	d028      	beq.n	80074ac <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745e:	4a3e      	ldr	r2, [pc, #248]	; (8007558 <UART_Start_Receive_DMA+0x134>)
 8007460:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007466:	4a3d      	ldr	r2, [pc, #244]	; (800755c <UART_Start_Receive_DMA+0x138>)
 8007468:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746e:	4a3c      	ldr	r2, [pc, #240]	; (8007560 <UART_Start_Receive_DMA+0x13c>)
 8007470:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007476:	2200      	movs	r2, #0
 8007478:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3324      	adds	r3, #36	; 0x24
 8007484:	0019      	movs	r1, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	001a      	movs	r2, r3
 800748c:	1dbb      	adds	r3, r7, #6
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	f7fa f827 	bl	80014e2 <HAL_DMA_Start_IT>
 8007494:	1e03      	subs	r3, r0, #0
 8007496:	d009      	beq.n	80074ac <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2284      	movs	r2, #132	; 0x84
 800749c:	2110      	movs	r1, #16
 800749e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2280      	movs	r2, #128	; 0x80
 80074a4:	2120      	movs	r1, #32
 80074a6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e050      	b.n	800754e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d019      	beq.n	80074e8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b4:	f3ef 8310 	mrs	r3, PRIMASK
 80074b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074be:	2301      	movs	r3, #1
 80074c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	f383 8810 	msr	PRIMASK, r3
}
 80074c8:	46c0      	nop			; (mov r8, r8)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2180      	movs	r1, #128	; 0x80
 80074d6:	0049      	lsls	r1, r1, #1
 80074d8:	430a      	orrs	r2, r1
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074de:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	f383 8810 	msr	PRIMASK, r3
}
 80074e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e8:	f3ef 8310 	mrs	r3, PRIMASK
 80074ec:	613b      	str	r3, [r7, #16]
  return(result);
 80074ee:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f383 8810 	msr	PRIMASK, r3
}
 80074fc:	46c0      	nop			; (mov r8, r8)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2101      	movs	r1, #1
 800750a:	430a      	orrs	r2, r1
 800750c:	609a      	str	r2, [r3, #8]
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	f383 8810 	msr	PRIMASK, r3
}
 8007518:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751a:	f3ef 8310 	mrs	r3, PRIMASK
 800751e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007520:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
 8007524:	2301      	movs	r3, #1
 8007526:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	f383 8810 	msr	PRIMASK, r3
}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2140      	movs	r1, #64	; 0x40
 800753c:	430a      	orrs	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
 8007540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	f383 8810 	msr	PRIMASK, r3
}
 800754a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	0018      	movs	r0, r3
 8007550:	46bd      	mov	sp, r7
 8007552:	b010      	add	sp, #64	; 0x40
 8007554:	bd80      	pop	{r7, pc}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	08007675 	.word	0x08007675
 800755c:	080077a1 	.word	0x080077a1
 8007560:	080077e3 	.word	0x080077e3

08007564 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800756c:	f3ef 8310 	mrs	r3, PRIMASK
 8007570:	60bb      	str	r3, [r7, #8]
  return(result);
 8007572:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007574:	617b      	str	r3, [r7, #20]
 8007576:	2301      	movs	r3, #1
 8007578:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f383 8810 	msr	PRIMASK, r3
}
 8007580:	46c0      	nop			; (mov r8, r8)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	21c0      	movs	r1, #192	; 0xc0
 800758e:	438a      	bics	r2, r1
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f383 8810 	msr	PRIMASK, r3
}
 800759c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80075a4:	46c0      	nop			; (mov r8, r8)
 80075a6:	46bd      	mov	sp, r7
 80075a8:	b006      	add	sp, #24
 80075aa:	bd80      	pop	{r7, pc}

080075ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08e      	sub	sp, #56	; 0x38
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b4:	f3ef 8310 	mrs	r3, PRIMASK
 80075b8:	617b      	str	r3, [r7, #20]
  return(result);
 80075ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
 80075be:	2301      	movs	r3, #1
 80075c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	f383 8810 	msr	PRIMASK, r3
}
 80075c8:	46c0      	nop			; (mov r8, r8)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4926      	ldr	r1, [pc, #152]	; (8007670 <UART_EndRxTransfer+0xc4>)
 80075d6:	400a      	ands	r2, r1
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f383 8810 	msr	PRIMASK, r3
}
 80075e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ea:	623b      	str	r3, [r7, #32]
  return(result);
 80075ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ee:	633b      	str	r3, [r7, #48]	; 0x30
 80075f0:	2301      	movs	r3, #1
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	f383 8810 	msr	PRIMASK, r3
}
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2101      	movs	r1, #1
 8007608:	438a      	bics	r2, r1
 800760a:	609a      	str	r2, [r3, #8]
 800760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	f383 8810 	msr	PRIMASK, r3
}
 8007616:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800761c:	2b01      	cmp	r3, #1
 800761e:	d118      	bne.n	8007652 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007620:	f3ef 8310 	mrs	r3, PRIMASK
 8007624:	60bb      	str	r3, [r7, #8]
  return(result);
 8007626:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800762a:	2301      	movs	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f383 8810 	msr	PRIMASK, r3
}
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2110      	movs	r1, #16
 8007642:	438a      	bics	r2, r1
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f383 8810 	msr	PRIMASK, r3
}
 8007650:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2280      	movs	r2, #128	; 0x80
 8007656:	2120      	movs	r1, #32
 8007658:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	46bd      	mov	sp, r7
 800766a:	b00e      	add	sp, #56	; 0x38
 800766c:	bd80      	pop	{r7, pc}
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	fffffedf 	.word	0xfffffedf

08007674 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b094      	sub	sp, #80	; 0x50
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	2b20      	cmp	r3, #32
 8007688:	d06f      	beq.n	800776a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800768a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768c:	225a      	movs	r2, #90	; 0x5a
 800768e:	2100      	movs	r1, #0
 8007690:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007692:	f3ef 8310 	mrs	r3, PRIMASK
 8007696:	61bb      	str	r3, [r7, #24]
  return(result);
 8007698:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800769a:	64bb      	str	r3, [r7, #72]	; 0x48
 800769c:	2301      	movs	r3, #1
 800769e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f383 8810 	msr	PRIMASK, r3
}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	493a      	ldr	r1, [pc, #232]	; (800779c <UART_DMAReceiveCplt+0x128>)
 80076b4:	400a      	ands	r2, r1
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	f383 8810 	msr	PRIMASK, r3
}
 80076c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c4:	f3ef 8310 	mrs	r3, PRIMASK
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076cc:	647b      	str	r3, [r7, #68]	; 0x44
 80076ce:	2301      	movs	r3, #1
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	f383 8810 	msr	PRIMASK, r3
}
 80076d8:	46c0      	nop			; (mov r8, r8)
 80076da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2101      	movs	r1, #1
 80076e6:	438a      	bics	r2, r1
 80076e8:	609a      	str	r2, [r3, #8]
 80076ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	f383 8810 	msr	PRIMASK, r3
}
 80076f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f6:	f3ef 8310 	mrs	r3, PRIMASK
 80076fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007700:	2301      	movs	r3, #1
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	f383 8810 	msr	PRIMASK, r3
}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2140      	movs	r1, #64	; 0x40
 8007718:	438a      	bics	r2, r1
 800771a:	609a      	str	r2, [r3, #8]
 800771c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800771e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	f383 8810 	msr	PRIMASK, r3
}
 8007726:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772a:	2280      	movs	r2, #128	; 0x80
 800772c:	2120      	movs	r1, #32
 800772e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007734:	2b01      	cmp	r3, #1
 8007736:	d118      	bne.n	800776a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007738:	f3ef 8310 	mrs	r3, PRIMASK
 800773c:	60fb      	str	r3, [r7, #12]
  return(result);
 800773e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007742:	2301      	movs	r3, #1
 8007744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f383 8810 	msr	PRIMASK, r3
}
 800774c:	46c0      	nop			; (mov r8, r8)
 800774e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2110      	movs	r1, #16
 800775a:	438a      	bics	r2, r1
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007760:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f383 8810 	msr	PRIMASK, r3
}
 8007768:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800776a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776c:	2200      	movs	r2, #0
 800776e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007774:	2b01      	cmp	r3, #1
 8007776:	d108      	bne.n	800778a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800777a:	2258      	movs	r2, #88	; 0x58
 800777c:	5a9a      	ldrh	r2, [r3, r2]
 800777e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007780:	0011      	movs	r1, r2
 8007782:	0018      	movs	r0, r3
 8007784:	f7ff fa94 	bl	8006cb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007788:	e003      	b.n	8007792 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800778a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778c:	0018      	movs	r0, r3
 800778e:	f7ff fa77 	bl	8006c80 <HAL_UART_RxCpltCallback>
}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	46bd      	mov	sp, r7
 8007796:	b014      	add	sp, #80	; 0x50
 8007798:	bd80      	pop	{r7, pc}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	fffffeff 	.word	0xfffffeff

080077a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d10a      	bne.n	80077d2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2258      	movs	r2, #88	; 0x58
 80077c0:	5a9b      	ldrh	r3, [r3, r2]
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	0011      	movs	r1, r2
 80077ca:	0018      	movs	r0, r3
 80077cc:	f7ff fa70 	bl	8006cb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077d0:	e003      	b.n	80077da <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7ff fa5b 	bl	8006c90 <HAL_UART_RxHalfCpltCallback>
}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	46bd      	mov	sp, r7
 80077de:	b004      	add	sp, #16
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b086      	sub	sp, #24
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2280      	movs	r2, #128	; 0x80
 80077fa:	589b      	ldr	r3, [r3, r2]
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2280      	movs	r2, #128	; 0x80
 8007806:	4013      	ands	r3, r2
 8007808:	2b80      	cmp	r3, #128	; 0x80
 800780a:	d10a      	bne.n	8007822 <UART_DMAError+0x40>
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	2b21      	cmp	r3, #33	; 0x21
 8007810:	d107      	bne.n	8007822 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2252      	movs	r2, #82	; 0x52
 8007816:	2100      	movs	r1, #0
 8007818:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	0018      	movs	r0, r3
 800781e:	f7ff fea1 	bl	8007564 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2240      	movs	r2, #64	; 0x40
 800782a:	4013      	ands	r3, r2
 800782c:	2b40      	cmp	r3, #64	; 0x40
 800782e:	d10a      	bne.n	8007846 <UART_DMAError+0x64>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b22      	cmp	r3, #34	; 0x22
 8007834:	d107      	bne.n	8007846 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	225a      	movs	r2, #90	; 0x5a
 800783a:	2100      	movs	r1, #0
 800783c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	0018      	movs	r0, r3
 8007842:	f7ff feb3 	bl	80075ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2284      	movs	r2, #132	; 0x84
 800784a:	589b      	ldr	r3, [r3, r2]
 800784c:	2210      	movs	r2, #16
 800784e:	431a      	orrs	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2184      	movs	r1, #132	; 0x84
 8007854:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	0018      	movs	r0, r3
 800785a:	f7ff fa21 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	46bd      	mov	sp, r7
 8007862:	b006      	add	sp, #24
 8007864:	bd80      	pop	{r7, pc}

08007866 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	225a      	movs	r2, #90	; 0x5a
 8007878:	2100      	movs	r1, #0
 800787a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2252      	movs	r2, #82	; 0x52
 8007880:	2100      	movs	r1, #0
 8007882:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	0018      	movs	r0, r3
 8007888:	f7ff fa0a 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800788c:	46c0      	nop			; (mov r8, r8)
 800788e:	46bd      	mov	sp, r7
 8007890:	b004      	add	sp, #16
 8007892:	bd80      	pop	{r7, pc}

08007894 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800789c:	f3ef 8310 	mrs	r3, PRIMASK
 80078a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80078a2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	2301      	movs	r3, #1
 80078a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f383 8810 	msr	PRIMASK, r3
}
 80078b0:	46c0      	nop			; (mov r8, r8)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2140      	movs	r1, #64	; 0x40
 80078be:	438a      	bics	r2, r1
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f383 8810 	msr	PRIMASK, r3
}
 80078cc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	0018      	movs	r0, r3
 80078de:	f7ff f9c7 	bl	8006c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	46bd      	mov	sp, r7
 80078e6:	b006      	add	sp, #24
 80078e8:	bd80      	pop	{r7, pc}

080078ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	46bd      	mov	sp, r7
 80078f6:	b002      	add	sp, #8
 80078f8:	bd80      	pop	{r7, pc}

080078fa <memset>:
 80078fa:	0003      	movs	r3, r0
 80078fc:	1882      	adds	r2, r0, r2
 80078fe:	4293      	cmp	r3, r2
 8007900:	d100      	bne.n	8007904 <memset+0xa>
 8007902:	4770      	bx	lr
 8007904:	7019      	strb	r1, [r3, #0]
 8007906:	3301      	adds	r3, #1
 8007908:	e7f9      	b.n	80078fe <memset+0x4>
	...

0800790c <__libc_init_array>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	2600      	movs	r6, #0
 8007910:	4c0c      	ldr	r4, [pc, #48]	; (8007944 <__libc_init_array+0x38>)
 8007912:	4d0d      	ldr	r5, [pc, #52]	; (8007948 <__libc_init_array+0x3c>)
 8007914:	1b64      	subs	r4, r4, r5
 8007916:	10a4      	asrs	r4, r4, #2
 8007918:	42a6      	cmp	r6, r4
 800791a:	d109      	bne.n	8007930 <__libc_init_array+0x24>
 800791c:	2600      	movs	r6, #0
 800791e:	f000 f819 	bl	8007954 <_init>
 8007922:	4c0a      	ldr	r4, [pc, #40]	; (800794c <__libc_init_array+0x40>)
 8007924:	4d0a      	ldr	r5, [pc, #40]	; (8007950 <__libc_init_array+0x44>)
 8007926:	1b64      	subs	r4, r4, r5
 8007928:	10a4      	asrs	r4, r4, #2
 800792a:	42a6      	cmp	r6, r4
 800792c:	d105      	bne.n	800793a <__libc_init_array+0x2e>
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	00b3      	lsls	r3, r6, #2
 8007932:	58eb      	ldr	r3, [r5, r3]
 8007934:	4798      	blx	r3
 8007936:	3601      	adds	r6, #1
 8007938:	e7ee      	b.n	8007918 <__libc_init_array+0xc>
 800793a:	00b3      	lsls	r3, r6, #2
 800793c:	58eb      	ldr	r3, [r5, r3]
 800793e:	4798      	blx	r3
 8007940:	3601      	adds	r6, #1
 8007942:	e7f2      	b.n	800792a <__libc_init_array+0x1e>
 8007944:	080079a4 	.word	0x080079a4
 8007948:	080079a4 	.word	0x080079a4
 800794c:	080079a8 	.word	0x080079a8
 8007950:	080079a4 	.word	0x080079a4

08007954 <_init>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	46c0      	nop			; (mov r8, r8)
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr

08007960 <_fini>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007966:	bc08      	pop	{r3}
 8007968:	469e      	mov	lr, r3
 800796a:	4770      	bx	lr
