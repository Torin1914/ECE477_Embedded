
motor_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e18  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f4c  08006f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006f4c  08006f4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f4c  08006f4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  08006f60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006f60  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119ec  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e4  00000000  00000000  00031a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00034048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca2  00000000  00000000  00035038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0eb  00000000  00000000  00035cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014059  00000000  00000000  00050dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a613e  00000000  00000000  00064e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003adc  00000000  00000000  0010af5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006ebc 	.word	0x08006ebc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08006ebc 	.word	0x08006ebc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_ddiv>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	464e      	mov	r6, r9
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	030c      	lsls	r4, r1, #12
 800022a:	001f      	movs	r7, r3
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	4681      	mov	r9, r0
 8000230:	4692      	mov	sl, r2
 8000232:	0005      	movs	r5, r0
 8000234:	b085      	sub	sp, #20
 8000236:	0b24      	lsrs	r4, r4, #12
 8000238:	0d5b      	lsrs	r3, r3, #21
 800023a:	0fce      	lsrs	r6, r1, #31
 800023c:	2b00      	cmp	r3, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_ddiv+0x26>
 8000240:	e152      	b.n	80004e8 <__aeabi_ddiv+0x2cc>
 8000242:	4ad2      	ldr	r2, [pc, #840]	; (800058c <__aeabi_ddiv+0x370>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d100      	bne.n	800024a <__aeabi_ddiv+0x2e>
 8000248:	e16e      	b.n	8000528 <__aeabi_ddiv+0x30c>
 800024a:	0f42      	lsrs	r2, r0, #29
 800024c:	00e4      	lsls	r4, r4, #3
 800024e:	4314      	orrs	r4, r2
 8000250:	2280      	movs	r2, #128	; 0x80
 8000252:	0412      	lsls	r2, r2, #16
 8000254:	4322      	orrs	r2, r4
 8000256:	4690      	mov	r8, r2
 8000258:	4acd      	ldr	r2, [pc, #820]	; (8000590 <__aeabi_ddiv+0x374>)
 800025a:	00c5      	lsls	r5, r0, #3
 800025c:	4693      	mov	fp, r2
 800025e:	449b      	add	fp, r3
 8000260:	2300      	movs	r3, #0
 8000262:	4699      	mov	r9, r3
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	033c      	lsls	r4, r7, #12
 8000268:	007b      	lsls	r3, r7, #1
 800026a:	4650      	mov	r0, sl
 800026c:	0b24      	lsrs	r4, r4, #12
 800026e:	0d5b      	lsrs	r3, r3, #21
 8000270:	0fff      	lsrs	r7, r7, #31
 8000272:	2b00      	cmp	r3, #0
 8000274:	d100      	bne.n	8000278 <__aeabi_ddiv+0x5c>
 8000276:	e11a      	b.n	80004ae <__aeabi_ddiv+0x292>
 8000278:	4ac4      	ldr	r2, [pc, #784]	; (800058c <__aeabi_ddiv+0x370>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d100      	bne.n	8000280 <__aeabi_ddiv+0x64>
 800027e:	e15e      	b.n	800053e <__aeabi_ddiv+0x322>
 8000280:	0f42      	lsrs	r2, r0, #29
 8000282:	00e4      	lsls	r4, r4, #3
 8000284:	4322      	orrs	r2, r4
 8000286:	2480      	movs	r4, #128	; 0x80
 8000288:	0424      	lsls	r4, r4, #16
 800028a:	4314      	orrs	r4, r2
 800028c:	4ac0      	ldr	r2, [pc, #768]	; (8000590 <__aeabi_ddiv+0x374>)
 800028e:	00c1      	lsls	r1, r0, #3
 8000290:	4694      	mov	ip, r2
 8000292:	465a      	mov	r2, fp
 8000294:	4463      	add	r3, ip
 8000296:	1ad3      	subs	r3, r2, r3
 8000298:	469b      	mov	fp, r3
 800029a:	2000      	movs	r0, #0
 800029c:	0033      	movs	r3, r6
 800029e:	407b      	eors	r3, r7
 80002a0:	469a      	mov	sl, r3
 80002a2:	464b      	mov	r3, r9
 80002a4:	2b0f      	cmp	r3, #15
 80002a6:	d827      	bhi.n	80002f8 <__aeabi_ddiv+0xdc>
 80002a8:	4aba      	ldr	r2, [pc, #744]	; (8000594 <__aeabi_ddiv+0x378>)
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	58d3      	ldr	r3, [r2, r3]
 80002ae:	469f      	mov	pc, r3
 80002b0:	46b2      	mov	sl, r6
 80002b2:	9b00      	ldr	r3, [sp, #0]
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	d016      	beq.n	80002e6 <__aeabi_ddiv+0xca>
 80002b8:	2b03      	cmp	r3, #3
 80002ba:	d100      	bne.n	80002be <__aeabi_ddiv+0xa2>
 80002bc:	e287      	b.n	80007ce <__aeabi_ddiv+0x5b2>
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d000      	beq.n	80002c4 <__aeabi_ddiv+0xa8>
 80002c2:	e0d5      	b.n	8000470 <__aeabi_ddiv+0x254>
 80002c4:	2300      	movs	r3, #0
 80002c6:	2200      	movs	r2, #0
 80002c8:	2500      	movs	r5, #0
 80002ca:	051b      	lsls	r3, r3, #20
 80002cc:	4313      	orrs	r3, r2
 80002ce:	4652      	mov	r2, sl
 80002d0:	07d2      	lsls	r2, r2, #31
 80002d2:	4313      	orrs	r3, r2
 80002d4:	0028      	movs	r0, r5
 80002d6:	0019      	movs	r1, r3
 80002d8:	b005      	add	sp, #20
 80002da:	bcf0      	pop	{r4, r5, r6, r7}
 80002dc:	46bb      	mov	fp, r7
 80002de:	46b2      	mov	sl, r6
 80002e0:	46a9      	mov	r9, r5
 80002e2:	46a0      	mov	r8, r4
 80002e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e6:	2200      	movs	r2, #0
 80002e8:	2500      	movs	r5, #0
 80002ea:	4ba8      	ldr	r3, [pc, #672]	; (800058c <__aeabi_ddiv+0x370>)
 80002ec:	e7ed      	b.n	80002ca <__aeabi_ddiv+0xae>
 80002ee:	46ba      	mov	sl, r7
 80002f0:	46a0      	mov	r8, r4
 80002f2:	000d      	movs	r5, r1
 80002f4:	9000      	str	r0, [sp, #0]
 80002f6:	e7dc      	b.n	80002b2 <__aeabi_ddiv+0x96>
 80002f8:	4544      	cmp	r4, r8
 80002fa:	d200      	bcs.n	80002fe <__aeabi_ddiv+0xe2>
 80002fc:	e1c4      	b.n	8000688 <__aeabi_ddiv+0x46c>
 80002fe:	d100      	bne.n	8000302 <__aeabi_ddiv+0xe6>
 8000300:	e1bf      	b.n	8000682 <__aeabi_ddiv+0x466>
 8000302:	2301      	movs	r3, #1
 8000304:	425b      	negs	r3, r3
 8000306:	469c      	mov	ip, r3
 8000308:	002e      	movs	r6, r5
 800030a:	4640      	mov	r0, r8
 800030c:	2500      	movs	r5, #0
 800030e:	44e3      	add	fp, ip
 8000310:	0223      	lsls	r3, r4, #8
 8000312:	0e0c      	lsrs	r4, r1, #24
 8000314:	431c      	orrs	r4, r3
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	4699      	mov	r9, r3
 800031a:	0423      	lsls	r3, r4, #16
 800031c:	020a      	lsls	r2, r1, #8
 800031e:	0c1f      	lsrs	r7, r3, #16
 8000320:	4649      	mov	r1, r9
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9701      	str	r7, [sp, #4]
 8000326:	f7ff ff73 	bl	8000210 <__aeabi_uidivmod>
 800032a:	0002      	movs	r2, r0
 800032c:	437a      	muls	r2, r7
 800032e:	040b      	lsls	r3, r1, #16
 8000330:	0c31      	lsrs	r1, r6, #16
 8000332:	4680      	mov	r8, r0
 8000334:	4319      	orrs	r1, r3
 8000336:	428a      	cmp	r2, r1
 8000338:	d907      	bls.n	800034a <__aeabi_ddiv+0x12e>
 800033a:	2301      	movs	r3, #1
 800033c:	425b      	negs	r3, r3
 800033e:	469c      	mov	ip, r3
 8000340:	1909      	adds	r1, r1, r4
 8000342:	44e0      	add	r8, ip
 8000344:	428c      	cmp	r4, r1
 8000346:	d800      	bhi.n	800034a <__aeabi_ddiv+0x12e>
 8000348:	e201      	b.n	800074e <__aeabi_ddiv+0x532>
 800034a:	1a88      	subs	r0, r1, r2
 800034c:	4649      	mov	r1, r9
 800034e:	f7ff ff5f 	bl	8000210 <__aeabi_uidivmod>
 8000352:	9a01      	ldr	r2, [sp, #4]
 8000354:	0436      	lsls	r6, r6, #16
 8000356:	4342      	muls	r2, r0
 8000358:	0409      	lsls	r1, r1, #16
 800035a:	0c36      	lsrs	r6, r6, #16
 800035c:	0003      	movs	r3, r0
 800035e:	430e      	orrs	r6, r1
 8000360:	42b2      	cmp	r2, r6
 8000362:	d904      	bls.n	800036e <__aeabi_ddiv+0x152>
 8000364:	1936      	adds	r6, r6, r4
 8000366:	3b01      	subs	r3, #1
 8000368:	42b4      	cmp	r4, r6
 800036a:	d800      	bhi.n	800036e <__aeabi_ddiv+0x152>
 800036c:	e1e9      	b.n	8000742 <__aeabi_ddiv+0x526>
 800036e:	1ab0      	subs	r0, r6, r2
 8000370:	4642      	mov	r2, r8
 8000372:	9e00      	ldr	r6, [sp, #0]
 8000374:	0412      	lsls	r2, r2, #16
 8000376:	431a      	orrs	r2, r3
 8000378:	0c33      	lsrs	r3, r6, #16
 800037a:	001f      	movs	r7, r3
 800037c:	0c11      	lsrs	r1, r2, #16
 800037e:	4690      	mov	r8, r2
 8000380:	9302      	str	r3, [sp, #8]
 8000382:	0413      	lsls	r3, r2, #16
 8000384:	0432      	lsls	r2, r6, #16
 8000386:	0c16      	lsrs	r6, r2, #16
 8000388:	0032      	movs	r2, r6
 800038a:	0c1b      	lsrs	r3, r3, #16
 800038c:	435a      	muls	r2, r3
 800038e:	9603      	str	r6, [sp, #12]
 8000390:	437b      	muls	r3, r7
 8000392:	434e      	muls	r6, r1
 8000394:	4379      	muls	r1, r7
 8000396:	0c17      	lsrs	r7, r2, #16
 8000398:	46bc      	mov	ip, r7
 800039a:	199b      	adds	r3, r3, r6
 800039c:	4463      	add	r3, ip
 800039e:	429e      	cmp	r6, r3
 80003a0:	d903      	bls.n	80003aa <__aeabi_ddiv+0x18e>
 80003a2:	2680      	movs	r6, #128	; 0x80
 80003a4:	0276      	lsls	r6, r6, #9
 80003a6:	46b4      	mov	ip, r6
 80003a8:	4461      	add	r1, ip
 80003aa:	0c1e      	lsrs	r6, r3, #16
 80003ac:	1871      	adds	r1, r6, r1
 80003ae:	0416      	lsls	r6, r2, #16
 80003b0:	041b      	lsls	r3, r3, #16
 80003b2:	0c36      	lsrs	r6, r6, #16
 80003b4:	199e      	adds	r6, r3, r6
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d302      	bcc.n	80003c0 <__aeabi_ddiv+0x1a4>
 80003ba:	d112      	bne.n	80003e2 <__aeabi_ddiv+0x1c6>
 80003bc:	42b5      	cmp	r5, r6
 80003be:	d210      	bcs.n	80003e2 <__aeabi_ddiv+0x1c6>
 80003c0:	4643      	mov	r3, r8
 80003c2:	1e5a      	subs	r2, r3, #1
 80003c4:	9b00      	ldr	r3, [sp, #0]
 80003c6:	469c      	mov	ip, r3
 80003c8:	4465      	add	r5, ip
 80003ca:	001f      	movs	r7, r3
 80003cc:	429d      	cmp	r5, r3
 80003ce:	419b      	sbcs	r3, r3
 80003d0:	425b      	negs	r3, r3
 80003d2:	191b      	adds	r3, r3, r4
 80003d4:	18c0      	adds	r0, r0, r3
 80003d6:	4284      	cmp	r4, r0
 80003d8:	d200      	bcs.n	80003dc <__aeabi_ddiv+0x1c0>
 80003da:	e19e      	b.n	800071a <__aeabi_ddiv+0x4fe>
 80003dc:	d100      	bne.n	80003e0 <__aeabi_ddiv+0x1c4>
 80003de:	e199      	b.n	8000714 <__aeabi_ddiv+0x4f8>
 80003e0:	4690      	mov	r8, r2
 80003e2:	1bae      	subs	r6, r5, r6
 80003e4:	42b5      	cmp	r5, r6
 80003e6:	41ad      	sbcs	r5, r5
 80003e8:	1a40      	subs	r0, r0, r1
 80003ea:	426d      	negs	r5, r5
 80003ec:	1b40      	subs	r0, r0, r5
 80003ee:	4284      	cmp	r4, r0
 80003f0:	d100      	bne.n	80003f4 <__aeabi_ddiv+0x1d8>
 80003f2:	e1d2      	b.n	800079a <__aeabi_ddiv+0x57e>
 80003f4:	4649      	mov	r1, r9
 80003f6:	f7ff ff0b 	bl	8000210 <__aeabi_uidivmod>
 80003fa:	9a01      	ldr	r2, [sp, #4]
 80003fc:	040b      	lsls	r3, r1, #16
 80003fe:	4342      	muls	r2, r0
 8000400:	0c31      	lsrs	r1, r6, #16
 8000402:	0005      	movs	r5, r0
 8000404:	4319      	orrs	r1, r3
 8000406:	428a      	cmp	r2, r1
 8000408:	d900      	bls.n	800040c <__aeabi_ddiv+0x1f0>
 800040a:	e16c      	b.n	80006e6 <__aeabi_ddiv+0x4ca>
 800040c:	1a88      	subs	r0, r1, r2
 800040e:	4649      	mov	r1, r9
 8000410:	f7ff fefe 	bl	8000210 <__aeabi_uidivmod>
 8000414:	9a01      	ldr	r2, [sp, #4]
 8000416:	0436      	lsls	r6, r6, #16
 8000418:	4342      	muls	r2, r0
 800041a:	0409      	lsls	r1, r1, #16
 800041c:	0c36      	lsrs	r6, r6, #16
 800041e:	0003      	movs	r3, r0
 8000420:	430e      	orrs	r6, r1
 8000422:	42b2      	cmp	r2, r6
 8000424:	d900      	bls.n	8000428 <__aeabi_ddiv+0x20c>
 8000426:	e153      	b.n	80006d0 <__aeabi_ddiv+0x4b4>
 8000428:	9803      	ldr	r0, [sp, #12]
 800042a:	1ab6      	subs	r6, r6, r2
 800042c:	0002      	movs	r2, r0
 800042e:	042d      	lsls	r5, r5, #16
 8000430:	431d      	orrs	r5, r3
 8000432:	9f02      	ldr	r7, [sp, #8]
 8000434:	042b      	lsls	r3, r5, #16
 8000436:	0c1b      	lsrs	r3, r3, #16
 8000438:	435a      	muls	r2, r3
 800043a:	437b      	muls	r3, r7
 800043c:	469c      	mov	ip, r3
 800043e:	0c29      	lsrs	r1, r5, #16
 8000440:	4348      	muls	r0, r1
 8000442:	0c13      	lsrs	r3, r2, #16
 8000444:	4484      	add	ip, r0
 8000446:	4463      	add	r3, ip
 8000448:	4379      	muls	r1, r7
 800044a:	4298      	cmp	r0, r3
 800044c:	d903      	bls.n	8000456 <__aeabi_ddiv+0x23a>
 800044e:	2080      	movs	r0, #128	; 0x80
 8000450:	0240      	lsls	r0, r0, #9
 8000452:	4684      	mov	ip, r0
 8000454:	4461      	add	r1, ip
 8000456:	0c18      	lsrs	r0, r3, #16
 8000458:	0412      	lsls	r2, r2, #16
 800045a:	041b      	lsls	r3, r3, #16
 800045c:	0c12      	lsrs	r2, r2, #16
 800045e:	1840      	adds	r0, r0, r1
 8000460:	189b      	adds	r3, r3, r2
 8000462:	4286      	cmp	r6, r0
 8000464:	d200      	bcs.n	8000468 <__aeabi_ddiv+0x24c>
 8000466:	e100      	b.n	800066a <__aeabi_ddiv+0x44e>
 8000468:	d100      	bne.n	800046c <__aeabi_ddiv+0x250>
 800046a:	e0fb      	b.n	8000664 <__aeabi_ddiv+0x448>
 800046c:	2301      	movs	r3, #1
 800046e:	431d      	orrs	r5, r3
 8000470:	4b49      	ldr	r3, [pc, #292]	; (8000598 <__aeabi_ddiv+0x37c>)
 8000472:	445b      	add	r3, fp
 8000474:	2b00      	cmp	r3, #0
 8000476:	dc00      	bgt.n	800047a <__aeabi_ddiv+0x25e>
 8000478:	e0aa      	b.n	80005d0 <__aeabi_ddiv+0x3b4>
 800047a:	076a      	lsls	r2, r5, #29
 800047c:	d000      	beq.n	8000480 <__aeabi_ddiv+0x264>
 800047e:	e13d      	b.n	80006fc <__aeabi_ddiv+0x4e0>
 8000480:	08e9      	lsrs	r1, r5, #3
 8000482:	4642      	mov	r2, r8
 8000484:	01d2      	lsls	r2, r2, #7
 8000486:	d506      	bpl.n	8000496 <__aeabi_ddiv+0x27a>
 8000488:	4642      	mov	r2, r8
 800048a:	4b44      	ldr	r3, [pc, #272]	; (800059c <__aeabi_ddiv+0x380>)
 800048c:	401a      	ands	r2, r3
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	4690      	mov	r8, r2
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	445b      	add	r3, fp
 8000496:	4a42      	ldr	r2, [pc, #264]	; (80005a0 <__aeabi_ddiv+0x384>)
 8000498:	4293      	cmp	r3, r2
 800049a:	dd00      	ble.n	800049e <__aeabi_ddiv+0x282>
 800049c:	e723      	b.n	80002e6 <__aeabi_ddiv+0xca>
 800049e:	4642      	mov	r2, r8
 80004a0:	055b      	lsls	r3, r3, #21
 80004a2:	0755      	lsls	r5, r2, #29
 80004a4:	0252      	lsls	r2, r2, #9
 80004a6:	430d      	orrs	r5, r1
 80004a8:	0b12      	lsrs	r2, r2, #12
 80004aa:	0d5b      	lsrs	r3, r3, #21
 80004ac:	e70d      	b.n	80002ca <__aeabi_ddiv+0xae>
 80004ae:	4651      	mov	r1, sl
 80004b0:	4321      	orrs	r1, r4
 80004b2:	d100      	bne.n	80004b6 <__aeabi_ddiv+0x29a>
 80004b4:	e07c      	b.n	80005b0 <__aeabi_ddiv+0x394>
 80004b6:	2c00      	cmp	r4, #0
 80004b8:	d100      	bne.n	80004bc <__aeabi_ddiv+0x2a0>
 80004ba:	e0fb      	b.n	80006b4 <__aeabi_ddiv+0x498>
 80004bc:	0020      	movs	r0, r4
 80004be:	f000 fd13 	bl	8000ee8 <__clzsi2>
 80004c2:	0002      	movs	r2, r0
 80004c4:	3a0b      	subs	r2, #11
 80004c6:	231d      	movs	r3, #29
 80004c8:	1a9b      	subs	r3, r3, r2
 80004ca:	4652      	mov	r2, sl
 80004cc:	0001      	movs	r1, r0
 80004ce:	40da      	lsrs	r2, r3
 80004d0:	4653      	mov	r3, sl
 80004d2:	3908      	subs	r1, #8
 80004d4:	408b      	lsls	r3, r1
 80004d6:	408c      	lsls	r4, r1
 80004d8:	0019      	movs	r1, r3
 80004da:	4314      	orrs	r4, r2
 80004dc:	4b31      	ldr	r3, [pc, #196]	; (80005a4 <__aeabi_ddiv+0x388>)
 80004de:	4458      	add	r0, fp
 80004e0:	469b      	mov	fp, r3
 80004e2:	4483      	add	fp, r0
 80004e4:	2000      	movs	r0, #0
 80004e6:	e6d9      	b.n	800029c <__aeabi_ddiv+0x80>
 80004e8:	0003      	movs	r3, r0
 80004ea:	4323      	orrs	r3, r4
 80004ec:	4698      	mov	r8, r3
 80004ee:	d044      	beq.n	800057a <__aeabi_ddiv+0x35e>
 80004f0:	2c00      	cmp	r4, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_ddiv+0x2da>
 80004f4:	e0cf      	b.n	8000696 <__aeabi_ddiv+0x47a>
 80004f6:	0020      	movs	r0, r4
 80004f8:	f000 fcf6 	bl	8000ee8 <__clzsi2>
 80004fc:	0001      	movs	r1, r0
 80004fe:	0002      	movs	r2, r0
 8000500:	390b      	subs	r1, #11
 8000502:	231d      	movs	r3, #29
 8000504:	1a5b      	subs	r3, r3, r1
 8000506:	4649      	mov	r1, r9
 8000508:	0010      	movs	r0, r2
 800050a:	40d9      	lsrs	r1, r3
 800050c:	3808      	subs	r0, #8
 800050e:	4084      	lsls	r4, r0
 8000510:	000b      	movs	r3, r1
 8000512:	464d      	mov	r5, r9
 8000514:	4323      	orrs	r3, r4
 8000516:	4698      	mov	r8, r3
 8000518:	4085      	lsls	r5, r0
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <__aeabi_ddiv+0x38c>)
 800051c:	1a9b      	subs	r3, r3, r2
 800051e:	469b      	mov	fp, r3
 8000520:	2300      	movs	r3, #0
 8000522:	4699      	mov	r9, r3
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	e69e      	b.n	8000266 <__aeabi_ddiv+0x4a>
 8000528:	0002      	movs	r2, r0
 800052a:	4322      	orrs	r2, r4
 800052c:	4690      	mov	r8, r2
 800052e:	d11d      	bne.n	800056c <__aeabi_ddiv+0x350>
 8000530:	2208      	movs	r2, #8
 8000532:	469b      	mov	fp, r3
 8000534:	2302      	movs	r3, #2
 8000536:	2500      	movs	r5, #0
 8000538:	4691      	mov	r9, r2
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	e693      	b.n	8000266 <__aeabi_ddiv+0x4a>
 800053e:	4651      	mov	r1, sl
 8000540:	4321      	orrs	r1, r4
 8000542:	d109      	bne.n	8000558 <__aeabi_ddiv+0x33c>
 8000544:	2302      	movs	r3, #2
 8000546:	464a      	mov	r2, r9
 8000548:	431a      	orrs	r2, r3
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <__aeabi_ddiv+0x390>)
 800054c:	4691      	mov	r9, r2
 800054e:	469c      	mov	ip, r3
 8000550:	2400      	movs	r4, #0
 8000552:	2002      	movs	r0, #2
 8000554:	44e3      	add	fp, ip
 8000556:	e6a1      	b.n	800029c <__aeabi_ddiv+0x80>
 8000558:	2303      	movs	r3, #3
 800055a:	464a      	mov	r2, r9
 800055c:	431a      	orrs	r2, r3
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <__aeabi_ddiv+0x390>)
 8000560:	4691      	mov	r9, r2
 8000562:	469c      	mov	ip, r3
 8000564:	4651      	mov	r1, sl
 8000566:	2003      	movs	r0, #3
 8000568:	44e3      	add	fp, ip
 800056a:	e697      	b.n	800029c <__aeabi_ddiv+0x80>
 800056c:	220c      	movs	r2, #12
 800056e:	469b      	mov	fp, r3
 8000570:	2303      	movs	r3, #3
 8000572:	46a0      	mov	r8, r4
 8000574:	4691      	mov	r9, r2
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	e675      	b.n	8000266 <__aeabi_ddiv+0x4a>
 800057a:	2304      	movs	r3, #4
 800057c:	4699      	mov	r9, r3
 800057e:	2300      	movs	r3, #0
 8000580:	469b      	mov	fp, r3
 8000582:	3301      	adds	r3, #1
 8000584:	2500      	movs	r5, #0
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	e66d      	b.n	8000266 <__aeabi_ddiv+0x4a>
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	000007ff 	.word	0x000007ff
 8000590:	fffffc01 	.word	0xfffffc01
 8000594:	08006ed4 	.word	0x08006ed4
 8000598:	000003ff 	.word	0x000003ff
 800059c:	feffffff 	.word	0xfeffffff
 80005a0:	000007fe 	.word	0x000007fe
 80005a4:	000003f3 	.word	0x000003f3
 80005a8:	fffffc0d 	.word	0xfffffc0d
 80005ac:	fffff801 	.word	0xfffff801
 80005b0:	464a      	mov	r2, r9
 80005b2:	2301      	movs	r3, #1
 80005b4:	431a      	orrs	r2, r3
 80005b6:	4691      	mov	r9, r2
 80005b8:	2400      	movs	r4, #0
 80005ba:	2001      	movs	r0, #1
 80005bc:	e66e      	b.n	800029c <__aeabi_ddiv+0x80>
 80005be:	2300      	movs	r3, #0
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	469a      	mov	sl, r3
 80005c4:	2500      	movs	r5, #0
 80005c6:	4b88      	ldr	r3, [pc, #544]	; (80007e8 <__aeabi_ddiv+0x5cc>)
 80005c8:	0312      	lsls	r2, r2, #12
 80005ca:	e67e      	b.n	80002ca <__aeabi_ddiv+0xae>
 80005cc:	2501      	movs	r5, #1
 80005ce:	426d      	negs	r5, r5
 80005d0:	2201      	movs	r2, #1
 80005d2:	1ad2      	subs	r2, r2, r3
 80005d4:	2a38      	cmp	r2, #56	; 0x38
 80005d6:	dd00      	ble.n	80005da <__aeabi_ddiv+0x3be>
 80005d8:	e674      	b.n	80002c4 <__aeabi_ddiv+0xa8>
 80005da:	2a1f      	cmp	r2, #31
 80005dc:	dc00      	bgt.n	80005e0 <__aeabi_ddiv+0x3c4>
 80005de:	e0bd      	b.n	800075c <__aeabi_ddiv+0x540>
 80005e0:	211f      	movs	r1, #31
 80005e2:	4249      	negs	r1, r1
 80005e4:	1acb      	subs	r3, r1, r3
 80005e6:	4641      	mov	r1, r8
 80005e8:	40d9      	lsrs	r1, r3
 80005ea:	000b      	movs	r3, r1
 80005ec:	2a20      	cmp	r2, #32
 80005ee:	d004      	beq.n	80005fa <__aeabi_ddiv+0x3de>
 80005f0:	4641      	mov	r1, r8
 80005f2:	4a7e      	ldr	r2, [pc, #504]	; (80007ec <__aeabi_ddiv+0x5d0>)
 80005f4:	445a      	add	r2, fp
 80005f6:	4091      	lsls	r1, r2
 80005f8:	430d      	orrs	r5, r1
 80005fa:	0029      	movs	r1, r5
 80005fc:	1e4a      	subs	r2, r1, #1
 80005fe:	4191      	sbcs	r1, r2
 8000600:	4319      	orrs	r1, r3
 8000602:	2307      	movs	r3, #7
 8000604:	001d      	movs	r5, r3
 8000606:	2200      	movs	r2, #0
 8000608:	400d      	ands	r5, r1
 800060a:	420b      	tst	r3, r1
 800060c:	d100      	bne.n	8000610 <__aeabi_ddiv+0x3f4>
 800060e:	e0d0      	b.n	80007b2 <__aeabi_ddiv+0x596>
 8000610:	220f      	movs	r2, #15
 8000612:	2300      	movs	r3, #0
 8000614:	400a      	ands	r2, r1
 8000616:	2a04      	cmp	r2, #4
 8000618:	d100      	bne.n	800061c <__aeabi_ddiv+0x400>
 800061a:	e0c7      	b.n	80007ac <__aeabi_ddiv+0x590>
 800061c:	1d0a      	adds	r2, r1, #4
 800061e:	428a      	cmp	r2, r1
 8000620:	4189      	sbcs	r1, r1
 8000622:	4249      	negs	r1, r1
 8000624:	185b      	adds	r3, r3, r1
 8000626:	0011      	movs	r1, r2
 8000628:	021a      	lsls	r2, r3, #8
 800062a:	d400      	bmi.n	800062e <__aeabi_ddiv+0x412>
 800062c:	e0be      	b.n	80007ac <__aeabi_ddiv+0x590>
 800062e:	2301      	movs	r3, #1
 8000630:	2200      	movs	r2, #0
 8000632:	2500      	movs	r5, #0
 8000634:	e649      	b.n	80002ca <__aeabi_ddiv+0xae>
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	4643      	mov	r3, r8
 800063a:	0312      	lsls	r2, r2, #12
 800063c:	4213      	tst	r3, r2
 800063e:	d008      	beq.n	8000652 <__aeabi_ddiv+0x436>
 8000640:	4214      	tst	r4, r2
 8000642:	d106      	bne.n	8000652 <__aeabi_ddiv+0x436>
 8000644:	4322      	orrs	r2, r4
 8000646:	0312      	lsls	r2, r2, #12
 8000648:	46ba      	mov	sl, r7
 800064a:	000d      	movs	r5, r1
 800064c:	4b66      	ldr	r3, [pc, #408]	; (80007e8 <__aeabi_ddiv+0x5cc>)
 800064e:	0b12      	lsrs	r2, r2, #12
 8000650:	e63b      	b.n	80002ca <__aeabi_ddiv+0xae>
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	4643      	mov	r3, r8
 8000656:	0312      	lsls	r2, r2, #12
 8000658:	431a      	orrs	r2, r3
 800065a:	0312      	lsls	r2, r2, #12
 800065c:	46b2      	mov	sl, r6
 800065e:	4b62      	ldr	r3, [pc, #392]	; (80007e8 <__aeabi_ddiv+0x5cc>)
 8000660:	0b12      	lsrs	r2, r2, #12
 8000662:	e632      	b.n	80002ca <__aeabi_ddiv+0xae>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d100      	bne.n	800066a <__aeabi_ddiv+0x44e>
 8000668:	e702      	b.n	8000470 <__aeabi_ddiv+0x254>
 800066a:	19a6      	adds	r6, r4, r6
 800066c:	1e6a      	subs	r2, r5, #1
 800066e:	42a6      	cmp	r6, r4
 8000670:	d200      	bcs.n	8000674 <__aeabi_ddiv+0x458>
 8000672:	e089      	b.n	8000788 <__aeabi_ddiv+0x56c>
 8000674:	4286      	cmp	r6, r0
 8000676:	d200      	bcs.n	800067a <__aeabi_ddiv+0x45e>
 8000678:	e09f      	b.n	80007ba <__aeabi_ddiv+0x59e>
 800067a:	d100      	bne.n	800067e <__aeabi_ddiv+0x462>
 800067c:	e0af      	b.n	80007de <__aeabi_ddiv+0x5c2>
 800067e:	0015      	movs	r5, r2
 8000680:	e6f4      	b.n	800046c <__aeabi_ddiv+0x250>
 8000682:	42a9      	cmp	r1, r5
 8000684:	d900      	bls.n	8000688 <__aeabi_ddiv+0x46c>
 8000686:	e63c      	b.n	8000302 <__aeabi_ddiv+0xe6>
 8000688:	4643      	mov	r3, r8
 800068a:	07de      	lsls	r6, r3, #31
 800068c:	0858      	lsrs	r0, r3, #1
 800068e:	086b      	lsrs	r3, r5, #1
 8000690:	431e      	orrs	r6, r3
 8000692:	07ed      	lsls	r5, r5, #31
 8000694:	e63c      	b.n	8000310 <__aeabi_ddiv+0xf4>
 8000696:	f000 fc27 	bl	8000ee8 <__clzsi2>
 800069a:	0001      	movs	r1, r0
 800069c:	0002      	movs	r2, r0
 800069e:	3115      	adds	r1, #21
 80006a0:	3220      	adds	r2, #32
 80006a2:	291c      	cmp	r1, #28
 80006a4:	dc00      	bgt.n	80006a8 <__aeabi_ddiv+0x48c>
 80006a6:	e72c      	b.n	8000502 <__aeabi_ddiv+0x2e6>
 80006a8:	464b      	mov	r3, r9
 80006aa:	3808      	subs	r0, #8
 80006ac:	4083      	lsls	r3, r0
 80006ae:	2500      	movs	r5, #0
 80006b0:	4698      	mov	r8, r3
 80006b2:	e732      	b.n	800051a <__aeabi_ddiv+0x2fe>
 80006b4:	f000 fc18 	bl	8000ee8 <__clzsi2>
 80006b8:	0003      	movs	r3, r0
 80006ba:	001a      	movs	r2, r3
 80006bc:	3215      	adds	r2, #21
 80006be:	3020      	adds	r0, #32
 80006c0:	2a1c      	cmp	r2, #28
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_ddiv+0x4aa>
 80006c4:	e6ff      	b.n	80004c6 <__aeabi_ddiv+0x2aa>
 80006c6:	4654      	mov	r4, sl
 80006c8:	3b08      	subs	r3, #8
 80006ca:	2100      	movs	r1, #0
 80006cc:	409c      	lsls	r4, r3
 80006ce:	e705      	b.n	80004dc <__aeabi_ddiv+0x2c0>
 80006d0:	1936      	adds	r6, r6, r4
 80006d2:	3b01      	subs	r3, #1
 80006d4:	42b4      	cmp	r4, r6
 80006d6:	d900      	bls.n	80006da <__aeabi_ddiv+0x4be>
 80006d8:	e6a6      	b.n	8000428 <__aeabi_ddiv+0x20c>
 80006da:	42b2      	cmp	r2, r6
 80006dc:	d800      	bhi.n	80006e0 <__aeabi_ddiv+0x4c4>
 80006de:	e6a3      	b.n	8000428 <__aeabi_ddiv+0x20c>
 80006e0:	1e83      	subs	r3, r0, #2
 80006e2:	1936      	adds	r6, r6, r4
 80006e4:	e6a0      	b.n	8000428 <__aeabi_ddiv+0x20c>
 80006e6:	1909      	adds	r1, r1, r4
 80006e8:	3d01      	subs	r5, #1
 80006ea:	428c      	cmp	r4, r1
 80006ec:	d900      	bls.n	80006f0 <__aeabi_ddiv+0x4d4>
 80006ee:	e68d      	b.n	800040c <__aeabi_ddiv+0x1f0>
 80006f0:	428a      	cmp	r2, r1
 80006f2:	d800      	bhi.n	80006f6 <__aeabi_ddiv+0x4da>
 80006f4:	e68a      	b.n	800040c <__aeabi_ddiv+0x1f0>
 80006f6:	1e85      	subs	r5, r0, #2
 80006f8:	1909      	adds	r1, r1, r4
 80006fa:	e687      	b.n	800040c <__aeabi_ddiv+0x1f0>
 80006fc:	220f      	movs	r2, #15
 80006fe:	402a      	ands	r2, r5
 8000700:	2a04      	cmp	r2, #4
 8000702:	d100      	bne.n	8000706 <__aeabi_ddiv+0x4ea>
 8000704:	e6bc      	b.n	8000480 <__aeabi_ddiv+0x264>
 8000706:	1d29      	adds	r1, r5, #4
 8000708:	42a9      	cmp	r1, r5
 800070a:	41ad      	sbcs	r5, r5
 800070c:	426d      	negs	r5, r5
 800070e:	08c9      	lsrs	r1, r1, #3
 8000710:	44a8      	add	r8, r5
 8000712:	e6b6      	b.n	8000482 <__aeabi_ddiv+0x266>
 8000714:	42af      	cmp	r7, r5
 8000716:	d900      	bls.n	800071a <__aeabi_ddiv+0x4fe>
 8000718:	e662      	b.n	80003e0 <__aeabi_ddiv+0x1c4>
 800071a:	4281      	cmp	r1, r0
 800071c:	d804      	bhi.n	8000728 <__aeabi_ddiv+0x50c>
 800071e:	d000      	beq.n	8000722 <__aeabi_ddiv+0x506>
 8000720:	e65e      	b.n	80003e0 <__aeabi_ddiv+0x1c4>
 8000722:	42ae      	cmp	r6, r5
 8000724:	d800      	bhi.n	8000728 <__aeabi_ddiv+0x50c>
 8000726:	e65b      	b.n	80003e0 <__aeabi_ddiv+0x1c4>
 8000728:	2302      	movs	r3, #2
 800072a:	425b      	negs	r3, r3
 800072c:	469c      	mov	ip, r3
 800072e:	9b00      	ldr	r3, [sp, #0]
 8000730:	44e0      	add	r8, ip
 8000732:	469c      	mov	ip, r3
 8000734:	4465      	add	r5, ip
 8000736:	429d      	cmp	r5, r3
 8000738:	419b      	sbcs	r3, r3
 800073a:	425b      	negs	r3, r3
 800073c:	191b      	adds	r3, r3, r4
 800073e:	18c0      	adds	r0, r0, r3
 8000740:	e64f      	b.n	80003e2 <__aeabi_ddiv+0x1c6>
 8000742:	42b2      	cmp	r2, r6
 8000744:	d800      	bhi.n	8000748 <__aeabi_ddiv+0x52c>
 8000746:	e612      	b.n	800036e <__aeabi_ddiv+0x152>
 8000748:	1e83      	subs	r3, r0, #2
 800074a:	1936      	adds	r6, r6, r4
 800074c:	e60f      	b.n	800036e <__aeabi_ddiv+0x152>
 800074e:	428a      	cmp	r2, r1
 8000750:	d800      	bhi.n	8000754 <__aeabi_ddiv+0x538>
 8000752:	e5fa      	b.n	800034a <__aeabi_ddiv+0x12e>
 8000754:	1e83      	subs	r3, r0, #2
 8000756:	4698      	mov	r8, r3
 8000758:	1909      	adds	r1, r1, r4
 800075a:	e5f6      	b.n	800034a <__aeabi_ddiv+0x12e>
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <__aeabi_ddiv+0x5d4>)
 800075e:	0028      	movs	r0, r5
 8000760:	445b      	add	r3, fp
 8000762:	4641      	mov	r1, r8
 8000764:	409d      	lsls	r5, r3
 8000766:	4099      	lsls	r1, r3
 8000768:	40d0      	lsrs	r0, r2
 800076a:	1e6b      	subs	r3, r5, #1
 800076c:	419d      	sbcs	r5, r3
 800076e:	4643      	mov	r3, r8
 8000770:	4301      	orrs	r1, r0
 8000772:	4329      	orrs	r1, r5
 8000774:	40d3      	lsrs	r3, r2
 8000776:	074a      	lsls	r2, r1, #29
 8000778:	d100      	bne.n	800077c <__aeabi_ddiv+0x560>
 800077a:	e755      	b.n	8000628 <__aeabi_ddiv+0x40c>
 800077c:	220f      	movs	r2, #15
 800077e:	400a      	ands	r2, r1
 8000780:	2a04      	cmp	r2, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_ddiv+0x56a>
 8000784:	e74a      	b.n	800061c <__aeabi_ddiv+0x400>
 8000786:	e74f      	b.n	8000628 <__aeabi_ddiv+0x40c>
 8000788:	0015      	movs	r5, r2
 800078a:	4286      	cmp	r6, r0
 800078c:	d000      	beq.n	8000790 <__aeabi_ddiv+0x574>
 800078e:	e66d      	b.n	800046c <__aeabi_ddiv+0x250>
 8000790:	9a00      	ldr	r2, [sp, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	d000      	beq.n	8000798 <__aeabi_ddiv+0x57c>
 8000796:	e669      	b.n	800046c <__aeabi_ddiv+0x250>
 8000798:	e66a      	b.n	8000470 <__aeabi_ddiv+0x254>
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <__aeabi_ddiv+0x5d8>)
 800079c:	445b      	add	r3, fp
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dc00      	bgt.n	80007a4 <__aeabi_ddiv+0x588>
 80007a2:	e713      	b.n	80005cc <__aeabi_ddiv+0x3b0>
 80007a4:	2501      	movs	r5, #1
 80007a6:	2100      	movs	r1, #0
 80007a8:	44a8      	add	r8, r5
 80007aa:	e66a      	b.n	8000482 <__aeabi_ddiv+0x266>
 80007ac:	075d      	lsls	r5, r3, #29
 80007ae:	025b      	lsls	r3, r3, #9
 80007b0:	0b1a      	lsrs	r2, r3, #12
 80007b2:	08c9      	lsrs	r1, r1, #3
 80007b4:	2300      	movs	r3, #0
 80007b6:	430d      	orrs	r5, r1
 80007b8:	e587      	b.n	80002ca <__aeabi_ddiv+0xae>
 80007ba:	9900      	ldr	r1, [sp, #0]
 80007bc:	3d02      	subs	r5, #2
 80007be:	004a      	lsls	r2, r1, #1
 80007c0:	428a      	cmp	r2, r1
 80007c2:	41bf      	sbcs	r7, r7
 80007c4:	427f      	negs	r7, r7
 80007c6:	193f      	adds	r7, r7, r4
 80007c8:	19f6      	adds	r6, r6, r7
 80007ca:	9200      	str	r2, [sp, #0]
 80007cc:	e7dd      	b.n	800078a <__aeabi_ddiv+0x56e>
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	4643      	mov	r3, r8
 80007d2:	0312      	lsls	r2, r2, #12
 80007d4:	431a      	orrs	r2, r3
 80007d6:	0312      	lsls	r2, r2, #12
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <__aeabi_ddiv+0x5cc>)
 80007da:	0b12      	lsrs	r2, r2, #12
 80007dc:	e575      	b.n	80002ca <__aeabi_ddiv+0xae>
 80007de:	9900      	ldr	r1, [sp, #0]
 80007e0:	4299      	cmp	r1, r3
 80007e2:	d3ea      	bcc.n	80007ba <__aeabi_ddiv+0x59e>
 80007e4:	0015      	movs	r5, r2
 80007e6:	e7d3      	b.n	8000790 <__aeabi_ddiv+0x574>
 80007e8:	000007ff 	.word	0x000007ff
 80007ec:	0000043e 	.word	0x0000043e
 80007f0:	0000041e 	.word	0x0000041e
 80007f4:	000003ff 	.word	0x000003ff

080007f8 <__aeabi_dmul>:
 80007f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fa:	4645      	mov	r5, r8
 80007fc:	46de      	mov	lr, fp
 80007fe:	4657      	mov	r7, sl
 8000800:	464e      	mov	r6, r9
 8000802:	b5e0      	push	{r5, r6, r7, lr}
 8000804:	001f      	movs	r7, r3
 8000806:	030b      	lsls	r3, r1, #12
 8000808:	0b1b      	lsrs	r3, r3, #12
 800080a:	469b      	mov	fp, r3
 800080c:	004d      	lsls	r5, r1, #1
 800080e:	0fcb      	lsrs	r3, r1, #31
 8000810:	0004      	movs	r4, r0
 8000812:	4691      	mov	r9, r2
 8000814:	4698      	mov	r8, r3
 8000816:	b087      	sub	sp, #28
 8000818:	0d6d      	lsrs	r5, r5, #21
 800081a:	d100      	bne.n	800081e <__aeabi_dmul+0x26>
 800081c:	e1cd      	b.n	8000bba <__aeabi_dmul+0x3c2>
 800081e:	4bce      	ldr	r3, [pc, #824]	; (8000b58 <__aeabi_dmul+0x360>)
 8000820:	429d      	cmp	r5, r3
 8000822:	d100      	bne.n	8000826 <__aeabi_dmul+0x2e>
 8000824:	e1e9      	b.n	8000bfa <__aeabi_dmul+0x402>
 8000826:	465a      	mov	r2, fp
 8000828:	0f43      	lsrs	r3, r0, #29
 800082a:	00d2      	lsls	r2, r2, #3
 800082c:	4313      	orrs	r3, r2
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0412      	lsls	r2, r2, #16
 8000832:	431a      	orrs	r2, r3
 8000834:	00c3      	lsls	r3, r0, #3
 8000836:	469a      	mov	sl, r3
 8000838:	4bc8      	ldr	r3, [pc, #800]	; (8000b5c <__aeabi_dmul+0x364>)
 800083a:	4693      	mov	fp, r2
 800083c:	469c      	mov	ip, r3
 800083e:	2300      	movs	r3, #0
 8000840:	2600      	movs	r6, #0
 8000842:	4465      	add	r5, ip
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	033c      	lsls	r4, r7, #12
 8000848:	007b      	lsls	r3, r7, #1
 800084a:	4648      	mov	r0, r9
 800084c:	0b24      	lsrs	r4, r4, #12
 800084e:	0d5b      	lsrs	r3, r3, #21
 8000850:	0fff      	lsrs	r7, r7, #31
 8000852:	2b00      	cmp	r3, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_dmul+0x60>
 8000856:	e189      	b.n	8000b6c <__aeabi_dmul+0x374>
 8000858:	4abf      	ldr	r2, [pc, #764]	; (8000b58 <__aeabi_dmul+0x360>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x9a>
 800085e:	0f42      	lsrs	r2, r0, #29
 8000860:	00e4      	lsls	r4, r4, #3
 8000862:	4322      	orrs	r2, r4
 8000864:	2480      	movs	r4, #128	; 0x80
 8000866:	0424      	lsls	r4, r4, #16
 8000868:	4314      	orrs	r4, r2
 800086a:	4abc      	ldr	r2, [pc, #752]	; (8000b5c <__aeabi_dmul+0x364>)
 800086c:	2100      	movs	r1, #0
 800086e:	4694      	mov	ip, r2
 8000870:	4642      	mov	r2, r8
 8000872:	4463      	add	r3, ip
 8000874:	195b      	adds	r3, r3, r5
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	9b01      	ldr	r3, [sp, #4]
 800087a:	407a      	eors	r2, r7
 800087c:	3301      	adds	r3, #1
 800087e:	00c0      	lsls	r0, r0, #3
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	2e0a      	cmp	r6, #10
 8000886:	dd1c      	ble.n	80008c2 <__aeabi_dmul+0xca>
 8000888:	003a      	movs	r2, r7
 800088a:	2e0b      	cmp	r6, #11
 800088c:	d05e      	beq.n	800094c <__aeabi_dmul+0x154>
 800088e:	4647      	mov	r7, r8
 8000890:	e056      	b.n	8000940 <__aeabi_dmul+0x148>
 8000892:	4649      	mov	r1, r9
 8000894:	4bb0      	ldr	r3, [pc, #704]	; (8000b58 <__aeabi_dmul+0x360>)
 8000896:	4321      	orrs	r1, r4
 8000898:	18eb      	adds	r3, r5, r3
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	2900      	cmp	r1, #0
 800089e:	d12a      	bne.n	80008f6 <__aeabi_dmul+0xfe>
 80008a0:	2080      	movs	r0, #128	; 0x80
 80008a2:	2202      	movs	r2, #2
 80008a4:	0100      	lsls	r0, r0, #4
 80008a6:	002b      	movs	r3, r5
 80008a8:	4684      	mov	ip, r0
 80008aa:	4316      	orrs	r6, r2
 80008ac:	4642      	mov	r2, r8
 80008ae:	4463      	add	r3, ip
 80008b0:	407a      	eors	r2, r7
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	9302      	str	r3, [sp, #8]
 80008b6:	2e0a      	cmp	r6, #10
 80008b8:	dd00      	ble.n	80008bc <__aeabi_dmul+0xc4>
 80008ba:	e231      	b.n	8000d20 <__aeabi_dmul+0x528>
 80008bc:	2000      	movs	r0, #0
 80008be:	2400      	movs	r4, #0
 80008c0:	2102      	movs	r1, #2
 80008c2:	2e02      	cmp	r6, #2
 80008c4:	dc26      	bgt.n	8000914 <__aeabi_dmul+0x11c>
 80008c6:	3e01      	subs	r6, #1
 80008c8:	2e01      	cmp	r6, #1
 80008ca:	d852      	bhi.n	8000972 <__aeabi_dmul+0x17a>
 80008cc:	2902      	cmp	r1, #2
 80008ce:	d04c      	beq.n	800096a <__aeabi_dmul+0x172>
 80008d0:	2901      	cmp	r1, #1
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dmul+0xde>
 80008d4:	e118      	b.n	8000b08 <__aeabi_dmul+0x310>
 80008d6:	2300      	movs	r3, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	051b      	lsls	r3, r3, #20
 80008de:	4323      	orrs	r3, r4
 80008e0:	07d2      	lsls	r2, r2, #31
 80008e2:	4313      	orrs	r3, r2
 80008e4:	0028      	movs	r0, r5
 80008e6:	0019      	movs	r1, r3
 80008e8:	b007      	add	sp, #28
 80008ea:	bcf0      	pop	{r4, r5, r6, r7}
 80008ec:	46bb      	mov	fp, r7
 80008ee:	46b2      	mov	sl, r6
 80008f0:	46a9      	mov	r9, r5
 80008f2:	46a0      	mov	r8, r4
 80008f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	2203      	movs	r2, #3
 80008fa:	0109      	lsls	r1, r1, #4
 80008fc:	002b      	movs	r3, r5
 80008fe:	468c      	mov	ip, r1
 8000900:	4316      	orrs	r6, r2
 8000902:	4642      	mov	r2, r8
 8000904:	4463      	add	r3, ip
 8000906:	407a      	eors	r2, r7
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	9302      	str	r3, [sp, #8]
 800090c:	2e0a      	cmp	r6, #10
 800090e:	dd00      	ble.n	8000912 <__aeabi_dmul+0x11a>
 8000910:	e228      	b.n	8000d64 <__aeabi_dmul+0x56c>
 8000912:	2103      	movs	r1, #3
 8000914:	2501      	movs	r5, #1
 8000916:	40b5      	lsls	r5, r6
 8000918:	46ac      	mov	ip, r5
 800091a:	26a6      	movs	r6, #166	; 0xa6
 800091c:	4663      	mov	r3, ip
 800091e:	00f6      	lsls	r6, r6, #3
 8000920:	4035      	ands	r5, r6
 8000922:	4233      	tst	r3, r6
 8000924:	d10b      	bne.n	800093e <__aeabi_dmul+0x146>
 8000926:	2690      	movs	r6, #144	; 0x90
 8000928:	00b6      	lsls	r6, r6, #2
 800092a:	4233      	tst	r3, r6
 800092c:	d118      	bne.n	8000960 <__aeabi_dmul+0x168>
 800092e:	3eb9      	subs	r6, #185	; 0xb9
 8000930:	3eff      	subs	r6, #255	; 0xff
 8000932:	421e      	tst	r6, r3
 8000934:	d01d      	beq.n	8000972 <__aeabi_dmul+0x17a>
 8000936:	46a3      	mov	fp, r4
 8000938:	4682      	mov	sl, r0
 800093a:	9100      	str	r1, [sp, #0]
 800093c:	e000      	b.n	8000940 <__aeabi_dmul+0x148>
 800093e:	0017      	movs	r7, r2
 8000940:	9900      	ldr	r1, [sp, #0]
 8000942:	003a      	movs	r2, r7
 8000944:	2902      	cmp	r1, #2
 8000946:	d010      	beq.n	800096a <__aeabi_dmul+0x172>
 8000948:	465c      	mov	r4, fp
 800094a:	4650      	mov	r0, sl
 800094c:	2903      	cmp	r1, #3
 800094e:	d1bf      	bne.n	80008d0 <__aeabi_dmul+0xd8>
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	031b      	lsls	r3, r3, #12
 8000954:	431c      	orrs	r4, r3
 8000956:	0324      	lsls	r4, r4, #12
 8000958:	0005      	movs	r5, r0
 800095a:	4b7f      	ldr	r3, [pc, #508]	; (8000b58 <__aeabi_dmul+0x360>)
 800095c:	0b24      	lsrs	r4, r4, #12
 800095e:	e7bd      	b.n	80008dc <__aeabi_dmul+0xe4>
 8000960:	2480      	movs	r4, #128	; 0x80
 8000962:	2200      	movs	r2, #0
 8000964:	4b7c      	ldr	r3, [pc, #496]	; (8000b58 <__aeabi_dmul+0x360>)
 8000966:	0324      	lsls	r4, r4, #12
 8000968:	e7b8      	b.n	80008dc <__aeabi_dmul+0xe4>
 800096a:	2400      	movs	r4, #0
 800096c:	2500      	movs	r5, #0
 800096e:	4b7a      	ldr	r3, [pc, #488]	; (8000b58 <__aeabi_dmul+0x360>)
 8000970:	e7b4      	b.n	80008dc <__aeabi_dmul+0xe4>
 8000972:	4653      	mov	r3, sl
 8000974:	041e      	lsls	r6, r3, #16
 8000976:	0c36      	lsrs	r6, r6, #16
 8000978:	0c1f      	lsrs	r7, r3, #16
 800097a:	0033      	movs	r3, r6
 800097c:	0c01      	lsrs	r1, r0, #16
 800097e:	0400      	lsls	r0, r0, #16
 8000980:	0c00      	lsrs	r0, r0, #16
 8000982:	4343      	muls	r3, r0
 8000984:	4698      	mov	r8, r3
 8000986:	0003      	movs	r3, r0
 8000988:	437b      	muls	r3, r7
 800098a:	4699      	mov	r9, r3
 800098c:	0033      	movs	r3, r6
 800098e:	434b      	muls	r3, r1
 8000990:	469c      	mov	ip, r3
 8000992:	4643      	mov	r3, r8
 8000994:	000d      	movs	r5, r1
 8000996:	0c1b      	lsrs	r3, r3, #16
 8000998:	469a      	mov	sl, r3
 800099a:	437d      	muls	r5, r7
 800099c:	44cc      	add	ip, r9
 800099e:	44d4      	add	ip, sl
 80009a0:	9500      	str	r5, [sp, #0]
 80009a2:	45e1      	cmp	r9, ip
 80009a4:	d904      	bls.n	80009b0 <__aeabi_dmul+0x1b8>
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	025b      	lsls	r3, r3, #9
 80009aa:	4699      	mov	r9, r3
 80009ac:	444d      	add	r5, r9
 80009ae:	9500      	str	r5, [sp, #0]
 80009b0:	4663      	mov	r3, ip
 80009b2:	0c1b      	lsrs	r3, r3, #16
 80009b4:	001d      	movs	r5, r3
 80009b6:	4663      	mov	r3, ip
 80009b8:	041b      	lsls	r3, r3, #16
 80009ba:	469c      	mov	ip, r3
 80009bc:	4643      	mov	r3, r8
 80009be:	041b      	lsls	r3, r3, #16
 80009c0:	0c1b      	lsrs	r3, r3, #16
 80009c2:	4698      	mov	r8, r3
 80009c4:	4663      	mov	r3, ip
 80009c6:	4443      	add	r3, r8
 80009c8:	9303      	str	r3, [sp, #12]
 80009ca:	0c23      	lsrs	r3, r4, #16
 80009cc:	4698      	mov	r8, r3
 80009ce:	0033      	movs	r3, r6
 80009d0:	0424      	lsls	r4, r4, #16
 80009d2:	0c24      	lsrs	r4, r4, #16
 80009d4:	4363      	muls	r3, r4
 80009d6:	469c      	mov	ip, r3
 80009d8:	0023      	movs	r3, r4
 80009da:	437b      	muls	r3, r7
 80009dc:	4699      	mov	r9, r3
 80009de:	4643      	mov	r3, r8
 80009e0:	435e      	muls	r6, r3
 80009e2:	435f      	muls	r7, r3
 80009e4:	444e      	add	r6, r9
 80009e6:	4663      	mov	r3, ip
 80009e8:	46b2      	mov	sl, r6
 80009ea:	0c1e      	lsrs	r6, r3, #16
 80009ec:	4456      	add	r6, sl
 80009ee:	45b1      	cmp	r9, r6
 80009f0:	d903      	bls.n	80009fa <__aeabi_dmul+0x202>
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	025b      	lsls	r3, r3, #9
 80009f6:	4699      	mov	r9, r3
 80009f8:	444f      	add	r7, r9
 80009fa:	0c33      	lsrs	r3, r6, #16
 80009fc:	4699      	mov	r9, r3
 80009fe:	003b      	movs	r3, r7
 8000a00:	444b      	add	r3, r9
 8000a02:	9305      	str	r3, [sp, #20]
 8000a04:	4663      	mov	r3, ip
 8000a06:	46ac      	mov	ip, r5
 8000a08:	041f      	lsls	r7, r3, #16
 8000a0a:	0c3f      	lsrs	r7, r7, #16
 8000a0c:	0436      	lsls	r6, r6, #16
 8000a0e:	19f6      	adds	r6, r6, r7
 8000a10:	44b4      	add	ip, r6
 8000a12:	4663      	mov	r3, ip
 8000a14:	9304      	str	r3, [sp, #16]
 8000a16:	465b      	mov	r3, fp
 8000a18:	0c1b      	lsrs	r3, r3, #16
 8000a1a:	469c      	mov	ip, r3
 8000a1c:	465b      	mov	r3, fp
 8000a1e:	041f      	lsls	r7, r3, #16
 8000a20:	0c3f      	lsrs	r7, r7, #16
 8000a22:	003b      	movs	r3, r7
 8000a24:	4343      	muls	r3, r0
 8000a26:	4699      	mov	r9, r3
 8000a28:	4663      	mov	r3, ip
 8000a2a:	4343      	muls	r3, r0
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	464b      	mov	r3, r9
 8000a30:	4660      	mov	r0, ip
 8000a32:	0c1b      	lsrs	r3, r3, #16
 8000a34:	469b      	mov	fp, r3
 8000a36:	4348      	muls	r0, r1
 8000a38:	4379      	muls	r1, r7
 8000a3a:	4451      	add	r1, sl
 8000a3c:	4459      	add	r1, fp
 8000a3e:	458a      	cmp	sl, r1
 8000a40:	d903      	bls.n	8000a4a <__aeabi_dmul+0x252>
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	469a      	mov	sl, r3
 8000a48:	4450      	add	r0, sl
 8000a4a:	0c0b      	lsrs	r3, r1, #16
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	464b      	mov	r3, r9
 8000a50:	041b      	lsls	r3, r3, #16
 8000a52:	0c1b      	lsrs	r3, r3, #16
 8000a54:	4699      	mov	r9, r3
 8000a56:	003b      	movs	r3, r7
 8000a58:	4363      	muls	r3, r4
 8000a5a:	0409      	lsls	r1, r1, #16
 8000a5c:	4645      	mov	r5, r8
 8000a5e:	4449      	add	r1, r9
 8000a60:	4699      	mov	r9, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	435c      	muls	r4, r3
 8000a66:	436b      	muls	r3, r5
 8000a68:	469c      	mov	ip, r3
 8000a6a:	464b      	mov	r3, r9
 8000a6c:	0c1b      	lsrs	r3, r3, #16
 8000a6e:	4698      	mov	r8, r3
 8000a70:	436f      	muls	r7, r5
 8000a72:	193f      	adds	r7, r7, r4
 8000a74:	4447      	add	r7, r8
 8000a76:	4450      	add	r0, sl
 8000a78:	42bc      	cmp	r4, r7
 8000a7a:	d903      	bls.n	8000a84 <__aeabi_dmul+0x28c>
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	025b      	lsls	r3, r3, #9
 8000a80:	4698      	mov	r8, r3
 8000a82:	44c4      	add	ip, r8
 8000a84:	9b04      	ldr	r3, [sp, #16]
 8000a86:	9d00      	ldr	r5, [sp, #0]
 8000a88:	4698      	mov	r8, r3
 8000a8a:	4445      	add	r5, r8
 8000a8c:	42b5      	cmp	r5, r6
 8000a8e:	41b6      	sbcs	r6, r6
 8000a90:	4273      	negs	r3, r6
 8000a92:	4698      	mov	r8, r3
 8000a94:	464b      	mov	r3, r9
 8000a96:	041e      	lsls	r6, r3, #16
 8000a98:	9b05      	ldr	r3, [sp, #20]
 8000a9a:	043c      	lsls	r4, r7, #16
 8000a9c:	4699      	mov	r9, r3
 8000a9e:	0c36      	lsrs	r6, r6, #16
 8000aa0:	19a4      	adds	r4, r4, r6
 8000aa2:	444c      	add	r4, r9
 8000aa4:	46a1      	mov	r9, r4
 8000aa6:	4683      	mov	fp, r0
 8000aa8:	186e      	adds	r6, r5, r1
 8000aaa:	44c1      	add	r9, r8
 8000aac:	428e      	cmp	r6, r1
 8000aae:	4189      	sbcs	r1, r1
 8000ab0:	44cb      	add	fp, r9
 8000ab2:	465d      	mov	r5, fp
 8000ab4:	4249      	negs	r1, r1
 8000ab6:	186d      	adds	r5, r5, r1
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	41a4      	sbcs	r4, r4
 8000abc:	45c1      	cmp	r9, r8
 8000abe:	419b      	sbcs	r3, r3
 8000ac0:	4583      	cmp	fp, r0
 8000ac2:	4180      	sbcs	r0, r0
 8000ac4:	428d      	cmp	r5, r1
 8000ac6:	4189      	sbcs	r1, r1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	4264      	negs	r4, r4
 8000acc:	431c      	orrs	r4, r3
 8000ace:	4240      	negs	r0, r0
 8000ad0:	9b03      	ldr	r3, [sp, #12]
 8000ad2:	4249      	negs	r1, r1
 8000ad4:	4301      	orrs	r1, r0
 8000ad6:	0270      	lsls	r0, r6, #9
 8000ad8:	0c3f      	lsrs	r7, r7, #16
 8000ada:	4318      	orrs	r0, r3
 8000adc:	19e4      	adds	r4, r4, r7
 8000ade:	1e47      	subs	r7, r0, #1
 8000ae0:	41b8      	sbcs	r0, r7
 8000ae2:	1864      	adds	r4, r4, r1
 8000ae4:	4464      	add	r4, ip
 8000ae6:	0df6      	lsrs	r6, r6, #23
 8000ae8:	0261      	lsls	r1, r4, #9
 8000aea:	4330      	orrs	r0, r6
 8000aec:	0dec      	lsrs	r4, r5, #23
 8000aee:	026e      	lsls	r6, r5, #9
 8000af0:	430c      	orrs	r4, r1
 8000af2:	4330      	orrs	r0, r6
 8000af4:	01c9      	lsls	r1, r1, #7
 8000af6:	d400      	bmi.n	8000afa <__aeabi_dmul+0x302>
 8000af8:	e0f1      	b.n	8000cde <__aeabi_dmul+0x4e6>
 8000afa:	2101      	movs	r1, #1
 8000afc:	0843      	lsrs	r3, r0, #1
 8000afe:	4001      	ands	r1, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	07e0      	lsls	r0, r4, #31
 8000b04:	4318      	orrs	r0, r3
 8000b06:	0864      	lsrs	r4, r4, #1
 8000b08:	4915      	ldr	r1, [pc, #84]	; (8000b60 <__aeabi_dmul+0x368>)
 8000b0a:	9b02      	ldr	r3, [sp, #8]
 8000b0c:	468c      	mov	ip, r1
 8000b0e:	4463      	add	r3, ip
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dc00      	bgt.n	8000b16 <__aeabi_dmul+0x31e>
 8000b14:	e097      	b.n	8000c46 <__aeabi_dmul+0x44e>
 8000b16:	0741      	lsls	r1, r0, #29
 8000b18:	d009      	beq.n	8000b2e <__aeabi_dmul+0x336>
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	4001      	ands	r1, r0
 8000b1e:	2904      	cmp	r1, #4
 8000b20:	d005      	beq.n	8000b2e <__aeabi_dmul+0x336>
 8000b22:	1d01      	adds	r1, r0, #4
 8000b24:	4281      	cmp	r1, r0
 8000b26:	4180      	sbcs	r0, r0
 8000b28:	4240      	negs	r0, r0
 8000b2a:	1824      	adds	r4, r4, r0
 8000b2c:	0008      	movs	r0, r1
 8000b2e:	01e1      	lsls	r1, r4, #7
 8000b30:	d506      	bpl.n	8000b40 <__aeabi_dmul+0x348>
 8000b32:	2180      	movs	r1, #128	; 0x80
 8000b34:	00c9      	lsls	r1, r1, #3
 8000b36:	468c      	mov	ip, r1
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <__aeabi_dmul+0x36c>)
 8000b3a:	401c      	ands	r4, r3
 8000b3c:	9b02      	ldr	r3, [sp, #8]
 8000b3e:	4463      	add	r3, ip
 8000b40:	4909      	ldr	r1, [pc, #36]	; (8000b68 <__aeabi_dmul+0x370>)
 8000b42:	428b      	cmp	r3, r1
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dmul+0x350>
 8000b46:	e710      	b.n	800096a <__aeabi_dmul+0x172>
 8000b48:	0761      	lsls	r1, r4, #29
 8000b4a:	08c5      	lsrs	r5, r0, #3
 8000b4c:	0264      	lsls	r4, r4, #9
 8000b4e:	055b      	lsls	r3, r3, #21
 8000b50:	430d      	orrs	r5, r1
 8000b52:	0b24      	lsrs	r4, r4, #12
 8000b54:	0d5b      	lsrs	r3, r3, #21
 8000b56:	e6c1      	b.n	80008dc <__aeabi_dmul+0xe4>
 8000b58:	000007ff 	.word	0x000007ff
 8000b5c:	fffffc01 	.word	0xfffffc01
 8000b60:	000003ff 	.word	0x000003ff
 8000b64:	feffffff 	.word	0xfeffffff
 8000b68:	000007fe 	.word	0x000007fe
 8000b6c:	464b      	mov	r3, r9
 8000b6e:	4323      	orrs	r3, r4
 8000b70:	d059      	beq.n	8000c26 <__aeabi_dmul+0x42e>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_dmul+0x380>
 8000b76:	e0a3      	b.n	8000cc0 <__aeabi_dmul+0x4c8>
 8000b78:	0020      	movs	r0, r4
 8000b7a:	f000 f9b5 	bl	8000ee8 <__clzsi2>
 8000b7e:	0001      	movs	r1, r0
 8000b80:	0003      	movs	r3, r0
 8000b82:	390b      	subs	r1, #11
 8000b84:	221d      	movs	r2, #29
 8000b86:	1a52      	subs	r2, r2, r1
 8000b88:	4649      	mov	r1, r9
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	40d1      	lsrs	r1, r2
 8000b8e:	464a      	mov	r2, r9
 8000b90:	3808      	subs	r0, #8
 8000b92:	4082      	lsls	r2, r0
 8000b94:	4084      	lsls	r4, r0
 8000b96:	0010      	movs	r0, r2
 8000b98:	430c      	orrs	r4, r1
 8000b9a:	4a74      	ldr	r2, [pc, #464]	; (8000d6c <__aeabi_dmul+0x574>)
 8000b9c:	1aeb      	subs	r3, r5, r3
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	4642      	mov	r2, r8
 8000ba2:	4463      	add	r3, ip
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	9b01      	ldr	r3, [sp, #4]
 8000ba8:	407a      	eors	r2, r7
 8000baa:	3301      	adds	r3, #1
 8000bac:	2100      	movs	r1, #0
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	2e0a      	cmp	r6, #10
 8000bb4:	dd00      	ble.n	8000bb8 <__aeabi_dmul+0x3c0>
 8000bb6:	e667      	b.n	8000888 <__aeabi_dmul+0x90>
 8000bb8:	e683      	b.n	80008c2 <__aeabi_dmul+0xca>
 8000bba:	465b      	mov	r3, fp
 8000bbc:	4303      	orrs	r3, r0
 8000bbe:	469a      	mov	sl, r3
 8000bc0:	d02a      	beq.n	8000c18 <__aeabi_dmul+0x420>
 8000bc2:	465b      	mov	r3, fp
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d06d      	beq.n	8000ca4 <__aeabi_dmul+0x4ac>
 8000bc8:	4658      	mov	r0, fp
 8000bca:	f000 f98d 	bl	8000ee8 <__clzsi2>
 8000bce:	0001      	movs	r1, r0
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	390b      	subs	r1, #11
 8000bd4:	221d      	movs	r2, #29
 8000bd6:	1a52      	subs	r2, r2, r1
 8000bd8:	0021      	movs	r1, r4
 8000bda:	0018      	movs	r0, r3
 8000bdc:	465d      	mov	r5, fp
 8000bde:	40d1      	lsrs	r1, r2
 8000be0:	3808      	subs	r0, #8
 8000be2:	4085      	lsls	r5, r0
 8000be4:	000a      	movs	r2, r1
 8000be6:	4084      	lsls	r4, r0
 8000be8:	432a      	orrs	r2, r5
 8000bea:	4693      	mov	fp, r2
 8000bec:	46a2      	mov	sl, r4
 8000bee:	4d5f      	ldr	r5, [pc, #380]	; (8000d6c <__aeabi_dmul+0x574>)
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	1aed      	subs	r5, r5, r3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	e625      	b.n	8000846 <__aeabi_dmul+0x4e>
 8000bfa:	465b      	mov	r3, fp
 8000bfc:	4303      	orrs	r3, r0
 8000bfe:	469a      	mov	sl, r3
 8000c00:	d105      	bne.n	8000c0e <__aeabi_dmul+0x416>
 8000c02:	2300      	movs	r3, #0
 8000c04:	469b      	mov	fp, r3
 8000c06:	3302      	adds	r3, #2
 8000c08:	2608      	movs	r6, #8
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	e61b      	b.n	8000846 <__aeabi_dmul+0x4e>
 8000c0e:	2303      	movs	r3, #3
 8000c10:	4682      	mov	sl, r0
 8000c12:	260c      	movs	r6, #12
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	e616      	b.n	8000846 <__aeabi_dmul+0x4e>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	469b      	mov	fp, r3
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	2604      	movs	r6, #4
 8000c20:	2500      	movs	r5, #0
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	e60f      	b.n	8000846 <__aeabi_dmul+0x4e>
 8000c26:	4642      	mov	r2, r8
 8000c28:	3301      	adds	r3, #1
 8000c2a:	9501      	str	r5, [sp, #4]
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	9b01      	ldr	r3, [sp, #4]
 8000c30:	407a      	eors	r2, r7
 8000c32:	3301      	adds	r3, #1
 8000c34:	2400      	movs	r4, #0
 8000c36:	2000      	movs	r0, #0
 8000c38:	2101      	movs	r1, #1
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	2e0a      	cmp	r6, #10
 8000c40:	dd00      	ble.n	8000c44 <__aeabi_dmul+0x44c>
 8000c42:	e621      	b.n	8000888 <__aeabi_dmul+0x90>
 8000c44:	e63d      	b.n	80008c2 <__aeabi_dmul+0xca>
 8000c46:	2101      	movs	r1, #1
 8000c48:	1ac9      	subs	r1, r1, r3
 8000c4a:	2938      	cmp	r1, #56	; 0x38
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dmul+0x458>
 8000c4e:	e642      	b.n	80008d6 <__aeabi_dmul+0xde>
 8000c50:	291f      	cmp	r1, #31
 8000c52:	dd47      	ble.n	8000ce4 <__aeabi_dmul+0x4ec>
 8000c54:	261f      	movs	r6, #31
 8000c56:	0025      	movs	r5, r4
 8000c58:	4276      	negs	r6, r6
 8000c5a:	1af3      	subs	r3, r6, r3
 8000c5c:	40dd      	lsrs	r5, r3
 8000c5e:	002b      	movs	r3, r5
 8000c60:	2920      	cmp	r1, #32
 8000c62:	d005      	beq.n	8000c70 <__aeabi_dmul+0x478>
 8000c64:	4942      	ldr	r1, [pc, #264]	; (8000d70 <__aeabi_dmul+0x578>)
 8000c66:	9d02      	ldr	r5, [sp, #8]
 8000c68:	468c      	mov	ip, r1
 8000c6a:	4465      	add	r5, ip
 8000c6c:	40ac      	lsls	r4, r5
 8000c6e:	4320      	orrs	r0, r4
 8000c70:	1e41      	subs	r1, r0, #1
 8000c72:	4188      	sbcs	r0, r1
 8000c74:	4318      	orrs	r0, r3
 8000c76:	2307      	movs	r3, #7
 8000c78:	001d      	movs	r5, r3
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	4005      	ands	r5, r0
 8000c7e:	4203      	tst	r3, r0
 8000c80:	d04a      	beq.n	8000d18 <__aeabi_dmul+0x520>
 8000c82:	230f      	movs	r3, #15
 8000c84:	2400      	movs	r4, #0
 8000c86:	4003      	ands	r3, r0
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d042      	beq.n	8000d12 <__aeabi_dmul+0x51a>
 8000c8c:	1d03      	adds	r3, r0, #4
 8000c8e:	4283      	cmp	r3, r0
 8000c90:	4180      	sbcs	r0, r0
 8000c92:	4240      	negs	r0, r0
 8000c94:	1824      	adds	r4, r4, r0
 8000c96:	0018      	movs	r0, r3
 8000c98:	0223      	lsls	r3, r4, #8
 8000c9a:	d53a      	bpl.n	8000d12 <__aeabi_dmul+0x51a>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	2400      	movs	r4, #0
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	e61b      	b.n	80008dc <__aeabi_dmul+0xe4>
 8000ca4:	f000 f920 	bl	8000ee8 <__clzsi2>
 8000ca8:	0001      	movs	r1, r0
 8000caa:	0003      	movs	r3, r0
 8000cac:	3115      	adds	r1, #21
 8000cae:	3320      	adds	r3, #32
 8000cb0:	291c      	cmp	r1, #28
 8000cb2:	dd8f      	ble.n	8000bd4 <__aeabi_dmul+0x3dc>
 8000cb4:	3808      	subs	r0, #8
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4084      	lsls	r4, r0
 8000cba:	4692      	mov	sl, r2
 8000cbc:	46a3      	mov	fp, r4
 8000cbe:	e796      	b.n	8000bee <__aeabi_dmul+0x3f6>
 8000cc0:	f000 f912 	bl	8000ee8 <__clzsi2>
 8000cc4:	0001      	movs	r1, r0
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	3115      	adds	r1, #21
 8000cca:	3320      	adds	r3, #32
 8000ccc:	291c      	cmp	r1, #28
 8000cce:	dc00      	bgt.n	8000cd2 <__aeabi_dmul+0x4da>
 8000cd0:	e758      	b.n	8000b84 <__aeabi_dmul+0x38c>
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	464c      	mov	r4, r9
 8000cd6:	3a08      	subs	r2, #8
 8000cd8:	2000      	movs	r0, #0
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	e75d      	b.n	8000b9a <__aeabi_dmul+0x3a2>
 8000cde:	9b01      	ldr	r3, [sp, #4]
 8000ce0:	9302      	str	r3, [sp, #8]
 8000ce2:	e711      	b.n	8000b08 <__aeabi_dmul+0x310>
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <__aeabi_dmul+0x57c>)
 8000ce6:	0026      	movs	r6, r4
 8000ce8:	469c      	mov	ip, r3
 8000cea:	0003      	movs	r3, r0
 8000cec:	9d02      	ldr	r5, [sp, #8]
 8000cee:	40cb      	lsrs	r3, r1
 8000cf0:	4465      	add	r5, ip
 8000cf2:	40ae      	lsls	r6, r5
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	40ab      	lsls	r3, r5
 8000cfa:	1e58      	subs	r0, r3, #1
 8000cfc:	4183      	sbcs	r3, r0
 8000cfe:	0030      	movs	r0, r6
 8000d00:	4318      	orrs	r0, r3
 8000d02:	40cc      	lsrs	r4, r1
 8000d04:	0743      	lsls	r3, r0, #29
 8000d06:	d0c7      	beq.n	8000c98 <__aeabi_dmul+0x4a0>
 8000d08:	230f      	movs	r3, #15
 8000d0a:	4003      	ands	r3, r0
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d1bd      	bne.n	8000c8c <__aeabi_dmul+0x494>
 8000d10:	e7c2      	b.n	8000c98 <__aeabi_dmul+0x4a0>
 8000d12:	0765      	lsls	r5, r4, #29
 8000d14:	0264      	lsls	r4, r4, #9
 8000d16:	0b24      	lsrs	r4, r4, #12
 8000d18:	08c0      	lsrs	r0, r0, #3
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	4305      	orrs	r5, r0
 8000d1e:	e5dd      	b.n	80008dc <__aeabi_dmul+0xe4>
 8000d20:	2500      	movs	r5, #0
 8000d22:	2302      	movs	r3, #2
 8000d24:	2e0f      	cmp	r6, #15
 8000d26:	d10c      	bne.n	8000d42 <__aeabi_dmul+0x54a>
 8000d28:	2480      	movs	r4, #128	; 0x80
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	0324      	lsls	r4, r4, #12
 8000d2e:	4223      	tst	r3, r4
 8000d30:	d00e      	beq.n	8000d50 <__aeabi_dmul+0x558>
 8000d32:	4221      	tst	r1, r4
 8000d34:	d10c      	bne.n	8000d50 <__aeabi_dmul+0x558>
 8000d36:	430c      	orrs	r4, r1
 8000d38:	0324      	lsls	r4, r4, #12
 8000d3a:	003a      	movs	r2, r7
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <__aeabi_dmul+0x580>)
 8000d3e:	0b24      	lsrs	r4, r4, #12
 8000d40:	e5cc      	b.n	80008dc <__aeabi_dmul+0xe4>
 8000d42:	2e0b      	cmp	r6, #11
 8000d44:	d000      	beq.n	8000d48 <__aeabi_dmul+0x550>
 8000d46:	e5a2      	b.n	800088e <__aeabi_dmul+0x96>
 8000d48:	468b      	mov	fp, r1
 8000d4a:	46aa      	mov	sl, r5
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	e5f7      	b.n	8000940 <__aeabi_dmul+0x148>
 8000d50:	2480      	movs	r4, #128	; 0x80
 8000d52:	465b      	mov	r3, fp
 8000d54:	0324      	lsls	r4, r4, #12
 8000d56:	431c      	orrs	r4, r3
 8000d58:	0324      	lsls	r4, r4, #12
 8000d5a:	4642      	mov	r2, r8
 8000d5c:	4655      	mov	r5, sl
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <__aeabi_dmul+0x580>)
 8000d60:	0b24      	lsrs	r4, r4, #12
 8000d62:	e5bb      	b.n	80008dc <__aeabi_dmul+0xe4>
 8000d64:	464d      	mov	r5, r9
 8000d66:	0021      	movs	r1, r4
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e7db      	b.n	8000d24 <__aeabi_dmul+0x52c>
 8000d6c:	fffffc0d 	.word	0xfffffc0d
 8000d70:	0000043e 	.word	0x0000043e
 8000d74:	0000041e 	.word	0x0000041e
 8000d78:	000007ff 	.word	0x000007ff

08000d7c <__aeabi_i2d>:
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d016      	beq.n	8000db0 <__aeabi_i2d+0x34>
 8000d82:	17c3      	asrs	r3, r0, #31
 8000d84:	18c5      	adds	r5, r0, r3
 8000d86:	405d      	eors	r5, r3
 8000d88:	0fc4      	lsrs	r4, r0, #31
 8000d8a:	0028      	movs	r0, r5
 8000d8c:	f000 f8ac 	bl	8000ee8 <__clzsi2>
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <__aeabi_i2d+0x5c>)
 8000d92:	1a1b      	subs	r3, r3, r0
 8000d94:	280a      	cmp	r0, #10
 8000d96:	dc16      	bgt.n	8000dc6 <__aeabi_i2d+0x4a>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	002e      	movs	r6, r5
 8000d9c:	3215      	adds	r2, #21
 8000d9e:	4096      	lsls	r6, r2
 8000da0:	220b      	movs	r2, #11
 8000da2:	1a12      	subs	r2, r2, r0
 8000da4:	40d5      	lsrs	r5, r2
 8000da6:	055b      	lsls	r3, r3, #21
 8000da8:	032d      	lsls	r5, r5, #12
 8000daa:	0b2d      	lsrs	r5, r5, #12
 8000dac:	0d5b      	lsrs	r3, r3, #21
 8000dae:	e003      	b.n	8000db8 <__aeabi_i2d+0x3c>
 8000db0:	2400      	movs	r4, #0
 8000db2:	2300      	movs	r3, #0
 8000db4:	2500      	movs	r5, #0
 8000db6:	2600      	movs	r6, #0
 8000db8:	051b      	lsls	r3, r3, #20
 8000dba:	432b      	orrs	r3, r5
 8000dbc:	07e4      	lsls	r4, r4, #31
 8000dbe:	4323      	orrs	r3, r4
 8000dc0:	0030      	movs	r0, r6
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	bd70      	pop	{r4, r5, r6, pc}
 8000dc6:	380b      	subs	r0, #11
 8000dc8:	4085      	lsls	r5, r0
 8000dca:	055b      	lsls	r3, r3, #21
 8000dcc:	032d      	lsls	r5, r5, #12
 8000dce:	2600      	movs	r6, #0
 8000dd0:	0b2d      	lsrs	r5, r5, #12
 8000dd2:	0d5b      	lsrs	r3, r3, #21
 8000dd4:	e7f0      	b.n	8000db8 <__aeabi_i2d+0x3c>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	0000041e 	.word	0x0000041e

08000ddc <__aeabi_d2f>:
 8000ddc:	0002      	movs	r2, r0
 8000dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de0:	004b      	lsls	r3, r1, #1
 8000de2:	030d      	lsls	r5, r1, #12
 8000de4:	0f40      	lsrs	r0, r0, #29
 8000de6:	0d5b      	lsrs	r3, r3, #21
 8000de8:	0fcc      	lsrs	r4, r1, #31
 8000dea:	0a6d      	lsrs	r5, r5, #9
 8000dec:	493a      	ldr	r1, [pc, #232]	; (8000ed8 <__aeabi_d2f+0xfc>)
 8000dee:	4305      	orrs	r5, r0
 8000df0:	1c58      	adds	r0, r3, #1
 8000df2:	00d7      	lsls	r7, r2, #3
 8000df4:	4208      	tst	r0, r1
 8000df6:	d00a      	beq.n	8000e0e <__aeabi_d2f+0x32>
 8000df8:	4938      	ldr	r1, [pc, #224]	; (8000edc <__aeabi_d2f+0x100>)
 8000dfa:	1859      	adds	r1, r3, r1
 8000dfc:	29fe      	cmp	r1, #254	; 0xfe
 8000dfe:	dd16      	ble.n	8000e2e <__aeabi_d2f+0x52>
 8000e00:	20ff      	movs	r0, #255	; 0xff
 8000e02:	2200      	movs	r2, #0
 8000e04:	05c0      	lsls	r0, r0, #23
 8000e06:	4310      	orrs	r0, r2
 8000e08:	07e4      	lsls	r4, r4, #31
 8000e0a:	4320      	orrs	r0, r4
 8000e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d106      	bne.n	8000e20 <__aeabi_d2f+0x44>
 8000e12:	433d      	orrs	r5, r7
 8000e14:	d026      	beq.n	8000e64 <__aeabi_d2f+0x88>
 8000e16:	2205      	movs	r2, #5
 8000e18:	0192      	lsls	r2, r2, #6
 8000e1a:	0a52      	lsrs	r2, r2, #9
 8000e1c:	b2d8      	uxtb	r0, r3
 8000e1e:	e7f1      	b.n	8000e04 <__aeabi_d2f+0x28>
 8000e20:	432f      	orrs	r7, r5
 8000e22:	d0ed      	beq.n	8000e00 <__aeabi_d2f+0x24>
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	03d2      	lsls	r2, r2, #15
 8000e28:	20ff      	movs	r0, #255	; 0xff
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	e7ea      	b.n	8000e04 <__aeabi_d2f+0x28>
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	dd1b      	ble.n	8000e6a <__aeabi_d2f+0x8e>
 8000e32:	0192      	lsls	r2, r2, #6
 8000e34:	1e50      	subs	r0, r2, #1
 8000e36:	4182      	sbcs	r2, r0
 8000e38:	00ed      	lsls	r5, r5, #3
 8000e3a:	0f7f      	lsrs	r7, r7, #29
 8000e3c:	432a      	orrs	r2, r5
 8000e3e:	433a      	orrs	r2, r7
 8000e40:	0753      	lsls	r3, r2, #29
 8000e42:	d047      	beq.n	8000ed4 <__aeabi_d2f+0xf8>
 8000e44:	230f      	movs	r3, #15
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_d2f+0x72>
 8000e4c:	3204      	adds	r2, #4
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	04db      	lsls	r3, r3, #19
 8000e52:	4013      	ands	r3, r2
 8000e54:	d03e      	beq.n	8000ed4 <__aeabi_d2f+0xf8>
 8000e56:	1c48      	adds	r0, r1, #1
 8000e58:	29fe      	cmp	r1, #254	; 0xfe
 8000e5a:	d0d1      	beq.n	8000e00 <__aeabi_d2f+0x24>
 8000e5c:	0192      	lsls	r2, r2, #6
 8000e5e:	0a52      	lsrs	r2, r2, #9
 8000e60:	b2c0      	uxtb	r0, r0
 8000e62:	e7cf      	b.n	8000e04 <__aeabi_d2f+0x28>
 8000e64:	2000      	movs	r0, #0
 8000e66:	2200      	movs	r2, #0
 8000e68:	e7cc      	b.n	8000e04 <__aeabi_d2f+0x28>
 8000e6a:	000a      	movs	r2, r1
 8000e6c:	3217      	adds	r2, #23
 8000e6e:	db2f      	blt.n	8000ed0 <__aeabi_d2f+0xf4>
 8000e70:	2680      	movs	r6, #128	; 0x80
 8000e72:	0436      	lsls	r6, r6, #16
 8000e74:	432e      	orrs	r6, r5
 8000e76:	251e      	movs	r5, #30
 8000e78:	1a6d      	subs	r5, r5, r1
 8000e7a:	2d1f      	cmp	r5, #31
 8000e7c:	dd11      	ble.n	8000ea2 <__aeabi_d2f+0xc6>
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4252      	negs	r2, r2
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	0031      	movs	r1, r6
 8000e86:	40d1      	lsrs	r1, r2
 8000e88:	2d20      	cmp	r5, #32
 8000e8a:	d004      	beq.n	8000e96 <__aeabi_d2f+0xba>
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <__aeabi_d2f+0x104>)
 8000e8e:	4694      	mov	ip, r2
 8000e90:	4463      	add	r3, ip
 8000e92:	409e      	lsls	r6, r3
 8000e94:	4337      	orrs	r7, r6
 8000e96:	003a      	movs	r2, r7
 8000e98:	1e53      	subs	r3, r2, #1
 8000e9a:	419a      	sbcs	r2, r3
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	e7ce      	b.n	8000e40 <__aeabi_d2f+0x64>
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <__aeabi_d2f+0x108>)
 8000ea4:	0038      	movs	r0, r7
 8000ea6:	4694      	mov	ip, r2
 8000ea8:	4463      	add	r3, ip
 8000eaa:	4098      	lsls	r0, r3
 8000eac:	003a      	movs	r2, r7
 8000eae:	1e41      	subs	r1, r0, #1
 8000eb0:	4188      	sbcs	r0, r1
 8000eb2:	409e      	lsls	r6, r3
 8000eb4:	40ea      	lsrs	r2, r5
 8000eb6:	4330      	orrs	r0, r6
 8000eb8:	4302      	orrs	r2, r0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	0753      	lsls	r3, r2, #29
 8000ebe:	d1c1      	bne.n	8000e44 <__aeabi_d2f+0x68>
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	04c9      	lsls	r1, r1, #19
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	400b      	ands	r3, r1
 8000eca:	420a      	tst	r2, r1
 8000ecc:	d1c6      	bne.n	8000e5c <__aeabi_d2f+0x80>
 8000ece:	e7a3      	b.n	8000e18 <__aeabi_d2f+0x3c>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e7a0      	b.n	8000e16 <__aeabi_d2f+0x3a>
 8000ed4:	000b      	movs	r3, r1
 8000ed6:	e79f      	b.n	8000e18 <__aeabi_d2f+0x3c>
 8000ed8:	000007fe 	.word	0x000007fe
 8000edc:	fffffc80 	.word	0xfffffc80
 8000ee0:	fffffca2 	.word	0xfffffca2
 8000ee4:	fffffc82 	.word	0xfffffc82

08000ee8 <__clzsi2>:
 8000ee8:	211c      	movs	r1, #28
 8000eea:	2301      	movs	r3, #1
 8000eec:	041b      	lsls	r3, r3, #16
 8000eee:	4298      	cmp	r0, r3
 8000ef0:	d301      	bcc.n	8000ef6 <__clzsi2+0xe>
 8000ef2:	0c00      	lsrs	r0, r0, #16
 8000ef4:	3910      	subs	r1, #16
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	4298      	cmp	r0, r3
 8000efa:	d301      	bcc.n	8000f00 <__clzsi2+0x18>
 8000efc:	0a00      	lsrs	r0, r0, #8
 8000efe:	3908      	subs	r1, #8
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	4298      	cmp	r0, r3
 8000f04:	d301      	bcc.n	8000f0a <__clzsi2+0x22>
 8000f06:	0900      	lsrs	r0, r0, #4
 8000f08:	3904      	subs	r1, #4
 8000f0a:	a202      	add	r2, pc, #8	; (adr r2, 8000f14 <__clzsi2+0x2c>)
 8000f0c:	5c10      	ldrb	r0, [r2, r0]
 8000f0e:	1840      	adds	r0, r0, r1
 8000f10:	4770      	bx	lr
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	02020304 	.word	0x02020304
 8000f18:	01010101 	.word	0x01010101
	...

08000f24 <getAccelData>:

	return;
}

void getAccelData(I2C_HandleTypeDef hi2c2)
{
 8000f24:	b084      	sub	sp, #16
 8000f26:	b5b0      	push	{r4, r5, r7, lr}
 8000f28:	b08c      	sub	sp, #48	; 0x30
 8000f2a:	af04      	add	r7, sp, #16
 8000f2c:	2530      	movs	r5, #48	; 0x30
 8000f2e:	197c      	adds	r4, r7, r5
 8000f30:	6020      	str	r0, [r4, #0]
 8000f32:	6061      	str	r1, [r4, #4]
 8000f34:	60a2      	str	r2, [r4, #8]
 8000f36:	60e3      	str	r3, [r4, #12]
	uint8_t accelData[6];
	HAL_I2C_Mem_Read(&hi2c2, IMU_ADDRESS, ACCEL_ADDRESS, I2C_MEMADD_SIZE_8BIT, accelData, 6, HAL_MAX_DELAY);
 8000f38:	1978      	adds	r0, r7, r5
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2306      	movs	r3, #6
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	240c      	movs	r4, #12
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2228      	movs	r2, #40	; 0x28
 8000f4e:	21d4      	movs	r1, #212	; 0xd4
 8000f50:	f001 fd4c 	bl	80029ec <HAL_I2C_Mem_Read>

	int16_t accel[3];
	accel[0] = (int16_t)((accelData[1] << 8) | accelData[0]); // X-axis
 8000f54:	0021      	movs	r1, r4
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	785b      	ldrb	r3, [r3, #1]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	801a      	strh	r2, [r3, #0]
	accel[1] = (int16_t)((accelData[3] << 8) | accelData[2]); // Y-axis
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	78db      	ldrb	r3, [r3, #3]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	789b      	ldrb	r3, [r3, #2]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	805a      	strh	r2, [r3, #2]
	accel[2] = (int16_t)((accelData[5] << 8) | accelData[4]); // Z-axis
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	795b      	ldrb	r3, [r3, #5]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	791b      	ldrb	r3, [r3, #4]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	809a      	strh	r2, [r3, #4]

	float accelX = accel[0] * A_SENSITIVITY / 1000;
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	5e9b      	ldrsh	r3, [r3, r2]
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff feec 	bl	8000d7c <__aeabi_i2d>
 8000fa4:	4a27      	ldr	r2, [pc, #156]	; (8001044 <getAccelData+0x120>)
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <getAccelData+0x124>)
 8000fa8:	f7ff fc26 	bl	80007f8 <__aeabi_dmul>
 8000fac:	0002      	movs	r2, r0
 8000fae:	000b      	movs	r3, r1
 8000fb0:	0010      	movs	r0, r2
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <getAccelData+0x128>)
 8000fb8:	f7ff f930 	bl	800021c <__aeabi_ddiv>
 8000fbc:	0002      	movs	r2, r0
 8000fbe:	000b      	movs	r3, r1
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	f7ff ff0a 	bl	8000ddc <__aeabi_d2f>
 8000fc8:	1c03      	adds	r3, r0, #0
 8000fca:	61fb      	str	r3, [r7, #28]
	float accelY = accel[1] * A_SENSITIVITY / 1000;
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2202      	movs	r2, #2
 8000fd0:	5e9b      	ldrsh	r3, [r3, r2]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff fed2 	bl	8000d7c <__aeabi_i2d>
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <getAccelData+0x120>)
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <getAccelData+0x124>)
 8000fdc:	f7ff fc0c 	bl	80007f8 <__aeabi_dmul>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	000b      	movs	r3, r1
 8000fe4:	0010      	movs	r0, r2
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <getAccelData+0x128>)
 8000fec:	f7ff f916 	bl	800021c <__aeabi_ddiv>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	000b      	movs	r3, r1
 8000ff4:	0010      	movs	r0, r2
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	f7ff fef0 	bl	8000ddc <__aeabi_d2f>
 8000ffc:	1c03      	adds	r3, r0, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
	float accelZ = accel[2] * A_SENSITIVITY / 1000; //g
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2204      	movs	r2, #4
 8001004:	5e9b      	ldrsh	r3, [r3, r2]
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff feb8 	bl	8000d7c <__aeabi_i2d>
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <getAccelData+0x120>)
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <getAccelData+0x124>)
 8001010:	f7ff fbf2 	bl	80007f8 <__aeabi_dmul>
 8001014:	0002      	movs	r2, r0
 8001016:	000b      	movs	r3, r1
 8001018:	0010      	movs	r0, r2
 800101a:	0019      	movs	r1, r3
 800101c:	2200      	movs	r2, #0
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <getAccelData+0x128>)
 8001020:	f7ff f8fc 	bl	800021c <__aeabi_ddiv>
 8001024:	0002      	movs	r2, r0
 8001026:	000b      	movs	r3, r1
 8001028:	0010      	movs	r0, r2
 800102a:	0019      	movs	r1, r3
 800102c:	f7ff fed6 	bl	8000ddc <__aeabi_d2f>
 8001030:	1c03      	adds	r3, r0, #0
 8001032:	617b      	str	r3, [r7, #20]

	return;
 8001034:	46c0      	nop			; (mov r8, r8)
}
 8001036:	46bd      	mov	sp, r7
 8001038:	b008      	add	sp, #32
 800103a:	bcb0      	pop	{r4, r5, r7}
 800103c:	bc08      	pop	{r3}
 800103e:	b004      	add	sp, #16
 8001040:	4718      	bx	r3
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	5a1cac08 	.word	0x5a1cac08
 8001048:	3faf3b64 	.word	0x3faf3b64
 800104c:	408f4000 	.word	0x408f4000

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b087      	sub	sp, #28
 8001054:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f000 fe7f 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f863 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f000 fac5 	bl	80015ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001062:	f000 fa95 	bl	8001590 <MX_DMA_Init>
  MX_TIM2_Init();
 8001066:	f000 f8f5 	bl	8001254 <MX_TIM2_Init>
  MX_TIM3_Init();
 800106a:	f000 f98f 	bl	800138c <MX_TIM3_Init>
  MX_TIM6_Init();
 800106e:	f000 fa23 	bl	80014b8 <MX_TIM6_Init>
  MX_I2C2_Init();
 8001072:	f000 f8af 	bl	80011d4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001076:	f000 fa5b 	bl	8001530 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <main+0xc4>)
 800107c:	2100      	movs	r1, #0
 800107e:	0018      	movs	r0, r3
 8001080:	f003 ffb2 	bl	8004fe8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <main+0xc4>)
 8001086:	2104      	movs	r1, #4
 8001088:	0018      	movs	r0, r3
 800108a:	f003 ffad 	bl	8004fe8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <main+0xc4>)
 8001090:	2108      	movs	r1, #8
 8001092:	0018      	movs	r0, r3
 8001094:	f003 ffa8 	bl	8004fe8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <main+0xc4>)
 800109a:	210c      	movs	r1, #12
 800109c:	0018      	movs	r0, r3
 800109e:	f003 ffa3 	bl	8004fe8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <main+0xc8>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	0018      	movs	r0, r3
 80010a8:	f003 ff9e 	bl	8004fe8 <HAL_TIM_PWM_Start>

  uint8_t gyro_on = 0b10000000;
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	701a      	strb	r2, [r3, #0]
  uint8_t accel_on = 0b10000000;
 80010b2:	1cfb      	adds	r3, r7, #3
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, 212, 1, 100);
 80010b8:	1dfc      	adds	r4, r7, #7
 80010ba:	4818      	ldr	r0, [pc, #96]	; (800111c <main+0xcc>)
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	2201      	movs	r2, #1
 80010c0:	21d4      	movs	r1, #212	; 0xd4
 80010c2:	f001 fdc7 	bl	8002c54 <HAL_I2C_IsDeviceReady>
 80010c6:	0003      	movs	r3, r0
 80010c8:	7023      	strb	r3, [r4, #0]
  HAL_StatusTypeDef ret1 = HAL_I2C_Mem_Write(&hi2c2, 212, 0x11, I2C_MEMADD_SIZE_8BIT, &gyro_on, 1, HAL_MAX_DELAY);
 80010ca:	1dbc      	adds	r4, r7, #6
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <main+0xcc>)
 80010ce:	2301      	movs	r3, #1
 80010d0:	425b      	negs	r3, r3
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	2211      	movs	r2, #17
 80010e0:	21d4      	movs	r1, #212	; 0xd4
 80010e2:	f001 fb55 	bl	8002790 <HAL_I2C_Mem_Write>
 80010e6:	0003      	movs	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
  HAL_StatusTypeDef ret2 = HAL_I2C_Mem_Write(&hi2c2, 212, 0x10, I2C_MEMADD_SIZE_8BIT, &accel_on, 1, HAL_MAX_DELAY);
 80010ea:	1d7c      	adds	r4, r7, #5
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <main+0xcc>)
 80010ee:	2301      	movs	r3, #1
 80010f0:	425b      	negs	r3, r3
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1cfb      	adds	r3, r7, #3
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2210      	movs	r2, #16
 8001100:	21d4      	movs	r1, #212	; 0xd4
 8001102:	f001 fb45 	bl	8002790 <HAL_I2C_Mem_Write>
 8001106:	0003      	movs	r3, r0
 8001108:	7023      	strb	r3, [r4, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <main+0xd0>)
 800110c:	0018      	movs	r0, r3
 800110e:	f003 fe69 	bl	8004de4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001112:	e7fe      	b.n	8001112 <main+0xc2>
 8001114:	20000104 	.word	0x20000104
 8001118:	2000014c 	.word	0x2000014c
 800111c:	20000028 	.word	0x20000028
 8001120:	20000194 	.word	0x20000194

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b099      	sub	sp, #100	; 0x64
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	242c      	movs	r4, #44	; 0x2c
 800112c:	193b      	adds	r3, r7, r4
 800112e:	0018      	movs	r0, r3
 8001130:	2334      	movs	r3, #52	; 0x34
 8001132:	001a      	movs	r2, r3
 8001134:	2100      	movs	r1, #0
 8001136:	f005 fe8b 	bl	8006e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113a:	231c      	movs	r3, #28
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	0018      	movs	r0, r3
 8001140:	2310      	movs	r3, #16
 8001142:	001a      	movs	r2, r3
 8001144:	2100      	movs	r1, #0
 8001146:	f005 fe83 	bl	8006e50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114a:	003b      	movs	r3, r7
 800114c:	0018      	movs	r0, r3
 800114e:	231c      	movs	r3, #28
 8001150:	001a      	movs	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	f005 fe7c 	bl	8006e50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	0021      	movs	r1, r4
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2202      	movs	r2, #2
 800115e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2201      	movs	r2, #1
 8001164:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2210      	movs	r2, #16
 800116a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	187b      	adds	r3, r7, r1
 8001174:	0018      	movs	r0, r3
 8001176:	f002 fff3 	bl	8004160 <HAL_RCC_OscConfig>
 800117a:	1e03      	subs	r3, r0, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800117e:	f000 facd 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001182:	211c      	movs	r1, #28
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2207      	movs	r2, #7
 8001188:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2100      	movs	r1, #0
 80011a0:	0018      	movs	r0, r3
 80011a2:	f003 fb63 	bl	800486c <HAL_RCC_ClockConfig>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80011aa:	f000 fab7 	bl	800171c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011ae:	003b      	movs	r3, r7
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011b4:	003b      	movs	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ba:	003b      	movs	r3, r7
 80011bc:	0018      	movs	r0, r3
 80011be:	f003 fcc1 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	1e03      	subs	r3, r0, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011c6:	f000 faa9 	bl	800171c <Error_Handler>
  }
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b019      	add	sp, #100	; 0x64
 80011d0:	bd90      	pop	{r4, r7, pc}
	...

080011d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_I2C2_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <MX_I2C2_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00101D37;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_I2C2_Init+0x74>)
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <MX_I2C2_Init+0x7c>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_I2C2_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_I2C2_Init+0x74>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_I2C2_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_I2C2_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C2_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C2_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C2_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C2_Init+0x74>)
 8001210:	0018      	movs	r0, r3
 8001212:	f001 fa27 	bl	8002664 <HAL_I2C_Init>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d001      	beq.n	800121e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800121a:	f000 fa7f 	bl	800171c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_I2C2_Init+0x74>)
 8001220:	2100      	movs	r1, #0
 8001222:	0018      	movs	r0, r3
 8001224:	f002 ff04 	bl	8004030 <HAL_I2CEx_ConfigAnalogFilter>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800122c:	f000 fa76 	bl	800171c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <MX_I2C2_Init+0x74>)
 8001232:	2100      	movs	r1, #0
 8001234:	0018      	movs	r0, r3
 8001236:	f002 ff47 	bl	80040c8 <HAL_I2CEx_ConfigDigitalFilter>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d001      	beq.n	8001242 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 fa6d 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000028 	.word	0x20000028
 800124c:	40005800 	.word	0x40005800
 8001250:	00101d37 	.word	0x00101d37

08001254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	2328      	movs	r3, #40	; 0x28
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	0018      	movs	r0, r3
 8001260:	2310      	movs	r3, #16
 8001262:	001a      	movs	r2, r3
 8001264:	2100      	movs	r1, #0
 8001266:	f005 fdf3 	bl	8006e50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126a:	2320      	movs	r3, #32
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	0018      	movs	r0, r3
 8001270:	2308      	movs	r3, #8
 8001272:	001a      	movs	r2, r3
 8001274:	2100      	movs	r1, #0
 8001276:	f005 fdeb 	bl	8006e50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	0018      	movs	r0, r3
 800127e:	231c      	movs	r3, #28
 8001280:	001a      	movs	r2, r3
 8001282:	2100      	movs	r1, #0
 8001284:	f005 fde4 	bl	8006e50 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001288:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <MX_TIM2_Init+0x134>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	05d2      	lsls	r2, r2, #23
 800128e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001290:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <MX_TIM2_Init+0x134>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <MX_TIM2_Init+0x134>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 106;
 800129c:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <MX_TIM2_Init+0x134>)
 800129e:	226a      	movs	r2, #106	; 0x6a
 80012a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b39      	ldr	r3, [pc, #228]	; (8001388 <MX_TIM2_Init+0x134>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <MX_TIM2_Init+0x134>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <MX_TIM2_Init+0x134>)
 80012b0:	0018      	movs	r0, r3
 80012b2:	f003 fd47 	bl	8004d44 <HAL_TIM_Base_Init>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012ba:	f000 fa2f 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	2128      	movs	r1, #40	; 0x28
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	0152      	lsls	r2, r2, #5
 80012c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c8:	187a      	adds	r2, r7, r1
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <MX_TIM2_Init+0x134>)
 80012cc:	0011      	movs	r1, r2
 80012ce:	0018      	movs	r0, r3
 80012d0:	f004 f976 	bl	80055c0 <HAL_TIM_ConfigClockSource>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80012d8:	f000 fa20 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_TIM2_Init+0x134>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f003 fe2a 	bl	8004f38 <HAL_TIM_PWM_Init>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80012e8:	f000 fa18 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2120      	movs	r1, #32
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fa:	187a      	adds	r2, r7, r1
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_TIM2_Init+0x134>)
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f004 fd8b 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800130a:	f000 fa07 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2260      	movs	r2, #96	; 0x60
 8001312:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001326:	1d39      	adds	r1, r7, #4
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_TIM2_Init+0x134>)
 800132a:	2200      	movs	r2, #0
 800132c:	0018      	movs	r0, r3
 800132e:	f004 f881 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d001      	beq.n	800133a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001336:	f000 f9f1 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800133a:	1d39      	adds	r1, r7, #4
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_TIM2_Init+0x134>)
 800133e:	2204      	movs	r2, #4
 8001340:	0018      	movs	r0, r3
 8001342:	f004 f877 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800134a:	f000 f9e7 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800134e:	1d39      	adds	r1, r7, #4
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <MX_TIM2_Init+0x134>)
 8001352:	2208      	movs	r2, #8
 8001354:	0018      	movs	r0, r3
 8001356:	f004 f86d 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800135a:	1e03      	subs	r3, r0, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 800135e:	f000 f9dd 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001362:	1d39      	adds	r1, r7, #4
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_TIM2_Init+0x134>)
 8001366:	220c      	movs	r2, #12
 8001368:	0018      	movs	r0, r3
 800136a:	f004 f863 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800136e:	1e03      	subs	r3, r0, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8001372:	f000 f9d3 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <MX_TIM2_Init+0x134>)
 8001378:	0018      	movs	r0, r3
 800137a:	f000 fb1b 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b00e      	add	sp, #56	; 0x38
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	20000104 	.word	0x20000104

0800138c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	2328      	movs	r3, #40	; 0x28
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	0018      	movs	r0, r3
 8001398:	2310      	movs	r3, #16
 800139a:	001a      	movs	r2, r3
 800139c:	2100      	movs	r1, #0
 800139e:	f005 fd57 	bl	8006e50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a2:	2320      	movs	r3, #32
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	0018      	movs	r0, r3
 80013a8:	2308      	movs	r3, #8
 80013aa:	001a      	movs	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f005 fd4f 	bl	8006e50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	0018      	movs	r0, r3
 80013b6:	231c      	movs	r3, #28
 80013b8:	001a      	movs	r2, r3
 80013ba:	2100      	movs	r1, #0
 80013bc:	f005 fd48 	bl	8006e50 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c0:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <MX_TIM3_Init+0x120>)
 80013c2:	4a3b      	ldr	r2, [pc, #236]	; (80014b0 <MX_TIM3_Init+0x124>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <MX_TIM3_Init+0x120>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <MX_TIM3_Init+0x120>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <MX_TIM3_Init+0x120>)
 80013d4:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <MX_TIM3_Init+0x128>)
 80013d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <MX_TIM3_Init+0x120>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <MX_TIM3_Init+0x120>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013e4:	4b31      	ldr	r3, [pc, #196]	; (80014ac <MX_TIM3_Init+0x120>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f003 fcac 	bl	8004d44 <HAL_TIM_Base_Init>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013f0:	f000 f994 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f4:	2128      	movs	r1, #40	; 0x28
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	0152      	lsls	r2, r2, #5
 80013fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013fe:	187a      	adds	r2, r7, r1
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <MX_TIM3_Init+0x120>)
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f004 f8db 	bl	80055c0 <HAL_TIM_ConfigClockSource>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800140e:	f000 f985 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <MX_TIM3_Init+0x120>)
 8001414:	0018      	movs	r0, r3
 8001416:	f003 fd8f 	bl	8004f38 <HAL_TIM_PWM_Init>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800141e:	f000 f97d 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_TIM3_Init+0x120>)
 8001424:	0018      	movs	r0, r3
 8001426:	f003 fd2f 	bl	8004e88 <HAL_TIM_OC_Init>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800142e:	f000 f975 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2120      	movs	r1, #32
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001440:	187a      	adds	r2, r7, r1
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM3_Init+0x120>)
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f004 fce8 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001450:	f000 f964 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2260      	movs	r2, #96	; 0x60
 8001458:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146c:	1d39      	adds	r1, r7, #4
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_TIM3_Init+0x120>)
 8001470:	2200      	movs	r2, #0
 8001472:	0018      	movs	r0, r3
 8001474:	f003 ffde 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8001478:	1e03      	subs	r3, r0, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 800147c:	f000 f94e 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001486:	1d39      	adds	r1, r7, #4
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_TIM3_Init+0x120>)
 800148a:	2204      	movs	r2, #4
 800148c:	0018      	movs	r0, r3
 800148e:	f003 ff79 	bl	8005384 <HAL_TIM_OC_ConfigChannel>
 8001492:	1e03      	subs	r3, r0, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8001496:	f000 f941 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <MX_TIM3_Init+0x120>)
 800149c:	0018      	movs	r0, r3
 800149e:	f000 fa89 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b00e      	add	sp, #56	; 0x38
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	2000014c 	.word	0x2000014c
 80014b0:	40000400 	.word	0x40000400
 80014b4:	00004e1f 	.word	0x00004e1f

080014b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	003b      	movs	r3, r7
 80014c0:	0018      	movs	r0, r3
 80014c2:	2308      	movs	r3, #8
 80014c4:	001a      	movs	r2, r3
 80014c6:	2100      	movs	r1, #0
 80014c8:	f005 fcc2 	bl	8006e50 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_TIM6_Init+0x6c>)
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <MX_TIM6_Init+0x70>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_TIM6_Init+0x6c>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_TIM6_Init+0x6c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1947;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_TIM6_Init+0x6c>)
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <MX_TIM6_Init+0x74>)
 80014e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_TIM6_Init+0x6c>)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_TIM6_Init+0x6c>)
 80014ec:	0018      	movs	r0, r3
 80014ee:	f003 fc29 	bl	8004d44 <HAL_TIM_Base_Init>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80014f6:	f000 f911 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	003b      	movs	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	003b      	movs	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001506:	003a      	movs	r2, r7
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_TIM6_Init+0x6c>)
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f004 fc85 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 8001512:	1e03      	subs	r3, r0, #0
 8001514:	d001      	beq.n	800151a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001516:	f000 f901 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	20000194 	.word	0x20000194
 8001528:	40001000 	.word	0x40001000
 800152c:	0000079b 	.word	0x0000079b

08001530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_USART1_UART_Init+0x5c>)
 8001538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800153c:	22e1      	movs	r2, #225	; 0xe1
 800153e:	0252      	lsls	r2, r2, #9
 8001540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001574:	0018      	movs	r0, r3
 8001576:	f004 fcbf 	bl	8005ef8 <HAL_UART_Init>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d001      	beq.n	8001582 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800157e:	f000 f8cd 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200001dc 	.word	0x200001dc
 800158c:	40013800 	.word	0x40013800

08001590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_DMA_Init+0x58>)
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_DMA_Init+0x58>)
 800159c:	2101      	movs	r1, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	615a      	str	r2, [r3, #20]
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_DMA_Init+0x58>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	2201      	movs	r2, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2009      	movs	r0, #9
 80015b4:	f000 fce0 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80015b8:	2009      	movs	r0, #9
 80015ba:	f000 fcf2 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	200a      	movs	r0, #10
 80015c4:	f000 fcd8 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80015c8:	200a      	movs	r0, #10
 80015ca:	f000 fcea 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	200b      	movs	r0, #11
 80015d4:	f000 fcd0 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80015d8:	200b      	movs	r0, #11
 80015da:	f000 fce2 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	40021000 	.word	0x40021000

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b08b      	sub	sp, #44	; 0x2c
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	2414      	movs	r4, #20
 80015f4:	193b      	adds	r3, r7, r4
 80015f6:	0018      	movs	r0, r3
 80015f8:	2314      	movs	r3, #20
 80015fa:	001a      	movs	r2, r3
 80015fc:	2100      	movs	r1, #0
 80015fe:	f005 fc27 	bl	8006e50 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	03c9      	lsls	r1, r1, #15
 800160c:	430a      	orrs	r2, r1
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	03db      	lsls	r3, r3, #15
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	0309      	lsls	r1, r1, #12
 8001628:	430a      	orrs	r2, r1
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <MX_GPIO_Init+0xf4>)
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	031b      	lsls	r3, r3, #12
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <MX_GPIO_Init+0xf4>)
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0289      	lsls	r1, r1, #10
 8001644:	430a      	orrs	r2, r1
 8001646:	615a      	str	r2, [r3, #20]
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_GPIO_Init+0xf4>)
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	029b      	lsls	r3, r3, #10
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <MX_GPIO_Init+0xf4>)
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	02c9      	lsls	r1, r1, #11
 8001660:	430a      	orrs	r2, r1
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	02db      	lsls	r3, r3, #11
 800166c:	4013      	ands	r3, r2
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_GPIO_Init+0xf8>)
 8001674:	2200      	movs	r2, #0
 8001676:	213f      	movs	r1, #63	; 0x3f
 8001678:	0018      	movs	r0, r3
 800167a:	f000 ffd5 	bl	8002628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800167e:	2390      	movs	r3, #144	; 0x90
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	2200      	movs	r2, #0
 8001684:	2130      	movs	r1, #48	; 0x30
 8001686:	0018      	movs	r0, r3
 8001688:	f000 ffce 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800168c:	193b      	adds	r3, r7, r4
 800168e:	223f      	movs	r2, #63	; 0x3f
 8001690:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	193b      	adds	r3, r7, r4
 8001694:	2201      	movs	r2, #1
 8001696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	193b      	adds	r3, r7, r4
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	193b      	adds	r3, r7, r4
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <MX_GPIO_Init+0xf8>)
 80016a8:	0019      	movs	r1, r3
 80016aa:	0010      	movs	r0, r2
 80016ac:	f000 fe44 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016b0:	0021      	movs	r1, r4
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2230      	movs	r2, #48	; 0x30
 80016b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2201      	movs	r2, #1
 80016bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	187a      	adds	r2, r7, r1
 80016cc:	2390      	movs	r3, #144	; 0x90
 80016ce:	05db      	lsls	r3, r3, #23
 80016d0:	0011      	movs	r1, r2
 80016d2:	0018      	movs	r0, r3
 80016d4:	f000 fe30 	bl	8002338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b00b      	add	sp, #44	; 0x2c
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000800 	.word	0x48000800

080016e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b095      	sub	sp, #84	; 0x54
 80016ec:	af12      	add	r7, sp, #72	; 0x48
 80016ee:	6078      	str	r0, [r7, #4]
	getAccelData(hi2c2);
 80016f0:	4c09      	ldr	r4, [pc, #36]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016f2:	466b      	mov	r3, sp
 80016f4:	0018      	movs	r0, r3
 80016f6:	0023      	movs	r3, r4
 80016f8:	3310      	adds	r3, #16
 80016fa:	2244      	movs	r2, #68	; 0x44
 80016fc:	0019      	movs	r1, r3
 80016fe:	f005 fbd3 	bl	8006ea8 <memcpy>
 8001702:	6820      	ldr	r0, [r4, #0]
 8001704:	6861      	ldr	r1, [r4, #4]
 8001706:	68a2      	ldr	r2, [r4, #8]
 8001708:	68e3      	ldr	r3, [r4, #12]
 800170a:	f7ff fc0b 	bl	8000f24 <getAccelData>
	int16_t gyroDataZ = (int16_t)((gyroData[5] << 8) | gyroData[4]); // Z-axis

	int16_t accelDataX = (int16_t)((accelData[1] << 8) | accelData[0]); // X-axis
	int16_t accelDataY = (int16_t)((accelData[3] << 8) | accelData[2]); // Y-axis
	int16_t accelDataZ = (int16_t)((accelData[5] << 8) | accelData[4]); // Z-axis*/
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b003      	add	sp, #12
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	20000028 	.word	0x20000028

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>
	...

08001728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_MspInit+0x44>)
 8001730:	699a      	ldr	r2, [r3, #24]
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_MspInit+0x44>)
 8001734:	2101      	movs	r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	619a      	str	r2, [r3, #24]
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_MspInit+0x44>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2201      	movs	r2, #1
 8001740:	4013      	ands	r3, r2
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_MspInit+0x44>)
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_MspInit+0x44>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0549      	lsls	r1, r1, #21
 8001750:	430a      	orrs	r2, r1
 8001752:	61da      	str	r2, [r3, #28]
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_MspInit+0x44>)
 8001756:	69da      	ldr	r2, [r3, #28]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	055b      	lsls	r3, r3, #21
 800175c:	4013      	ands	r3, r2
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b08b      	sub	sp, #44	; 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	2414      	movs	r4, #20
 800177a:	193b      	adds	r3, r7, r4
 800177c:	0018      	movs	r0, r3
 800177e:	2314      	movs	r3, #20
 8001780:	001a      	movs	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	f005 fb64 	bl	8006e50 <memset>
  if(hi2c->Instance==I2C2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a59      	ldr	r2, [pc, #356]	; (80018f4 <HAL_I2C_MspInit+0x184>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d000      	beq.n	8001794 <HAL_I2C_MspInit+0x24>
 8001792:	e0aa      	b.n	80018ea <HAL_I2C_MspInit+0x17a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001794:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <HAL_I2C_MspInit+0x188>)
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_I2C_MspInit+0x188>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	02c9      	lsls	r1, r1, #11
 800179e:	430a      	orrs	r2, r1
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <HAL_I2C_MspInit+0x188>)
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	02db      	lsls	r3, r3, #11
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017b0:	193b      	adds	r3, r7, r4
 80017b2:	22c0      	movs	r2, #192	; 0xc0
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b8:	0021      	movs	r1, r4
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	2212      	movs	r2, #18
 80017be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2203      	movs	r2, #3
 80017ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2201      	movs	r2, #1
 80017d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	4a49      	ldr	r2, [pc, #292]	; (80018fc <HAL_I2C_MspInit+0x18c>)
 80017d6:	0019      	movs	r1, r3
 80017d8:	0010      	movs	r0, r2
 80017da:	f000 fdad 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_I2C_MspInit+0x188>)
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <HAL_I2C_MspInit+0x188>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	03c9      	lsls	r1, r1, #15
 80017e8:	430a      	orrs	r2, r1
 80017ea:	61da      	str	r2, [r3, #28]
 80017ec:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <HAL_I2C_MspInit+0x188>)
 80017ee:	69da      	ldr	r2, [r3, #28]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	03db      	lsls	r3, r3, #15
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_I2C_MspInit+0x190>)
 80017fc:	4a41      	ldr	r2, [pc, #260]	; (8001904 <HAL_I2C_MspInit+0x194>)
 80017fe:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_I2C_MspInit+0x190>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001806:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <HAL_I2C_MspInit+0x190>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800180c:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <HAL_I2C_MspInit+0x190>)
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_I2C_MspInit+0x190>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <HAL_I2C_MspInit+0x190>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_I2C_MspInit+0x190>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_I2C_MspInit+0x190>)
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	0192      	lsls	r2, r2, #6
 800182a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_I2C_MspInit+0x190>)
 800182e:	0018      	movs	r0, r3
 8001830:	f000 fbd4 	bl	8001fdc <HAL_DMA_Init>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001838:	f7ff ff70 	bl	800171c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH5_I2C2_RX);
 800183c:	4a32      	ldr	r2, [pc, #200]	; (8001908 <HAL_I2C_MspInit+0x198>)
 800183e:	23a8      	movs	r3, #168	; 0xa8
 8001840:	58d3      	ldr	r3, [r2, r3]
 8001842:	4931      	ldr	r1, [pc, #196]	; (8001908 <HAL_I2C_MspInit+0x198>)
 8001844:	4a31      	ldr	r2, [pc, #196]	; (800190c <HAL_I2C_MspInit+0x19c>)
 8001846:	4013      	ands	r3, r2
 8001848:	22a8      	movs	r2, #168	; 0xa8
 800184a:	508b      	str	r3, [r1, r2]
 800184c:	4a2e      	ldr	r2, [pc, #184]	; (8001908 <HAL_I2C_MspInit+0x198>)
 800184e:	23a8      	movs	r3, #168	; 0xa8
 8001850:	58d3      	ldr	r3, [r2, r3]
 8001852:	492d      	ldr	r1, [pc, #180]	; (8001908 <HAL_I2C_MspInit+0x198>)
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	0292      	lsls	r2, r2, #10
 8001858:	4313      	orrs	r3, r2
 800185a:	22a8      	movs	r2, #168	; 0xa8
 800185c:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a27      	ldr	r2, [pc, #156]	; (8001900 <HAL_I2C_MspInit+0x190>)
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_I2C_MspInit+0x190>)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800186a:	4b29      	ldr	r3, [pc, #164]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 800186c:	4a29      	ldr	r2, [pc, #164]	; (8001914 <HAL_I2C_MspInit+0x1a4>)
 800186e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 8001872:	2210      	movs	r2, #16
 8001874:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	0192      	lsls	r2, r2, #6
 800189a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fb9c 	bl	8001fdc <HAL_DMA_Init>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 80018a8:	f7ff ff38 	bl	800171c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_I2C2_TX);
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_I2C_MspInit+0x198>)
 80018ae:	23a8      	movs	r3, #168	; 0xa8
 80018b0:	58d3      	ldr	r3, [r2, r3]
 80018b2:	4915      	ldr	r1, [pc, #84]	; (8001908 <HAL_I2C_MspInit+0x198>)
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_I2C_MspInit+0x1a8>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	22a8      	movs	r2, #168	; 0xa8
 80018ba:	508b      	str	r3, [r1, r2]
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_I2C_MspInit+0x198>)
 80018be:	23a8      	movs	r3, #168	; 0xa8
 80018c0:	58d3      	ldr	r3, [r2, r3]
 80018c2:	4911      	ldr	r1, [pc, #68]	; (8001908 <HAL_I2C_MspInit+0x198>)
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0192      	lsls	r2, r2, #6
 80018c8:	4313      	orrs	r3, r2
 80018ca:	22a8      	movs	r2, #168	; 0xa8
 80018cc:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_I2C_MspInit+0x1a0>)
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2018      	movs	r0, #24
 80018e0:	f000 fb4a 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 80018e4:	2018      	movs	r0, #24
 80018e6:	f000 fb5c 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b00b      	add	sp, #44	; 0x2c
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	40005800 	.word	0x40005800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000400 	.word	0x48000400
 8001900:	2000007c 	.word	0x2000007c
 8001904:	40020058 	.word	0x40020058
 8001908:	40020000 	.word	0x40020000
 800190c:	fff0ffff 	.word	0xfff0ffff
 8001910:	200000c0 	.word	0x200000c0
 8001914:	40020044 	.word	0x40020044
 8001918:	ffff0fff 	.word	0xffff0fff

0800191c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	05db      	lsls	r3, r3, #23
 800192c:	429a      	cmp	r2, r3
 800192e:	d10c      	bne.n	800194a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001936:	2101      	movs	r1, #1
 8001938:	430a      	orrs	r2, r1
 800193a:	61da      	str	r2, [r3, #28]
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_TIM_Base_MspInit+0x8c>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2201      	movs	r2, #1
 8001942:	4013      	ands	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001948:	e02a      	b.n	80019a0 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_TIM_Base_MspInit+0x90>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d10c      	bne.n	800196e <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001956:	69da      	ldr	r2, [r3, #28]
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_TIM_Base_MspInit+0x8c>)
 800195a:	2102      	movs	r1, #2
 800195c:	430a      	orrs	r2, r1
 800195e:	61da      	str	r2, [r3, #28]
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]
}
 800196c:	e018      	b.n	80019a0 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM6)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <HAL_TIM_Base_MspInit+0x94>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d113      	bne.n	80019a0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_TIM_Base_MspInit+0x8c>)
 800197a:	69da      	ldr	r2, [r3, #28]
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_TIM_Base_MspInit+0x8c>)
 800197e:	2110      	movs	r1, #16
 8001980:	430a      	orrs	r2, r1
 8001982:	61da      	str	r2, [r3, #28]
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	2210      	movs	r2, #16
 800198a:	4013      	ands	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2011      	movs	r0, #17
 8001996:	f000 faef 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800199a:	2011      	movs	r0, #17
 800199c:	f000 fb01 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b006      	add	sp, #24
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40000400 	.word	0x40000400
 80019b0:	40001000 	.word	0x40001000

080019b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	2414      	movs	r4, #20
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	0018      	movs	r0, r3
 80019c2:	2314      	movs	r3, #20
 80019c4:	001a      	movs	r2, r3
 80019c6:	2100      	movs	r1, #0
 80019c8:	f005 fa42 	bl	8006e50 <memset>
  if(htim->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	05db      	lsls	r3, r3, #23
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d125      	bne.n	8001a24 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_TIM_MspPostInit+0xcc>)
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HAL_TIM_MspPostInit+0xcc>)
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	0289      	lsls	r1, r1, #10
 80019e2:	430a      	orrs	r2, r1
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_TIM_MspPostInit+0xcc>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	029b      	lsls	r3, r3, #10
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019f4:	0021      	movs	r1, r4
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	220f      	movs	r2, #15
 80019fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2202      	movs	r2, #2
 8001a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2202      	movs	r2, #2
 8001a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	187a      	adds	r2, r7, r1
 8001a16:	2390      	movs	r3, #144	; 0x90
 8001a18:	05db      	lsls	r3, r3, #23
 8001a1a:	0011      	movs	r1, r2
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f000 fc8b 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a22:	e029      	b.n	8001a78 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a16      	ldr	r2, [pc, #88]	; (8001a84 <HAL_TIM_MspPostInit+0xd0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d124      	bne.n	8001a78 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_TIM_MspPostInit+0xcc>)
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_TIM_MspPostInit+0xcc>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0289      	lsls	r1, r1, #10
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_TIM_MspPostInit+0xcc>)
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	029b      	lsls	r3, r3, #10
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a4a:	2114      	movs	r1, #20
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	22c0      	movs	r2, #192	; 0xc0
 8001a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2202      	movs	r2, #2
 8001a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2201      	movs	r2, #1
 8001a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	187a      	adds	r2, r7, r1
 8001a6c:	2390      	movs	r3, #144	; 0x90
 8001a6e:	05db      	lsls	r3, r3, #23
 8001a70:	0011      	movs	r1, r2
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 fc60 	bl	8002338 <HAL_GPIO_Init>
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b00b      	add	sp, #44	; 0x2c
 8001a7e:	bd90      	pop	{r4, r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40000400 	.word	0x40000400

08001a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b08b      	sub	sp, #44	; 0x2c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	2414      	movs	r4, #20
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	0018      	movs	r0, r3
 8001a96:	2314      	movs	r3, #20
 8001a98:	001a      	movs	r2, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f005 f9d8 	bl	8006e50 <memset>
  if(huart->Instance==USART1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a57      	ldr	r2, [pc, #348]	; (8001c04 <HAL_UART_MspInit+0x17c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d000      	beq.n	8001aac <HAL_UART_MspInit+0x24>
 8001aaa:	e0a7      	b.n	8001bfc <HAL_UART_MspInit+0x174>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aac:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <HAL_UART_MspInit+0x180>)
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	4b55      	ldr	r3, [pc, #340]	; (8001c08 <HAL_UART_MspInit+0x180>)
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	01c9      	lsls	r1, r1, #7
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	619a      	str	r2, [r3, #24]
 8001aba:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_UART_MspInit+0x180>)
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	01db      	lsls	r3, r3, #7
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <HAL_UART_MspInit+0x180>)
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_UART_MspInit+0x180>)
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	0289      	lsls	r1, r1, #10
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_UART_MspInit+0x180>)
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	029b      	lsls	r3, r3, #10
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	22c0      	movs	r2, #192	; 0xc0
 8001ae8:	00d2      	lsls	r2, r2, #3
 8001aea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	0021      	movs	r1, r4
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	2202      	movs	r2, #2
 8001af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	187b      	adds	r3, r7, r1
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	2203      	movs	r2, #3
 8001afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	2201      	movs	r2, #1
 8001b04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	187a      	adds	r2, r7, r1
 8001b08:	2390      	movs	r3, #144	; 0x90
 8001b0a:	05db      	lsls	r3, r3, #23
 8001b0c:	0011      	movs	r1, r2
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 fc12 	bl	8002338 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001b14:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b16:	4a3e      	ldr	r2, [pc, #248]	; (8001c10 <HAL_UART_MspInit+0x188>)
 8001b18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1a:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b20:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b2c:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b32:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b3e:	4b33      	ldr	r3, [pc, #204]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 fa48 	bl	8001fdc <HAL_DMA_Init>
 8001b4c:	1e03      	subs	r3, r0, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b50:	f7ff fde4 	bl	800171c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8001b54:	4a2f      	ldr	r2, [pc, #188]	; (8001c14 <HAL_UART_MspInit+0x18c>)
 8001b56:	23a8      	movs	r3, #168	; 0xa8
 8001b58:	58d3      	ldr	r3, [r2, r3]
 8001b5a:	492e      	ldr	r1, [pc, #184]	; (8001c14 <HAL_UART_MspInit+0x18c>)
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	4393      	bics	r3, r2
 8001b60:	22a8      	movs	r2, #168	; 0xa8
 8001b62:	508b      	str	r3, [r1, r2]
 8001b64:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <HAL_UART_MspInit+0x18c>)
 8001b66:	23a8      	movs	r3, #168	; 0xa8
 8001b68:	58d3      	ldr	r3, [r2, r3]
 8001b6a:	492a      	ldr	r1, [pc, #168]	; (8001c14 <HAL_UART_MspInit+0x18c>)
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	22a8      	movs	r2, #168	; 0xa8
 8001b72:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b78:	675a      	str	r2, [r3, #116]	; 0x74
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_UART_MspInit+0x184>)
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001b82:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_UART_MspInit+0x194>)
 8001b84:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001b88:	2210      	movs	r2, #16
 8001b8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 fa12 	bl	8001fdc <HAL_DMA_Init>
 8001bb8:	1e03      	subs	r3, r0, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001bbc:	f7ff fdae 	bl	800171c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 8001bc0:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_UART_MspInit+0x18c>)
 8001bc2:	23a8      	movs	r3, #168	; 0xa8
 8001bc4:	58d3      	ldr	r3, [r2, r3]
 8001bc6:	4913      	ldr	r1, [pc, #76]	; (8001c14 <HAL_UART_MspInit+0x18c>)
 8001bc8:	22f0      	movs	r2, #240	; 0xf0
 8001bca:	4393      	bics	r3, r2
 8001bcc:	22a8      	movs	r2, #168	; 0xa8
 8001bce:	508b      	str	r3, [r1, r2]
 8001bd0:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_UART_MspInit+0x18c>)
 8001bd2:	23a8      	movs	r3, #168	; 0xa8
 8001bd4:	58d3      	ldr	r3, [r2, r3]
 8001bd6:	490f      	ldr	r1, [pc, #60]	; (8001c14 <HAL_UART_MspInit+0x18c>)
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	22a8      	movs	r2, #168	; 0xa8
 8001bde:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001be4:	671a      	str	r2, [r3, #112]	; 0x70
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_UART_MspInit+0x190>)
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	201b      	movs	r0, #27
 8001bf2:	f000 f9c1 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bf6:	201b      	movs	r0, #27
 8001bf8:	f000 f9d3 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b00b      	add	sp, #44	; 0x2c
 8001c02:	bd90      	pop	{r4, r7, pc}
 8001c04:	40013800 	.word	0x40013800
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	20000264 	.word	0x20000264
 8001c10:	40020008 	.word	0x40020008
 8001c14:	40020000 	.word	0x40020000
 8001c18:	200002a8 	.word	0x200002a8
 8001c1c:	4002001c 	.word	0x4002001c

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <NMI_Handler+0x4>

08001c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler+0x4>

08001c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c44:	f000 f8d0 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <DMA1_Ch1_IRQHandler+0x14>)
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fa85 	bl	8002166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	20000264 	.word	0x20000264

08001c68 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 fa79 	bl	8002166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	200002a8 	.word	0x200002a8

08001c80 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_i2c2_tx);
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x14>)
 8001c86:	0018      	movs	r0, r3
 8001c88:	f000 fa6d 	bl	8002166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8001c8c:	46c0      	nop			; (mov r8, r8)
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	2000007c 	.word	0x2000007c

08001c98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <TIM6_DAC_IRQHandler+0x14>)
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f003 fa5a 	bl	8005158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	20000194 	.word	0x20000194

08001cb0 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <I2C2_IRQHandler+0x2c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	23e0      	movs	r3, #224	; 0xe0
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <I2C2_IRQHandler+0x2c>)
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f001 f8f9 	bl	8002ebc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8001cca:	e003      	b.n	8001cd4 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <I2C2_IRQHandler+0x2c>)
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f001 f8da 	bl	8002e88 <HAL_I2C_EV_IRQHandler>
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	20000028 	.word	0x20000028

08001ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <USART1_IRQHandler+0x14>)
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f004 f95a 	bl	8005fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	200001dc 	.word	0x200001dc

08001cf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d08:	f7ff fff6 	bl	8001cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0e:	490d      	ldr	r1, [pc, #52]	; (8001d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <LoopForever+0xe>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d24:	4c0a      	ldr	r4, [pc, #40]	; (8001d50 <LoopForever+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d32:	f005 f895 	bl	8006e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d36:	f7ff f98b 	bl	8001050 <main>

08001d3a <LoopForever>:

LoopForever:
    b LoopForever
 8001d3a:	e7fe      	b.n	8001d3a <LoopForever>
  ldr   r0, =_estack
 8001d3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d48:	08006f54 	.word	0x08006f54
  ldr r2, =_sbss
 8001d4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d50:	200002f0 	.word	0x200002f0

08001d54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC1_COMP_IRQHandler>
	...

08001d58 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_Init+0x24>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_Init+0x24>)
 8001d62:	2110      	movs	r1, #16
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f809 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6e:	f7ff fcdb 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40022000 	.word	0x40022000

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_InitTick+0x5c>)
 8001d8a:	681c      	ldr	r4, [r3, #0]
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_InitTick+0x60>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	0019      	movs	r1, r3
 8001d92:	23fa      	movs	r3, #250	; 0xfa
 8001d94:	0098      	lsls	r0, r3, #2
 8001d96:	f7fe f9b5 	bl	8000104 <__udivsi3>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	0020      	movs	r0, r4
 8001da0:	f7fe f9b0 	bl	8000104 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 f90b 	bl	8001fc2 <HAL_SYSTICK_Config>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e00f      	b.n	8001dd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d80b      	bhi.n	8001dd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	425b      	negs	r3, r3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f000 f8d8 	bl	8001f78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_InitTick+0x64>)
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b003      	add	sp, #12
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_IncTick+0x1c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	001a      	movs	r2, r3
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_IncTick+0x20>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	18d2      	adds	r2, r2, r3
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_IncTick+0x20>)
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	20000008 	.word	0x20000008
 8001e08:	200002ec 	.word	0x200002ec

08001e0c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <HAL_GetTick+0x10>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	200002ec 	.word	0x200002ec

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	0002      	movs	r2, r0
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	1dfb      	adds	r3, r7, #7
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b7f      	cmp	r3, #127	; 0x7f
 8001e32:	d809      	bhi.n	8001e48 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	001a      	movs	r2, r3
 8001e3a:	231f      	movs	r3, #31
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <__NVIC_EnableIRQ+0x30>)
 8001e40:	2101      	movs	r1, #1
 8001e42:	4091      	lsls	r1, r2
 8001e44:	000a      	movs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
  }
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b7f      	cmp	r3, #127	; 0x7f
 8001e68:	d828      	bhi.n	8001ebc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e6a:	4a2f      	ldr	r2, [pc, #188]	; (8001f28 <__NVIC_SetPriority+0xd4>)
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	33c0      	adds	r3, #192	; 0xc0
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	589b      	ldr	r3, [r3, r2]
 8001e7a:	1dfa      	adds	r2, r7, #7
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	0011      	movs	r1, r2
 8001e80:	2203      	movs	r2, #3
 8001e82:	400a      	ands	r2, r1
 8001e84:	00d2      	lsls	r2, r2, #3
 8001e86:	21ff      	movs	r1, #255	; 0xff
 8001e88:	4091      	lsls	r1, r2
 8001e8a:	000a      	movs	r2, r1
 8001e8c:	43d2      	mvns	r2, r2
 8001e8e:	401a      	ands	r2, r3
 8001e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	22ff      	movs	r2, #255	; 0xff
 8001e98:	401a      	ands	r2, r3
 8001e9a:	1dfb      	adds	r3, r7, #7
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	4003      	ands	r3, r0
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ea8:	481f      	ldr	r0, [pc, #124]	; (8001f28 <__NVIC_SetPriority+0xd4>)
 8001eaa:	1dfb      	adds	r3, r7, #7
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	33c0      	adds	r3, #192	; 0xc0
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001eba:	e031      	b.n	8001f20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <__NVIC_SetPriority+0xd8>)
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3306      	adds	r3, #6
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	18d3      	adds	r3, r2, r3
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	1dfa      	adds	r2, r7, #7
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	0011      	movs	r1, r2
 8001edc:	2203      	movs	r2, #3
 8001ede:	400a      	ands	r2, r1
 8001ee0:	00d2      	lsls	r2, r2, #3
 8001ee2:	21ff      	movs	r1, #255	; 0xff
 8001ee4:	4091      	lsls	r1, r2
 8001ee6:	000a      	movs	r2, r1
 8001ee8:	43d2      	mvns	r2, r2
 8001eea:	401a      	ands	r2, r3
 8001eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	019b      	lsls	r3, r3, #6
 8001ef2:	22ff      	movs	r2, #255	; 0xff
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	1dfb      	adds	r3, r7, #7
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	0018      	movs	r0, r3
 8001efc:	2303      	movs	r3, #3
 8001efe:	4003      	ands	r3, r0
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f04:	4809      	ldr	r0, [pc, #36]	; (8001f2c <__NVIC_SetPriority+0xd8>)
 8001f06:	1dfb      	adds	r3, r7, #7
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	001c      	movs	r4, r3
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	4023      	ands	r3, r4
 8001f10:	3b08      	subs	r3, #8
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	430a      	orrs	r2, r1
 8001f16:	3306      	adds	r3, #6
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	18c3      	adds	r3, r0, r3
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	601a      	str	r2, [r3, #0]
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b003      	add	sp, #12
 8001f26:	bd90      	pop	{r4, r7, pc}
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	045b      	lsls	r3, r3, #17
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d301      	bcc.n	8001f48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f44:	2301      	movs	r3, #1
 8001f46:	e010      	b.n	8001f6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <SysTick_Config+0x44>)
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	3a01      	subs	r2, #1
 8001f4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f50:	2301      	movs	r3, #1
 8001f52:	425b      	negs	r3, r3
 8001f54:	2103      	movs	r1, #3
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7ff ff7c 	bl	8001e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <SysTick_Config+0x44>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SysTick_Config+0x44>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	210f      	movs	r1, #15
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	1c02      	adds	r2, r0, #0
 8001f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	0011      	movs	r1, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7ff ff5d 	bl	8001e54 <__NVIC_SetPriority>
}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	0002      	movs	r2, r0
 8001faa:	1dfb      	adds	r3, r7, #7
 8001fac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff ff33 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff ffaf 	bl	8001f30 <SysTick_Config>
 8001fd2:	0003      	movs	r3, r0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e036      	b.n	8002060 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2221      	movs	r2, #33	; 0x21
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_DMA_Init+0x8c>)
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	0018      	movs	r0, r3
 8002044:	f000 f93e 	bl	80022c4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2221      	movs	r2, #33	; 0x21
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	2100      	movs	r1, #0
 800205c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b004      	add	sp, #16
 8002066:	bd80      	pop	{r7, pc}
 8002068:	ffffc00f 	.word	0xffffc00f

0800206c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2221      	movs	r2, #33	; 0x21
 8002078:	5c9b      	ldrb	r3, [r3, r2]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d008      	beq.n	8002092 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2204      	movs	r2, #4
 8002084:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	2100      	movs	r1, #0
 800208c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e020      	b.n	80020d4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	210e      	movs	r1, #14
 800209e:	438a      	bics	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2101      	movs	r1, #1
 80020ae:	438a      	bics	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2101      	movs	r1, #1
 80020bc:	4091      	lsls	r1, r2
 80020be:	000a      	movs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2221      	movs	r2, #33	; 0x21
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e4:	210f      	movs	r1, #15
 80020e6:	187b      	adds	r3, r7, r1
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2221      	movs	r2, #33	; 0x21
 80020f0:	5c9b      	ldrb	r3, [r3, r2]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d006      	beq.n	8002106 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2204      	movs	r2, #4
 80020fc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e028      	b.n	8002158 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	210e      	movs	r1, #14
 8002112:	438a      	bics	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	438a      	bics	r2, r1
 8002124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	2101      	movs	r1, #1
 8002130:	4091      	lsls	r1, r2
 8002132:	000a      	movs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2221      	movs	r2, #33	; 0x21
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	0010      	movs	r0, r2
 8002156:	4798      	blx	r3
    }
  }
  return status;
 8002158:	230f      	movs	r3, #15
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b004      	add	sp, #16
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2204      	movs	r2, #4
 8002184:	409a      	lsls	r2, r3
 8002186:	0013      	movs	r3, r2
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	d024      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x72>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2204      	movs	r2, #4
 8002192:	4013      	ands	r3, r2
 8002194:	d020      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2220      	movs	r2, #32
 800219e:	4013      	ands	r3, r2
 80021a0:	d107      	bne.n	80021b2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2104      	movs	r1, #4
 80021ae:	438a      	bics	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	2104      	movs	r1, #4
 80021bc:	4091      	lsls	r1, r2
 80021be:	000a      	movs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d100      	bne.n	80021cc <HAL_DMA_IRQHandler+0x66>
 80021ca:	e06a      	b.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	0010      	movs	r0, r2
 80021d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021d6:	e064      	b.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2202      	movs	r2, #2
 80021de:	409a      	lsls	r2, r3
 80021e0:	0013      	movs	r3, r2
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	d02b      	beq.n	8002240 <HAL_DMA_IRQHandler+0xda>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2202      	movs	r2, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d027      	beq.n	8002240 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2220      	movs	r2, #32
 80021f8:	4013      	ands	r3, r2
 80021fa:	d10b      	bne.n	8002214 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	210a      	movs	r1, #10
 8002208:	438a      	bics	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2221      	movs	r2, #33	; 0x21
 8002210:	2101      	movs	r1, #1
 8002212:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	2102      	movs	r1, #2
 800221e:	4091      	lsls	r1, r2
 8002220:	000a      	movs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	2100      	movs	r1, #0
 800222a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	d036      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	0010      	movs	r0, r2
 800223c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800223e:	e030      	b.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2208      	movs	r2, #8
 8002246:	409a      	lsls	r2, r3
 8002248:	0013      	movs	r3, r2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4013      	ands	r3, r2
 800224e:	d028      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2208      	movs	r2, #8
 8002254:	4013      	ands	r3, r2
 8002256:	d024      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	210e      	movs	r1, #14
 8002264:	438a      	bics	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	2101      	movs	r1, #1
 8002272:	4091      	lsls	r1, r2
 8002274:	000a      	movs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2221      	movs	r2, #33	; 0x21
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	0010      	movs	r0, r2
 800229e:	4798      	blx	r3
    }
  }
}
 80022a0:	e7ff      	b.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b004      	add	sp, #16
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2221      	movs	r2, #33	; 0x21
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	b2db      	uxtb	r3, r3
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	001a      	movs	r2, r3
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <DMA_CalcBaseAndBitshift+0x60>)
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d810      	bhi.n	80022fa <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <DMA_CalcBaseAndBitshift+0x64>)
 80022de:	4694      	mov	ip, r2
 80022e0:	4463      	add	r3, ip
 80022e2:	2114      	movs	r1, #20
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7fd ff0d 	bl	8000104 <__udivsi3>
 80022ea:	0003      	movs	r3, r0
 80022ec:	009a      	lsls	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <DMA_CalcBaseAndBitshift+0x68>)
 80022f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80022f8:	e00f      	b.n	800231a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <DMA_CalcBaseAndBitshift+0x6c>)
 8002300:	4694      	mov	ip, r2
 8002302:	4463      	add	r3, ip
 8002304:	2114      	movs	r1, #20
 8002306:	0018      	movs	r0, r3
 8002308:	f7fd fefc 	bl	8000104 <__udivsi3>
 800230c:	0003      	movs	r3, r0
 800230e:	009a      	lsls	r2, r3, #2
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a07      	ldr	r2, [pc, #28]	; (8002334 <DMA_CalcBaseAndBitshift+0x70>)
 8002318:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40020407 	.word	0x40020407
 8002328:	bffdfff8 	.word	0xbffdfff8
 800232c:	40020000 	.word	0x40020000
 8002330:	bffdfbf8 	.word	0xbffdfbf8
 8002334:	40020400 	.word	0x40020400

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002346:	e155      	b.n	80025f4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4091      	lsls	r1, r2
 8002352:	000a      	movs	r2, r1
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d100      	bne.n	8002360 <HAL_GPIO_Init+0x28>
 800235e:	e146      	b.n	80025ee <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	4013      	ands	r3, r2
 8002368:	2b01      	cmp	r3, #1
 800236a:	d005      	beq.n	8002378 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2203      	movs	r2, #3
 8002372:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002374:	2b02      	cmp	r3, #2
 8002376:	d130      	bne.n	80023da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	409a      	lsls	r2, r3
 8002386:	0013      	movs	r3, r2
 8002388:	43da      	mvns	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	409a      	lsls	r2, r3
 800239a:	0013      	movs	r3, r2
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ae:	2201      	movs	r2, #1
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	43da      	mvns	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	2201      	movs	r2, #1
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2203      	movs	r2, #3
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d017      	beq.n	8002416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	43da      	mvns	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	409a      	lsls	r2, r3
 8002408:	0013      	movs	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2203      	movs	r2, #3
 800241c:	4013      	ands	r3, r2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d123      	bne.n	800246a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	58d3      	ldr	r3, [r2, r3]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2207      	movs	r2, #7
 8002434:	4013      	ands	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	43da      	mvns	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2107      	movs	r1, #7
 800244e:	400b      	ands	r3, r1
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	409a      	lsls	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	6939      	ldr	r1, [r7, #16]
 8002468:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	409a      	lsls	r2, r3
 8002478:	0013      	movs	r3, r2
 800247a:	43da      	mvns	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2203      	movs	r2, #3
 8002488:	401a      	ands	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	409a      	lsls	r2, r3
 8002490:	0013      	movs	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	23c0      	movs	r3, #192	; 0xc0
 80024a4:	029b      	lsls	r3, r3, #10
 80024a6:	4013      	ands	r3, r2
 80024a8:	d100      	bne.n	80024ac <HAL_GPIO_Init+0x174>
 80024aa:	e0a0      	b.n	80025ee <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ac:	4b57      	ldr	r3, [pc, #348]	; (800260c <HAL_GPIO_Init+0x2d4>)
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	4b56      	ldr	r3, [pc, #344]	; (800260c <HAL_GPIO_Init+0x2d4>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	619a      	str	r2, [r3, #24]
 80024b8:	4b54      	ldr	r3, [pc, #336]	; (800260c <HAL_GPIO_Init+0x2d4>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_GPIO_Init+0x2d8>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	589b      	ldr	r3, [r3, r2]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2203      	movs	r2, #3
 80024d6:	4013      	ands	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	409a      	lsls	r2, r3
 80024de:	0013      	movs	r3, r2
 80024e0:	43da      	mvns	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	2390      	movs	r3, #144	; 0x90
 80024ec:	05db      	lsls	r3, r3, #23
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x1ee>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a47      	ldr	r2, [pc, #284]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x1ea>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a46      	ldr	r2, [pc, #280]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x1e6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a45      	ldr	r2, [pc, #276]	; (800261c <HAL_GPIO_Init+0x2e4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x1e2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a44      	ldr	r2, [pc, #272]	; (8002620 <HAL_GPIO_Init+0x2e8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x1de>
 8002512:	2304      	movs	r3, #4
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 8002516:	2305      	movs	r3, #5
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 8002526:	2300      	movs	r3, #0
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	2103      	movs	r1, #3
 800252c:	400a      	ands	r2, r1
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002538:	4935      	ldr	r1, [pc, #212]	; (8002610 <HAL_GPIO_Init+0x2d8>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43da      	mvns	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	035b      	lsls	r3, r3, #13
 800255e:	4013      	ands	r3, r2
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43da      	mvns	r2, r3
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	039b      	lsls	r3, r3, #14
 8002588:	4013      	ands	r3, r2
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43da      	mvns	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	029b      	lsls	r3, r3, #10
 80025b2:	4013      	ands	r3, r2
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	025b      	lsls	r3, r3, #9
 80025dc:	4013      	ands	r3, r2
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	40da      	lsrs	r2, r3
 80025fc:	1e13      	subs	r3, r2, #0
 80025fe:	d000      	beq.n	8002602 <HAL_GPIO_Init+0x2ca>
 8002600:	e6a2      	b.n	8002348 <HAL_GPIO_Init+0x10>
  } 
}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b006      	add	sp, #24
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	48000400 	.word	0x48000400
 8002618:	48000800 	.word	0x48000800
 800261c:	48000c00 	.word	0x48000c00
 8002620:	48001000 	.word	0x48001000
 8002624:	40010400 	.word	0x40010400

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	0008      	movs	r0, r1
 8002632:	0011      	movs	r1, r2
 8002634:	1cbb      	adds	r3, r7, #2
 8002636:	1c02      	adds	r2, r0, #0
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	1c7b      	adds	r3, r7, #1
 800263c:	1c0a      	adds	r2, r1, #0
 800263e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002640:	1c7b      	adds	r3, r7, #1
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002648:	1cbb      	adds	r3, r7, #2
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002652:	1cbb      	adds	r3, r7, #2
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b002      	add	sp, #8
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e082      	b.n	800277c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2241      	movs	r2, #65	; 0x41
 800267a:	5c9b      	ldrb	r3, [r3, r2]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2240      	movs	r2, #64	; 0x40
 8002686:	2100      	movs	r1, #0
 8002688:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff f86f 	bl	8001770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2241      	movs	r2, #65	; 0x41
 8002696:	2124      	movs	r1, #36	; 0x24
 8002698:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	438a      	bics	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4934      	ldr	r1, [pc, #208]	; (8002784 <HAL_I2C_Init+0x120>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4931      	ldr	r1, [pc, #196]	; (8002788 <HAL_I2C_Init+0x124>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d108      	bne.n	80026e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0209      	lsls	r1, r1, #8
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	e007      	b.n	80026f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2184      	movs	r1, #132	; 0x84
 80026ec:	0209      	lsls	r1, r1, #8
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d104      	bne.n	8002704 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	491f      	ldr	r1, [pc, #124]	; (800278c <HAL_I2C_Init+0x128>)
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	491a      	ldr	r1, [pc, #104]	; (8002788 <HAL_I2C_Init+0x124>)
 8002720:	400a      	ands	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	431a      	orrs	r2, r3
 800272e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69d9      	ldr	r1, [r3, #28]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2241      	movs	r2, #65	; 0x41
 8002768:	2120      	movs	r1, #32
 800276a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2242      	movs	r2, #66	; 0x42
 8002776:	2100      	movs	r1, #0
 8002778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}
 8002784:	f0ffffff 	.word	0xf0ffffff
 8002788:	ffff7fff 	.word	0xffff7fff
 800278c:	02008000 	.word	0x02008000

08002790 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	000c      	movs	r4, r1
 800279a:	0010      	movs	r0, r2
 800279c:	0019      	movs	r1, r3
 800279e:	230a      	movs	r3, #10
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	1c22      	adds	r2, r4, #0
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	2308      	movs	r3, #8
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	1c02      	adds	r2, r0, #0
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	1dbb      	adds	r3, r7, #6
 80027b0:	1c0a      	adds	r2, r1, #0
 80027b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2241      	movs	r2, #65	; 0x41
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d000      	beq.n	80027c2 <HAL_I2C_Mem_Write+0x32>
 80027c0:	e10c      	b.n	80029dc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_I2C_Mem_Write+0x42>
 80027c8:	232c      	movs	r3, #44	; 0x2c
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	0092      	lsls	r2, r2, #2
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0ff      	b.n	80029de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	5c9b      	ldrb	r3, [r3, r2]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_I2C_Mem_Write+0x5c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0f8      	b.n	80029de <HAL_I2C_Mem_Write+0x24e>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	2101      	movs	r1, #1
 80027f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027f4:	f7ff fb0a 	bl	8001e0c <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	0219      	lsls	r1, r3, #8
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2319      	movs	r3, #25
 8002808:	2201      	movs	r2, #1
 800280a:	f001 f99b 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0e3      	b.n	80029de <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2241      	movs	r2, #65	; 0x41
 800281a:	2121      	movs	r1, #33	; 0x21
 800281c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2242      	movs	r2, #66	; 0x42
 8002822:	2140      	movs	r1, #64	; 0x40
 8002824:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	222c      	movs	r2, #44	; 0x2c
 8002836:	18ba      	adds	r2, r7, r2
 8002838:	8812      	ldrh	r2, [r2, #0]
 800283a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002842:	1dbb      	adds	r3, r7, #6
 8002844:	881c      	ldrh	r4, [r3, #0]
 8002846:	2308      	movs	r3, #8
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	881a      	ldrh	r2, [r3, #0]
 800284c:	230a      	movs	r3, #10
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	8819      	ldrh	r1, [r3, #0]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	0023      	movs	r3, r4
 800285e:	f000 fcbf 	bl	80031e0 <I2C_RequestMemoryWrite>
 8002862:	1e03      	subs	r3, r0, #0
 8002864:	d005      	beq.n	8002872 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2240      	movs	r2, #64	; 0x40
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0b5      	b.n	80029de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2bff      	cmp	r3, #255	; 0xff
 800287a:	d911      	bls.n	80028a0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	22ff      	movs	r2, #255	; 0xff
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	b2da      	uxtb	r2, r3
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	045c      	lsls	r4, r3, #17
 800288c:	230a      	movs	r3, #10
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	8819      	ldrh	r1, [r3, #0]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	2300      	movs	r3, #0
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	0023      	movs	r3, r4
 800289a:	f001 fb2b 	bl	8003ef4 <I2C_TransferConfig>
 800289e:	e012      	b.n	80028c6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	049c      	lsls	r4, r3, #18
 80028b4:	230a      	movs	r3, #10
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	8819      	ldrh	r1, [r3, #0]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	2300      	movs	r3, #0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	0023      	movs	r3, r4
 80028c2:	f001 fb17 	bl	8003ef4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f001 f987 	bl	8003be0 <I2C_WaitOnTXISFlagUntilTimeout>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e081      	b.n	80029de <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d03a      	beq.n	800298a <HAL_I2C_Mem_Write+0x1fa>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	d136      	bne.n	800298a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800291c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	0013      	movs	r3, r2
 8002926:	2200      	movs	r2, #0
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	f001 f90b 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e053      	b.n	80029de <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	2bff      	cmp	r3, #255	; 0xff
 800293e:	d911      	bls.n	8002964 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	22ff      	movs	r2, #255	; 0xff
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	b2da      	uxtb	r2, r3
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	045c      	lsls	r4, r3, #17
 8002950:	230a      	movs	r3, #10
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	8819      	ldrh	r1, [r3, #0]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	2300      	movs	r3, #0
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	0023      	movs	r3, r4
 800295e:	f001 fac9 	bl	8003ef4 <I2C_TransferConfig>
 8002962:	e012      	b.n	800298a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	b2da      	uxtb	r2, r3
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	049c      	lsls	r4, r3, #18
 8002978:	230a      	movs	r3, #10
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	8819      	ldrh	r1, [r3, #0]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	2300      	movs	r3, #0
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	0023      	movs	r3, r4
 8002986:	f001 fab5 	bl	8003ef4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d198      	bne.n	80028c6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	0018      	movs	r0, r3
 800299c:	f001 f966 	bl	8003c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e01a      	b.n	80029de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2220      	movs	r2, #32
 80029ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	490b      	ldr	r1, [pc, #44]	; (80029e8 <HAL_I2C_Mem_Write+0x258>)
 80029bc:	400a      	ands	r2, r1
 80029be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2241      	movs	r2, #65	; 0x41
 80029c4:	2120      	movs	r1, #32
 80029c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2242      	movs	r2, #66	; 0x42
 80029cc:	2100      	movs	r1, #0
 80029ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b007      	add	sp, #28
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	fe00e800 	.word	0xfe00e800

080029ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	000c      	movs	r4, r1
 80029f6:	0010      	movs	r0, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	230a      	movs	r3, #10
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	1c22      	adds	r2, r4, #0
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	2308      	movs	r3, #8
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	1c02      	adds	r2, r0, #0
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	1c0a      	adds	r2, r1, #0
 8002a0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2241      	movs	r2, #65	; 0x41
 8002a14:	5c9b      	ldrb	r3, [r3, r2]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d000      	beq.n	8002a1e <HAL_I2C_Mem_Read+0x32>
 8002a1c:	e110      	b.n	8002c40 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <HAL_I2C_Mem_Read+0x42>
 8002a24:	232c      	movs	r3, #44	; 0x2c
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e103      	b.n	8002c42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2240      	movs	r2, #64	; 0x40
 8002a3e:	5c9b      	ldrb	r3, [r3, r2]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_I2C_Mem_Read+0x5c>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e0fc      	b.n	8002c42 <HAL_I2C_Mem_Read+0x256>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2240      	movs	r2, #64	; 0x40
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a50:	f7ff f9dc 	bl	8001e0c <HAL_GetTick>
 8002a54:	0003      	movs	r3, r0
 8002a56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	0219      	lsls	r1, r3, #8
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2319      	movs	r3, #25
 8002a64:	2201      	movs	r2, #1
 8002a66:	f001 f86d 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0e7      	b.n	8002c42 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2241      	movs	r2, #65	; 0x41
 8002a76:	2122      	movs	r1, #34	; 0x22
 8002a78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2242      	movs	r2, #66	; 0x42
 8002a7e:	2140      	movs	r1, #64	; 0x40
 8002a80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	222c      	movs	r2, #44	; 0x2c
 8002a92:	18ba      	adds	r2, r7, r2
 8002a94:	8812      	ldrh	r2, [r2, #0]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a9e:	1dbb      	adds	r3, r7, #6
 8002aa0:	881c      	ldrh	r4, [r3, #0]
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	230a      	movs	r3, #10
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	8819      	ldrh	r1, [r3, #0]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	0023      	movs	r3, r4
 8002aba:	f000 fbf5 	bl	80032a8 <I2C_RequestMemoryRead>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2240      	movs	r2, #64	; 0x40
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0b9      	b.n	8002c42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2bff      	cmp	r3, #255	; 0xff
 8002ad6:	d911      	bls.n	8002afc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	22ff      	movs	r2, #255	; 0xff
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	045c      	lsls	r4, r3, #17
 8002ae8:	230a      	movs	r3, #10
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	8819      	ldrh	r1, [r3, #0]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_I2C_Mem_Read+0x260>)
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	0023      	movs	r3, r4
 8002af6:	f001 f9fd 	bl	8003ef4 <I2C_TransferConfig>
 8002afa:	e012      	b.n	8002b22 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	049c      	lsls	r4, r3, #18
 8002b10:	230a      	movs	r3, #10
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	8819      	ldrh	r1, [r3, #0]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	4b4c      	ldr	r3, [pc, #304]	; (8002c4c <HAL_I2C_Mem_Read+0x260>)
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	0023      	movs	r3, r4
 8002b1e:	f001 f9e9 	bl	8003ef4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	0013      	movs	r3, r2
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2104      	movs	r1, #4
 8002b30:	f001 f808 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e082      	b.n	8002c42 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d03a      	beq.n	8002bee <HAL_I2C_Mem_Read+0x202>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d136      	bne.n	8002bee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	0013      	movs	r3, r2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	f000 ffd9 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e053      	b.n	8002c42 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2bff      	cmp	r3, #255	; 0xff
 8002ba2:	d911      	bls.n	8002bc8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	045c      	lsls	r4, r3, #17
 8002bb4:	230a      	movs	r3, #10
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	8819      	ldrh	r1, [r3, #0]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	0023      	movs	r3, r4
 8002bc2:	f001 f997 	bl	8003ef4 <I2C_TransferConfig>
 8002bc6:	e012      	b.n	8002bee <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	049c      	lsls	r4, r3, #18
 8002bdc:	230a      	movs	r3, #10
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	8819      	ldrh	r1, [r3, #0]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	2300      	movs	r3, #0
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	0023      	movs	r3, r4
 8002bea:	f001 f983 	bl	8003ef4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d194      	bne.n	8002b22 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f001 f834 	bl	8003c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e01a      	b.n	8002c42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2220      	movs	r2, #32
 8002c12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	490c      	ldr	r1, [pc, #48]	; (8002c50 <HAL_I2C_Mem_Read+0x264>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2241      	movs	r2, #65	; 0x41
 8002c28:	2120      	movs	r1, #32
 8002c2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2242      	movs	r2, #66	; 0x42
 8002c30:	2100      	movs	r1, #0
 8002c32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2240      	movs	r2, #64	; 0x40
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b007      	add	sp, #28
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	80002400 	.word	0x80002400
 8002c50:	fe00e800 	.word	0xfe00e800

08002c54 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	230a      	movs	r3, #10
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	1c0a      	adds	r2, r1, #0
 8002c66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2241      	movs	r2, #65	; 0x41
 8002c70:	5c9b      	ldrb	r3, [r3, r2]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d000      	beq.n	8002c7a <HAL_I2C_IsDeviceReady+0x26>
 8002c78:	e0fd      	b.n	8002e76 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	401a      	ands	r2, r3
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0f2      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2240      	movs	r2, #64	; 0x40
 8002c96:	5c9b      	ldrb	r3, [r3, r2]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_I2C_IsDeviceReady+0x4c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e0eb      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x224>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2240      	movs	r2, #64	; 0x40
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2241      	movs	r2, #65	; 0x41
 8002cac:	2124      	movs	r1, #36	; 0x24
 8002cae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_I2C_IsDeviceReady+0x7a>
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	059b      	lsls	r3, r3, #22
 8002cc6:	0d9b      	lsrs	r3, r3, #22
 8002cc8:	4a6d      	ldr	r2, [pc, #436]	; (8002e80 <HAL_I2C_IsDeviceReady+0x22c>)
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	e006      	b.n	8002cdc <HAL_I2C_IsDeviceReady+0x88>
 8002cce:	230a      	movs	r3, #10
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	059b      	lsls	r3, r3, #22
 8002cd6:	0d9b      	lsrs	r3, r3, #22
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	; (8002e84 <HAL_I2C_IsDeviceReady+0x230>)
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002ce2:	f7ff f893 	bl	8001e0c <HAL_GetTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	3b20      	subs	r3, #32
 8002cf6:	425a      	negs	r2, r3
 8002cf8:	4153      	adcs	r3, r2
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	231f      	movs	r3, #31
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	3b10      	subs	r3, #16
 8002d0e:	425a      	negs	r2, r3
 8002d10:	4153      	adcs	r3, r2
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	231e      	movs	r3, #30
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d1a:	e035      	b.n	8002d88 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	d01a      	beq.n	8002d58 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d22:	f7ff f873 	bl	8001e0c <HAL_GetTick>
 8002d26:	0002      	movs	r2, r0
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <HAL_I2C_IsDeviceReady+0xe4>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10f      	bne.n	8002d58 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2241      	movs	r2, #65	; 0x41
 8002d3c:	2120      	movs	r1, #32
 8002d3e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	2220      	movs	r2, #32
 8002d46:	431a      	orrs	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e08f      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	4013      	ands	r3, r2
 8002d62:	3b20      	subs	r3, #32
 8002d64:	425a      	negs	r2, r3
 8002d66:	4153      	adcs	r3, r2
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	231f      	movs	r3, #31
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2210      	movs	r2, #16
 8002d78:	4013      	ands	r3, r2
 8002d7a:	3b10      	subs	r3, #16
 8002d7c:	425a      	negs	r2, r3
 8002d7e:	4153      	adcs	r3, r2
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	231e      	movs	r3, #30
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d88:	231f      	movs	r3, #31
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_I2C_IsDeviceReady+0x148>
 8002d92:	231e      	movs	r3, #30
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0bf      	beq.n	8002d1c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2210      	movs	r2, #16
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d01a      	beq.n	8002de0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	0013      	movs	r3, r2
 8002db4:	2200      	movs	r2, #0
 8002db6:	2120      	movs	r1, #32
 8002db8:	f000 fec4 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e059      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2241      	movs	r2, #65	; 0x41
 8002dd0:	2120      	movs	r1, #32
 8002dd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e04b      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	0013      	movs	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	2120      	movs	r1, #32
 8002dee:	f000 fea9 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 8002df2:	1e03      	subs	r3, r0, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e03e      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2210      	movs	r2, #16
 8002e00:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2220      	movs	r2, #32
 8002e08:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d119      	bne.n	8002e46 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	01c9      	lsls	r1, r1, #7
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2120      	movs	r1, #32
 8002e32:	f000 fe87 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 8002e36:	1e03      	subs	r3, r0, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e01c      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2220      	movs	r2, #32
 8002e44:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d900      	bls.n	8002e56 <HAL_I2C_IsDeviceReady+0x202>
 8002e54:	e72f      	b.n	8002cb6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2241      	movs	r2, #65	; 0x41
 8002e5a:	2120      	movs	r1, #32
 8002e5c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	2220      	movs	r2, #32
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2240      	movs	r2, #64	; 0x40
 8002e6e:	2100      	movs	r1, #0
 8002e70:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b008      	add	sp, #32
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	02002000 	.word	0x02002000
 8002e84:	02002800 	.word	0x02002800

08002e88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	68f9      	ldr	r1, [r7, #12]
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
  }
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b004      	add	sp, #16
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	d00e      	beq.n	8002efc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ee4:	d00a      	beq.n	8002efc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	2201      	movs	r2, #1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2280      	movs	r2, #128	; 0x80
 8002ef8:	0052      	lsls	r2, r2, #1
 8002efa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4013      	ands	r3, r2
 8002f04:	d00e      	beq.n	8002f24 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f0c:	d00a      	beq.n	8002f24 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	2208      	movs	r2, #8
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	00d2      	lsls	r2, r2, #3
 8002f22:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d00e      	beq.n	8002f4c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002f34:	d00a      	beq.n	8002f4c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	220b      	movs	r2, #11
 8002f56:	4013      	ands	r3, r2
 8002f58:	d005      	beq.n	8002f66 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0011      	movs	r1, r2
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 fc83 	bl	800386c <I2C_ITError>
  }
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b006      	add	sp, #24
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b002      	add	sp, #8
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b002      	add	sp, #8
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	0008      	movs	r0, r1
 8002f98:	0011      	movs	r1, r2
 8002f9a:	1cfb      	adds	r3, r7, #3
 8002f9c:	1c02      	adds	r2, r0, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	003b      	movs	r3, r7
 8002fa2:	1c0a      	adds	r2, r1, #0
 8002fa4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b002      	add	sp, #8
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b002      	add	sp, #8
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2240      	movs	r2, #64	; 0x40
 8002ffa:	5c9b      	ldrb	r3, [r3, r2]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <I2C_Slave_ISR_IT+0x24>
 8003000:	2302      	movs	r3, #2
 8003002:	e0e6      	b.n	80031d2 <I2C_Slave_ISR_IT+0x1f2>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2240      	movs	r2, #64	; 0x40
 8003008:	2101      	movs	r1, #1
 800300a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2220      	movs	r2, #32
 8003010:	4013      	ands	r3, r2
 8003012:	d009      	beq.n	8003028 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800301a:	d005      	beq.n	8003028 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0011      	movs	r1, r2
 8003022:	0018      	movs	r0, r3
 8003024:	f000 faaa 	bl	800357c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2210      	movs	r2, #16
 800302c:	4013      	ands	r3, r2
 800302e:	d052      	beq.n	80030d6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2210      	movs	r2, #16
 8003034:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003036:	d04e      	beq.n	80030d6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d12d      	bne.n	800309e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2241      	movs	r2, #65	; 0x41
 8003046:	5c9b      	ldrb	r3, [r3, r2]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b28      	cmp	r3, #40	; 0x28
 800304c:	d10b      	bne.n	8003066 <I2C_Slave_ISR_IT+0x86>
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	049b      	lsls	r3, r3, #18
 8003054:	429a      	cmp	r2, r3
 8003056:	d106      	bne.n	8003066 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	0011      	movs	r1, r2
 800305e:	0018      	movs	r0, r3
 8003060:	f000 fbac 	bl	80037bc <I2C_ITListenCplt>
 8003064:	e036      	b.n	80030d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2241      	movs	r2, #65	; 0x41
 800306a:	5c9b      	ldrb	r3, [r3, r2]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b29      	cmp	r3, #41	; 0x29
 8003070:	d110      	bne.n	8003094 <I2C_Slave_ISR_IT+0xb4>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	4a59      	ldr	r2, [pc, #356]	; (80031dc <I2C_Slave_ISR_IT+0x1fc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00c      	beq.n	8003094 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2210      	movs	r2, #16
 8003080:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 fd1c 	bl	8003ac2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 fa11 	bl	80034b4 <I2C_ITSlaveSeqCplt>
 8003092:	e01f      	b.n	80030d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2210      	movs	r2, #16
 800309a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800309c:	e091      	b.n	80031c2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2210      	movs	r2, #16
 80030a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	2204      	movs	r2, #4
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <I2C_Slave_ISR_IT+0xe4>
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	045b      	lsls	r3, r3, #17
 80030be:	429a      	cmp	r2, r3
 80030c0:	d000      	beq.n	80030c4 <I2C_Slave_ISR_IT+0xe4>
 80030c2:	e07e      	b.n	80031c2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	0011      	movs	r1, r2
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 fbcd 	bl	800386c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80030d2:	e076      	b.n	80031c2 <I2C_Slave_ISR_IT+0x1e2>
 80030d4:	e075      	b.n	80031c2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2204      	movs	r2, #4
 80030da:	4013      	ands	r3, r2
 80030dc:	d02f      	beq.n	800313e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80030e4:	d02b      	beq.n	800313e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d018      	beq.n	8003122 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d14c      	bne.n	80031c6 <I2C_Slave_ISR_IT+0x1e6>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <I2C_Slave_ISR_IT+0x1fc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d048      	beq.n	80031c6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	0018      	movs	r0, r3
 8003138:	f000 f9bc 	bl	80034b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800313c:	e043      	b.n	80031c6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2208      	movs	r2, #8
 8003142:	4013      	ands	r3, r2
 8003144:	d00a      	beq.n	800315c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2208      	movs	r2, #8
 800314a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800314c:	d006      	beq.n	800315c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	0011      	movs	r1, r2
 8003154:	0018      	movs	r0, r3
 8003156:	f000 f909 	bl	800336c <I2C_ITAddrCplt>
 800315a:	e035      	b.n	80031c8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2202      	movs	r2, #2
 8003160:	4013      	ands	r3, r2
 8003162:	d031      	beq.n	80031c8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800316a:	d02d      	beq.n	80031c8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80031a6:	e00f      	b.n	80031c8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	045b      	lsls	r3, r3, #17
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d002      	beq.n	80031b8 <I2C_Slave_ISR_IT+0x1d8>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d107      	bne.n	80031c8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 f97a 	bl	80034b4 <I2C_ITSlaveSeqCplt>
 80031c0:	e002      	b.n	80031c8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	e000      	b.n	80031c8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80031c6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	2100      	movs	r1, #0
 80031ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b006      	add	sp, #24
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	ffff0000 	.word	0xffff0000

080031e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031e0:	b5b0      	push	{r4, r5, r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	000c      	movs	r4, r1
 80031ea:	0010      	movs	r0, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	250a      	movs	r5, #10
 80031f0:	197b      	adds	r3, r7, r5
 80031f2:	1c22      	adds	r2, r4, #0
 80031f4:	801a      	strh	r2, [r3, #0]
 80031f6:	2308      	movs	r3, #8
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	1c02      	adds	r2, r0, #0
 80031fc:	801a      	strh	r2, [r3, #0]
 80031fe:	1dbb      	adds	r3, r7, #6
 8003200:	1c0a      	adds	r2, r1, #0
 8003202:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003204:	1dbb      	adds	r3, r7, #6
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	045c      	lsls	r4, r3, #17
 800320e:	197b      	adds	r3, r7, r5
 8003210:	8819      	ldrh	r1, [r3, #0]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <I2C_RequestMemoryWrite+0xc4>)
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	0023      	movs	r3, r4
 800321a:	f000 fe6b 	bl	8003ef4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	6a39      	ldr	r1, [r7, #32]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	0018      	movs	r0, r3
 8003226:	f000 fcdb 	bl	8003be0 <I2C_WaitOnTXISFlagUntilTimeout>
 800322a:	1e03      	subs	r3, r0, #0
 800322c:	d001      	beq.n	8003232 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e033      	b.n	800329a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003232:	1dbb      	adds	r3, r7, #6
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d107      	bne.n	800324a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800323a:	2308      	movs	r3, #8
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
 8003248:	e019      	b.n	800327e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800324a:	2308      	movs	r3, #8
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	b29b      	uxth	r3, r3
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325e:	6a39      	ldr	r1, [r7, #32]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	0018      	movs	r0, r3
 8003264:	f000 fcbc 	bl	8003be0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d001      	beq.n	8003270 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e014      	b.n	800329a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003270:	2308      	movs	r3, #8
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800327e:	6a3a      	ldr	r2, [r7, #32]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	0013      	movs	r3, r2
 8003288:	2200      	movs	r2, #0
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	f000 fc5a 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bdb0      	pop	{r4, r5, r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	80002000 	.word	0x80002000

080032a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032a8:	b5b0      	push	{r4, r5, r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	000c      	movs	r4, r1
 80032b2:	0010      	movs	r0, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	250a      	movs	r5, #10
 80032b8:	197b      	adds	r3, r7, r5
 80032ba:	1c22      	adds	r2, r4, #0
 80032bc:	801a      	strh	r2, [r3, #0]
 80032be:	2308      	movs	r3, #8
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	1c02      	adds	r2, r0, #0
 80032c4:	801a      	strh	r2, [r3, #0]
 80032c6:	1dbb      	adds	r3, r7, #6
 80032c8:	1c0a      	adds	r2, r1, #0
 80032ca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032cc:	1dbb      	adds	r3, r7, #6
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	197b      	adds	r3, r7, r5
 80032d4:	8819      	ldrh	r1, [r3, #0]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	4b23      	ldr	r3, [pc, #140]	; (8003368 <I2C_RequestMemoryRead+0xc0>)
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	f000 fe09 	bl	8003ef4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	6a39      	ldr	r1, [r7, #32]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 fc79 	bl	8003be0 <I2C_WaitOnTXISFlagUntilTimeout>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e033      	b.n	800335e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032f6:	1dbb      	adds	r3, r7, #6
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032fe:	2308      	movs	r3, #8
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
 800330c:	e019      	b.n	8003342 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800330e:	2308      	movs	r3, #8
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	b29b      	uxth	r3, r3
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	6a39      	ldr	r1, [r7, #32]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 fc5a 	bl	8003be0 <I2C_WaitOnTXISFlagUntilTimeout>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d001      	beq.n	8003334 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e014      	b.n	800335e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003334:	2308      	movs	r3, #8
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003342:	6a3a      	ldr	r2, [r7, #32]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	0013      	movs	r3, r2
 800334c:	2200      	movs	r2, #0
 800334e:	2140      	movs	r1, #64	; 0x40
 8003350:	f000 fbf8 	bl	8003b44 <I2C_WaitOnFlagUntilTimeout>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d001      	beq.n	800335c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b004      	add	sp, #16
 8003364:	bdb0      	pop	{r4, r5, r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	80002000 	.word	0x80002000

0800336c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800336c:	b5b0      	push	{r4, r5, r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2241      	movs	r2, #65	; 0x41
 800337a:	5c9b      	ldrb	r3, [r3, r2]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	001a      	movs	r2, r3
 8003380:	2328      	movs	r3, #40	; 0x28
 8003382:	4013      	ands	r3, r2
 8003384:	2b28      	cmp	r3, #40	; 0x28
 8003386:	d000      	beq.n	800338a <I2C_ITAddrCplt+0x1e>
 8003388:	e088      	b.n	800349c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	b2da      	uxtb	r2, r3
 8003394:	250f      	movs	r5, #15
 8003396:	197b      	adds	r3, r7, r5
 8003398:	2101      	movs	r1, #1
 800339a:	400a      	ands	r2, r1
 800339c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	200c      	movs	r0, #12
 80033aa:	183b      	adds	r3, r7, r0
 80033ac:	21fe      	movs	r1, #254	; 0xfe
 80033ae:	400a      	ands	r2, r1
 80033b0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	240a      	movs	r4, #10
 80033bc:	193b      	adds	r3, r7, r4
 80033be:	0592      	lsls	r2, r2, #22
 80033c0:	0d92      	lsrs	r2, r2, #22
 80033c2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	2308      	movs	r3, #8
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	21fe      	movs	r1, #254	; 0xfe
 80033d2:	400a      	ands	r2, r1
 80033d4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d148      	bne.n	8003470 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80033de:	0021      	movs	r1, r4
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	09db      	lsrs	r3, r3, #7
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	183b      	adds	r3, r7, r0
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	4053      	eors	r3, r2
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	001a      	movs	r2, r3
 80033f2:	2306      	movs	r3, #6
 80033f4:	4013      	ands	r3, r2
 80033f6:	d120      	bne.n	800343a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80033f8:	183b      	adds	r3, r7, r0
 80033fa:	187a      	adds	r2, r7, r1
 80033fc:	8812      	ldrh	r2, [r2, #0]
 80033fe:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340e:	2b02      	cmp	r3, #2
 8003410:	d14c      	bne.n	80034ac <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2208      	movs	r2, #8
 800341e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2240      	movs	r2, #64	; 0x40
 8003424:	2100      	movs	r1, #0
 8003426:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003428:	183b      	adds	r3, r7, r0
 800342a:	881a      	ldrh	r2, [r3, #0]
 800342c:	197b      	adds	r3, r7, r5
 800342e:	7819      	ldrb	r1, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	0018      	movs	r0, r3
 8003434:	f7ff fdab 	bl	8002f8e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003438:	e038      	b.n	80034ac <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800343a:	240c      	movs	r4, #12
 800343c:	193b      	adds	r3, r7, r4
 800343e:	2208      	movs	r2, #8
 8003440:	18ba      	adds	r2, r7, r2
 8003442:	8812      	ldrh	r2, [r2, #0]
 8003444:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	021a      	lsls	r2, r3, #8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0011      	movs	r1, r2
 800344e:	0018      	movs	r0, r3
 8003450:	f000 fd8a 	bl	8003f68 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800345c:	193b      	adds	r3, r7, r4
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	230f      	movs	r3, #15
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	7819      	ldrb	r1, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0018      	movs	r0, r3
 800346a:	f7ff fd90 	bl	8002f8e <HAL_I2C_AddrCallback>
}
 800346e:	e01d      	b.n	80034ac <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	021a      	lsls	r2, r3, #8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	0011      	movs	r1, r2
 8003478:	0018      	movs	r0, r3
 800347a:	f000 fd75 	bl	8003f68 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2240      	movs	r2, #64	; 0x40
 8003482:	2100      	movs	r1, #0
 8003484:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003486:	230c      	movs	r3, #12
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	881a      	ldrh	r2, [r3, #0]
 800348c:	230f      	movs	r3, #15
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	7819      	ldrb	r1, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0018      	movs	r0, r3
 8003496:	f7ff fd7a 	bl	8002f8e <HAL_I2C_AddrCallback>
}
 800349a:	e007      	b.n	80034ac <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2208      	movs	r2, #8
 80034a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2240      	movs	r2, #64	; 0x40
 80034a8:	2100      	movs	r1, #0
 80034aa:	5499      	strb	r1, [r3, r2]
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b004      	add	sp, #16
 80034b2:	bdb0      	pop	{r4, r5, r7, pc}

080034b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2242      	movs	r2, #66	; 0x42
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	01db      	lsls	r3, r3, #7
 80034d2:	4013      	ands	r3, r2
 80034d4:	d008      	beq.n	80034e8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4924      	ldr	r1, [pc, #144]	; (8003574 <I2C_ITSlaveSeqCplt+0xc0>)
 80034e2:	400a      	ands	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e00c      	b.n	8003502 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	4013      	ands	r3, r2
 80034f0:	d007      	beq.n	8003502 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	491e      	ldr	r1, [pc, #120]	; (8003578 <I2C_ITSlaveSeqCplt+0xc4>)
 80034fe:	400a      	ands	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2241      	movs	r2, #65	; 0x41
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b29      	cmp	r3, #41	; 0x29
 800350c:	d114      	bne.n	8003538 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2241      	movs	r2, #65	; 0x41
 8003512:	2128      	movs	r1, #40	; 0x28
 8003514:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2221      	movs	r2, #33	; 0x21
 800351a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2101      	movs	r1, #1
 8003520:	0018      	movs	r0, r3
 8003522:	f000 fd21 	bl	8003f68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	2100      	movs	r1, #0
 800352c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f7ff fd1c 	bl	8002f6e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003536:	e019      	b.n	800356c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2241      	movs	r2, #65	; 0x41
 800353c:	5c9b      	ldrb	r3, [r3, r2]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b2a      	cmp	r3, #42	; 0x2a
 8003542:	d113      	bne.n	800356c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2241      	movs	r2, #65	; 0x41
 8003548:	2128      	movs	r1, #40	; 0x28
 800354a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2222      	movs	r2, #34	; 0x22
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2102      	movs	r1, #2
 8003556:	0018      	movs	r0, r3
 8003558:	f000 fd06 	bl	8003f68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	2100      	movs	r1, #0
 8003562:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f7ff fd09 	bl	8002f7e <HAL_I2C_SlaveRxCpltCallback>
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b004      	add	sp, #16
 8003572:	bd80      	pop	{r7, pc}
 8003574:	ffffbfff 	.word	0xffffbfff
 8003578:	ffff7fff 	.word	0xffff7fff

0800357c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003592:	200f      	movs	r0, #15
 8003594:	183b      	adds	r3, r7, r0
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	2141      	movs	r1, #65	; 0x41
 800359a:	5c52      	ldrb	r2, [r2, r1]
 800359c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2220      	movs	r2, #32
 80035a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035a6:	183b      	adds	r3, r7, r0
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b21      	cmp	r3, #33	; 0x21
 80035ac:	d003      	beq.n	80035b6 <I2C_ITSlaveCplt+0x3a>
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b29      	cmp	r3, #41	; 0x29
 80035b4:	d109      	bne.n	80035ca <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80035b6:	4a7b      	ldr	r2, [pc, #492]	; (80037a4 <I2C_ITSlaveCplt+0x228>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f000 fcd3 	bl	8003f68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2221      	movs	r2, #33	; 0x21
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
 80035c8:	e011      	b.n	80035ee <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035ca:	220f      	movs	r2, #15
 80035cc:	18bb      	adds	r3, r7, r2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b22      	cmp	r3, #34	; 0x22
 80035d2:	d003      	beq.n	80035dc <I2C_ITSlaveCplt+0x60>
 80035d4:	18bb      	adds	r3, r7, r2
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b2a      	cmp	r3, #42	; 0x2a
 80035da:	d108      	bne.n	80035ee <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80035dc:	4a72      	ldr	r2, [pc, #456]	; (80037a8 <I2C_ITSlaveCplt+0x22c>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0011      	movs	r1, r2
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 fcc0 	bl	8003f68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2222      	movs	r2, #34	; 0x22
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2180      	movs	r1, #128	; 0x80
 80035fa:	0209      	lsls	r1, r1, #8
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4968      	ldr	r1, [pc, #416]	; (80037ac <I2C_ITSlaveCplt+0x230>)
 800360c:	400a      	ands	r2, r1
 800360e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0018      	movs	r0, r3
 8003614:	f000 fa55 	bl	8003ac2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	01db      	lsls	r3, r3, #7
 800361e:	4013      	ands	r3, r2
 8003620:	d013      	beq.n	800364a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4960      	ldr	r1, [pc, #384]	; (80037b0 <I2C_ITSlaveCplt+0x234>)
 800362e:	400a      	ands	r2, r1
 8003630:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01f      	beq.n	800367a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003648:	e017      	b.n	800367a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	4013      	ands	r3, r2
 8003652:	d012      	beq.n	800367a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4955      	ldr	r1, [pc, #340]	; (80037b4 <I2C_ITSlaveCplt+0x238>)
 8003660:	400a      	ands	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2204      	movs	r2, #4
 800367e:	4013      	ands	r3, r2
 8003680:	d020      	beq.n	80036c4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2204      	movs	r2, #4
 8003686:	4393      	bics	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	2204      	movs	r2, #4
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2242      	movs	r2, #66	; 0x42
 80036de:	2100      	movs	r1, #0
 80036e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0011      	movs	r1, r2
 80036f8:	0018      	movs	r0, r3
 80036fa:	f000 f8b7 	bl	800386c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2241      	movs	r2, #65	; 0x41
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b28      	cmp	r3, #40	; 0x28
 8003708:	d147      	bne.n	800379a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	0011      	movs	r1, r2
 8003710:	0018      	movs	r0, r3
 8003712:	f000 f853 	bl	80037bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003716:	e040      	b.n	800379a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <I2C_ITSlaveCplt+0x23c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d016      	beq.n	8003750 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0018      	movs	r0, r3
 8003726:	f7ff fec5 	bl	80034b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <I2C_ITSlaveCplt+0x23c>)
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2241      	movs	r2, #65	; 0x41
 8003734:	2120      	movs	r1, #32
 8003736:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2240      	movs	r2, #64	; 0x40
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff fc30 	bl	8002fae <HAL_I2C_ListenCpltCallback>
}
 800374e:	e024      	b.n	800379a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2241      	movs	r2, #65	; 0x41
 8003754:	5c9b      	ldrb	r3, [r3, r2]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b22      	cmp	r3, #34	; 0x22
 800375a:	d10f      	bne.n	800377c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2241      	movs	r2, #65	; 0x41
 8003760:	2120      	movs	r1, #32
 8003762:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2240      	movs	r2, #64	; 0x40
 800376e:	2100      	movs	r1, #0
 8003770:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff fc02 	bl	8002f7e <HAL_I2C_SlaveRxCpltCallback>
}
 800377a:	e00e      	b.n	800379a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2241      	movs	r2, #65	; 0x41
 8003780:	2120      	movs	r1, #32
 8003782:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2240      	movs	r2, #64	; 0x40
 800378e:	2100      	movs	r1, #0
 8003790:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0018      	movs	r0, r3
 8003796:	f7ff fbea 	bl	8002f6e <HAL_I2C_SlaveTxCpltCallback>
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b006      	add	sp, #24
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	00008001 	.word	0x00008001
 80037a8:	00008002 	.word	0x00008002
 80037ac:	fe00e800 	.word	0xfe00e800
 80037b0:	ffffbfff 	.word	0xffffbfff
 80037b4:	ffff7fff 	.word	0xffff7fff
 80037b8:	ffff0000 	.word	0xffff0000

080037bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a26      	ldr	r2, [pc, #152]	; (8003864 <I2C_ITListenCplt+0xa8>)
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2241      	movs	r2, #65	; 0x41
 80037d6:	2120      	movs	r1, #32
 80037d8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2242      	movs	r2, #66	; 0x42
 80037de:	2100      	movs	r1, #0
 80037e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2204      	movs	r2, #4
 80037ec:	4013      	ands	r3, r2
 80037ee:	d022      	beq.n	8003836 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	2204      	movs	r2, #4
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003836:	4a0c      	ldr	r2, [pc, #48]	; (8003868 <I2C_ITListenCplt+0xac>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0011      	movs	r1, r2
 800383c:	0018      	movs	r0, r3
 800383e:	f000 fb93 	bl	8003f68 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2210      	movs	r2, #16
 8003848:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff fbaa 	bl	8002fae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	ffff0000 	.word	0xffff0000
 8003868:	00008003 	.word	0x00008003

0800386c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003876:	200f      	movs	r0, #15
 8003878:	183b      	adds	r3, r7, r0
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	2141      	movs	r1, #65	; 0x41
 800387e:	5c52      	ldrb	r2, [r2, r1]
 8003880:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2242      	movs	r2, #66	; 0x42
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a72      	ldr	r2, [pc, #456]	; (8003a58 <I2C_ITError+0x1ec>)
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80038a2:	183b      	adds	r3, r7, r0
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b28      	cmp	r3, #40	; 0x28
 80038a8:	d007      	beq.n	80038ba <I2C_ITError+0x4e>
 80038aa:	183b      	adds	r3, r7, r0
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b29      	cmp	r3, #41	; 0x29
 80038b0:	d003      	beq.n	80038ba <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b2a      	cmp	r3, #42	; 0x2a
 80038b8:	d10c      	bne.n	80038d4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2103      	movs	r1, #3
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 fb52 	bl	8003f68 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2241      	movs	r2, #65	; 0x41
 80038c8:	2128      	movs	r1, #40	; 0x28
 80038ca:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a63      	ldr	r2, [pc, #396]	; (8003a5c <I2C_ITError+0x1f0>)
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34
 80038d2:	e032      	b.n	800393a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038d4:	4a62      	ldr	r2, [pc, #392]	; (8003a60 <I2C_ITError+0x1f4>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	0011      	movs	r1, r2
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 fb44 	bl	8003f68 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 f8ed 	bl	8003ac2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2241      	movs	r2, #65	; 0x41
 80038ec:	5c9b      	ldrb	r3, [r3, r2]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b60      	cmp	r3, #96	; 0x60
 80038f2:	d01f      	beq.n	8003934 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2241      	movs	r2, #65	; 0x41
 80038f8:	2120      	movs	r1, #32
 80038fa:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2220      	movs	r2, #32
 8003904:	4013      	ands	r3, r2
 8003906:	2b20      	cmp	r3, #32
 8003908:	d114      	bne.n	8003934 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2210      	movs	r2, #16
 8003912:	4013      	ands	r3, r2
 8003914:	2b10      	cmp	r3, #16
 8003916:	d109      	bne.n	800392c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2210      	movs	r2, #16
 800391e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	2204      	movs	r2, #4
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2220      	movs	r2, #32
 8003932:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	2b00      	cmp	r3, #0
 8003946:	d03b      	beq.n	80039c0 <I2C_ITError+0x154>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b11      	cmp	r3, #17
 800394c:	d002      	beq.n	8003954 <I2C_ITError+0xe8>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b21      	cmp	r3, #33	; 0x21
 8003952:	d135      	bne.n	80039c0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	01db      	lsls	r3, r3, #7
 800395e:	401a      	ands	r2, r3
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	01db      	lsls	r3, r3, #7
 8003964:	429a      	cmp	r2, r3
 8003966:	d107      	bne.n	8003978 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	493c      	ldr	r1, [pc, #240]	; (8003a64 <I2C_ITError+0x1f8>)
 8003974:	400a      	ands	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	0018      	movs	r0, r3
 800397e:	f7fe fc94 	bl	80022aa <HAL_DMA_GetState>
 8003982:	0003      	movs	r3, r0
 8003984:	2b01      	cmp	r3, #1
 8003986:	d016      	beq.n	80039b6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	4a36      	ldr	r2, [pc, #216]	; (8003a68 <I2C_ITError+0x1fc>)
 800398e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2240      	movs	r2, #64	; 0x40
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	0018      	movs	r0, r3
 800399e:	f7fe fb9d 	bl	80020dc <HAL_DMA_Abort_IT>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d051      	beq.n	8003a4a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	0018      	movs	r0, r3
 80039b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039b4:	e049      	b.n	8003a4a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 f859 	bl	8003a70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039be:	e044      	b.n	8003a4a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d03b      	beq.n	8003a40 <I2C_ITError+0x1d4>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b12      	cmp	r3, #18
 80039cc:	d002      	beq.n	80039d4 <I2C_ITError+0x168>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b22      	cmp	r3, #34	; 0x22
 80039d2:	d135      	bne.n	8003a40 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	401a      	ands	r2, r3
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d107      	bne.n	80039f8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	491e      	ldr	r1, [pc, #120]	; (8003a6c <I2C_ITError+0x200>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7fe fc54 	bl	80022aa <HAL_DMA_GetState>
 8003a02:	0003      	movs	r3, r0
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d016      	beq.n	8003a36 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0c:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <I2C_ITError+0x1fc>)
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7fe fb5d 	bl	80020dc <HAL_DMA_Abort_IT>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d013      	beq.n	8003a4e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	0018      	movs	r0, r3
 8003a32:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a34:	e00b      	b.n	8003a4e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f000 f819 	bl	8003a70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a3e:	e006      	b.n	8003a4e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f000 f814 	bl	8003a70 <I2C_TreatErrorCallback>
  }
}
 8003a48:	e002      	b.n	8003a50 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	e000      	b.n	8003a50 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a4e:	46c0      	nop			; (mov r8, r8)
}
 8003a50:	46c0      	nop			; (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b004      	add	sp, #16
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	ffff0000 	.word	0xffff0000
 8003a5c:	08002fe1 	.word	0x08002fe1
 8003a60:	00008003 	.word	0x00008003
 8003a64:	ffffbfff 	.word	0xffffbfff
 8003a68:	08003b07 	.word	0x08003b07
 8003a6c:	ffff7fff 	.word	0xffff7fff

08003a70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2241      	movs	r2, #65	; 0x41
 8003a7c:	5c9b      	ldrb	r3, [r3, r2]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b60      	cmp	r3, #96	; 0x60
 8003a82:	d10f      	bne.n	8003aa4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2241      	movs	r2, #65	; 0x41
 8003a88:	2120      	movs	r1, #32
 8003a8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2240      	movs	r2, #64	; 0x40
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7ff fa96 	bl	8002fce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003aa2:	e00a      	b.n	8003aba <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2240      	movs	r2, #64	; 0x40
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f7ff fa82 	bl	8002fbe <HAL_I2C_ErrorCallback>
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d103      	bne.n	8003ae0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d007      	beq.n	8003afe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2101      	movs	r1, #1
 8003afa:	430a      	orrs	r2, r1
 8003afc:	619a      	str	r2, [r3, #24]
  }
}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b002      	add	sp, #8
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	2200      	movs	r2, #0
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	2200      	movs	r2, #0
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7ff ff9a 	bl	8003a70 <I2C_TreatErrorCallback>
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b004      	add	sp, #16
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	1dfb      	adds	r3, r7, #7
 8003b52:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b54:	e030      	b.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	d02d      	beq.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5c:	f7fe f956 	bl	8001e0c <HAL_GetTick>
 8003b60:	0002      	movs	r2, r0
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d302      	bcc.n	8003b72 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d122      	bne.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	425a      	negs	r2, r3
 8003b82:	4153      	adcs	r3, r2
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	001a      	movs	r2, r3
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d113      	bne.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	2220      	movs	r2, #32
 8003b96:	431a      	orrs	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2241      	movs	r2, #65	; 0x41
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2242      	movs	r2, #66	; 0x42
 8003ba8:	2100      	movs	r1, #0
 8003baa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2240      	movs	r2, #64	; 0x40
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e00f      	b.n	8003bd8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	425a      	negs	r2, r3
 8003bc8:	4153      	adcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	001a      	movs	r2, r3
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d0bf      	beq.n	8003b56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bec:	e032      	b.n	8003c54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 f87d 	bl	8003cf4 <I2C_IsErrorOccurred>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e030      	b.n	8003c64 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3301      	adds	r3, #1
 8003c06:	d025      	beq.n	8003c54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c08:	f7fe f900 	bl	8001e0c <HAL_GetTick>
 8003c0c:	0002      	movs	r2, r0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d302      	bcc.n	8003c1e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d11a      	bne.n	8003c54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	2202      	movs	r2, #2
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d013      	beq.n	8003c54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	2220      	movs	r2, #32
 8003c32:	431a      	orrs	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2241      	movs	r2, #65	; 0x41
 8003c3c:	2120      	movs	r1, #32
 8003c3e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2242      	movs	r2, #66	; 0x42
 8003c44:	2100      	movs	r1, #0
 8003c46:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2240      	movs	r2, #64	; 0x40
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e007      	b.n	8003c64 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d1c5      	bne.n	8003bee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c78:	e02f      	b.n	8003cda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 f837 	bl	8003cf4 <I2C_IsErrorOccurred>
 8003c86:	1e03      	subs	r3, r0, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e02d      	b.n	8003cea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8e:	f7fe f8bd 	bl	8001e0c <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d302      	bcc.n	8003ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11a      	bne.n	8003cda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2220      	movs	r2, #32
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d013      	beq.n	8003cda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2241      	movs	r2, #65	; 0x41
 8003cc2:	2120      	movs	r1, #32
 8003cc4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2242      	movs	r2, #66	; 0x42
 8003cca:	2100      	movs	r1, #0
 8003ccc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2240      	movs	r2, #64	; 0x40
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e007      	b.n	8003cea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d1c8      	bne.n	8003c7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b004      	add	sp, #16
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b08b      	sub	sp, #44	; 0x2c
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d00:	2327      	movs	r3, #39	; 0x27
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d100      	bne.n	8003d22 <I2C_IsErrorOccurred+0x2e>
 8003d20:	e082      	b.n	8003e28 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2210      	movs	r2, #16
 8003d28:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d2a:	e060      	b.n	8003dee <I2C_IsErrorOccurred+0xfa>
 8003d2c:	2427      	movs	r4, #39	; 0x27
 8003d2e:	193b      	adds	r3, r7, r4
 8003d30:	193a      	adds	r2, r7, r4
 8003d32:	7812      	ldrb	r2, [r2, #0]
 8003d34:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	d058      	beq.n	8003dee <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d3c:	f7fe f866 	bl	8001e0c <HAL_GetTick>
 8003d40:	0002      	movs	r2, r0
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d306      	bcc.n	8003d5a <I2C_IsErrorOccurred+0x66>
 8003d4c:	193b      	adds	r3, r7, r4
 8003d4e:	193a      	adds	r2, r7, r4
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d149      	bne.n	8003dee <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	01db      	lsls	r3, r3, #7
 8003d64:	4013      	ands	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d68:	2013      	movs	r0, #19
 8003d6a:	183b      	adds	r3, r7, r0
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	2142      	movs	r1, #66	; 0x42
 8003d70:	5c52      	ldrb	r2, [r2, r1]
 8003d72:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	401a      	ands	r2, r3
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d126      	bne.n	8003dd6 <I2C_IsErrorOccurred+0xe2>
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	01db      	lsls	r3, r3, #7
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d021      	beq.n	8003dd6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003d92:	183b      	adds	r3, r7, r0
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d01d      	beq.n	8003dd6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	01c9      	lsls	r1, r1, #7
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dac:	f7fe f82e 	bl	8001e0c <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db4:	e00f      	b.n	8003dd6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003db6:	f7fe f829 	bl	8001e0c <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b19      	cmp	r3, #25
 8003dc2:	d908      	bls.n	8003dd6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003dcc:	2327      	movs	r3, #39	; 0x27
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]

              break;
 8003dd4:	e00b      	b.n	8003dee <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	4013      	ands	r3, r2
 8003de0:	2127      	movs	r1, #39	; 0x27
 8003de2:	187a      	adds	r2, r7, r1
 8003de4:	1879      	adds	r1, r7, r1
 8003de6:	7809      	ldrb	r1, [r1, #0]
 8003de8:	7011      	strb	r1, [r2, #0]
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d1e3      	bne.n	8003db6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2220      	movs	r2, #32
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d004      	beq.n	8003e06 <I2C_IsErrorOccurred+0x112>
 8003dfc:	2327      	movs	r3, #39	; 0x27
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d092      	beq.n	8003d2c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e06:	2327      	movs	r3, #39	; 0x27
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2220      	movs	r2, #32
 8003e16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e20:	2327      	movs	r3, #39	; 0x27
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4013      	ands	r3, r2
 8003e38:	d00c      	beq.n	8003e54 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	0052      	lsls	r2, r2, #1
 8003e4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e4c:	2327      	movs	r3, #39	; 0x27
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d00c      	beq.n	8003e78 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	2208      	movs	r2, #8
 8003e62:	4313      	orrs	r3, r2
 8003e64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2280      	movs	r2, #128	; 0x80
 8003e6c:	00d2      	lsls	r2, r2, #3
 8003e6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e70:	2327      	movs	r3, #39	; 0x27
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d00c      	beq.n	8003e9c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	2202      	movs	r2, #2
 8003e86:	4313      	orrs	r3, r2
 8003e88:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	0092      	lsls	r2, r2, #2
 8003e92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e94:	2327      	movs	r3, #39	; 0x27
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003e9c:	2327      	movs	r3, #39	; 0x27
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01d      	beq.n	8003ee2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7ff fe0a 	bl	8003ac2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	490d      	ldr	r1, [pc, #52]	; (8003ef0 <I2C_IsErrorOccurred+0x1fc>)
 8003eba:	400a      	ands	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2241      	movs	r2, #65	; 0x41
 8003ece:	2120      	movs	r1, #32
 8003ed0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2242      	movs	r2, #66	; 0x42
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2240      	movs	r2, #64	; 0x40
 8003ede:	2100      	movs	r1, #0
 8003ee0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003ee2:	2327      	movs	r3, #39	; 0x27
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	781b      	ldrb	r3, [r3, #0]
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b00b      	add	sp, #44	; 0x2c
 8003eee:	bd90      	pop	{r4, r7, pc}
 8003ef0:	fe00e800 	.word	0xfe00e800

08003ef4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	0008      	movs	r0, r1
 8003efe:	0011      	movs	r1, r2
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	240a      	movs	r4, #10
 8003f04:	193b      	adds	r3, r7, r4
 8003f06:	1c02      	adds	r2, r0, #0
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	2009      	movs	r0, #9
 8003f0c:	183b      	adds	r3, r7, r0
 8003f0e:	1c0a      	adds	r2, r1, #0
 8003f10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	059b      	lsls	r3, r3, #22
 8003f18:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f1a:	183b      	adds	r3, r7, r0
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	0419      	lsls	r1, r3, #16
 8003f20:	23ff      	movs	r3, #255	; 0xff
 8003f22:	041b      	lsls	r3, r3, #16
 8003f24:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f26:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f3e:	0d51      	lsrs	r1, r2, #21
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	00d2      	lsls	r2, r2, #3
 8003f44:	400a      	ands	r2, r1
 8003f46:	4907      	ldr	r1, [pc, #28]	; (8003f64 <I2C_TransferConfig+0x70>)
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	43d2      	mvns	r2, r2
 8003f4c:	401a      	ands	r2, r3
 8003f4e:	0011      	movs	r1, r2
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b007      	add	sp, #28
 8003f60:	bd90      	pop	{r4, r7, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	03ff63ff 	.word	0x03ff63ff

08003f68 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	000a      	movs	r2, r1
 8003f72:	1cbb      	adds	r3, r7, #2
 8003f74:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f7a:	1cbb      	adds	r3, r7, #2
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4013      	ands	r3, r2
 8003f82:	d010      	beq.n	8003fa6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2242      	movs	r2, #66	; 0x42
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2241      	movs	r2, #65	; 0x41
 8003f90:	5c9b      	ldrb	r3, [r3, r2]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	001a      	movs	r2, r3
 8003f96:	2328      	movs	r3, #40	; 0x28
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b28      	cmp	r3, #40	; 0x28
 8003f9c:	d003      	beq.n	8003fa6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22b0      	movs	r2, #176	; 0xb0
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003fa6:	1cbb      	adds	r3, r7, #2
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d010      	beq.n	8003fd2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2244      	movs	r2, #68	; 0x44
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2241      	movs	r2, #65	; 0x41
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	2328      	movs	r3, #40	; 0x28
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b28      	cmp	r3, #40	; 0x28
 8003fc8:	d003      	beq.n	8003fd2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	22b0      	movs	r2, #176	; 0xb0
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fd2:	1cbb      	adds	r3, r7, #2
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	5e9b      	ldrsh	r3, [r3, r2]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	da03      	bge.n	8003fe4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	22b8      	movs	r2, #184	; 0xb8
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003fe4:	1cbb      	adds	r3, r7, #2
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d103      	bne.n	8003ff4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2290      	movs	r2, #144	; 0x90
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ff4:	1cbb      	adds	r3, r7, #2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d103      	bne.n	8004004 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004004:	1cbb      	adds	r3, r7, #2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d103      	bne.n	8004014 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2240      	movs	r2, #64	; 0x40
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43d9      	mvns	r1, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	400a      	ands	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b004      	add	sp, #16
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2241      	movs	r2, #65	; 0x41
 800403e:	5c9b      	ldrb	r3, [r3, r2]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b20      	cmp	r3, #32
 8004044:	d138      	bne.n	80040b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2240      	movs	r2, #64	; 0x40
 800404a:	5c9b      	ldrb	r3, [r3, r2]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004050:	2302      	movs	r3, #2
 8004052:	e032      	b.n	80040ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2240      	movs	r2, #64	; 0x40
 8004058:	2101      	movs	r1, #1
 800405a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2241      	movs	r2, #65	; 0x41
 8004060:	2124      	movs	r1, #36	; 0x24
 8004062:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2101      	movs	r1, #1
 8004070:	438a      	bics	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4911      	ldr	r1, [pc, #68]	; (80040c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004080:	400a      	ands	r2, r1
 8004082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6819      	ldr	r1, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2101      	movs	r1, #1
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2241      	movs	r2, #65	; 0x41
 80040a8:	2120      	movs	r1, #32
 80040aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2240      	movs	r2, #64	; 0x40
 80040b0:	2100      	movs	r1, #0
 80040b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b002      	add	sp, #8
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	ffffefff 	.word	0xffffefff

080040c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2241      	movs	r2, #65	; 0x41
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d139      	bne.n	8004152 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2240      	movs	r2, #64	; 0x40
 80040e2:	5c9b      	ldrb	r3, [r3, r2]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e033      	b.n	8004154 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	2101      	movs	r1, #1
 80040f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2241      	movs	r2, #65	; 0x41
 80040f8:	2124      	movs	r1, #36	; 0x24
 80040fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2101      	movs	r1, #1
 8004108:	438a      	bics	r2, r1
 800410a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4a11      	ldr	r2, [pc, #68]	; (800415c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004118:	4013      	ands	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2101      	movs	r1, #1
 800413a:	430a      	orrs	r2, r1
 800413c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2241      	movs	r2, #65	; 0x41
 8004142:	2120      	movs	r1, #32
 8004144:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2240      	movs	r2, #64	; 0x40
 800414a:	2100      	movs	r1, #0
 800414c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	0018      	movs	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	b004      	add	sp, #16
 800415a:	bd80      	pop	{r7, pc}
 800415c:	fffff0ff 	.word	0xfffff0ff

08004160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f000 fb76 	bl	8004860 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2201      	movs	r2, #1
 800417a:	4013      	ands	r3, r2
 800417c:	d100      	bne.n	8004180 <HAL_RCC_OscConfig+0x20>
 800417e:	e08e      	b.n	800429e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004180:	4bc5      	ldr	r3, [pc, #788]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	220c      	movs	r2, #12
 8004186:	4013      	ands	r3, r2
 8004188:	2b04      	cmp	r3, #4
 800418a:	d00e      	beq.n	80041aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800418c:	4bc2      	ldr	r3, [pc, #776]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	220c      	movs	r2, #12
 8004192:	4013      	ands	r3, r2
 8004194:	2b08      	cmp	r3, #8
 8004196:	d117      	bne.n	80041c8 <HAL_RCC_OscConfig+0x68>
 8004198:	4bbf      	ldr	r3, [pc, #764]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	23c0      	movs	r3, #192	; 0xc0
 800419e:	025b      	lsls	r3, r3, #9
 80041a0:	401a      	ands	r2, r3
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	025b      	lsls	r3, r3, #9
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d10e      	bne.n	80041c8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041aa:	4bbb      	ldr	r3, [pc, #748]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	4013      	ands	r3, r2
 80041b4:	d100      	bne.n	80041b8 <HAL_RCC_OscConfig+0x58>
 80041b6:	e071      	b.n	800429c <HAL_RCC_OscConfig+0x13c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d000      	beq.n	80041c2 <HAL_RCC_OscConfig+0x62>
 80041c0:	e06c      	b.n	800429c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f000 fb4c 	bl	8004860 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_OscConfig+0x80>
 80041d0:	4bb1      	ldr	r3, [pc, #708]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4bb0      	ldr	r3, [pc, #704]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	0249      	lsls	r1, r1, #9
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e02f      	b.n	8004240 <HAL_RCC_OscConfig+0xe0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10c      	bne.n	8004202 <HAL_RCC_OscConfig+0xa2>
 80041e8:	4bab      	ldr	r3, [pc, #684]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4baa      	ldr	r3, [pc, #680]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80041ee:	49ab      	ldr	r1, [pc, #684]	; (800449c <HAL_RCC_OscConfig+0x33c>)
 80041f0:	400a      	ands	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	4ba8      	ldr	r3, [pc, #672]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4ba7      	ldr	r3, [pc, #668]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80041fa:	49a9      	ldr	r1, [pc, #676]	; (80044a0 <HAL_RCC_OscConfig+0x340>)
 80041fc:	400a      	ands	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e01e      	b.n	8004240 <HAL_RCC_OscConfig+0xe0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b05      	cmp	r3, #5
 8004208:	d10e      	bne.n	8004228 <HAL_RCC_OscConfig+0xc8>
 800420a:	4ba3      	ldr	r3, [pc, #652]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4ba2      	ldr	r3, [pc, #648]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	02c9      	lsls	r1, r1, #11
 8004214:	430a      	orrs	r2, r1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	4b9f      	ldr	r3, [pc, #636]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b9e      	ldr	r3, [pc, #632]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800421e:	2180      	movs	r1, #128	; 0x80
 8004220:	0249      	lsls	r1, r1, #9
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0xe0>
 8004228:	4b9b      	ldr	r3, [pc, #620]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b9a      	ldr	r3, [pc, #616]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800422e:	499b      	ldr	r1, [pc, #620]	; (800449c <HAL_RCC_OscConfig+0x33c>)
 8004230:	400a      	ands	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	4b98      	ldr	r3, [pc, #608]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b97      	ldr	r3, [pc, #604]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800423a:	4999      	ldr	r1, [pc, #612]	; (80044a0 <HAL_RCC_OscConfig+0x340>)
 800423c:	400a      	ands	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d014      	beq.n	8004272 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fd fde0 	bl	8001e0c <HAL_GetTick>
 800424c:	0003      	movs	r3, r0
 800424e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004252:	f7fd fddb 	bl	8001e0c <HAL_GetTick>
 8004256:	0002      	movs	r2, r0
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b64      	cmp	r3, #100	; 0x64
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e2fd      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004264:	4b8c      	ldr	r3, [pc, #560]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	4013      	ands	r3, r2
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0xf2>
 8004270:	e015      	b.n	800429e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004272:	f7fd fdcb 	bl	8001e0c <HAL_GetTick>
 8004276:	0003      	movs	r3, r0
 8004278:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd fdc6 	bl	8001e0c <HAL_GetTick>
 8004280:	0002      	movs	r2, r0
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e2e8      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	4b82      	ldr	r3, [pc, #520]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	029b      	lsls	r3, r3, #10
 8004296:	4013      	ands	r3, r2
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x11c>
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2202      	movs	r2, #2
 80042a4:	4013      	ands	r3, r2
 80042a6:	d100      	bne.n	80042aa <HAL_RCC_OscConfig+0x14a>
 80042a8:	e06c      	b.n	8004384 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042aa:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	220c      	movs	r2, #12
 80042b0:	4013      	ands	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042b4:	4b78      	ldr	r3, [pc, #480]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	220c      	movs	r2, #12
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d11f      	bne.n	8004300 <HAL_RCC_OscConfig+0x1a0>
 80042c0:	4b75      	ldr	r3, [pc, #468]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	23c0      	movs	r3, #192	; 0xc0
 80042c6:	025b      	lsls	r3, r3, #9
 80042c8:	401a      	ands	r2, r3
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d116      	bne.n	8004300 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	4b71      	ldr	r3, [pc, #452]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2202      	movs	r2, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_OscConfig+0x188>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e2bb      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e8:	4b6b      	ldr	r3, [pc, #428]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	22f8      	movs	r2, #248	; 0xf8
 80042ee:	4393      	bics	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00da      	lsls	r2, r3, #3
 80042f8:	4b67      	ldr	r3, [pc, #412]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	e041      	b.n	8004384 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d024      	beq.n	8004352 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004308:	4b63      	ldr	r3, [pc, #396]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b62      	ldr	r3, [pc, #392]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800430e:	2101      	movs	r1, #1
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fd fd7a 	bl	8001e0c <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431e:	f7fd fd75 	bl	8001e0c <HAL_GetTick>
 8004322:	0002      	movs	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e297      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b59      	ldr	r3, [pc, #356]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2202      	movs	r2, #2
 8004336:	4013      	ands	r3, r2
 8004338:	d0f1      	beq.n	800431e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433a:	4b57      	ldr	r3, [pc, #348]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	22f8      	movs	r2, #248	; 0xf8
 8004340:	4393      	bics	r3, r2
 8004342:	0019      	movs	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	00da      	lsls	r2, r3, #3
 800434a:	4b53      	ldr	r3, [pc, #332]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e018      	b.n	8004384 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b51      	ldr	r3, [pc, #324]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b50      	ldr	r3, [pc, #320]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004358:	2101      	movs	r1, #1
 800435a:	438a      	bics	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fd fd55 	bl	8001e0c <HAL_GetTick>
 8004362:	0003      	movs	r3, r0
 8004364:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004368:	f7fd fd50 	bl	8001e0c <HAL_GetTick>
 800436c:	0002      	movs	r2, r0
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e272      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	4b47      	ldr	r3, [pc, #284]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2202      	movs	r2, #2
 8004380:	4013      	ands	r3, r2
 8004382:	d1f1      	bne.n	8004368 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2208      	movs	r2, #8
 800438a:	4013      	ands	r3, r2
 800438c:	d036      	beq.n	80043fc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d019      	beq.n	80043ca <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004396:	4b40      	ldr	r3, [pc, #256]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800439a:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800439c:	2101      	movs	r1, #1
 800439e:	430a      	orrs	r2, r1
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a2:	f7fd fd33 	bl	8001e0c <HAL_GetTick>
 80043a6:	0003      	movs	r3, r0
 80043a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ac:	f7fd fd2e 	bl	8001e0c <HAL_GetTick>
 80043b0:	0002      	movs	r2, r0
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e250      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	2202      	movs	r2, #2
 80043c4:	4013      	ands	r3, r2
 80043c6:	d0f1      	beq.n	80043ac <HAL_RCC_OscConfig+0x24c>
 80043c8:	e018      	b.n	80043fc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ca:	4b33      	ldr	r3, [pc, #204]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80043cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ce:	4b32      	ldr	r3, [pc, #200]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80043d0:	2101      	movs	r1, #1
 80043d2:	438a      	bics	r2, r1
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d6:	f7fd fd19 	bl	8001e0c <HAL_GetTick>
 80043da:	0003      	movs	r3, r0
 80043dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fd fd14 	bl	8001e0c <HAL_GetTick>
 80043e4:	0002      	movs	r2, r0
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e236      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f2:	4b29      	ldr	r3, [pc, #164]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	2202      	movs	r2, #2
 80043f8:	4013      	ands	r3, r2
 80043fa:	d1f1      	bne.n	80043e0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2204      	movs	r2, #4
 8004402:	4013      	ands	r3, r2
 8004404:	d100      	bne.n	8004408 <HAL_RCC_OscConfig+0x2a8>
 8004406:	e0b5      	b.n	8004574 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004408:	201f      	movs	r0, #31
 800440a:	183b      	adds	r3, r7, r0
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	055b      	lsls	r3, r3, #21
 8004418:	4013      	ands	r3, r2
 800441a:	d110      	bne.n	800443e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441c:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	0549      	lsls	r1, r1, #21
 8004426:	430a      	orrs	r2, r1
 8004428:	61da      	str	r2, [r3, #28]
 800442a:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	055b      	lsls	r3, r3, #21
 8004432:	4013      	ands	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004438:	183b      	adds	r3, r7, r0
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_RCC_OscConfig+0x344>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	4013      	ands	r3, r2
 8004448:	d11a      	bne.n	8004480 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444a:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <HAL_RCC_OscConfig+0x344>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <HAL_RCC_OscConfig+0x344>)
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	0049      	lsls	r1, r1, #1
 8004454:	430a      	orrs	r2, r1
 8004456:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004458:	f7fd fcd8 	bl	8001e0c <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004462:	f7fd fcd3 	bl	8001e0c <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b64      	cmp	r3, #100	; 0x64
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1f5      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_OscConfig+0x344>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	4013      	ands	r3, r2
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10f      	bne.n	80044a8 <HAL_RCC_OscConfig+0x348>
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	4b02      	ldr	r3, [pc, #8]	; (8004498 <HAL_RCC_OscConfig+0x338>)
 800448e:	2101      	movs	r1, #1
 8004490:	430a      	orrs	r2, r1
 8004492:	621a      	str	r2, [r3, #32]
 8004494:	e036      	b.n	8004504 <HAL_RCC_OscConfig+0x3a4>
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	40021000 	.word	0x40021000
 800449c:	fffeffff 	.word	0xfffeffff
 80044a0:	fffbffff 	.word	0xfffbffff
 80044a4:	40007000 	.word	0x40007000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10c      	bne.n	80044ca <HAL_RCC_OscConfig+0x36a>
 80044b0:	4bca      	ldr	r3, [pc, #808]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044b2:	6a1a      	ldr	r2, [r3, #32]
 80044b4:	4bc9      	ldr	r3, [pc, #804]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044b6:	2101      	movs	r1, #1
 80044b8:	438a      	bics	r2, r1
 80044ba:	621a      	str	r2, [r3, #32]
 80044bc:	4bc7      	ldr	r3, [pc, #796]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044be:	6a1a      	ldr	r2, [r3, #32]
 80044c0:	4bc6      	ldr	r3, [pc, #792]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044c2:	2104      	movs	r1, #4
 80044c4:	438a      	bics	r2, r1
 80044c6:	621a      	str	r2, [r3, #32]
 80044c8:	e01c      	b.n	8004504 <HAL_RCC_OscConfig+0x3a4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x38c>
 80044d2:	4bc2      	ldr	r3, [pc, #776]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	4bc1      	ldr	r3, [pc, #772]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044d8:	2104      	movs	r1, #4
 80044da:	430a      	orrs	r2, r1
 80044dc:	621a      	str	r2, [r3, #32]
 80044de:	4bbf      	ldr	r3, [pc, #764]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	4bbe      	ldr	r3, [pc, #760]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044e4:	2101      	movs	r1, #1
 80044e6:	430a      	orrs	r2, r1
 80044e8:	621a      	str	r2, [r3, #32]
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0x3a4>
 80044ec:	4bbb      	ldr	r3, [pc, #748]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044ee:	6a1a      	ldr	r2, [r3, #32]
 80044f0:	4bba      	ldr	r3, [pc, #744]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	438a      	bics	r2, r1
 80044f6:	621a      	str	r2, [r3, #32]
 80044f8:	4bb8      	ldr	r3, [pc, #736]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	4bb7      	ldr	r3, [pc, #732]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80044fe:	2104      	movs	r1, #4
 8004500:	438a      	bics	r2, r1
 8004502:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d014      	beq.n	8004536 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450c:	f7fd fc7e 	bl	8001e0c <HAL_GetTick>
 8004510:	0003      	movs	r3, r0
 8004512:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004514:	e009      	b.n	800452a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7fd fc79 	bl	8001e0c <HAL_GetTick>
 800451a:	0002      	movs	r2, r0
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	4aaf      	ldr	r2, [pc, #700]	; (80047e0 <HAL_RCC_OscConfig+0x680>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e19a      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452a:	4bac      	ldr	r3, [pc, #688]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x3b6>
 8004534:	e013      	b.n	800455e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004536:	f7fd fc69 	bl	8001e0c <HAL_GetTick>
 800453a:	0003      	movs	r3, r0
 800453c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453e:	e009      	b.n	8004554 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fd fc64 	bl	8001e0c <HAL_GetTick>
 8004544:	0002      	movs	r2, r0
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	4aa5      	ldr	r2, [pc, #660]	; (80047e0 <HAL_RCC_OscConfig+0x680>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e185      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004554:	4ba1      	ldr	r3, [pc, #644]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	2202      	movs	r2, #2
 800455a:	4013      	ands	r3, r2
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800455e:	231f      	movs	r3, #31
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004568:	4b9c      	ldr	r3, [pc, #624]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	4b9b      	ldr	r3, [pc, #620]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800456e:	499d      	ldr	r1, [pc, #628]	; (80047e4 <HAL_RCC_OscConfig+0x684>)
 8004570:	400a      	ands	r2, r1
 8004572:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2210      	movs	r2, #16
 800457a:	4013      	ands	r3, r2
 800457c:	d063      	beq.n	8004646 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d12a      	bne.n	80045dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004586:	4b95      	ldr	r3, [pc, #596]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458a:	4b94      	ldr	r3, [pc, #592]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800458c:	2104      	movs	r1, #4
 800458e:	430a      	orrs	r2, r1
 8004590:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004592:	4b92      	ldr	r3, [pc, #584]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004596:	4b91      	ldr	r3, [pc, #580]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004598:	2101      	movs	r1, #1
 800459a:	430a      	orrs	r2, r1
 800459c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459e:	f7fd fc35 	bl	8001e0c <HAL_GetTick>
 80045a2:	0003      	movs	r3, r0
 80045a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045a8:	f7fd fc30 	bl	8001e0c <HAL_GetTick>
 80045ac:	0002      	movs	r2, r0
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e152      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045ba:	4b88      	ldr	r3, [pc, #544]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80045bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045be:	2202      	movs	r2, #2
 80045c0:	4013      	ands	r3, r2
 80045c2:	d0f1      	beq.n	80045a8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80045c4:	4b85      	ldr	r3, [pc, #532]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	22f8      	movs	r2, #248	; 0xf8
 80045ca:	4393      	bics	r3, r2
 80045cc:	0019      	movs	r1, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	00da      	lsls	r2, r3, #3
 80045d4:	4b81      	ldr	r3, [pc, #516]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80045d6:	430a      	orrs	r2, r1
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34
 80045da:	e034      	b.n	8004646 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	3305      	adds	r3, #5
 80045e2:	d111      	bne.n	8004608 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80045e4:	4b7d      	ldr	r3, [pc, #500]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80045e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e8:	4b7c      	ldr	r3, [pc, #496]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80045ea:	2104      	movs	r1, #4
 80045ec:	438a      	bics	r2, r1
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80045f0:	4b7a      	ldr	r3, [pc, #488]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	22f8      	movs	r2, #248	; 0xf8
 80045f6:	4393      	bics	r3, r2
 80045f8:	0019      	movs	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	00da      	lsls	r2, r3, #3
 8004600:	4b76      	ldr	r3, [pc, #472]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004602:	430a      	orrs	r2, r1
 8004604:	635a      	str	r2, [r3, #52]	; 0x34
 8004606:	e01e      	b.n	8004646 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004608:	4b74      	ldr	r3, [pc, #464]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800460a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460c:	4b73      	ldr	r3, [pc, #460]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800460e:	2104      	movs	r1, #4
 8004610:	430a      	orrs	r2, r1
 8004612:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004614:	4b71      	ldr	r3, [pc, #452]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004618:	4b70      	ldr	r3, [pc, #448]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800461a:	2101      	movs	r1, #1
 800461c:	438a      	bics	r2, r1
 800461e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004620:	f7fd fbf4 	bl	8001e0c <HAL_GetTick>
 8004624:	0003      	movs	r3, r0
 8004626:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800462a:	f7fd fbef 	bl	8001e0c <HAL_GetTick>
 800462e:	0002      	movs	r2, r0
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e111      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800463c:	4b67      	ldr	r3, [pc, #412]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	2202      	movs	r2, #2
 8004642:	4013      	ands	r3, r2
 8004644:	d1f1      	bne.n	800462a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2220      	movs	r2, #32
 800464c:	4013      	ands	r3, r2
 800464e:	d05c      	beq.n	800470a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004650:	4b62      	ldr	r3, [pc, #392]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	220c      	movs	r2, #12
 8004656:	4013      	ands	r3, r2
 8004658:	2b0c      	cmp	r3, #12
 800465a:	d00e      	beq.n	800467a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800465c:	4b5f      	ldr	r3, [pc, #380]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	220c      	movs	r2, #12
 8004662:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004664:	2b08      	cmp	r3, #8
 8004666:	d114      	bne.n	8004692 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004668:	4b5c      	ldr	r3, [pc, #368]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	23c0      	movs	r3, #192	; 0xc0
 800466e:	025b      	lsls	r3, r3, #9
 8004670:	401a      	ands	r2, r3
 8004672:	23c0      	movs	r3, #192	; 0xc0
 8004674:	025b      	lsls	r3, r3, #9
 8004676:	429a      	cmp	r2, r3
 8004678:	d10b      	bne.n	8004692 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800467a:	4b58      	ldr	r3, [pc, #352]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800467c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	029b      	lsls	r3, r3, #10
 8004682:	4013      	ands	r3, r2
 8004684:	d040      	beq.n	8004708 <HAL_RCC_OscConfig+0x5a8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d03c      	beq.n	8004708 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e0e6      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01b      	beq.n	80046d2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800469a:	4b50      	ldr	r3, [pc, #320]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800469c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800469e:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80046a0:	2180      	movs	r1, #128	; 0x80
 80046a2:	0249      	lsls	r1, r1, #9
 80046a4:	430a      	orrs	r2, r1
 80046a6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd fbb0 	bl	8001e0c <HAL_GetTick>
 80046ac:	0003      	movs	r3, r0
 80046ae:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b2:	f7fd fbab 	bl	8001e0c <HAL_GetTick>
 80046b6:	0002      	movs	r2, r0
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e0cd      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80046c4:	4b45      	ldr	r3, [pc, #276]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80046c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	029b      	lsls	r3, r3, #10
 80046cc:	4013      	ands	r3, r2
 80046ce:	d0f0      	beq.n	80046b2 <HAL_RCC_OscConfig+0x552>
 80046d0:	e01b      	b.n	800470a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80046d2:	4b42      	ldr	r3, [pc, #264]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80046d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d6:	4b41      	ldr	r3, [pc, #260]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80046d8:	4943      	ldr	r1, [pc, #268]	; (80047e8 <HAL_RCC_OscConfig+0x688>)
 80046da:	400a      	ands	r2, r1
 80046dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046de:	f7fd fb95 	bl	8001e0c <HAL_GetTick>
 80046e2:	0003      	movs	r3, r0
 80046e4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e8:	f7fd fb90 	bl	8001e0c <HAL_GetTick>
 80046ec:	0002      	movs	r2, r0
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0b2      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80046fa:	4b38      	ldr	r3, [pc, #224]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80046fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	029b      	lsls	r3, r3, #10
 8004702:	4013      	ands	r3, r2
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x588>
 8004706:	e000      	b.n	800470a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004708:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d100      	bne.n	8004714 <HAL_RCC_OscConfig+0x5b4>
 8004712:	e0a4      	b.n	800485e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004714:	4b31      	ldr	r3, [pc, #196]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	220c      	movs	r2, #12
 800471a:	4013      	ands	r3, r2
 800471c:	2b08      	cmp	r3, #8
 800471e:	d100      	bne.n	8004722 <HAL_RCC_OscConfig+0x5c2>
 8004720:	e078      	b.n	8004814 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b02      	cmp	r3, #2
 8004728:	d14c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004730:	492e      	ldr	r1, [pc, #184]	; (80047ec <HAL_RCC_OscConfig+0x68c>)
 8004732:	400a      	ands	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7fd fb69 	bl	8001e0c <HAL_GetTick>
 800473a:	0003      	movs	r3, r0
 800473c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004740:	f7fd fb64 	bl	8001e0c <HAL_GetTick>
 8004744:	0002      	movs	r2, r0
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e086      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	049b      	lsls	r3, r3, #18
 800475a:	4013      	ands	r3, r2
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800475e:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	220f      	movs	r2, #15
 8004764:	4393      	bics	r3, r2
 8004766:	0019      	movs	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476c:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800476e:	430a      	orrs	r2, r1
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c
 8004772:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_RCC_OscConfig+0x690>)
 8004778:	4013      	ands	r3, r2
 800477a:	0019      	movs	r1, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	431a      	orrs	r2, r3
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 8004792:	2180      	movs	r1, #128	; 0x80
 8004794:	0449      	lsls	r1, r1, #17
 8004796:	430a      	orrs	r2, r1
 8004798:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479a:	f7fd fb37 	bl	8001e0c <HAL_GetTick>
 800479e:	0003      	movs	r3, r0
 80047a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fd fb32 	bl	8001e0c <HAL_GetTick>
 80047a8:	0002      	movs	r2, r0
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e054      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	049b      	lsls	r3, r3, #18
 80047be:	4013      	ands	r3, r2
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x644>
 80047c2:	e04c      	b.n	800485e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <HAL_RCC_OscConfig+0x67c>)
 80047ca:	4908      	ldr	r1, [pc, #32]	; (80047ec <HAL_RCC_OscConfig+0x68c>)
 80047cc:	400a      	ands	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fd fb1c 	bl	8001e0c <HAL_GetTick>
 80047d4:	0003      	movs	r3, r0
 80047d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d8:	e015      	b.n	8004806 <HAL_RCC_OscConfig+0x6a6>
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	40021000 	.word	0x40021000
 80047e0:	00001388 	.word	0x00001388
 80047e4:	efffffff 	.word	0xefffffff
 80047e8:	fffeffff 	.word	0xfffeffff
 80047ec:	feffffff 	.word	0xfeffffff
 80047f0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fd fb0a 	bl	8001e0c <HAL_GetTick>
 80047f8:	0002      	movs	r2, r0
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e02c      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004806:	4b18      	ldr	r3, [pc, #96]	; (8004868 <HAL_RCC_OscConfig+0x708>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	049b      	lsls	r3, r3, #18
 800480e:	4013      	ands	r3, r2
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x694>
 8004812:	e024      	b.n	800485e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e01f      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <HAL_RCC_OscConfig+0x708>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <HAL_RCC_OscConfig+0x708>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	23c0      	movs	r3, #192	; 0xc0
 8004830:	025b      	lsls	r3, r3, #9
 8004832:	401a      	ands	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	429a      	cmp	r2, r3
 800483a:	d10e      	bne.n	800485a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	220f      	movs	r2, #15
 8004840:	401a      	ands	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d107      	bne.n	800485a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	23f0      	movs	r3, #240	; 0xf0
 800484e:	039b      	lsls	r3, r3, #14
 8004850:	401a      	ands	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	b008      	add	sp, #32
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000

0800486c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0bf      	b.n	8004a00 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004880:	4b61      	ldr	r3, [pc, #388]	; (8004a08 <HAL_RCC_ClockConfig+0x19c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2201      	movs	r2, #1
 8004886:	4013      	ands	r3, r2
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d911      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b5e      	ldr	r3, [pc, #376]	; (8004a08 <HAL_RCC_ClockConfig+0x19c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2201      	movs	r2, #1
 8004894:	4393      	bics	r3, r2
 8004896:	0019      	movs	r1, r3
 8004898:	4b5b      	ldr	r3, [pc, #364]	; (8004a08 <HAL_RCC_ClockConfig+0x19c>)
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCC_ClockConfig+0x19c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2201      	movs	r2, #1
 80048a6:	4013      	ands	r3, r2
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0a6      	b.n	8004a00 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2202      	movs	r2, #2
 80048b8:	4013      	ands	r3, r2
 80048ba:	d015      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2204      	movs	r2, #4
 80048c2:	4013      	ands	r3, r2
 80048c4:	d006      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048c6:	4b51      	ldr	r3, [pc, #324]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	4b50      	ldr	r3, [pc, #320]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 80048cc:	21e0      	movs	r1, #224	; 0xe0
 80048ce:	00c9      	lsls	r1, r1, #3
 80048d0:	430a      	orrs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d4:	4b4d      	ldr	r3, [pc, #308]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	22f0      	movs	r2, #240	; 0xf0
 80048da:	4393      	bics	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	4b4a      	ldr	r3, [pc, #296]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2201      	movs	r2, #1
 80048ee:	4013      	ands	r3, r2
 80048f0:	d04c      	beq.n	800498c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	4b44      	ldr	r3, [pc, #272]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	029b      	lsls	r3, r3, #10
 8004902:	4013      	ands	r3, r2
 8004904:	d120      	bne.n	8004948 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e07a      	b.n	8004a00 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b3e      	ldr	r3, [pc, #248]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	049b      	lsls	r3, r3, #18
 800491a:	4013      	ands	r3, r2
 800491c:	d114      	bne.n	8004948 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e06e      	b.n	8004a00 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800492a:	4b38      	ldr	r3, [pc, #224]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 800492c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	029b      	lsls	r3, r3, #10
 8004932:	4013      	ands	r3, r2
 8004934:	d108      	bne.n	8004948 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e062      	b.n	8004a00 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493a:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2202      	movs	r2, #2
 8004940:	4013      	ands	r3, r2
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e05b      	b.n	8004a00 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004948:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2203      	movs	r2, #3
 800494e:	4393      	bics	r3, r2
 8004950:	0019      	movs	r1, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800495c:	f7fd fa56 	bl	8001e0c <HAL_GetTick>
 8004960:	0003      	movs	r3, r0
 8004962:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004964:	e009      	b.n	800497a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004966:	f7fd fa51 	bl	8001e0c <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <HAL_RCC_ClockConfig+0x1a4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e042      	b.n	8004a00 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	220c      	movs	r2, #12
 8004980:	401a      	ands	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	429a      	cmp	r2, r3
 800498a:	d1ec      	bne.n	8004966 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800498c:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <HAL_RCC_ClockConfig+0x19c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2201      	movs	r2, #1
 8004992:	4013      	ands	r3, r2
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d211      	bcs.n	80049be <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499a:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <HAL_RCC_ClockConfig+0x19c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	4393      	bics	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <HAL_RCC_ClockConfig+0x19c>)
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ac:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <HAL_RCC_ClockConfig+0x19c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	4013      	ands	r3, r2
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d001      	beq.n	80049be <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e020      	b.n	8004a00 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2204      	movs	r2, #4
 80049c4:	4013      	ands	r3, r2
 80049c6:	d009      	beq.n	80049dc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a11      	ldr	r2, [pc, #68]	; (8004a14 <HAL_RCC_ClockConfig+0x1a8>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	0019      	movs	r1, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80049dc:	f000 f820 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80049e0:	0001      	movs	r1, r0
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x1a0>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	220f      	movs	r2, #15
 80049ea:	4013      	ands	r3, r2
 80049ec:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <HAL_RCC_ClockConfig+0x1ac>)
 80049ee:	5cd3      	ldrb	r3, [r2, r3]
 80049f0:	000a      	movs	r2, r1
 80049f2:	40da      	lsrs	r2, r3
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1b0>)
 80049f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80049f8:	2003      	movs	r0, #3
 80049fa:	f7fd f9c1 	bl	8001d80 <HAL_InitTick>
  
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b004      	add	sp, #16
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40022000 	.word	0x40022000
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	00001388 	.word	0x00001388
 8004a14:	fffff8ff 	.word	0xfffff8ff
 8004a18:	08006f14 	.word	0x08006f14
 8004a1c:	20000000 	.word	0x20000000

08004a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004a3a:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	220c      	movs	r2, #12
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d046      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>
 8004a4a:	d848      	bhi.n	8004ade <HAL_RCC_GetSysClockFreq+0xbe>
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d002      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x36>
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d003      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x3c>
 8004a54:	e043      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a56:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a58:	613b      	str	r3, [r7, #16]
      break;
 8004a5a:	e043      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	0c9b      	lsrs	r3, r3, #18
 8004a60:	220f      	movs	r2, #15
 8004a62:	4013      	ands	r3, r2
 8004a64:	4a24      	ldr	r2, [pc, #144]	; (8004af8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004a66:	5cd3      	ldrb	r3, [r2, r3]
 8004a68:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004a6a:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	220f      	movs	r2, #15
 8004a70:	4013      	ands	r3, r2
 8004a72:	4a22      	ldr	r2, [pc, #136]	; (8004afc <HAL_RCC_GetSysClockFreq+0xdc>)
 8004a74:	5cd3      	ldrb	r3, [r2, r3]
 8004a76:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	23c0      	movs	r3, #192	; 0xc0
 8004a7c:	025b      	lsls	r3, r3, #9
 8004a7e:	401a      	ands	r2, r3
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	025b      	lsls	r3, r3, #9
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d109      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	481a      	ldr	r0, [pc, #104]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a8c:	f7fb fb3a 	bl	8000104 <__udivsi3>
 8004a90:	0003      	movs	r3, r0
 8004a92:	001a      	movs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4353      	muls	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e01a      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	23c0      	movs	r3, #192	; 0xc0
 8004aa0:	025b      	lsls	r3, r3, #9
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	23c0      	movs	r3, #192	; 0xc0
 8004aa6:	025b      	lsls	r3, r3, #9
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d109      	bne.n	8004ac0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	4814      	ldr	r0, [pc, #80]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004ab0:	f7fb fb28 	bl	8000104 <__udivsi3>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	001a      	movs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4353      	muls	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	480c      	ldr	r0, [pc, #48]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ac4:	f7fb fb1e 	bl	8000104 <__udivsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	001a      	movs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4353      	muls	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	613b      	str	r3, [r7, #16]
      break;
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004ada:	613b      	str	r3, [r7, #16]
      break;
 8004adc:	e002      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ae0:	613b      	str	r3, [r7, #16]
      break;
 8004ae2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ae4:	693b      	ldr	r3, [r7, #16]
}
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b006      	add	sp, #24
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	40021000 	.word	0x40021000
 8004af4:	007a1200 	.word	0x007a1200
 8004af8:	08006f2c 	.word	0x08006f2c
 8004afc:	08006f3c 	.word	0x08006f3c
 8004b00:	02dc6c00 	.word	0x02dc6c00

08004b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b08:	4b02      	ldr	r3, [pc, #8]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	20000000 	.word	0x20000000

08004b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004b1c:	f7ff fff2 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b20:	0001      	movs	r1, r0
 8004b22:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	2207      	movs	r2, #7
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b2e:	5cd3      	ldrb	r3, [r2, r3]
 8004b30:	40d9      	lsrs	r1, r3
 8004b32:	000b      	movs	r3, r1
}    
 8004b34:	0018      	movs	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	08006f24 	.word	0x08006f24

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	025b      	lsls	r3, r3, #9
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d100      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004b60:	e08e      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004b62:	2017      	movs	r0, #23
 8004b64:	183b      	adds	r3, r7, r0
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6a:	4b6e      	ldr	r3, [pc, #440]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	055b      	lsls	r3, r3, #21
 8004b72:	4013      	ands	r3, r2
 8004b74:	d110      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b76:	4b6b      	ldr	r3, [pc, #428]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	4b6a      	ldr	r3, [pc, #424]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	0549      	lsls	r1, r1, #21
 8004b80:	430a      	orrs	r2, r1
 8004b82:	61da      	str	r2, [r3, #28]
 8004b84:	4b67      	ldr	r3, [pc, #412]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	055b      	lsls	r3, r3, #21
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b92:	183b      	adds	r3, r7, r0
 8004b94:	2201      	movs	r2, #1
 8004b96:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b98:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d11a      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba4:	4b60      	ldr	r3, [pc, #384]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b5f      	ldr	r3, [pc, #380]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	0049      	lsls	r1, r1, #1
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb2:	f7fd f92b 	bl	8001e0c <HAL_GetTick>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bba:	e008      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbc:	f7fd f926 	bl	8001e0c <HAL_GetTick>
 8004bc0:	0002      	movs	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e0a6      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bce:	4b56      	ldr	r3, [pc, #344]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bda:	4b52      	ldr	r3, [pc, #328]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bdc:	6a1a      	ldr	r2, [r3, #32]
 8004bde:	23c0      	movs	r3, #192	; 0xc0
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4013      	ands	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d034      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	23c0      	movs	r3, #192	; 0xc0
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d02c      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bfc:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4a4a      	ldr	r2, [pc, #296]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c06:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c08:	6a1a      	ldr	r2, [r3, #32]
 8004c0a:	4b46      	ldr	r3, [pc, #280]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	0249      	lsls	r1, r1, #9
 8004c10:	430a      	orrs	r2, r1
 8004c12:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c14:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c1a:	4945      	ldr	r1, [pc, #276]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c20:	4b40      	ldr	r3, [pc, #256]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2e:	f7fd f8ed 	bl	8001e0c <HAL_GetTick>
 8004c32:	0003      	movs	r3, r0
 8004c34:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c36:	e009      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fd f8e8 	bl	8001e0c <HAL_GetTick>
 8004c3c:	0002      	movs	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e067      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4c:	4b35      	ldr	r3, [pc, #212]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	2202      	movs	r2, #2
 8004c52:	4013      	ands	r3, r2
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c56:	4b33      	ldr	r3, [pc, #204]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	4a34      	ldr	r2, [pc, #208]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	0019      	movs	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c66:	430a      	orrs	r2, r1
 8004c68:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c6a:	2317      	movs	r3, #23
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d105      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c74:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c7a:	492f      	ldr	r1, [pc, #188]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2201      	movs	r2, #1
 8004c86:	4013      	ands	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c8a:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	2203      	movs	r2, #3
 8004c90:	4393      	bics	r3, r2
 8004c92:	0019      	movs	r1, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	4a23      	ldr	r2, [pc, #140]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	02db      	lsls	r3, r3, #11
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc8:	4b16      	ldr	r3, [pc, #88]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	2210      	movs	r2, #16
 8004cec:	4393      	bics	r3, r2
 8004cee:	0019      	movs	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4013      	ands	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	2240      	movs	r2, #64	; 0x40
 8004d0c:	4393      	bics	r3, r2
 8004d0e:	0019      	movs	r1, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d16:	430a      	orrs	r2, r1
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b006      	add	sp, #24
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	fffffcff 	.word	0xfffffcff
 8004d30:	fffeffff 	.word	0xfffeffff
 8004d34:	00001388 	.word	0x00001388
 8004d38:	efffffff 	.word	0xefffffff
 8004d3c:	fffcffff 	.word	0xfffcffff
 8004d40:	fff3ffff 	.word	0xfff3ffff

08004d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e042      	b.n	8004ddc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	223d      	movs	r2, #61	; 0x3d
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	223c      	movs	r2, #60	; 0x3c
 8004d66:	2100      	movs	r1, #0
 8004d68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7fc fdd5 	bl	800191c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	223d      	movs	r2, #61	; 0x3d
 8004d76:	2102      	movs	r1, #2
 8004d78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	0019      	movs	r1, r3
 8004d84:	0010      	movs	r0, r2
 8004d86:	f000 fd0f 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2246      	movs	r2, #70	; 0x46
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	223e      	movs	r2, #62	; 0x3e
 8004d96:	2101      	movs	r1, #1
 8004d98:	5499      	strb	r1, [r3, r2]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	223f      	movs	r2, #63	; 0x3f
 8004d9e:	2101      	movs	r1, #1
 8004da0:	5499      	strb	r1, [r3, r2]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2240      	movs	r2, #64	; 0x40
 8004da6:	2101      	movs	r1, #1
 8004da8:	5499      	strb	r1, [r3, r2]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2241      	movs	r2, #65	; 0x41
 8004dae:	2101      	movs	r1, #1
 8004db0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2242      	movs	r2, #66	; 0x42
 8004db6:	2101      	movs	r1, #1
 8004db8:	5499      	strb	r1, [r3, r2]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2243      	movs	r2, #67	; 0x43
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2244      	movs	r2, #68	; 0x44
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5499      	strb	r1, [r3, r2]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2245      	movs	r2, #69	; 0x45
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	223d      	movs	r2, #61	; 0x3d
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	223d      	movs	r2, #61	; 0x3d
 8004df0:	5c9b      	ldrb	r3, [r3, r2]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d001      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e03b      	b.n	8004e74 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	223d      	movs	r2, #61	; 0x3d
 8004e00:	2102      	movs	r1, #2
 8004e02:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2101      	movs	r1, #1
 8004e10:	430a      	orrs	r2, r1
 8004e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <HAL_TIM_Base_Start_IT+0x98>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00f      	beq.n	8004e3e <HAL_TIM_Base_Start_IT+0x5a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	05db      	lsls	r3, r3, #23
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d009      	beq.n	8004e3e <HAL_TIM_Base_Start_IT+0x5a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_TIM_Base_Start_IT+0x5a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d111      	bne.n	8004e62 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2207      	movs	r2, #7
 8004e46:	4013      	ands	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b06      	cmp	r3, #6
 8004e4e:	d010      	beq.n	8004e72 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e60:	e007      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b004      	add	sp, #16
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40014000 	.word	0x40014000

08004e88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e042      	b.n	8004f20 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	223d      	movs	r2, #61	; 0x3d
 8004e9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d107      	bne.n	8004eb6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	223c      	movs	r2, #60	; 0x3c
 8004eaa:	2100      	movs	r1, #0
 8004eac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f000 f839 	bl	8004f28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	223d      	movs	r2, #61	; 0x3d
 8004eba:	2102      	movs	r1, #2
 8004ebc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	0010      	movs	r0, r2
 8004eca:	f000 fc6d 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2246      	movs	r2, #70	; 0x46
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	223e      	movs	r2, #62	; 0x3e
 8004eda:	2101      	movs	r1, #1
 8004edc:	5499      	strb	r1, [r3, r2]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	223f      	movs	r2, #63	; 0x3f
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	5499      	strb	r1, [r3, r2]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	2101      	movs	r1, #1
 8004eec:	5499      	strb	r1, [r3, r2]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2241      	movs	r2, #65	; 0x41
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2242      	movs	r2, #66	; 0x42
 8004efa:	2101      	movs	r1, #1
 8004efc:	5499      	strb	r1, [r3, r2]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2243      	movs	r2, #67	; 0x43
 8004f02:	2101      	movs	r1, #1
 8004f04:	5499      	strb	r1, [r3, r2]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2244      	movs	r2, #68	; 0x44
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	5499      	strb	r1, [r3, r2]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2245      	movs	r2, #69	; 0x45
 8004f12:	2101      	movs	r1, #1
 8004f14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	223d      	movs	r2, #61	; 0x3d
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e042      	b.n	8004fd0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	223d      	movs	r2, #61	; 0x3d
 8004f4e:	5c9b      	ldrb	r3, [r3, r2]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d107      	bne.n	8004f66 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	223c      	movs	r2, #60	; 0x3c
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f000 f839 	bl	8004fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	223d      	movs	r2, #61	; 0x3d
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	0019      	movs	r1, r3
 8004f78:	0010      	movs	r0, r2
 8004f7a:	f000 fc15 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2246      	movs	r2, #70	; 0x46
 8004f82:	2101      	movs	r1, #1
 8004f84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	223e      	movs	r2, #62	; 0x3e
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	5499      	strb	r1, [r3, r2]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	223f      	movs	r2, #63	; 0x3f
 8004f92:	2101      	movs	r1, #1
 8004f94:	5499      	strb	r1, [r3, r2]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2240      	movs	r2, #64	; 0x40
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	5499      	strb	r1, [r3, r2]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2241      	movs	r2, #65	; 0x41
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2242      	movs	r2, #66	; 0x42
 8004faa:	2101      	movs	r1, #1
 8004fac:	5499      	strb	r1, [r3, r2]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2243      	movs	r2, #67	; 0x43
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5499      	strb	r1, [r3, r2]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2244      	movs	r2, #68	; 0x44
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2245      	movs	r2, #69	; 0x45
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	223d      	movs	r2, #61	; 0x3d
 8004fca:	2101      	movs	r1, #1
 8004fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d108      	bne.n	800500a <HAL_TIM_PWM_Start+0x22>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	223e      	movs	r2, #62	; 0x3e
 8004ffc:	5c9b      	ldrb	r3, [r3, r2]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	1e5a      	subs	r2, r3, #1
 8005004:	4193      	sbcs	r3, r2
 8005006:	b2db      	uxtb	r3, r3
 8005008:	e01f      	b.n	800504a <HAL_TIM_PWM_Start+0x62>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d108      	bne.n	8005022 <HAL_TIM_PWM_Start+0x3a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	223f      	movs	r2, #63	; 0x3f
 8005014:	5c9b      	ldrb	r3, [r3, r2]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	1e5a      	subs	r2, r3, #1
 800501c:	4193      	sbcs	r3, r2
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e013      	b.n	800504a <HAL_TIM_PWM_Start+0x62>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d108      	bne.n	800503a <HAL_TIM_PWM_Start+0x52>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2240      	movs	r2, #64	; 0x40
 800502c:	5c9b      	ldrb	r3, [r3, r2]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	1e5a      	subs	r2, r3, #1
 8005034:	4193      	sbcs	r3, r2
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e007      	b.n	800504a <HAL_TIM_PWM_Start+0x62>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2241      	movs	r2, #65	; 0x41
 800503e:	5c9b      	ldrb	r3, [r3, r2]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	1e5a      	subs	r2, r3, #1
 8005046:	4193      	sbcs	r3, r2
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e074      	b.n	800513c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <HAL_TIM_PWM_Start+0x7a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	223e      	movs	r2, #62	; 0x3e
 800505c:	2102      	movs	r1, #2
 800505e:	5499      	strb	r1, [r3, r2]
 8005060:	e013      	b.n	800508a <HAL_TIM_PWM_Start+0xa2>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b04      	cmp	r3, #4
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0x8a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	223f      	movs	r2, #63	; 0x3f
 800506c:	2102      	movs	r1, #2
 800506e:	5499      	strb	r1, [r3, r2]
 8005070:	e00b      	b.n	800508a <HAL_TIM_PWM_Start+0xa2>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0x9a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2240      	movs	r2, #64	; 0x40
 800507c:	2102      	movs	r1, #2
 800507e:	5499      	strb	r1, [r3, r2]
 8005080:	e003      	b.n	800508a <HAL_TIM_PWM_Start+0xa2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2241      	movs	r2, #65	; 0x41
 8005086:	2102      	movs	r1, #2
 8005088:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	2201      	movs	r2, #1
 8005092:	0018      	movs	r0, r3
 8005094:	f000 fe9e 	bl	8005dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a29      	ldr	r2, [pc, #164]	; (8005144 <HAL_TIM_PWM_Start+0x15c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_TIM_PWM_Start+0xd8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a28      	ldr	r2, [pc, #160]	; (8005148 <HAL_TIM_PWM_Start+0x160>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_TIM_PWM_Start+0xd8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a26      	ldr	r2, [pc, #152]	; (800514c <HAL_TIM_PWM_Start+0x164>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIM_PWM_Start+0xd8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a25      	ldr	r2, [pc, #148]	; (8005150 <HAL_TIM_PWM_Start+0x168>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d101      	bne.n	80050c4 <HAL_TIM_PWM_Start+0xdc>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_TIM_PWM_Start+0xde>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2180      	movs	r1, #128	; 0x80
 80050d6:	0209      	lsls	r1, r1, #8
 80050d8:	430a      	orrs	r2, r1
 80050da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_TIM_PWM_Start+0x15c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00f      	beq.n	8005106 <HAL_TIM_PWM_Start+0x11e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	05db      	lsls	r3, r3, #23
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d009      	beq.n	8005106 <HAL_TIM_PWM_Start+0x11e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <HAL_TIM_PWM_Start+0x16c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIM_PWM_Start+0x11e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a11      	ldr	r2, [pc, #68]	; (8005148 <HAL_TIM_PWM_Start+0x160>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d111      	bne.n	800512a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2207      	movs	r2, #7
 800510e:	4013      	ands	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b06      	cmp	r3, #6
 8005116:	d010      	beq.n	800513a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2101      	movs	r1, #1
 8005124:	430a      	orrs	r2, r1
 8005126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005128:	e007      	b.n	800513a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2101      	movs	r1, #1
 8005136:	430a      	orrs	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	0018      	movs	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	b004      	add	sp, #16
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800
 8005154:	40000400 	.word	0x40000400

08005158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2202      	movs	r2, #2
 8005168:	4013      	ands	r3, r2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d124      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2202      	movs	r2, #2
 8005176:	4013      	ands	r3, r2
 8005178:	2b02      	cmp	r3, #2
 800517a:	d11d      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2203      	movs	r2, #3
 8005182:	4252      	negs	r2, r2
 8005184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2203      	movs	r2, #3
 8005194:	4013      	ands	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 faec 	bl	8005778 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e007      	b.n	80051b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 fadf 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 faeb 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2204      	movs	r2, #4
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d125      	bne.n	8005212 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2204      	movs	r2, #4
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d11e      	bne.n	8005212 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2205      	movs	r2, #5
 80051da:	4252      	negs	r2, r2
 80051dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	23c0      	movs	r3, #192	; 0xc0
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4013      	ands	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 fabf 	bl	8005778 <HAL_TIM_IC_CaptureCallback>
 80051fa:	e007      	b.n	800520c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 fab2 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	0018      	movs	r0, r3
 8005208:	f000 fabe 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2208      	movs	r2, #8
 800521a:	4013      	ands	r3, r2
 800521c:	2b08      	cmp	r3, #8
 800521e:	d124      	bne.n	800526a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2208      	movs	r2, #8
 8005228:	4013      	ands	r3, r2
 800522a:	2b08      	cmp	r3, #8
 800522c:	d11d      	bne.n	800526a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2209      	movs	r2, #9
 8005234:	4252      	negs	r2, r2
 8005236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2204      	movs	r2, #4
 800523c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	2203      	movs	r2, #3
 8005246:	4013      	ands	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	0018      	movs	r0, r3
 800524e:	f000 fa93 	bl	8005778 <HAL_TIM_IC_CaptureCallback>
 8005252:	e007      	b.n	8005264 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0018      	movs	r0, r3
 8005258:	f000 fa86 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	0018      	movs	r0, r3
 8005260:	f000 fa92 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2210      	movs	r2, #16
 8005272:	4013      	ands	r3, r2
 8005274:	2b10      	cmp	r3, #16
 8005276:	d125      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2210      	movs	r2, #16
 8005280:	4013      	ands	r3, r2
 8005282:	2b10      	cmp	r3, #16
 8005284:	d11e      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2211      	movs	r2, #17
 800528c:	4252      	negs	r2, r2
 800528e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2208      	movs	r2, #8
 8005294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	23c0      	movs	r3, #192	; 0xc0
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4013      	ands	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	0018      	movs	r0, r3
 80052a8:	f000 fa66 	bl	8005778 <HAL_TIM_IC_CaptureCallback>
 80052ac:	e007      	b.n	80052be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	0018      	movs	r0, r3
 80052b2:	f000 fa59 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	0018      	movs	r0, r3
 80052ba:	f000 fa65 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2201      	movs	r2, #1
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d10f      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	4013      	ands	r3, r2
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d108      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2202      	movs	r2, #2
 80052e6:	4252      	negs	r2, r2
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7fc f9fb 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2280      	movs	r2, #128	; 0x80
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d10f      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	4013      	ands	r3, r2
 800530a:	2b80      	cmp	r3, #128	; 0x80
 800530c:	d108      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2281      	movs	r2, #129	; 0x81
 8005314:	4252      	negs	r2, r2
 8005316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0018      	movs	r0, r3
 800531c:	f000 fde4 	bl	8005ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2240      	movs	r2, #64	; 0x40
 8005328:	4013      	ands	r3, r2
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d10f      	bne.n	800534e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2240      	movs	r2, #64	; 0x40
 8005336:	4013      	ands	r3, r2
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d108      	bne.n	800534e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2241      	movs	r2, #65	; 0x41
 8005342:	4252      	negs	r2, r2
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	0018      	movs	r0, r3
 800534a:	f000 fa25 	bl	8005798 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2220      	movs	r2, #32
 8005356:	4013      	ands	r3, r2
 8005358:	2b20      	cmp	r3, #32
 800535a:	d10f      	bne.n	800537c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	4013      	ands	r3, r2
 8005366:	2b20      	cmp	r3, #32
 8005368:	d108      	bne.n	800537c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2221      	movs	r2, #33	; 0x21
 8005370:	4252      	negs	r2, r2
 8005372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	0018      	movs	r0, r3
 8005378:	f000 fdae 	bl	8005ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800537c:	46c0      	nop			; (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	b002      	add	sp, #8
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005390:	2317      	movs	r3, #23
 8005392:	18fb      	adds	r3, r7, r3
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	223c      	movs	r2, #60	; 0x3c
 800539c:	5c9b      	ldrb	r3, [r3, r2]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_OC_ConfigChannel+0x22>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e042      	b.n	800542c <HAL_TIM_OC_ConfigChannel+0xa8>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	223c      	movs	r2, #60	; 0x3c
 80053aa:	2101      	movs	r1, #1
 80053ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d027      	beq.n	8005404 <HAL_TIM_OC_ConfigChannel+0x80>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b0c      	cmp	r3, #12
 80053b8:	d82c      	bhi.n	8005414 <HAL_TIM_OC_ConfigChannel+0x90>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d019      	beq.n	80053f4 <HAL_TIM_OC_ConfigChannel+0x70>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d826      	bhi.n	8005414 <HAL_TIM_OC_ConfigChannel+0x90>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_TIM_OC_ConfigChannel+0x50>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d008      	beq.n	80053e4 <HAL_TIM_OC_ConfigChannel+0x60>
 80053d2:	e01f      	b.n	8005414 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	0011      	movs	r1, r2
 80053dc:	0018      	movs	r0, r3
 80053de:	f000 fa63 	bl	80058a8 <TIM_OC1_SetConfig>
      break;
 80053e2:	e01c      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	0011      	movs	r1, r2
 80053ec:	0018      	movs	r0, r3
 80053ee:	f000 fae3 	bl	80059b8 <TIM_OC2_SetConfig>
      break;
 80053f2:	e014      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	0011      	movs	r1, r2
 80053fc:	0018      	movs	r0, r3
 80053fe:	f000 fb5f 	bl	8005ac0 <TIM_OC3_SetConfig>
      break;
 8005402:	e00c      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	0011      	movs	r1, r2
 800540c:	0018      	movs	r0, r3
 800540e:	f000 fbdd 	bl	8005bcc <TIM_OC4_SetConfig>
      break;
 8005412:	e004      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005414:	2317      	movs	r3, #23
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
      break;
 800541c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	223c      	movs	r2, #60	; 0x3c
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]

  return status;
 8005426:	2317      	movs	r3, #23
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	781b      	ldrb	r3, [r3, #0]
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b006      	add	sp, #24
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005440:	2317      	movs	r3, #23
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	223c      	movs	r2, #60	; 0x3c
 800544c:	5c9b      	ldrb	r3, [r3, r2]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005452:	2302      	movs	r3, #2
 8005454:	e0ad      	b.n	80055b2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	223c      	movs	r2, #60	; 0x3c
 800545a:	2101      	movs	r1, #1
 800545c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	d100      	bne.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005464:	e076      	b.n	8005554 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b0c      	cmp	r3, #12
 800546a:	d900      	bls.n	800546e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800546c:	e095      	b.n	800559a <HAL_TIM_PWM_ConfigChannel+0x166>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d04e      	beq.n	8005512 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b08      	cmp	r3, #8
 8005478:	d900      	bls.n	800547c <HAL_TIM_PWM_ConfigChannel+0x48>
 800547a:	e08e      	b.n	800559a <HAL_TIM_PWM_ConfigChannel+0x166>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_PWM_ConfigChannel+0x56>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d021      	beq.n	80054cc <HAL_TIM_PWM_ConfigChannel+0x98>
 8005488:	e087      	b.n	800559a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	0011      	movs	r1, r2
 8005492:	0018      	movs	r0, r3
 8005494:	f000 fa08 	bl	80058a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2108      	movs	r1, #8
 80054a4:	430a      	orrs	r2, r1
 80054a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2104      	movs	r1, #4
 80054b4:	438a      	bics	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6999      	ldr	r1, [r3, #24]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	619a      	str	r2, [r3, #24]
      break;
 80054ca:	e06b      	b.n	80055a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	0011      	movs	r1, r2
 80054d4:	0018      	movs	r0, r3
 80054d6:	f000 fa6f 	bl	80059b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	0109      	lsls	r1, r1, #4
 80054e8:	430a      	orrs	r2, r1
 80054ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4931      	ldr	r1, [pc, #196]	; (80055bc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80054f8:	400a      	ands	r2, r1
 80054fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6999      	ldr	r1, [r3, #24]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	619a      	str	r2, [r3, #24]
      break;
 8005510:	e048      	b.n	80055a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	0011      	movs	r1, r2
 800551a:	0018      	movs	r0, r3
 800551c:	f000 fad0 	bl	8005ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69da      	ldr	r2, [r3, #28]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2108      	movs	r1, #8
 800552c:	430a      	orrs	r2, r1
 800552e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2104      	movs	r1, #4
 800553c:	438a      	bics	r2, r1
 800553e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69d9      	ldr	r1, [r3, #28]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	61da      	str	r2, [r3, #28]
      break;
 8005552:	e027      	b.n	80055a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	0011      	movs	r1, r2
 800555c:	0018      	movs	r0, r3
 800555e:	f000 fb35 	bl	8005bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2180      	movs	r1, #128	; 0x80
 800556e:	0109      	lsls	r1, r1, #4
 8005570:	430a      	orrs	r2, r1
 8005572:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69da      	ldr	r2, [r3, #28]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	490f      	ldr	r1, [pc, #60]	; (80055bc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005580:	400a      	ands	r2, r1
 8005582:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69d9      	ldr	r1, [r3, #28]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	61da      	str	r2, [r3, #28]
      break;
 8005598:	e004      	b.n	80055a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800559a:	2317      	movs	r3, #23
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
      break;
 80055a2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	223c      	movs	r2, #60	; 0x3c
 80055a8:	2100      	movs	r1, #0
 80055aa:	5499      	strb	r1, [r3, r2]

  return status;
 80055ac:	2317      	movs	r3, #23
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	781b      	ldrb	r3, [r3, #0]
}
 80055b2:	0018      	movs	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b006      	add	sp, #24
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	fffffbff 	.word	0xfffffbff

080055c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ca:	230f      	movs	r3, #15
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	223c      	movs	r2, #60	; 0x3c
 80055d6:	5c9b      	ldrb	r3, [r3, r2]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_TIM_ConfigClockSource+0x20>
 80055dc:	2302      	movs	r3, #2
 80055de:	e0bc      	b.n	800575a <HAL_TIM_ConfigClockSource+0x19a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	223c      	movs	r2, #60	; 0x3c
 80055e4:	2101      	movs	r1, #1
 80055e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	223d      	movs	r2, #61	; 0x3d
 80055ec:	2102      	movs	r1, #2
 80055ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2277      	movs	r2, #119	; 0x77
 80055fc:	4393      	bics	r3, r2
 80055fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a58      	ldr	r2, [pc, #352]	; (8005764 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005604:	4013      	ands	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2280      	movs	r2, #128	; 0x80
 8005616:	0192      	lsls	r2, r2, #6
 8005618:	4293      	cmp	r3, r2
 800561a:	d040      	beq.n	800569e <HAL_TIM_ConfigClockSource+0xde>
 800561c:	2280      	movs	r2, #128	; 0x80
 800561e:	0192      	lsls	r2, r2, #6
 8005620:	4293      	cmp	r3, r2
 8005622:	d900      	bls.n	8005626 <HAL_TIM_ConfigClockSource+0x66>
 8005624:	e088      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x178>
 8005626:	2280      	movs	r2, #128	; 0x80
 8005628:	0152      	lsls	r2, r2, #5
 800562a:	4293      	cmp	r3, r2
 800562c:	d100      	bne.n	8005630 <HAL_TIM_ConfigClockSource+0x70>
 800562e:	e088      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x182>
 8005630:	2280      	movs	r2, #128	; 0x80
 8005632:	0152      	lsls	r2, r2, #5
 8005634:	4293      	cmp	r3, r2
 8005636:	d900      	bls.n	800563a <HAL_TIM_ConfigClockSource+0x7a>
 8005638:	e07e      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x178>
 800563a:	2b70      	cmp	r3, #112	; 0x70
 800563c:	d018      	beq.n	8005670 <HAL_TIM_ConfigClockSource+0xb0>
 800563e:	d900      	bls.n	8005642 <HAL_TIM_ConfigClockSource+0x82>
 8005640:	e07a      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x178>
 8005642:	2b60      	cmp	r3, #96	; 0x60
 8005644:	d04f      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x126>
 8005646:	d900      	bls.n	800564a <HAL_TIM_ConfigClockSource+0x8a>
 8005648:	e076      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x178>
 800564a:	2b50      	cmp	r3, #80	; 0x50
 800564c:	d03b      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x106>
 800564e:	d900      	bls.n	8005652 <HAL_TIM_ConfigClockSource+0x92>
 8005650:	e072      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x178>
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d057      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x146>
 8005656:	d900      	bls.n	800565a <HAL_TIM_ConfigClockSource+0x9a>
 8005658:	e06e      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x178>
 800565a:	2b30      	cmp	r3, #48	; 0x30
 800565c:	d063      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x166>
 800565e:	d86b      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x178>
 8005660:	2b20      	cmp	r3, #32
 8005662:	d060      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x166>
 8005664:	d868      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x178>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d05d      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x166>
 800566a:	2b10      	cmp	r3, #16
 800566c:	d05b      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x166>
 800566e:	e063      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005680:	f000 fb88 	bl	8005d94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2277      	movs	r2, #119	; 0x77
 8005690:	4313      	orrs	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	609a      	str	r2, [r3, #8]
      break;
 800569c:	e052      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ae:	f000 fb71 	bl	8005d94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2180      	movs	r1, #128	; 0x80
 80056be:	01c9      	lsls	r1, r1, #7
 80056c0:	430a      	orrs	r2, r1
 80056c2:	609a      	str	r2, [r3, #8]
      break;
 80056c4:	e03e      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d2:	001a      	movs	r2, r3
 80056d4:	f000 fae4 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2150      	movs	r1, #80	; 0x50
 80056de:	0018      	movs	r0, r3
 80056e0:	f000 fb3e 	bl	8005d60 <TIM_ITRx_SetConfig>
      break;
 80056e4:	e02e      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f2:	001a      	movs	r2, r3
 80056f4:	f000 fb02 	bl	8005cfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2160      	movs	r1, #96	; 0x60
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 fb2e 	bl	8005d60 <TIM_ITRx_SetConfig>
      break;
 8005704:	e01e      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005712:	001a      	movs	r2, r3
 8005714:	f000 fac4 	bl	8005ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2140      	movs	r1, #64	; 0x40
 800571e:	0018      	movs	r0, r3
 8005720:	f000 fb1e 	bl	8005d60 <TIM_ITRx_SetConfig>
      break;
 8005724:	e00e      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	0019      	movs	r1, r3
 8005730:	0010      	movs	r0, r2
 8005732:	f000 fb15 	bl	8005d60 <TIM_ITRx_SetConfig>
      break;
 8005736:	e005      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005738:	230f      	movs	r3, #15
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	2201      	movs	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]
      break;
 8005740:	e000      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005742:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	223d      	movs	r2, #61	; 0x3d
 8005748:	2101      	movs	r1, #1
 800574a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	223c      	movs	r2, #60	; 0x3c
 8005750:	2100      	movs	r1, #0
 8005752:	5499      	strb	r1, [r3, r2]

  return status;
 8005754:	230f      	movs	r3, #15
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	781b      	ldrb	r3, [r3, #0]
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b004      	add	sp, #16
 8005760:	bd80      	pop	{r7, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	ffff00ff 	.word	0xffff00ff

08005768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005770:	46c0      	nop			; (mov r8, r8)
 8005772:	46bd      	mov	sp, r7
 8005774:	b002      	add	sp, #8
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b002      	add	sp, #8
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005790:	46c0      	nop			; (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b002      	add	sp, #8
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057a0:	46c0      	nop			; (mov r8, r8)
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b002      	add	sp, #8
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a34      	ldr	r2, [pc, #208]	; (800588c <TIM_Base_SetConfig+0xe4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d008      	beq.n	80057d2 <TIM_Base_SetConfig+0x2a>
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	05db      	lsls	r3, r3, #23
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d003      	beq.n	80057d2 <TIM_Base_SetConfig+0x2a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a30      	ldr	r2, [pc, #192]	; (8005890 <TIM_Base_SetConfig+0xe8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2270      	movs	r2, #112	; 0x70
 80057d6:	4393      	bics	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a29      	ldr	r2, [pc, #164]	; (800588c <TIM_Base_SetConfig+0xe4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d018      	beq.n	800581e <TIM_Base_SetConfig+0x76>
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	05db      	lsls	r3, r3, #23
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d013      	beq.n	800581e <TIM_Base_SetConfig+0x76>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a25      	ldr	r2, [pc, #148]	; (8005890 <TIM_Base_SetConfig+0xe8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00f      	beq.n	800581e <TIM_Base_SetConfig+0x76>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a24      	ldr	r2, [pc, #144]	; (8005894 <TIM_Base_SetConfig+0xec>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_Base_SetConfig+0x76>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a23      	ldr	r2, [pc, #140]	; (8005898 <TIM_Base_SetConfig+0xf0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_Base_SetConfig+0x76>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a22      	ldr	r2, [pc, #136]	; (800589c <TIM_Base_SetConfig+0xf4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_Base_SetConfig+0x76>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a21      	ldr	r2, [pc, #132]	; (80058a0 <TIM_Base_SetConfig+0xf8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d108      	bne.n	8005830 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a20      	ldr	r2, [pc, #128]	; (80058a4 <TIM_Base_SetConfig+0xfc>)
 8005822:	4013      	ands	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2280      	movs	r2, #128	; 0x80
 8005834:	4393      	bics	r3, r2
 8005836:	001a      	movs	r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a0c      	ldr	r2, [pc, #48]	; (800588c <TIM_Base_SetConfig+0xe4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0xce>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <TIM_Base_SetConfig+0xf0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0xce>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a0c      	ldr	r2, [pc, #48]	; (800589c <TIM_Base_SetConfig+0xf4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0xce>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <TIM_Base_SetConfig+0xf8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d103      	bne.n	800587e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	615a      	str	r2, [r3, #20]
}
 8005884:	46c0      	nop			; (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b004      	add	sp, #16
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40000400 	.word	0x40000400
 8005894:	40002000 	.word	0x40002000
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800
 80058a4:	fffffcff 	.word	0xfffffcff

080058a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	2201      	movs	r2, #1
 80058b8:	4393      	bics	r3, r2
 80058ba:	001a      	movs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2270      	movs	r2, #112	; 0x70
 80058d6:	4393      	bics	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2203      	movs	r2, #3
 80058de:	4393      	bics	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2202      	movs	r2, #2
 80058f0:	4393      	bics	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <TIM_OC1_SetConfig+0xf8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_OC1_SetConfig+0x76>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a26      	ldr	r2, [pc, #152]	; (80059a4 <TIM_OC1_SetConfig+0xfc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_OC1_SetConfig+0x76>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a25      	ldr	r2, [pc, #148]	; (80059a8 <TIM_OC1_SetConfig+0x100>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_OC1_SetConfig+0x76>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a24      	ldr	r2, [pc, #144]	; (80059ac <TIM_OC1_SetConfig+0x104>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10c      	bne.n	8005938 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2208      	movs	r2, #8
 8005922:	4393      	bics	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2204      	movs	r2, #4
 8005934:	4393      	bics	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <TIM_OC1_SetConfig+0xf8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00b      	beq.n	8005958 <TIM_OC1_SetConfig+0xb0>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <TIM_OC1_SetConfig+0xfc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <TIM_OC1_SetConfig+0xb0>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a17      	ldr	r2, [pc, #92]	; (80059a8 <TIM_OC1_SetConfig+0x100>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_OC1_SetConfig+0xb0>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a16      	ldr	r2, [pc, #88]	; (80059ac <TIM_OC1_SetConfig+0x104>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d111      	bne.n	800597c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <TIM_OC1_SetConfig+0x108>)
 800595c:	4013      	ands	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <TIM_OC1_SetConfig+0x10c>)
 8005964:	4013      	ands	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	46bd      	mov	sp, r7
 800599a:	b006      	add	sp, #24
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40014400 	.word	0x40014400
 80059ac:	40014800 	.word	0x40014800
 80059b0:	fffffeff 	.word	0xfffffeff
 80059b4:	fffffdff 	.word	0xfffffdff

080059b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	2210      	movs	r2, #16
 80059c8:	4393      	bics	r3, r2
 80059ca:	001a      	movs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a2e      	ldr	r2, [pc, #184]	; (8005aa0 <TIM_OC2_SetConfig+0xe8>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a2d      	ldr	r2, [pc, #180]	; (8005aa4 <TIM_OC2_SetConfig+0xec>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2220      	movs	r2, #32
 8005a02:	4393      	bics	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <TIM_OC2_SetConfig+0xf0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d10d      	bne.n	8005a36 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	4393      	bics	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2240      	movs	r2, #64	; 0x40
 8005a32:	4393      	bics	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1b      	ldr	r2, [pc, #108]	; (8005aa8 <TIM_OC2_SetConfig+0xf0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_OC2_SetConfig+0x9e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <TIM_OC2_SetConfig+0xf4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_OC2_SetConfig+0x9e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <TIM_OC2_SetConfig+0xf8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_OC2_SetConfig+0x9e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <TIM_OC2_SetConfig+0xfc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d113      	bne.n	8005a7e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <TIM_OC2_SetConfig+0x100>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4a16      	ldr	r2, [pc, #88]	; (8005abc <TIM_OC2_SetConfig+0x104>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	621a      	str	r2, [r3, #32]
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b006      	add	sp, #24
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	ffff8fff 	.word	0xffff8fff
 8005aa4:	fffffcff 	.word	0xfffffcff
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800
 8005ab8:	fffffbff 	.word	0xfffffbff
 8005abc:	fffff7ff 	.word	0xfffff7ff

08005ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	4a35      	ldr	r2, [pc, #212]	; (8005ba4 <TIM_OC3_SetConfig+0xe4>)
 8005ad0:	401a      	ands	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2270      	movs	r2, #112	; 0x70
 8005aec:	4393      	bics	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2203      	movs	r2, #3
 8005af4:	4393      	bics	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <TIM_OC3_SetConfig+0xe8>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a24      	ldr	r2, [pc, #144]	; (8005bac <TIM_OC3_SetConfig+0xec>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d10d      	bne.n	8005b3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4a23      	ldr	r2, [pc, #140]	; (8005bb0 <TIM_OC3_SetConfig+0xf0>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <TIM_OC3_SetConfig+0xf4>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <TIM_OC3_SetConfig+0xec>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00b      	beq.n	8005b5a <TIM_OC3_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1c      	ldr	r2, [pc, #112]	; (8005bb8 <TIM_OC3_SetConfig+0xf8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <TIM_OC3_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <TIM_OC3_SetConfig+0xfc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_OC3_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <TIM_OC3_SetConfig+0x100>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d113      	bne.n	8005b82 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <TIM_OC3_SetConfig+0x104>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <TIM_OC3_SetConfig+0x108>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	621a      	str	r2, [r3, #32]
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b006      	add	sp, #24
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	fffffeff 	.word	0xfffffeff
 8005ba8:	fffffdff 	.word	0xfffffdff
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	fffff7ff 	.word	0xfffff7ff
 8005bb4:	fffffbff 	.word	0xfffffbff
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800
 8005bc4:	ffffefff 	.word	0xffffefff
 8005bc8:	ffffdfff 	.word	0xffffdfff

08005bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	4a28      	ldr	r2, [pc, #160]	; (8005c7c <TIM_OC4_SetConfig+0xb0>)
 8005bdc:	401a      	ands	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4a22      	ldr	r2, [pc, #136]	; (8005c80 <TIM_OC4_SetConfig+0xb4>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4a21      	ldr	r2, [pc, #132]	; (8005c84 <TIM_OC4_SetConfig+0xb8>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <TIM_OC4_SetConfig+0xbc>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	031b      	lsls	r3, r3, #12
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a19      	ldr	r2, [pc, #100]	; (8005c8c <TIM_OC4_SetConfig+0xc0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <TIM_OC4_SetConfig+0x78>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <TIM_OC4_SetConfig+0xc4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_OC4_SetConfig+0x78>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a17      	ldr	r2, [pc, #92]	; (8005c94 <TIM_OC4_SetConfig+0xc8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_OC4_SetConfig+0x78>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a16      	ldr	r2, [pc, #88]	; (8005c98 <TIM_OC4_SetConfig+0xcc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d109      	bne.n	8005c58 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <TIM_OC4_SetConfig+0xd0>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	019b      	lsls	r3, r3, #6
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b006      	add	sp, #24
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	ffffefff 	.word	0xffffefff
 8005c80:	ffff8fff 	.word	0xffff8fff
 8005c84:	fffffcff 	.word	0xfffffcff
 8005c88:	ffffdfff 	.word	0xffffdfff
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800
 8005c9c:	ffffbfff 	.word	0xffffbfff

08005ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4393      	bics	r3, r2
 8005cba:	001a      	movs	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	22f0      	movs	r2, #240	; 0xf0
 8005cca:	4393      	bics	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	220a      	movs	r2, #10
 8005cdc:	4393      	bics	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b006      	add	sp, #24
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	2210      	movs	r2, #16
 8005d0e:	4393      	bics	r3, r2
 8005d10:	001a      	movs	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	4a0d      	ldr	r2, [pc, #52]	; (8005d5c <TIM_TI2_ConfigInputStage+0x60>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	031b      	lsls	r3, r3, #12
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	22a0      	movs	r2, #160	; 0xa0
 8005d38:	4393      	bics	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	46bd      	mov	sp, r7
 8005d56:	b006      	add	sp, #24
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	ffff0fff 	.word	0xffff0fff

08005d60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2270      	movs	r2, #112	; 0x70
 8005d74:	4393      	bics	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	2207      	movs	r2, #7
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	609a      	str	r2, [r3, #8]
}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b004      	add	sp, #16
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <TIM_ETR_SetConfig+0x3c>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b006      	add	sp, #24
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	ffff00ff 	.word	0xffff00ff

08005dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	221f      	movs	r2, #31
 8005de4:	4013      	ands	r3, r2
 8005de6:	2201      	movs	r2, #1
 8005de8:	409a      	lsls	r2, r3
 8005dea:	0013      	movs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	43d2      	mvns	r2, r2
 8005df6:	401a      	ands	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	211f      	movs	r1, #31
 8005e04:	400b      	ands	r3, r1
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4099      	lsls	r1, r3
 8005e0a:	000b      	movs	r3, r1
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b006      	add	sp, #24
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	223c      	movs	r2, #60	; 0x3c
 8005e2a:	5c9b      	ldrb	r3, [r3, r2]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e047      	b.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	223c      	movs	r2, #60	; 0x3c
 8005e38:	2101      	movs	r1, #1
 8005e3a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	223d      	movs	r2, #61	; 0x3d
 8005e40:	2102      	movs	r1, #2
 8005e42:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2270      	movs	r2, #112	; 0x70
 8005e58:	4393      	bics	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00f      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	2380      	movs	r3, #128	; 0x80
 8005e7e:	05db      	lsls	r3, r3, #23
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d009      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a11      	ldr	r2, [pc, #68]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a10      	ldr	r2, [pc, #64]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d10c      	bne.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2280      	movs	r2, #128	; 0x80
 8005e9c:	4393      	bics	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	223d      	movs	r2, #61	; 0x3d
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	223c      	movs	r2, #60	; 0x3c
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40014000 	.word	0x40014000

08005ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee0:	46c0      	nop			; (mov r8, r8)
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b002      	add	sp, #8
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef0:	46c0      	nop			; (mov r8, r8)
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b002      	add	sp, #8
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e044      	b.n	8005f94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d107      	bne.n	8005f22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2278      	movs	r2, #120	; 0x78
 8005f16:	2100      	movs	r1, #0
 8005f18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f7fb fdb3 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2224      	movs	r2, #36	; 0x24
 8005f26:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2101      	movs	r1, #1
 8005f34:	438a      	bics	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 fb2c 	bl	8006598 <UART_SetConfig>
 8005f40:	0003      	movs	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e024      	b.n	8005f94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	0018      	movs	r0, r3
 8005f56:	f000 fd07 	bl	8006968 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	490d      	ldr	r1, [pc, #52]	; (8005f9c <HAL_UART_Init+0xa4>)
 8005f66:	400a      	ands	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	212a      	movs	r1, #42	; 0x2a
 8005f76:	438a      	bics	r2, r1
 8005f78:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2101      	movs	r1, #1
 8005f86:	430a      	orrs	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f000 fd9f 	bl	8006ad0 <UART_CheckIdleState>
 8005f92:	0003      	movs	r3, r0
}
 8005f94:	0018      	movs	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	ffffb7ff 	.word	0xffffb7ff

08005fa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b0ab      	sub	sp, #172	; 0xac
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	22a4      	movs	r2, #164	; 0xa4
 8005fb0:	18b9      	adds	r1, r7, r2
 8005fb2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	20a0      	movs	r0, #160	; 0xa0
 8005fbc:	1839      	adds	r1, r7, r0
 8005fbe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	219c      	movs	r1, #156	; 0x9c
 8005fc8:	1879      	adds	r1, r7, r1
 8005fca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fcc:	0011      	movs	r1, r2
 8005fce:	18bb      	adds	r3, r7, r2
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a99      	ldr	r2, [pc, #612]	; (8006238 <HAL_UART_IRQHandler+0x298>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2298      	movs	r2, #152	; 0x98
 8005fd8:	18bc      	adds	r4, r7, r2
 8005fda:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005fdc:	18bb      	adds	r3, r7, r2
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d114      	bne.n	800600e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fe4:	187b      	adds	r3, r7, r1
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	4013      	ands	r3, r2
 8005fec:	d00f      	beq.n	800600e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fee:	183b      	adds	r3, r7, r0
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	d00a      	beq.n	800600e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d100      	bne.n	8006002 <HAL_UART_IRQHandler+0x62>
 8006000:	e29e      	b.n	8006540 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	0010      	movs	r0, r2
 800600a:	4798      	blx	r3
      }
      return;
 800600c:	e298      	b.n	8006540 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800600e:	2398      	movs	r3, #152	; 0x98
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d100      	bne.n	800601a <HAL_UART_IRQHandler+0x7a>
 8006018:	e114      	b.n	8006244 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800601a:	239c      	movs	r3, #156	; 0x9c
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2201      	movs	r2, #1
 8006022:	4013      	ands	r3, r2
 8006024:	d106      	bne.n	8006034 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006026:	23a0      	movs	r3, #160	; 0xa0
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a83      	ldr	r2, [pc, #524]	; (800623c <HAL_UART_IRQHandler+0x29c>)
 800602e:	4013      	ands	r3, r2
 8006030:	d100      	bne.n	8006034 <HAL_UART_IRQHandler+0x94>
 8006032:	e107      	b.n	8006244 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006034:	23a4      	movs	r3, #164	; 0xa4
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2201      	movs	r2, #1
 800603c:	4013      	ands	r3, r2
 800603e:	d012      	beq.n	8006066 <HAL_UART_IRQHandler+0xc6>
 8006040:	23a0      	movs	r3, #160	; 0xa0
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	2380      	movs	r3, #128	; 0x80
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4013      	ands	r3, r2
 800604c:	d00b      	beq.n	8006066 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2201      	movs	r2, #1
 8006054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2284      	movs	r2, #132	; 0x84
 800605a:	589b      	ldr	r3, [r3, r2]
 800605c:	2201      	movs	r2, #1
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2184      	movs	r1, #132	; 0x84
 8006064:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006066:	23a4      	movs	r3, #164	; 0xa4
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2202      	movs	r2, #2
 800606e:	4013      	ands	r3, r2
 8006070:	d011      	beq.n	8006096 <HAL_UART_IRQHandler+0xf6>
 8006072:	239c      	movs	r3, #156	; 0x9c
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2201      	movs	r2, #1
 800607a:	4013      	ands	r3, r2
 800607c:	d00b      	beq.n	8006096 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2202      	movs	r2, #2
 8006084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2284      	movs	r2, #132	; 0x84
 800608a:	589b      	ldr	r3, [r3, r2]
 800608c:	2204      	movs	r2, #4
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2184      	movs	r1, #132	; 0x84
 8006094:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006096:	23a4      	movs	r3, #164	; 0xa4
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2204      	movs	r2, #4
 800609e:	4013      	ands	r3, r2
 80060a0:	d011      	beq.n	80060c6 <HAL_UART_IRQHandler+0x126>
 80060a2:	239c      	movs	r3, #156	; 0x9c
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2201      	movs	r2, #1
 80060aa:	4013      	ands	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2204      	movs	r2, #4
 80060b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2284      	movs	r2, #132	; 0x84
 80060ba:	589b      	ldr	r3, [r3, r2]
 80060bc:	2202      	movs	r2, #2
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2184      	movs	r1, #132	; 0x84
 80060c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060c6:	23a4      	movs	r3, #164	; 0xa4
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2208      	movs	r2, #8
 80060ce:	4013      	ands	r3, r2
 80060d0:	d017      	beq.n	8006102 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060d2:	23a0      	movs	r3, #160	; 0xa0
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2220      	movs	r2, #32
 80060da:	4013      	ands	r3, r2
 80060dc:	d105      	bne.n	80060ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060de:	239c      	movs	r3, #156	; 0x9c
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2201      	movs	r2, #1
 80060e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060e8:	d00b      	beq.n	8006102 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2208      	movs	r2, #8
 80060f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2284      	movs	r2, #132	; 0x84
 80060f6:	589b      	ldr	r3, [r3, r2]
 80060f8:	2208      	movs	r2, #8
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2184      	movs	r1, #132	; 0x84
 8006100:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006102:	23a4      	movs	r3, #164	; 0xa4
 8006104:	18fb      	adds	r3, r7, r3
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	2380      	movs	r3, #128	; 0x80
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	4013      	ands	r3, r2
 800610e:	d013      	beq.n	8006138 <HAL_UART_IRQHandler+0x198>
 8006110:	23a0      	movs	r3, #160	; 0xa0
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	2380      	movs	r3, #128	; 0x80
 8006118:	04db      	lsls	r3, r3, #19
 800611a:	4013      	ands	r3, r2
 800611c:	d00c      	beq.n	8006138 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2280      	movs	r2, #128	; 0x80
 8006124:	0112      	lsls	r2, r2, #4
 8006126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2284      	movs	r2, #132	; 0x84
 800612c:	589b      	ldr	r3, [r3, r2]
 800612e:	2220      	movs	r2, #32
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2184      	movs	r1, #132	; 0x84
 8006136:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2284      	movs	r2, #132	; 0x84
 800613c:	589b      	ldr	r3, [r3, r2]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d100      	bne.n	8006144 <HAL_UART_IRQHandler+0x1a4>
 8006142:	e1ff      	b.n	8006544 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006144:	23a4      	movs	r3, #164	; 0xa4
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2220      	movs	r2, #32
 800614c:	4013      	ands	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006150:	23a0      	movs	r3, #160	; 0xa0
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2220      	movs	r2, #32
 8006158:	4013      	ands	r3, r2
 800615a:	d008      	beq.n	800616e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	0010      	movs	r0, r2
 800616c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2284      	movs	r2, #132	; 0x84
 8006172:	589b      	ldr	r3, [r3, r2]
 8006174:	2194      	movs	r1, #148	; 0x94
 8006176:	187a      	adds	r2, r7, r1
 8006178:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	4013      	ands	r3, r2
 8006184:	2b40      	cmp	r3, #64	; 0x40
 8006186:	d004      	beq.n	8006192 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006188:	187b      	adds	r3, r7, r1
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2228      	movs	r2, #40	; 0x28
 800618e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006190:	d047      	beq.n	8006222 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	0018      	movs	r0, r3
 8006196:	f000 fdad 	bl	8006cf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2240      	movs	r2, #64	; 0x40
 80061a2:	4013      	ands	r3, r2
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d137      	bne.n	8006218 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a8:	f3ef 8310 	mrs	r3, PRIMASK
 80061ac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80061ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b0:	2090      	movs	r0, #144	; 0x90
 80061b2:	183a      	adds	r2, r7, r0
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	2301      	movs	r3, #1
 80061b8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061bc:	f383 8810 	msr	PRIMASK, r3
}
 80061c0:	46c0      	nop			; (mov r8, r8)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2140      	movs	r1, #64	; 0x40
 80061ce:	438a      	bics	r2, r1
 80061d0:	609a      	str	r2, [r3, #8]
 80061d2:	183b      	adds	r3, r7, r0
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061da:	f383 8810 	msr	PRIMASK, r3
}
 80061de:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d012      	beq.n	800620e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ec:	4a14      	ldr	r2, [pc, #80]	; (8006240 <HAL_UART_IRQHandler+0x2a0>)
 80061ee:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f4:	0018      	movs	r0, r3
 80061f6:	f7fb ff71 	bl	80020dc <HAL_DMA_Abort_IT>
 80061fa:	1e03      	subs	r3, r0, #0
 80061fc:	d01a      	beq.n	8006234 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006208:	0018      	movs	r0, r3
 800620a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620c:	e012      	b.n	8006234 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0018      	movs	r0, r3
 8006212:	f000 f9ad 	bl	8006570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006216:	e00d      	b.n	8006234 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	0018      	movs	r0, r3
 800621c:	f000 f9a8 	bl	8006570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	e008      	b.n	8006234 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	0018      	movs	r0, r3
 8006226:	f000 f9a3 	bl	8006570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2284      	movs	r2, #132	; 0x84
 800622e:	2100      	movs	r1, #0
 8006230:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006232:	e187      	b.n	8006544 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	46c0      	nop			; (mov r8, r8)
    return;
 8006236:	e185      	b.n	8006544 <HAL_UART_IRQHandler+0x5a4>
 8006238:	0000080f 	.word	0x0000080f
 800623c:	04000120 	.word	0x04000120
 8006240:	08006dbd 	.word	0x08006dbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006248:	2b01      	cmp	r3, #1
 800624a:	d000      	beq.n	800624e <HAL_UART_IRQHandler+0x2ae>
 800624c:	e139      	b.n	80064c2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800624e:	23a4      	movs	r3, #164	; 0xa4
 8006250:	18fb      	adds	r3, r7, r3
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2210      	movs	r2, #16
 8006256:	4013      	ands	r3, r2
 8006258:	d100      	bne.n	800625c <HAL_UART_IRQHandler+0x2bc>
 800625a:	e132      	b.n	80064c2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800625c:	23a0      	movs	r3, #160	; 0xa0
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2210      	movs	r2, #16
 8006264:	4013      	ands	r3, r2
 8006266:	d100      	bne.n	800626a <HAL_UART_IRQHandler+0x2ca>
 8006268:	e12b      	b.n	80064c2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2210      	movs	r2, #16
 8006270:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2240      	movs	r2, #64	; 0x40
 800627a:	4013      	ands	r3, r2
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	d000      	beq.n	8006282 <HAL_UART_IRQHandler+0x2e2>
 8006280:	e09f      	b.n	80063c2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	217e      	movs	r1, #126	; 0x7e
 800628c:	187b      	adds	r3, r7, r1
 800628e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006290:	187b      	adds	r3, r7, r1
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d100      	bne.n	800629a <HAL_UART_IRQHandler+0x2fa>
 8006298:	e156      	b.n	8006548 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2258      	movs	r2, #88	; 0x58
 800629e:	5a9b      	ldrh	r3, [r3, r2]
 80062a0:	187a      	adds	r2, r7, r1
 80062a2:	8812      	ldrh	r2, [r2, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d300      	bcc.n	80062aa <HAL_UART_IRQHandler+0x30a>
 80062a8:	e14e      	b.n	8006548 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	187a      	adds	r2, r7, r1
 80062ae:	215a      	movs	r1, #90	; 0x5a
 80062b0:	8812      	ldrh	r2, [r2, #0]
 80062b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d06f      	beq.n	800639e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062be:	f3ef 8310 	mrs	r3, PRIMASK
 80062c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80062c8:	2301      	movs	r3, #1
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	f383 8810 	msr	PRIMASK, r3
}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	499e      	ldr	r1, [pc, #632]	; (8006558 <HAL_UART_IRQHandler+0x5b8>)
 80062e0:	400a      	ands	r2, r1
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	f383 8810 	msr	PRIMASK, r3
}
 80062ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062f0:	f3ef 8310 	mrs	r3, PRIMASK
 80062f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	677b      	str	r3, [r7, #116]	; 0x74
 80062fa:	2301      	movs	r3, #1
 80062fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006300:	f383 8810 	msr	PRIMASK, r3
}
 8006304:	46c0      	nop			; (mov r8, r8)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2101      	movs	r1, #1
 8006312:	438a      	bics	r2, r1
 8006314:	609a      	str	r2, [r3, #8]
 8006316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006318:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631c:	f383 8810 	msr	PRIMASK, r3
}
 8006320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006322:	f3ef 8310 	mrs	r3, PRIMASK
 8006326:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006328:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632a:	673b      	str	r3, [r7, #112]	; 0x70
 800632c:	2301      	movs	r3, #1
 800632e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006332:	f383 8810 	msr	PRIMASK, r3
}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2140      	movs	r1, #64	; 0x40
 8006344:	438a      	bics	r2, r1
 8006346:	609a      	str	r2, [r3, #8]
 8006348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800634a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800634c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800634e:	f383 8810 	msr	PRIMASK, r3
}
 8006352:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2280      	movs	r2, #128	; 0x80
 8006358:	2120      	movs	r1, #32
 800635a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006362:	f3ef 8310 	mrs	r3, PRIMASK
 8006366:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006368:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800636c:	2301      	movs	r3, #1
 800636e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006372:	f383 8810 	msr	PRIMASK, r3
}
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2110      	movs	r1, #16
 8006384:	438a      	bics	r2, r1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800638c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800638e:	f383 8810 	msr	PRIMASK, r3
}
 8006392:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006398:	0018      	movs	r0, r3
 800639a:	f7fb fe67 	bl	800206c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2258      	movs	r2, #88	; 0x58
 80063a8:	5a9a      	ldrh	r2, [r3, r2]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	215a      	movs	r1, #90	; 0x5a
 80063ae:	5a5b      	ldrh	r3, [r3, r1]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	0011      	movs	r1, r2
 80063ba:	0018      	movs	r0, r3
 80063bc:	f000 f8e0 	bl	8006580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063c0:	e0c2      	b.n	8006548 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2258      	movs	r2, #88	; 0x58
 80063c6:	5a99      	ldrh	r1, [r3, r2]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	225a      	movs	r2, #90	; 0x5a
 80063cc:	5a9b      	ldrh	r3, [r3, r2]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	208e      	movs	r0, #142	; 0x8e
 80063d2:	183b      	adds	r3, r7, r0
 80063d4:	1a8a      	subs	r2, r1, r2
 80063d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	225a      	movs	r2, #90	; 0x5a
 80063dc:	5a9b      	ldrh	r3, [r3, r2]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d100      	bne.n	80063e6 <HAL_UART_IRQHandler+0x446>
 80063e4:	e0b2      	b.n	800654c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80063e6:	183b      	adds	r3, r7, r0
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d100      	bne.n	80063f0 <HAL_UART_IRQHandler+0x450>
 80063ee:	e0ad      	b.n	800654c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f0:	f3ef 8310 	mrs	r3, PRIMASK
 80063f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80063f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f8:	2488      	movs	r4, #136	; 0x88
 80063fa:	193a      	adds	r2, r7, r4
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	2301      	movs	r3, #1
 8006400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f383 8810 	msr	PRIMASK, r3
}
 8006408:	46c0      	nop			; (mov r8, r8)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4951      	ldr	r1, [pc, #324]	; (800655c <HAL_UART_IRQHandler+0x5bc>)
 8006416:	400a      	ands	r2, r1
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	193b      	adds	r3, r7, r4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f383 8810 	msr	PRIMASK, r3
}
 8006426:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006428:	f3ef 8310 	mrs	r3, PRIMASK
 800642c:	61bb      	str	r3, [r7, #24]
  return(result);
 800642e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	2484      	movs	r4, #132	; 0x84
 8006432:	193a      	adds	r2, r7, r4
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	2301      	movs	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	f383 8810 	msr	PRIMASK, r3
}
 8006440:	46c0      	nop			; (mov r8, r8)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2101      	movs	r1, #1
 800644e:	438a      	bics	r2, r1
 8006450:	609a      	str	r2, [r3, #8]
 8006452:	193b      	adds	r3, r7, r4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	f383 8810 	msr	PRIMASK, r3
}
 800645e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2280      	movs	r2, #128	; 0x80
 8006464:	2120      	movs	r1, #32
 8006466:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006474:	f3ef 8310 	mrs	r3, PRIMASK
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800647c:	2480      	movs	r4, #128	; 0x80
 800647e:	193a      	adds	r2, r7, r4
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	2301      	movs	r3, #1
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	f383 8810 	msr	PRIMASK, r3
}
 800648c:	46c0      	nop			; (mov r8, r8)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2110      	movs	r1, #16
 800649a:	438a      	bics	r2, r1
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	193b      	adds	r3, r7, r4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	f383 8810 	msr	PRIMASK, r3
}
 80064aa:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064b2:	183b      	adds	r3, r7, r0
 80064b4:	881a      	ldrh	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	0011      	movs	r1, r2
 80064ba:	0018      	movs	r0, r3
 80064bc:	f000 f860 	bl	8006580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064c0:	e044      	b.n	800654c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064c2:	23a4      	movs	r3, #164	; 0xa4
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	035b      	lsls	r3, r3, #13
 80064cc:	4013      	ands	r3, r2
 80064ce:	d010      	beq.n	80064f2 <HAL_UART_IRQHandler+0x552>
 80064d0:	239c      	movs	r3, #156	; 0x9c
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	2380      	movs	r3, #128	; 0x80
 80064d8:	03db      	lsls	r3, r3, #15
 80064da:	4013      	ands	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2280      	movs	r2, #128	; 0x80
 80064e4:	0352      	lsls	r2, r2, #13
 80064e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	0018      	movs	r0, r3
 80064ec:	f000 fca8 	bl	8006e40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064f0:	e02f      	b.n	8006552 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064f2:	23a4      	movs	r3, #164	; 0xa4
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2280      	movs	r2, #128	; 0x80
 80064fa:	4013      	ands	r3, r2
 80064fc:	d00f      	beq.n	800651e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064fe:	23a0      	movs	r3, #160	; 0xa0
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2280      	movs	r2, #128	; 0x80
 8006506:	4013      	ands	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01e      	beq.n	8006550 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	0010      	movs	r0, r2
 800651a:	4798      	blx	r3
    }
    return;
 800651c:	e018      	b.n	8006550 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800651e:	23a4      	movs	r3, #164	; 0xa4
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2240      	movs	r2, #64	; 0x40
 8006526:	4013      	ands	r3, r2
 8006528:	d013      	beq.n	8006552 <HAL_UART_IRQHandler+0x5b2>
 800652a:	23a0      	movs	r3, #160	; 0xa0
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2240      	movs	r2, #64	; 0x40
 8006532:	4013      	ands	r3, r2
 8006534:	d00d      	beq.n	8006552 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	0018      	movs	r0, r3
 800653a:	f000 fc56 	bl	8006dea <UART_EndTransmit_IT>
    return;
 800653e:	e008      	b.n	8006552 <HAL_UART_IRQHandler+0x5b2>
      return;
 8006540:	46c0      	nop			; (mov r8, r8)
 8006542:	e006      	b.n	8006552 <HAL_UART_IRQHandler+0x5b2>
    return;
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	e004      	b.n	8006552 <HAL_UART_IRQHandler+0x5b2>
      return;
 8006548:	46c0      	nop			; (mov r8, r8)
 800654a:	e002      	b.n	8006552 <HAL_UART_IRQHandler+0x5b2>
      return;
 800654c:	46c0      	nop			; (mov r8, r8)
 800654e:	e000      	b.n	8006552 <HAL_UART_IRQHandler+0x5b2>
    return;
 8006550:	46c0      	nop			; (mov r8, r8)
  }

}
 8006552:	46bd      	mov	sp, r7
 8006554:	b02b      	add	sp, #172	; 0xac
 8006556:	bd90      	pop	{r4, r7, pc}
 8006558:	fffffeff 	.word	0xfffffeff
 800655c:	fffffedf 	.word	0xfffffedf

08006560 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006568:	46c0      	nop			; (mov r8, r8)
 800656a:	46bd      	mov	sp, r7
 800656c:	b002      	add	sp, #8
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006578:	46c0      	nop			; (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	000a      	movs	r2, r1
 800658a:	1cbb      	adds	r3, r7, #2
 800658c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	46bd      	mov	sp, r7
 8006592:	b002      	add	sp, #8
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065a0:	231e      	movs	r3, #30
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4abe      	ldr	r2, [pc, #760]	; (80068c0 <UART_SetConfig+0x328>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	0019      	movs	r1, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4ab9      	ldr	r2, [pc, #740]	; (80068c4 <UART_SetConfig+0x32c>)
 80065de:	4013      	ands	r3, r2
 80065e0:	0019      	movs	r1, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4ab0      	ldr	r2, [pc, #704]	; (80068c8 <UART_SetConfig+0x330>)
 8006606:	4013      	ands	r3, r2
 8006608:	0019      	movs	r1, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	430a      	orrs	r2, r1
 8006612:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4aac      	ldr	r2, [pc, #688]	; (80068cc <UART_SetConfig+0x334>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d127      	bne.n	800666e <UART_SetConfig+0xd6>
 800661e:	4bac      	ldr	r3, [pc, #688]	; (80068d0 <UART_SetConfig+0x338>)
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	2203      	movs	r2, #3
 8006624:	4013      	ands	r3, r2
 8006626:	2b03      	cmp	r3, #3
 8006628:	d00d      	beq.n	8006646 <UART_SetConfig+0xae>
 800662a:	d81b      	bhi.n	8006664 <UART_SetConfig+0xcc>
 800662c:	2b02      	cmp	r3, #2
 800662e:	d014      	beq.n	800665a <UART_SetConfig+0xc2>
 8006630:	d818      	bhi.n	8006664 <UART_SetConfig+0xcc>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <UART_SetConfig+0xa4>
 8006636:	2b01      	cmp	r3, #1
 8006638:	d00a      	beq.n	8006650 <UART_SetConfig+0xb8>
 800663a:	e013      	b.n	8006664 <UART_SetConfig+0xcc>
 800663c:	231f      	movs	r3, #31
 800663e:	18fb      	adds	r3, r7, r3
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e0bd      	b.n	80067c2 <UART_SetConfig+0x22a>
 8006646:	231f      	movs	r3, #31
 8006648:	18fb      	adds	r3, r7, r3
 800664a:	2202      	movs	r2, #2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e0b8      	b.n	80067c2 <UART_SetConfig+0x22a>
 8006650:	231f      	movs	r3, #31
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	2204      	movs	r2, #4
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	e0b3      	b.n	80067c2 <UART_SetConfig+0x22a>
 800665a:	231f      	movs	r3, #31
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	2208      	movs	r2, #8
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	e0ae      	b.n	80067c2 <UART_SetConfig+0x22a>
 8006664:	231f      	movs	r3, #31
 8006666:	18fb      	adds	r3, r7, r3
 8006668:	2210      	movs	r2, #16
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	e0a9      	b.n	80067c2 <UART_SetConfig+0x22a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a98      	ldr	r2, [pc, #608]	; (80068d4 <UART_SetConfig+0x33c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d134      	bne.n	80066e2 <UART_SetConfig+0x14a>
 8006678:	4b95      	ldr	r3, [pc, #596]	; (80068d0 <UART_SetConfig+0x338>)
 800667a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800667c:	23c0      	movs	r3, #192	; 0xc0
 800667e:	029b      	lsls	r3, r3, #10
 8006680:	4013      	ands	r3, r2
 8006682:	22c0      	movs	r2, #192	; 0xc0
 8006684:	0292      	lsls	r2, r2, #10
 8006686:	4293      	cmp	r3, r2
 8006688:	d017      	beq.n	80066ba <UART_SetConfig+0x122>
 800668a:	22c0      	movs	r2, #192	; 0xc0
 800668c:	0292      	lsls	r2, r2, #10
 800668e:	4293      	cmp	r3, r2
 8006690:	d822      	bhi.n	80066d8 <UART_SetConfig+0x140>
 8006692:	2280      	movs	r2, #128	; 0x80
 8006694:	0292      	lsls	r2, r2, #10
 8006696:	4293      	cmp	r3, r2
 8006698:	d019      	beq.n	80066ce <UART_SetConfig+0x136>
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	0292      	lsls	r2, r2, #10
 800669e:	4293      	cmp	r3, r2
 80066a0:	d81a      	bhi.n	80066d8 <UART_SetConfig+0x140>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d004      	beq.n	80066b0 <UART_SetConfig+0x118>
 80066a6:	2280      	movs	r2, #128	; 0x80
 80066a8:	0252      	lsls	r2, r2, #9
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00a      	beq.n	80066c4 <UART_SetConfig+0x12c>
 80066ae:	e013      	b.n	80066d8 <UART_SetConfig+0x140>
 80066b0:	231f      	movs	r3, #31
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e083      	b.n	80067c2 <UART_SetConfig+0x22a>
 80066ba:	231f      	movs	r3, #31
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	2202      	movs	r2, #2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	e07e      	b.n	80067c2 <UART_SetConfig+0x22a>
 80066c4:	231f      	movs	r3, #31
 80066c6:	18fb      	adds	r3, r7, r3
 80066c8:	2204      	movs	r2, #4
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e079      	b.n	80067c2 <UART_SetConfig+0x22a>
 80066ce:	231f      	movs	r3, #31
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	2208      	movs	r2, #8
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	e074      	b.n	80067c2 <UART_SetConfig+0x22a>
 80066d8:	231f      	movs	r3, #31
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	2210      	movs	r2, #16
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	e06f      	b.n	80067c2 <UART_SetConfig+0x22a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a7c      	ldr	r2, [pc, #496]	; (80068d8 <UART_SetConfig+0x340>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d134      	bne.n	8006756 <UART_SetConfig+0x1be>
 80066ec:	4b78      	ldr	r3, [pc, #480]	; (80068d0 <UART_SetConfig+0x338>)
 80066ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f0:	23c0      	movs	r3, #192	; 0xc0
 80066f2:	031b      	lsls	r3, r3, #12
 80066f4:	4013      	ands	r3, r2
 80066f6:	22c0      	movs	r2, #192	; 0xc0
 80066f8:	0312      	lsls	r2, r2, #12
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d017      	beq.n	800672e <UART_SetConfig+0x196>
 80066fe:	22c0      	movs	r2, #192	; 0xc0
 8006700:	0312      	lsls	r2, r2, #12
 8006702:	4293      	cmp	r3, r2
 8006704:	d822      	bhi.n	800674c <UART_SetConfig+0x1b4>
 8006706:	2280      	movs	r2, #128	; 0x80
 8006708:	0312      	lsls	r2, r2, #12
 800670a:	4293      	cmp	r3, r2
 800670c:	d019      	beq.n	8006742 <UART_SetConfig+0x1aa>
 800670e:	2280      	movs	r2, #128	; 0x80
 8006710:	0312      	lsls	r2, r2, #12
 8006712:	4293      	cmp	r3, r2
 8006714:	d81a      	bhi.n	800674c <UART_SetConfig+0x1b4>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <UART_SetConfig+0x18c>
 800671a:	2280      	movs	r2, #128	; 0x80
 800671c:	02d2      	lsls	r2, r2, #11
 800671e:	4293      	cmp	r3, r2
 8006720:	d00a      	beq.n	8006738 <UART_SetConfig+0x1a0>
 8006722:	e013      	b.n	800674c <UART_SetConfig+0x1b4>
 8006724:	231f      	movs	r3, #31
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e049      	b.n	80067c2 <UART_SetConfig+0x22a>
 800672e:	231f      	movs	r3, #31
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	2202      	movs	r2, #2
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	e044      	b.n	80067c2 <UART_SetConfig+0x22a>
 8006738:	231f      	movs	r3, #31
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	2204      	movs	r2, #4
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e03f      	b.n	80067c2 <UART_SetConfig+0x22a>
 8006742:	231f      	movs	r3, #31
 8006744:	18fb      	adds	r3, r7, r3
 8006746:	2208      	movs	r2, #8
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	e03a      	b.n	80067c2 <UART_SetConfig+0x22a>
 800674c:	231f      	movs	r3, #31
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	2210      	movs	r2, #16
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	e035      	b.n	80067c2 <UART_SetConfig+0x22a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a60      	ldr	r2, [pc, #384]	; (80068dc <UART_SetConfig+0x344>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d104      	bne.n	800676a <UART_SetConfig+0x1d2>
 8006760:	231f      	movs	r3, #31
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e02b      	b.n	80067c2 <UART_SetConfig+0x22a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a5c      	ldr	r2, [pc, #368]	; (80068e0 <UART_SetConfig+0x348>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d104      	bne.n	800677e <UART_SetConfig+0x1e6>
 8006774:	231f      	movs	r3, #31
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	2200      	movs	r2, #0
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	e021      	b.n	80067c2 <UART_SetConfig+0x22a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a58      	ldr	r2, [pc, #352]	; (80068e4 <UART_SetConfig+0x34c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d104      	bne.n	8006792 <UART_SetConfig+0x1fa>
 8006788:	231f      	movs	r3, #31
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e017      	b.n	80067c2 <UART_SetConfig+0x22a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a54      	ldr	r2, [pc, #336]	; (80068e8 <UART_SetConfig+0x350>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d104      	bne.n	80067a6 <UART_SetConfig+0x20e>
 800679c:	231f      	movs	r3, #31
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	e00d      	b.n	80067c2 <UART_SetConfig+0x22a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a50      	ldr	r2, [pc, #320]	; (80068ec <UART_SetConfig+0x354>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d104      	bne.n	80067ba <UART_SetConfig+0x222>
 80067b0:	231f      	movs	r3, #31
 80067b2:	18fb      	adds	r3, r7, r3
 80067b4:	2200      	movs	r2, #0
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	e003      	b.n	80067c2 <UART_SetConfig+0x22a>
 80067ba:	231f      	movs	r3, #31
 80067bc:	18fb      	adds	r3, r7, r3
 80067be:	2210      	movs	r2, #16
 80067c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69da      	ldr	r2, [r3, #28]
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d15c      	bne.n	8006888 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80067ce:	231f      	movs	r3, #31
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d015      	beq.n	8006804 <UART_SetConfig+0x26c>
 80067d8:	dc18      	bgt.n	800680c <UART_SetConfig+0x274>
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d00d      	beq.n	80067fa <UART_SetConfig+0x262>
 80067de:	dc15      	bgt.n	800680c <UART_SetConfig+0x274>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <UART_SetConfig+0x252>
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d005      	beq.n	80067f4 <UART_SetConfig+0x25c>
 80067e8:	e010      	b.n	800680c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ea:	f7fe f995 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 80067ee:	0003      	movs	r3, r0
 80067f0:	61bb      	str	r3, [r7, #24]
        break;
 80067f2:	e012      	b.n	800681a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067f4:	4b3e      	ldr	r3, [pc, #248]	; (80068f0 <UART_SetConfig+0x358>)
 80067f6:	61bb      	str	r3, [r7, #24]
        break;
 80067f8:	e00f      	b.n	800681a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067fa:	f7fe f911 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80067fe:	0003      	movs	r3, r0
 8006800:	61bb      	str	r3, [r7, #24]
        break;
 8006802:	e00a      	b.n	800681a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006804:	2380      	movs	r3, #128	; 0x80
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	61bb      	str	r3, [r7, #24]
        break;
 800680a:	e006      	b.n	800681a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006810:	231e      	movs	r3, #30
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	2201      	movs	r2, #1
 8006816:	701a      	strb	r2, [r3, #0]
        break;
 8006818:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d100      	bne.n	8006822 <UART_SetConfig+0x28a>
 8006820:	e095      	b.n	800694e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	005a      	lsls	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	18d2      	adds	r2, r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	0019      	movs	r1, r3
 8006834:	0010      	movs	r0, r2
 8006836:	f7f9 fc65 	bl	8000104 <__udivsi3>
 800683a:	0003      	movs	r3, r0
 800683c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d91c      	bls.n	800687e <UART_SetConfig+0x2e6>
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	2380      	movs	r3, #128	; 0x80
 8006848:	025b      	lsls	r3, r3, #9
 800684a:	429a      	cmp	r2, r3
 800684c:	d217      	bcs.n	800687e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	b29a      	uxth	r2, r3
 8006852:	200e      	movs	r0, #14
 8006854:	183b      	adds	r3, r7, r0
 8006856:	210f      	movs	r1, #15
 8006858:	438a      	bics	r2, r1
 800685a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	b29b      	uxth	r3, r3
 8006862:	2207      	movs	r2, #7
 8006864:	4013      	ands	r3, r2
 8006866:	b299      	uxth	r1, r3
 8006868:	183b      	adds	r3, r7, r0
 800686a:	183a      	adds	r2, r7, r0
 800686c:	8812      	ldrh	r2, [r2, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	183a      	adds	r2, r7, r0
 8006878:	8812      	ldrh	r2, [r2, #0]
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	e067      	b.n	800694e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800687e:	231e      	movs	r3, #30
 8006880:	18fb      	adds	r3, r7, r3
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e062      	b.n	800694e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006888:	231f      	movs	r3, #31
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b08      	cmp	r3, #8
 8006890:	d030      	beq.n	80068f4 <UART_SetConfig+0x35c>
 8006892:	dc33      	bgt.n	80068fc <UART_SetConfig+0x364>
 8006894:	2b04      	cmp	r3, #4
 8006896:	d00d      	beq.n	80068b4 <UART_SetConfig+0x31c>
 8006898:	dc30      	bgt.n	80068fc <UART_SetConfig+0x364>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <UART_SetConfig+0x30c>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d005      	beq.n	80068ae <UART_SetConfig+0x316>
 80068a2:	e02b      	b.n	80068fc <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a4:	f7fe f938 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 80068a8:	0003      	movs	r3, r0
 80068aa:	61bb      	str	r3, [r7, #24]
        break;
 80068ac:	e02d      	b.n	800690a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <UART_SetConfig+0x358>)
 80068b0:	61bb      	str	r3, [r7, #24]
        break;
 80068b2:	e02a      	b.n	800690a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068b4:	f7fe f8b4 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80068b8:	0003      	movs	r3, r0
 80068ba:	61bb      	str	r3, [r7, #24]
        break;
 80068bc:	e025      	b.n	800690a <UART_SetConfig+0x372>
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	efff69f3 	.word	0xefff69f3
 80068c4:	ffffcfff 	.word	0xffffcfff
 80068c8:	fffff4ff 	.word	0xfffff4ff
 80068cc:	40013800 	.word	0x40013800
 80068d0:	40021000 	.word	0x40021000
 80068d4:	40004400 	.word	0x40004400
 80068d8:	40004800 	.word	0x40004800
 80068dc:	40004c00 	.word	0x40004c00
 80068e0:	40005000 	.word	0x40005000
 80068e4:	40011400 	.word	0x40011400
 80068e8:	40011800 	.word	0x40011800
 80068ec:	40011c00 	.word	0x40011c00
 80068f0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068f4:	2380      	movs	r3, #128	; 0x80
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	61bb      	str	r3, [r7, #24]
        break;
 80068fa:	e006      	b.n	800690a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006900:	231e      	movs	r3, #30
 8006902:	18fb      	adds	r3, r7, r3
 8006904:	2201      	movs	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]
        break;
 8006908:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01e      	beq.n	800694e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	085a      	lsrs	r2, r3, #1
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	18d2      	adds	r2, r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	0019      	movs	r1, r3
 8006920:	0010      	movs	r0, r2
 8006922:	f7f9 fbef 	bl	8000104 <__udivsi3>
 8006926:	0003      	movs	r3, r0
 8006928:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	2b0f      	cmp	r3, #15
 800692e:	d90a      	bls.n	8006946 <UART_SetConfig+0x3ae>
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	2380      	movs	r3, #128	; 0x80
 8006934:	025b      	lsls	r3, r3, #9
 8006936:	429a      	cmp	r2, r3
 8006938:	d205      	bcs.n	8006946 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	b29a      	uxth	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60da      	str	r2, [r3, #12]
 8006944:	e003      	b.n	800694e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006946:	231e      	movs	r3, #30
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	2201      	movs	r2, #1
 800694c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800695a:	231e      	movs	r3, #30
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	781b      	ldrb	r3, [r3, #0]
}
 8006960:	0018      	movs	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	b008      	add	sp, #32
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	2201      	movs	r2, #1
 8006976:	4013      	ands	r3, r2
 8006978:	d00b      	beq.n	8006992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4a4a      	ldr	r2, [pc, #296]	; (8006aac <UART_AdvFeatureConfig+0x144>)
 8006982:	4013      	ands	r3, r2
 8006984:	0019      	movs	r1, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	2202      	movs	r2, #2
 8006998:	4013      	ands	r3, r2
 800699a:	d00b      	beq.n	80069b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	4a43      	ldr	r2, [pc, #268]	; (8006ab0 <UART_AdvFeatureConfig+0x148>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	0019      	movs	r1, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	2204      	movs	r2, #4
 80069ba:	4013      	ands	r3, r2
 80069bc:	d00b      	beq.n	80069d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4a3b      	ldr	r2, [pc, #236]	; (8006ab4 <UART_AdvFeatureConfig+0x14c>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	0019      	movs	r1, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	2208      	movs	r2, #8
 80069dc:	4013      	ands	r3, r2
 80069de:	d00b      	beq.n	80069f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4a34      	ldr	r2, [pc, #208]	; (8006ab8 <UART_AdvFeatureConfig+0x150>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	0019      	movs	r1, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	2210      	movs	r2, #16
 80069fe:	4013      	ands	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	4a2c      	ldr	r2, [pc, #176]	; (8006abc <UART_AdvFeatureConfig+0x154>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	0019      	movs	r1, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	2220      	movs	r2, #32
 8006a20:	4013      	ands	r3, r2
 8006a22:	d00b      	beq.n	8006a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	4a25      	ldr	r2, [pc, #148]	; (8006ac0 <UART_AdvFeatureConfig+0x158>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	0019      	movs	r1, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	2240      	movs	r2, #64	; 0x40
 8006a42:	4013      	ands	r3, r2
 8006a44:	d01d      	beq.n	8006a82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <UART_AdvFeatureConfig+0x15c>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	0019      	movs	r1, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a62:	2380      	movs	r3, #128	; 0x80
 8006a64:	035b      	lsls	r3, r3, #13
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d10b      	bne.n	8006a82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <UART_AdvFeatureConfig+0x160>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	0019      	movs	r1, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2280      	movs	r2, #128	; 0x80
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d00b      	beq.n	8006aa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	4a0e      	ldr	r2, [pc, #56]	; (8006acc <UART_AdvFeatureConfig+0x164>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	0019      	movs	r1, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	605a      	str	r2, [r3, #4]
  }
}
 8006aa4:	46c0      	nop			; (mov r8, r8)
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b002      	add	sp, #8
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	fffdffff 	.word	0xfffdffff
 8006ab0:	fffeffff 	.word	0xfffeffff
 8006ab4:	fffbffff 	.word	0xfffbffff
 8006ab8:	ffff7fff 	.word	0xffff7fff
 8006abc:	ffffefff 	.word	0xffffefff
 8006ac0:	ffffdfff 	.word	0xffffdfff
 8006ac4:	ffefffff 	.word	0xffefffff
 8006ac8:	ff9fffff 	.word	0xff9fffff
 8006acc:	fff7ffff 	.word	0xfff7ffff

08006ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b092      	sub	sp, #72	; 0x48
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2284      	movs	r2, #132	; 0x84
 8006adc:	2100      	movs	r1, #0
 8006ade:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ae0:	f7fb f994 	bl	8001e0c <HAL_GetTick>
 8006ae4:	0003      	movs	r3, r0
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2208      	movs	r2, #8
 8006af0:	4013      	ands	r3, r2
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d12c      	bne.n	8006b50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af8:	2280      	movs	r2, #128	; 0x80
 8006afa:	0391      	lsls	r1, r2, #14
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4a46      	ldr	r2, [pc, #280]	; (8006c18 <UART_CheckIdleState+0x148>)
 8006b00:	9200      	str	r2, [sp, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f000 f88c 	bl	8006c20 <UART_WaitOnFlagUntilTimeout>
 8006b08:	1e03      	subs	r3, r0, #0
 8006b0a:	d021      	beq.n	8006b50 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b16:	2301      	movs	r3, #1
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	f383 8810 	msr	PRIMASK, r3
}
 8006b20:	46c0      	nop			; (mov r8, r8)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2180      	movs	r1, #128	; 0x80
 8006b2e:	438a      	bics	r2, r1
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	f383 8810 	msr	PRIMASK, r3
}
 8006b3c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2220      	movs	r2, #32
 8006b42:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2278      	movs	r2, #120	; 0x78
 8006b48:	2100      	movs	r1, #0
 8006b4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e05f      	b.n	8006c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2204      	movs	r2, #4
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d146      	bne.n	8006bec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	2280      	movs	r2, #128	; 0x80
 8006b62:	03d1      	lsls	r1, r2, #15
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	4a2c      	ldr	r2, [pc, #176]	; (8006c18 <UART_CheckIdleState+0x148>)
 8006b68:	9200      	str	r2, [sp, #0]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f000 f858 	bl	8006c20 <UART_WaitOnFlagUntilTimeout>
 8006b70:	1e03      	subs	r3, r0, #0
 8006b72:	d03b      	beq.n	8006bec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b74:	f3ef 8310 	mrs	r3, PRIMASK
 8006b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7e:	2301      	movs	r3, #1
 8006b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f383 8810 	msr	PRIMASK, r3
}
 8006b88:	46c0      	nop			; (mov r8, r8)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4921      	ldr	r1, [pc, #132]	; (8006c1c <UART_CheckIdleState+0x14c>)
 8006b96:	400a      	ands	r2, r1
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f383 8810 	msr	PRIMASK, r3
}
 8006ba4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8006baa:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bae:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f383 8810 	msr	PRIMASK, r3
}
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	438a      	bics	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	f383 8810 	msr	PRIMASK, r3
}
 8006bd6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2280      	movs	r2, #128	; 0x80
 8006bdc:	2120      	movs	r1, #32
 8006bde:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2278      	movs	r2, #120	; 0x78
 8006be4:	2100      	movs	r1, #0
 8006be6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e011      	b.n	8006c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2280      	movs	r2, #128	; 0x80
 8006bf6:	2120      	movs	r1, #32
 8006bf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2278      	movs	r2, #120	; 0x78
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	0018      	movs	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	b010      	add	sp, #64	; 0x40
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	01ffffff 	.word	0x01ffffff
 8006c1c:	fffffedf 	.word	0xfffffedf

08006c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	1dfb      	adds	r3, r7, #7
 8006c2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c30:	e04b      	b.n	8006cca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	3301      	adds	r3, #1
 8006c36:	d048      	beq.n	8006cca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c38:	f7fb f8e8 	bl	8001e0c <HAL_GetTick>
 8006c3c:	0002      	movs	r2, r0
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d302      	bcc.n	8006c4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e04b      	b.n	8006cea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2204      	movs	r2, #4
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	d035      	beq.n	8006cca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	2208      	movs	r2, #8
 8006c66:	4013      	ands	r3, r2
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d111      	bne.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2208      	movs	r2, #8
 8006c72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	0018      	movs	r0, r3
 8006c78:	f000 f83c 	bl	8006cf4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2284      	movs	r2, #132	; 0x84
 8006c80:	2108      	movs	r1, #8
 8006c82:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2278      	movs	r2, #120	; 0x78
 8006c88:	2100      	movs	r1, #0
 8006c8a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e02c      	b.n	8006cea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	2380      	movs	r3, #128	; 0x80
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	2380      	movs	r3, #128	; 0x80
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d112      	bne.n	8006cca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2280      	movs	r2, #128	; 0x80
 8006caa:	0112      	lsls	r2, r2, #4
 8006cac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 f81f 	bl	8006cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2284      	movs	r2, #132	; 0x84
 8006cba:	2120      	movs	r1, #32
 8006cbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2278      	movs	r2, #120	; 0x78
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e00f      	b.n	8006cea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	425a      	negs	r2, r3
 8006cda:	4153      	adcs	r3, r2
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	001a      	movs	r2, r3
 8006ce0:	1dfb      	adds	r3, r7, #7
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d0a4      	beq.n	8006c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	0018      	movs	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b004      	add	sp, #16
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08e      	sub	sp, #56	; 0x38
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8006d00:	617b      	str	r3, [r7, #20]
  return(result);
 8006d02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
 8006d06:	2301      	movs	r3, #1
 8006d08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f383 8810 	msr	PRIMASK, r3
}
 8006d10:	46c0      	nop			; (mov r8, r8)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4926      	ldr	r1, [pc, #152]	; (8006db8 <UART_EndRxTransfer+0xc4>)
 8006d1e:	400a      	ands	r2, r1
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f383 8810 	msr	PRIMASK, r3
}
 8006d2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d32:	623b      	str	r3, [r7, #32]
  return(result);
 8006d34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	633b      	str	r3, [r7, #48]	; 0x30
 8006d38:	2301      	movs	r3, #1
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	f383 8810 	msr	PRIMASK, r3
}
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2101      	movs	r1, #1
 8006d50:	438a      	bics	r2, r1
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	f383 8810 	msr	PRIMASK, r3
}
 8006d5e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d118      	bne.n	8006d9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d68:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d72:	2301      	movs	r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f383 8810 	msr	PRIMASK, r3
}
 8006d7c:	46c0      	nop			; (mov r8, r8)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2110      	movs	r1, #16
 8006d8a:	438a      	bics	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f383 8810 	msr	PRIMASK, r3
}
 8006d98:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2280      	movs	r2, #128	; 0x80
 8006d9e:	2120      	movs	r1, #32
 8006da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b00e      	add	sp, #56	; 0x38
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	fffffedf 	.word	0xfffffedf

08006dbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	225a      	movs	r2, #90	; 0x5a
 8006dce:	2100      	movs	r1, #0
 8006dd0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2252      	movs	r2, #82	; 0x52
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f7ff fbc7 	bl	8006570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b004      	add	sp, #16
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df2:	f3ef 8310 	mrs	r3, PRIMASK
 8006df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006df8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f383 8810 	msr	PRIMASK, r3
}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2140      	movs	r1, #64	; 0x40
 8006e14:	438a      	bics	r2, r1
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f383 8810 	msr	PRIMASK, r3
}
 8006e22:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	0018      	movs	r0, r3
 8006e34:	f7ff fb94 	bl	8006560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e38:	46c0      	nop			; (mov r8, r8)
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b006      	add	sp, #24
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e48:	46c0      	nop			; (mov r8, r8)
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	b002      	add	sp, #8
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <memset>:
 8006e50:	0003      	movs	r3, r0
 8006e52:	1882      	adds	r2, r0, r2
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d100      	bne.n	8006e5a <memset+0xa>
 8006e58:	4770      	bx	lr
 8006e5a:	7019      	strb	r1, [r3, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	e7f9      	b.n	8006e54 <memset+0x4>

08006e60 <__libc_init_array>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	2600      	movs	r6, #0
 8006e64:	4c0c      	ldr	r4, [pc, #48]	; (8006e98 <__libc_init_array+0x38>)
 8006e66:	4d0d      	ldr	r5, [pc, #52]	; (8006e9c <__libc_init_array+0x3c>)
 8006e68:	1b64      	subs	r4, r4, r5
 8006e6a:	10a4      	asrs	r4, r4, #2
 8006e6c:	42a6      	cmp	r6, r4
 8006e6e:	d109      	bne.n	8006e84 <__libc_init_array+0x24>
 8006e70:	2600      	movs	r6, #0
 8006e72:	f000 f823 	bl	8006ebc <_init>
 8006e76:	4c0a      	ldr	r4, [pc, #40]	; (8006ea0 <__libc_init_array+0x40>)
 8006e78:	4d0a      	ldr	r5, [pc, #40]	; (8006ea4 <__libc_init_array+0x44>)
 8006e7a:	1b64      	subs	r4, r4, r5
 8006e7c:	10a4      	asrs	r4, r4, #2
 8006e7e:	42a6      	cmp	r6, r4
 8006e80:	d105      	bne.n	8006e8e <__libc_init_array+0x2e>
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	00b3      	lsls	r3, r6, #2
 8006e86:	58eb      	ldr	r3, [r5, r3]
 8006e88:	4798      	blx	r3
 8006e8a:	3601      	adds	r6, #1
 8006e8c:	e7ee      	b.n	8006e6c <__libc_init_array+0xc>
 8006e8e:	00b3      	lsls	r3, r6, #2
 8006e90:	58eb      	ldr	r3, [r5, r3]
 8006e92:	4798      	blx	r3
 8006e94:	3601      	adds	r6, #1
 8006e96:	e7f2      	b.n	8006e7e <__libc_init_array+0x1e>
 8006e98:	08006f4c 	.word	0x08006f4c
 8006e9c:	08006f4c 	.word	0x08006f4c
 8006ea0:	08006f50 	.word	0x08006f50
 8006ea4:	08006f4c 	.word	0x08006f4c

08006ea8 <memcpy>:
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d100      	bne.n	8006eb2 <memcpy+0xa>
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	5ccc      	ldrb	r4, [r1, r3]
 8006eb4:	54c4      	strb	r4, [r0, r3]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	e7f8      	b.n	8006eac <memcpy+0x4>
	...

08006ebc <_init>:
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec2:	bc08      	pop	{r3}
 8006ec4:	469e      	mov	lr, r3
 8006ec6:	4770      	bx	lr

08006ec8 <_fini>:
 8006ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ece:	bc08      	pop	{r3}
 8006ed0:	469e      	mov	lr, r3
 8006ed2:	4770      	bx	lr
