
motor_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031dc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  080032dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080032dc  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b60c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e09  00000000  00000000  0002b683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  0002d490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a01  00000000  00000000  0002e150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a438  00000000  00000000  0002eb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9db  00000000  00000000  00048f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a11bd  00000000  00000000  00058964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e18  00000000  00000000  000f9b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000fc93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003280 	.word	0x08003280

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003280 	.word	0x08003280

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fc5b 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f825 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 fa1b 	bl	8000664 <MX_GPIO_Init>
  MX_DMA_Init();
 800022e:	f000 f9fb 	bl	8000628 <MX_DMA_Init>
  MX_TIM2_Init();
 8000232:	f000 f8b7 	bl	80003a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000236:	f000 f961 	bl	80004fc <MX_TIM3_Init>
  MX_I2C1_Init();
 800023a:	f000 f873 	bl	8000324 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <main+0x4c>)
 8000240:	2100      	movs	r1, #0
 8000242:	0018      	movs	r0, r3
 8000244:	f002 f9ae 	bl	80025a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <main+0x50>)
 800024a:	2100      	movs	r1, #0
 800024c:	0018      	movs	r0, r3
 800024e:	f002 f9a9 	bl	80025a4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, 212, 1, 100);
 8000252:	1dfc      	adds	r4, r7, #7
 8000254:	4806      	ldr	r0, [pc, #24]	; (8000270 <main+0x54>)
 8000256:	2364      	movs	r3, #100	; 0x64
 8000258:	2201      	movs	r2, #1
 800025a:	21d4      	movs	r1, #212	; 0xd4
 800025c:	f001 f8d0 	bl	8001400 <HAL_I2C_IsDeviceReady>
 8000260:	0003      	movs	r3, r0
 8000262:	7023      	strb	r3, [r4, #0]
  {
 8000264:	e7f5      	b.n	8000252 <main+0x36>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000104 	.word	0x20000104
 800026c:	2000014c 	.word	0x2000014c
 8000270:	20000028 	.word	0x20000028

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b099      	sub	sp, #100	; 0x64
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	242c      	movs	r4, #44	; 0x2c
 800027c:	193b      	adds	r3, r7, r4
 800027e:	0018      	movs	r0, r3
 8000280:	2334      	movs	r3, #52	; 0x34
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f002 ffcf 	bl	8003228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	231c      	movs	r3, #28
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	0018      	movs	r0, r3
 8000290:	2310      	movs	r3, #16
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f002 ffc7 	bl	8003228 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029a:	003b      	movs	r3, r7
 800029c:	0018      	movs	r0, r3
 800029e:	231c      	movs	r3, #28
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f002 ffc0 	bl	8003228 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	0021      	movs	r1, r4
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2202      	movs	r2, #2
 80002ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2201      	movs	r2, #1
 80002b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2210      	movs	r2, #16
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 fa9b 	bl	8001800 <HAL_RCC_OscConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ce:	f000 fa1f 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	211c      	movs	r1, #28
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2207      	movs	r2, #7
 80002d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2100      	movs	r1, #0
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 fe0b 	bl	8001f0c <HAL_RCC_ClockConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002fa:	f000 fa09 	bl	8000710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002fe:	003b      	movs	r3, r7
 8000300:	2220      	movs	r2, #32
 8000302:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030a:	003b      	movs	r3, r7
 800030c:	0018      	movs	r0, r3
 800030e:	f001 ff49 	bl	80021a4 <HAL_RCCEx_PeriphCLKConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000316:	f000 f9fb 	bl	8000710 <Error_Handler>
  }
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b019      	add	sp, #100	; 0x64
 8000320:	bd90      	pop	{r4, r7, pc}
	...

08000324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_I2C1_Init+0x74>)
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <MX_I2C1_Init+0x78>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <MX_I2C1_Init+0x74>)
 8000330:	4a1b      	ldr	r2, [pc, #108]	; (80003a0 <MX_I2C1_Init+0x7c>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_I2C1_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_I2C1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_I2C1_Init+0x74>)
 8000360:	0018      	movs	r0, r3
 8000362:	f000 ffb7 	bl	80012d4 <HAL_I2C_Init>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800036a:	f000 f9d1 	bl	8000710 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_I2C1_Init+0x74>)
 8000370:	2100      	movs	r1, #0
 8000372:	0018      	movs	r0, r3
 8000374:	f001 f9ac 	bl	80016d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800037c:	f000 f9c8 	bl	8000710 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <MX_I2C1_Init+0x74>)
 8000382:	2100      	movs	r1, #0
 8000384:	0018      	movs	r0, r3
 8000386:	f001 f9ef 	bl	8001768 <HAL_I2CEx_ConfigDigitalFilter>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 f9bf 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000028 	.word	0x20000028
 800039c:	40005400 	.word	0x40005400
 80003a0:	2000090e 	.word	0x2000090e

080003a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08e      	sub	sp, #56	; 0x38
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	2328      	movs	r3, #40	; 0x28
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	0018      	movs	r0, r3
 80003b0:	2310      	movs	r3, #16
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f002 ff37 	bl	8003228 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ba:	2320      	movs	r3, #32
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	0018      	movs	r0, r3
 80003c0:	2308      	movs	r3, #8
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f002 ff2f 	bl	8003228 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	0018      	movs	r0, r3
 80003ce:	231c      	movs	r3, #28
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f002 ff28 	bl	8003228 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d8:	4b47      	ldr	r3, [pc, #284]	; (80004f8 <MX_TIM2_Init+0x154>)
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	05d2      	lsls	r2, r2, #23
 80003de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003e0:	4b45      	ldr	r3, [pc, #276]	; (80004f8 <MX_TIM2_Init+0x154>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b44      	ldr	r3, [pc, #272]	; (80004f8 <MX_TIM2_Init+0x154>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 106;
 80003ec:	4b42      	ldr	r3, [pc, #264]	; (80004f8 <MX_TIM2_Init+0x154>)
 80003ee:	226a      	movs	r2, #106	; 0x6a
 80003f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f2:	4b41      	ldr	r3, [pc, #260]	; (80004f8 <MX_TIM2_Init+0x154>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f8:	4b3f      	ldr	r3, [pc, #252]	; (80004f8 <MX_TIM2_Init+0x154>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003fe:	4b3e      	ldr	r3, [pc, #248]	; (80004f8 <MX_TIM2_Init+0x154>)
 8000400:	0018      	movs	r0, r3
 8000402:	f001 ffcf 	bl	80023a4 <HAL_TIM_Base_Init>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800040a:	f000 f981 	bl	8000710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040e:	2128      	movs	r1, #40	; 0x28
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	0152      	lsls	r2, r2, #5
 8000416:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000418:	187a      	adds	r2, r7, r1
 800041a:	4b37      	ldr	r3, [pc, #220]	; (80004f8 <MX_TIM2_Init+0x154>)
 800041c:	0011      	movs	r1, r2
 800041e:	0018      	movs	r0, r3
 8000420:	f002 fa96 	bl	8002950 <HAL_TIM_ConfigClockSource>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000428:	f000 f972 	bl	8000710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800042c:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <MX_TIM2_Init+0x154>)
 800042e:	0018      	movs	r0, r3
 8000430:	f002 f860 	bl	80024f4 <HAL_TIM_PWM_Init>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000438:	f000 f96a 	bl	8000710 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800043c:	4b2e      	ldr	r3, [pc, #184]	; (80004f8 <MX_TIM2_Init+0x154>)
 800043e:	0018      	movs	r0, r3
 8000440:	f002 f800 	bl	8002444 <HAL_TIM_OC_Init>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000448:	f000 f962 	bl	8000710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044c:	2120      	movs	r1, #32
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800045a:	187a      	adds	r2, r7, r1
 800045c:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <MX_TIM2_Init+0x154>)
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f002 fe83 	bl	800316c <HAL_TIMEx_MasterConfigSynchronization>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800046a:	f000 f951 	bl	8000710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2260      	movs	r2, #96	; 0x60
 8000472:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000486:	1d39      	adds	r1, r7, #4
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_TIM2_Init+0x154>)
 800048a:	2200      	movs	r2, #0
 800048c:	0018      	movs	r0, r3
 800048e:	f002 f999 	bl	80027c4 <HAL_TIM_PWM_ConfigChannel>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000496:	f000 f93b 	bl	8000710 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2201      	movs	r2, #1
 800049e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004a0:	1d39      	adds	r1, r7, #4
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_TIM2_Init+0x154>)
 80004a4:	2204      	movs	r2, #4
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 f98c 	bl	80027c4 <HAL_TIM_PWM_ConfigChannel>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80004b0:	f000 f92e 	bl	8000710 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004ba:	1d39      	adds	r1, r7, #4
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_TIM2_Init+0x154>)
 80004be:	2208      	movs	r2, #8
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 f97f 	bl	80027c4 <HAL_TIM_PWM_ConfigChannel>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 80004ca:	f000 f921 	bl	8000710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004d4:	1d39      	adds	r1, r7, #4
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_TIM2_Init+0x154>)
 80004d8:	220c      	movs	r2, #12
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 f91a 	bl	8002714 <HAL_TIM_OC_ConfigChannel>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0x144>
  {
    Error_Handler();
 80004e4:	f000 f914 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <MX_TIM2_Init+0x154>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fa32 	bl	8000954 <HAL_TIM_MspPostInit>

}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b00e      	add	sp, #56	; 0x38
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000104 	.word	0x20000104

080004fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	2328      	movs	r3, #40	; 0x28
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2310      	movs	r3, #16
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fe8b 	bl	8003228 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	2320      	movs	r3, #32
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2308      	movs	r3, #8
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 fe83 	bl	8003228 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	0018      	movs	r0, r3
 8000526:	231c      	movs	r3, #28
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 fe7c 	bl	8003228 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000530:	4b3a      	ldr	r3, [pc, #232]	; (800061c <MX_TIM3_Init+0x120>)
 8000532:	4a3b      	ldr	r2, [pc, #236]	; (8000620 <MX_TIM3_Init+0x124>)
 8000534:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000536:	4b39      	ldr	r3, [pc, #228]	; (800061c <MX_TIM3_Init+0x120>)
 8000538:	2207      	movs	r2, #7
 800053a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b37      	ldr	r3, [pc, #220]	; (800061c <MX_TIM3_Init+0x120>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000542:	4b36      	ldr	r3, [pc, #216]	; (800061c <MX_TIM3_Init+0x120>)
 8000544:	4a37      	ldr	r2, [pc, #220]	; (8000624 <MX_TIM3_Init+0x128>)
 8000546:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000548:	4b34      	ldr	r3, [pc, #208]	; (800061c <MX_TIM3_Init+0x120>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054e:	4b33      	ldr	r3, [pc, #204]	; (800061c <MX_TIM3_Init+0x120>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000554:	4b31      	ldr	r3, [pc, #196]	; (800061c <MX_TIM3_Init+0x120>)
 8000556:	0018      	movs	r0, r3
 8000558:	f001 ff24 	bl	80023a4 <HAL_TIM_Base_Init>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000560:	f000 f8d6 	bl	8000710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000564:	2128      	movs	r1, #40	; 0x28
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	0152      	lsls	r2, r2, #5
 800056c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800056e:	187a      	adds	r2, r7, r1
 8000570:	4b2a      	ldr	r3, [pc, #168]	; (800061c <MX_TIM3_Init+0x120>)
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f002 f9eb 	bl	8002950 <HAL_TIM_ConfigClockSource>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800057e:	f000 f8c7 	bl	8000710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <MX_TIM3_Init+0x120>)
 8000584:	0018      	movs	r0, r3
 8000586:	f001 ffb5 	bl	80024f4 <HAL_TIM_PWM_Init>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800058e:	f000 f8bf 	bl	8000710 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000592:	4b22      	ldr	r3, [pc, #136]	; (800061c <MX_TIM3_Init+0x120>)
 8000594:	0018      	movs	r0, r3
 8000596:	f001 ff55 	bl	8002444 <HAL_TIM_OC_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800059e:	f000 f8b7 	bl	8000710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a2:	2120      	movs	r1, #32
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005b0:	187a      	adds	r2, r7, r1
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_TIM3_Init+0x120>)
 80005b4:	0011      	movs	r1, r2
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 fdd8 	bl	800316c <HAL_TIMEx_MasterConfigSynchronization>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80005c0:	f000 f8a6 	bl	8000710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2260      	movs	r2, #96	; 0x60
 80005c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_TIM3_Init+0x120>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f002 f8ee 	bl	80027c4 <HAL_TIM_PWM_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80005ec:	f000 f890 	bl	8000710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f6:	1d39      	adds	r1, r7, #4
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_TIM3_Init+0x120>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 f889 	bl	8002714 <HAL_TIM_OC_ConfigChannel>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8000606:	f000 f883 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <MX_TIM3_Init+0x120>)
 800060c:	0018      	movs	r0, r3
 800060e:	f000 f9a1 	bl	8000954 <HAL_TIM_MspPostInit>

}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b00e      	add	sp, #56	; 0x38
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	2000014c 	.word	0x2000014c
 8000620:	40000400 	.word	0x40000400
 8000624:	00004e1f 	.word	0x00004e1f

08000628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_DMA_Init+0x38>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_DMA_Init+0x38>)
 8000634:	2101      	movs	r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_DMA_Init+0x38>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	2201      	movs	r2, #1
 8000640:	4013      	ands	r3, r2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	200a      	movs	r0, #10
 800064c:	f000 fb56 	bl	8000cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 fb68 	bl	8000d26 <HAL_NVIC_EnableIRQ>

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	240c      	movs	r4, #12
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2314      	movs	r3, #20
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f002 fdd7 	bl	8003228 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_GPIO_Init+0xa4>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <MX_GPIO_Init+0xa4>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	03c9      	lsls	r1, r1, #15
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <MX_GPIO_Init+0xa4>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	03db      	lsls	r3, r3, #15
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_GPIO_Init+0xa4>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_GPIO_Init+0xa4>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0309      	lsls	r1, r1, #12
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_GPIO_Init+0xa4>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	031b      	lsls	r3, r3, #12
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_GPIO_Init+0xa4>)
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_GPIO_Init+0xa4>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0289      	lsls	r1, r1, #10
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_GPIO_Init+0xa4>)
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	029b      	lsls	r3, r3, #10
 80006c8:	4013      	ands	r3, r2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_GPIO_Init+0xa8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	2107      	movs	r1, #7
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fddf 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006da:	0021      	movs	r1, r4
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2207      	movs	r2, #7
 80006e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2201      	movs	r2, #1
 80006e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <MX_GPIO_Init+0xa8>)
 80006f8:	0019      	movs	r1, r3
 80006fa:	0010      	movs	r0, r2
 80006fc:	f000 fc54 	bl	8000fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b009      	add	sp, #36	; 0x24
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x44>)
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_MspInit+0x44>)
 8000728:	2101      	movs	r1, #1
 800072a:	430a      	orrs	r2, r1
 800072c:	619a      	str	r2, [r3, #24]
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x44>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	2201      	movs	r2, #1
 8000734:	4013      	ands	r3, r2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_MspInit+0x44>)
 800073c:	69da      	ldr	r2, [r3, #28]
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_MspInit+0x44>)
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	0549      	lsls	r1, r1, #21
 8000744:	430a      	orrs	r2, r1
 8000746:	61da      	str	r2, [r3, #28]
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_MspInit+0x44>)
 800074a:	69da      	ldr	r2, [r3, #28]
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	055b      	lsls	r3, r3, #21
 8000750:	4013      	ands	r3, r2
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b08b      	sub	sp, #44	; 0x2c
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	2414      	movs	r4, #20
 800076e:	193b      	adds	r3, r7, r4
 8000770:	0018      	movs	r0, r3
 8000772:	2314      	movs	r3, #20
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f002 fd56 	bl	8003228 <memset>
  if(hi2c->Instance==I2C1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a54      	ldr	r2, [pc, #336]	; (80008d4 <HAL_I2C_MspInit+0x170>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d000      	beq.n	8000788 <HAL_I2C_MspInit+0x24>
 8000786:	e0a0      	b.n	80008ca <HAL_I2C_MspInit+0x166>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b53      	ldr	r3, [pc, #332]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 800078a:	695a      	ldr	r2, [r3, #20]
 800078c:	4b52      	ldr	r3, [pc, #328]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	0289      	lsls	r1, r1, #10
 8000792:	430a      	orrs	r2, r1
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	4b50      	ldr	r3, [pc, #320]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	029b      	lsls	r3, r3, #10
 800079e:	4013      	ands	r3, r2
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	22c0      	movs	r2, #192	; 0xc0
 80007a8:	00d2      	lsls	r2, r2, #3
 80007aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ac:	0021      	movs	r1, r4
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2212      	movs	r2, #18
 80007b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2201      	movs	r2, #1
 80007b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2203      	movs	r2, #3
 80007be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2204      	movs	r2, #4
 80007c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	187a      	adds	r2, r7, r1
 80007c8:	2390      	movs	r3, #144	; 0x90
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fbea 	bl	8000fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d4:	4b40      	ldr	r3, [pc, #256]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 80007d6:	69da      	ldr	r2, [r3, #28]
 80007d8:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	0389      	lsls	r1, r1, #14
 80007de:	430a      	orrs	r2, r1
 80007e0:	61da      	str	r2, [r3, #28]
 80007e2:	4b3d      	ldr	r3, [pc, #244]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	039b      	lsls	r3, r3, #14
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80007f0:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <HAL_I2C_MspInit+0x178>)
 80007f2:	4a3b      	ldr	r2, [pc, #236]	; (80008e0 <HAL_I2C_MspInit+0x17c>)
 80007f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <HAL_I2C_MspInit+0x178>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fc:	4b37      	ldr	r3, [pc, #220]	; (80008dc <HAL_I2C_MspInit+0x178>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <HAL_I2C_MspInit+0x178>)
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000808:	4b34      	ldr	r3, [pc, #208]	; (80008dc <HAL_I2C_MspInit+0x178>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <HAL_I2C_MspInit+0x178>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000814:	4b31      	ldr	r3, [pc, #196]	; (80008dc <HAL_I2C_MspInit+0x178>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <HAL_I2C_MspInit+0x178>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <HAL_I2C_MspInit+0x178>)
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fa9c 	bl	8000d60 <HAL_DMA_Init>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800082c:	f7ff ff70 	bl	8000710 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_I2C1_TX);
 8000830:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <HAL_I2C_MspInit+0x180>)
 8000832:	23a8      	movs	r3, #168	; 0xa8
 8000834:	58d3      	ldr	r3, [r2, r3]
 8000836:	492b      	ldr	r1, [pc, #172]	; (80008e4 <HAL_I2C_MspInit+0x180>)
 8000838:	22f0      	movs	r2, #240	; 0xf0
 800083a:	4393      	bics	r3, r2
 800083c:	22a8      	movs	r2, #168	; 0xa8
 800083e:	508b      	str	r3, [r1, r2]
 8000840:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <HAL_I2C_MspInit+0x180>)
 8000842:	23a8      	movs	r3, #168	; 0xa8
 8000844:	58d3      	ldr	r3, [r2, r3]
 8000846:	4927      	ldr	r1, [pc, #156]	; (80008e4 <HAL_I2C_MspInit+0x180>)
 8000848:	2220      	movs	r2, #32
 800084a:	4313      	orrs	r3, r2
 800084c:	22a8      	movs	r2, #168	; 0xa8
 800084e:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a22      	ldr	r2, [pc, #136]	; (80008dc <HAL_I2C_MspInit+0x178>)
 8000854:	639a      	str	r2, [r3, #56]	; 0x38
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <HAL_I2C_MspInit+0x178>)
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <HAL_I2C_MspInit+0x188>)
 8000860:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fa66 	bl	8000d60 <HAL_DMA_Init>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000898:	f7ff ff3a 	bl	8000710 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_I2C1_RX);
 800089c:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <HAL_I2C_MspInit+0x180>)
 800089e:	23a8      	movs	r3, #168	; 0xa8
 80008a0:	58d3      	ldr	r3, [r2, r3]
 80008a2:	4910      	ldr	r1, [pc, #64]	; (80008e4 <HAL_I2C_MspInit+0x180>)
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <HAL_I2C_MspInit+0x18c>)
 80008a6:	4013      	ands	r3, r2
 80008a8:	22a8      	movs	r2, #168	; 0xa8
 80008aa:	508b      	str	r3, [r1, r2]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_I2C_MspInit+0x180>)
 80008ae:	23a8      	movs	r3, #168	; 0xa8
 80008b0:	58d3      	ldr	r3, [r2, r3]
 80008b2:	490c      	ldr	r1, [pc, #48]	; (80008e4 <HAL_I2C_MspInit+0x180>)
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	4313      	orrs	r3, r2
 80008ba:	22a8      	movs	r2, #168	; 0xa8
 80008bc:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 80008c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_I2C_MspInit+0x184>)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b00b      	add	sp, #44	; 0x2c
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40005400 	.word	0x40005400
 80008d8:	40021000 	.word	0x40021000
 80008dc:	2000007c 	.word	0x2000007c
 80008e0:	4002001c 	.word	0x4002001c
 80008e4:	40020000 	.word	0x40020000
 80008e8:	200000c0 	.word	0x200000c0
 80008ec:	40020030 	.word	0x40020030
 80008f0:	fffff0ff 	.word	0xfffff0ff

080008f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	429a      	cmp	r2, r3
 8000906:	d10c      	bne.n	8000922 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_TIM_Base_MspInit+0x58>)
 800090a:	69da      	ldr	r2, [r3, #28]
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_TIM_Base_MspInit+0x58>)
 800090e:	2101      	movs	r1, #1
 8000910:	430a      	orrs	r2, r1
 8000912:	61da      	str	r2, [r3, #28]
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_TIM_Base_MspInit+0x58>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	2201      	movs	r2, #1
 800091a:	4013      	ands	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000920:	e010      	b.n	8000944 <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_TIM_Base_MspInit+0x5c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d10b      	bne.n	8000944 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <HAL_TIM_Base_MspInit+0x58>)
 800092e:	69da      	ldr	r2, [r3, #28]
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_TIM_Base_MspInit+0x58>)
 8000932:	2102      	movs	r1, #2
 8000934:	430a      	orrs	r2, r1
 8000936:	61da      	str	r2, [r3, #28]
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_TIM_Base_MspInit+0x58>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	2202      	movs	r2, #2
 800093e:	4013      	ands	r3, r2
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b004      	add	sp, #16
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	40000400 	.word	0x40000400

08000954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b08b      	sub	sp, #44	; 0x2c
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	2414      	movs	r4, #20
 800095e:	193b      	adds	r3, r7, r4
 8000960:	0018      	movs	r0, r3
 8000962:	2314      	movs	r3, #20
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f002 fc5e 	bl	8003228 <memset>
  if(htim->Instance==TIM2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	429a      	cmp	r2, r3
 8000976:	d125      	bne.n	80009c4 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <HAL_TIM_MspPostInit+0xcc>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <HAL_TIM_MspPostInit+0xcc>)
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	0289      	lsls	r1, r1, #10
 8000982:	430a      	orrs	r2, r1
 8000984:	615a      	str	r2, [r3, #20]
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <HAL_TIM_MspPostInit+0xcc>)
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	029b      	lsls	r3, r3, #10
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000994:	0021      	movs	r1, r4
 8000996:	187b      	adds	r3, r7, r1
 8000998:	220f      	movs	r2, #15
 800099a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2202      	movs	r2, #2
 80009a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2202      	movs	r2, #2
 80009b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	187a      	adds	r2, r7, r1
 80009b6:	2390      	movs	r3, #144	; 0x90
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 faf3 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009c2:	e029      	b.n	8000a18 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_TIM_MspPostInit+0xd0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d124      	bne.n	8000a18 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_TIM_MspPostInit+0xcc>)
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_TIM_MspPostInit+0xcc>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0289      	lsls	r1, r1, #10
 80009d8:	430a      	orrs	r2, r1
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_TIM_MspPostInit+0xcc>)
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	029b      	lsls	r3, r3, #10
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ea:	2114      	movs	r1, #20
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	22c0      	movs	r2, #192	; 0xc0
 80009f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2202      	movs	r2, #2
 80009f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2201      	movs	r2, #1
 8000a08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	187a      	adds	r2, r7, r1
 8000a0c:	2390      	movs	r3, #144	; 0x90
 8000a0e:	05db      	lsls	r3, r3, #23
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fac8 	bl	8000fa8 <HAL_GPIO_Init>
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b00b      	add	sp, #44	; 0x2c
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40000400 	.word	0x40000400

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 f88e 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f9c6 	bl	8000df0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 f9c2 	bl	8000df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	2000007c 	.word	0x2000007c
 8000a78:	200000c0 	.word	0x200000c0

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a8c:	f7ff fff6 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a92:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <LoopForever+0xe>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	; (8000ad4 <LoopForever+0x16>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ab6:	f002 fbbf 	bl	8003238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aba:	f7ff fbaf 	bl	800021c <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   r0, =_estack
 8000ac0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000acc:	080032d0 	.word	0x080032d0
  ldr r2, =_sbss
 8000ad0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad4:	20000198 	.word	0x20000198

08000ad8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_COMP_IRQHandler>
	...

08000adc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_Init+0x24>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_Init+0x24>)
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f809 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af2:	f7ff fe13 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40022000 	.word	0x40022000

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_InitTick+0x5c>)
 8000b0e:	681c      	ldr	r4, [r3, #0]
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_InitTick+0x60>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	0019      	movs	r1, r3
 8000b16:	23fa      	movs	r3, #250	; 0xfa
 8000b18:	0098      	lsls	r0, r3, #2
 8000b1a:	f7ff faf3 	bl	8000104 <__udivsi3>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	0019      	movs	r1, r3
 8000b22:	0020      	movs	r0, r4
 8000b24:	f7ff faee 	bl	8000104 <__udivsi3>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f90b 	bl	8000d46 <HAL_SYSTICK_Config>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e00f      	b.n	8000b58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d80b      	bhi.n	8000b56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2301      	movs	r3, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f8d8 	bl	8000cfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_InitTick+0x64>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b003      	add	sp, #12
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	001a      	movs	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	18d2      	adds	r2, r2, r3
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000194 	.word	0x20000194

08000b90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	20000194 	.word	0x20000194

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb6:	d809      	bhi.n	8000bcc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	231f      	movs	r3, #31
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_EnableIRQ+0x30>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	000a      	movs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]
  }
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	0002      	movs	r2, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d828      	bhi.n	8000c40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <__NVIC_SetPriority+0xd4>)
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	33c0      	adds	r3, #192	; 0xc0
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	589b      	ldr	r3, [r3, r2]
 8000bfe:	1dfa      	adds	r2, r7, #7
 8000c00:	7812      	ldrb	r2, [r2, #0]
 8000c02:	0011      	movs	r1, r2
 8000c04:	2203      	movs	r2, #3
 8000c06:	400a      	ands	r2, r1
 8000c08:	00d2      	lsls	r2, r2, #3
 8000c0a:	21ff      	movs	r1, #255	; 0xff
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	43d2      	mvns	r2, r2
 8000c12:	401a      	ands	r2, r3
 8000c14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	22ff      	movs	r2, #255	; 0xff
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0018      	movs	r0, r3
 8000c24:	2303      	movs	r3, #3
 8000c26:	4003      	ands	r3, r0
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2c:	481f      	ldr	r0, [pc, #124]	; (8000cac <__NVIC_SetPriority+0xd4>)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	430a      	orrs	r2, r1
 8000c38:	33c0      	adds	r3, #192	; 0xc0
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c3e:	e031      	b.n	8000ca4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <__NVIC_SetPriority+0xd8>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	0019      	movs	r1, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3306      	adds	r3, #6
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	3304      	adds	r3, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1dfa      	adds	r2, r7, #7
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	0011      	movs	r1, r2
 8000c60:	2203      	movs	r2, #3
 8000c62:	400a      	ands	r2, r1
 8000c64:	00d2      	lsls	r2, r2, #3
 8000c66:	21ff      	movs	r1, #255	; 0xff
 8000c68:	4091      	lsls	r1, r2
 8000c6a:	000a      	movs	r2, r1
 8000c6c:	43d2      	mvns	r2, r2
 8000c6e:	401a      	ands	r2, r3
 8000c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	019b      	lsls	r3, r3, #6
 8000c76:	22ff      	movs	r2, #255	; 0xff
 8000c78:	401a      	ands	r2, r3
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2303      	movs	r3, #3
 8000c82:	4003      	ands	r3, r0
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <__NVIC_SetPriority+0xd8>)
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	001c      	movs	r4, r3
 8000c90:	230f      	movs	r3, #15
 8000c92:	4023      	ands	r3, r4
 8000c94:	3b08      	subs	r3, #8
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	3306      	adds	r3, #6
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	18c3      	adds	r3, r0, r3
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b003      	add	sp, #12
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	1e5a      	subs	r2, r3, #1
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	045b      	lsls	r3, r3, #17
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d301      	bcc.n	8000ccc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e010      	b.n	8000cee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <SysTick_Config+0x44>)
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	3a01      	subs	r2, #1
 8000cd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	2103      	movs	r1, #3
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff ff7c 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x44>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x44>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	210f      	movs	r1, #15
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	1c02      	adds	r2, r0, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ff33 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff ffaf 	bl	8000cb4 <SysTick_Config>
 8000d56:	0003      	movs	r3, r0
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e036      	b.n	8000de4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2221      	movs	r2, #33	; 0x21
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_DMA_Init+0x8c>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 f8b4 	bl	8000f34 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2221      	movs	r2, #33	; 0x21
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2100      	movs	r1, #0
 8000de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b004      	add	sp, #16
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	ffffc00f 	.word	0xffffc00f

08000df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4013      	ands	r3, r2
 8000e16:	d024      	beq.n	8000e62 <HAL_DMA_IRQHandler+0x72>
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d020      	beq.n	8000e62 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2220      	movs	r2, #32
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d107      	bne.n	8000e3c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2104      	movs	r1, #4
 8000e38:	438a      	bics	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e44:	2104      	movs	r1, #4
 8000e46:	4091      	lsls	r1, r2
 8000e48:	000a      	movs	r2, r1
 8000e4a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d100      	bne.n	8000e56 <HAL_DMA_IRQHandler+0x66>
 8000e54:	e06a      	b.n	8000f2c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	0010      	movs	r0, r2
 8000e5e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000e60:	e064      	b.n	8000f2c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	2202      	movs	r2, #2
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d02b      	beq.n	8000eca <HAL_DMA_IRQHandler+0xda>
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2202      	movs	r2, #2
 8000e76:	4013      	ands	r3, r2
 8000e78:	d027      	beq.n	8000eca <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2220      	movs	r2, #32
 8000e82:	4013      	ands	r3, r2
 8000e84:	d10b      	bne.n	8000e9e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	210a      	movs	r1, #10
 8000e92:	438a      	bics	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2221      	movs	r2, #33	; 0x21
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4091      	lsls	r1, r2
 8000eaa:	000a      	movs	r2, r1
 8000eac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d036      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	0010      	movs	r0, r2
 8000ec6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000ec8:	e030      	b.n	8000f2c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	2208      	movs	r2, #8
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d028      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x13c>
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2208      	movs	r2, #8
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d024      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	210e      	movs	r1, #14
 8000eee:	438a      	bics	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efa:	2101      	movs	r1, #1
 8000efc:	4091      	lsls	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2221      	movs	r2, #33	; 0x21
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2220      	movs	r2, #32
 8000f14:	2100      	movs	r1, #0
 8000f16:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	0010      	movs	r0, r2
 8000f28:	4798      	blx	r3
    }
  }
}
 8000f2a:	e7ff      	b.n	8000f2c <HAL_DMA_IRQHandler+0x13c>
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	001a      	movs	r2, r3
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <DMA_CalcBaseAndBitshift+0x60>)
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d810      	bhi.n	8000f6a <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <DMA_CalcBaseAndBitshift+0x64>)
 8000f4e:	4694      	mov	ip, r2
 8000f50:	4463      	add	r3, ip
 8000f52:	2114      	movs	r1, #20
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff f8d5 	bl	8000104 <__udivsi3>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	009a      	lsls	r2, r3, #2
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <DMA_CalcBaseAndBitshift+0x68>)
 8000f66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000f68:	e00f      	b.n	8000f8a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <DMA_CalcBaseAndBitshift+0x6c>)
 8000f70:	4694      	mov	ip, r2
 8000f72:	4463      	add	r3, ip
 8000f74:	2114      	movs	r1, #20
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff f8c4 	bl	8000104 <__udivsi3>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	009a      	lsls	r2, r3, #2
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <DMA_CalcBaseAndBitshift+0x70>)
 8000f88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	40020407 	.word	0x40020407
 8000f98:	bffdfff8 	.word	0xbffdfff8
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	bffdfbf8 	.word	0xbffdfbf8
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb6:	e155      	b.n	8001264 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4091      	lsls	r1, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d100      	bne.n	8000fd0 <HAL_GPIO_Init+0x28>
 8000fce:	e146      	b.n	800125e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d005      	beq.n	8000fe8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d130      	bne.n	800104a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	43da      	mvns	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	409a      	lsls	r2, r3
 800100a:	0013      	movs	r3, r2
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101e:	2201      	movs	r2, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	2201      	movs	r2, #1
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2203      	movs	r2, #3
 8001050:	4013      	ands	r3, r2
 8001052:	2b03      	cmp	r3, #3
 8001054:	d017      	beq.n	8001086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	43da      	mvns	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2203      	movs	r2, #3
 800108c:	4013      	ands	r3, r2
 800108e:	2b02      	cmp	r3, #2
 8001090:	d123      	bne.n	80010da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	58d3      	ldr	r3, [r2, r3]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2207      	movs	r2, #7
 80010a4:	4013      	ands	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2107      	movs	r1, #7
 80010be:	400b      	ands	r3, r1
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	6939      	ldr	r1, [r7, #16]
 80010d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	43da      	mvns	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2203      	movs	r2, #3
 80010f8:	401a      	ands	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	23c0      	movs	r3, #192	; 0xc0
 8001114:	029b      	lsls	r3, r3, #10
 8001116:	4013      	ands	r3, r2
 8001118:	d100      	bne.n	800111c <HAL_GPIO_Init+0x174>
 800111a:	e0a0      	b.n	800125e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4b57      	ldr	r3, [pc, #348]	; (800127c <HAL_GPIO_Init+0x2d4>)
 800111e:	699a      	ldr	r2, [r3, #24]
 8001120:	4b56      	ldr	r3, [pc, #344]	; (800127c <HAL_GPIO_Init+0x2d4>)
 8001122:	2101      	movs	r1, #1
 8001124:	430a      	orrs	r2, r1
 8001126:	619a      	str	r2, [r3, #24]
 8001128:	4b54      	ldr	r3, [pc, #336]	; (800127c <HAL_GPIO_Init+0x2d4>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	2201      	movs	r2, #1
 800112e:	4013      	ands	r3, r2
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_GPIO_Init+0x2d8>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	589b      	ldr	r3, [r3, r2]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2203      	movs	r2, #3
 8001146:	4013      	ands	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	2390      	movs	r3, #144	; 0x90
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	429a      	cmp	r2, r3
 8001160:	d019      	beq.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a47      	ldr	r2, [pc, #284]	; (8001284 <HAL_GPIO_Init+0x2dc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d013      	beq.n	8001192 <HAL_GPIO_Init+0x1ea>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a46      	ldr	r2, [pc, #280]	; (8001288 <HAL_GPIO_Init+0x2e0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00d      	beq.n	800118e <HAL_GPIO_Init+0x1e6>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a45      	ldr	r2, [pc, #276]	; (800128c <HAL_GPIO_Init+0x2e4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d007      	beq.n	800118a <HAL_GPIO_Init+0x1e2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <HAL_GPIO_Init+0x1de>
 8001182:	2304      	movs	r3, #4
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 8001186:	2305      	movs	r3, #5
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 8001196:	2300      	movs	r3, #0
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	2103      	movs	r1, #3
 800119c:	400a      	ands	r2, r1
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	; (8001280 <HAL_GPIO_Init+0x2d8>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	035b      	lsls	r3, r3, #13
 80011ce:	4013      	ands	r3, r2
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011da:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011e0:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43da      	mvns	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	039b      	lsls	r3, r3, #14
 80011f8:	4013      	ands	r3, r2
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	4013      	ands	r3, r2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	40da      	lsrs	r2, r3
 800126c:	1e13      	subs	r3, r2, #0
 800126e:	d000      	beq.n	8001272 <HAL_GPIO_Init+0x2ca>
 8001270:	e6a2      	b.n	8000fb8 <HAL_GPIO_Init+0x10>
  } 
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b006      	add	sp, #24
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	48000c00 	.word	0x48000c00
 8001290:	48001000 	.word	0x48001000
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	0008      	movs	r0, r1
 80012a2:	0011      	movs	r1, r2
 80012a4:	1cbb      	adds	r3, r7, #2
 80012a6:	1c02      	adds	r2, r0, #0
 80012a8:	801a      	strh	r2, [r3, #0]
 80012aa:	1c7b      	adds	r3, r7, #1
 80012ac:	1c0a      	adds	r2, r1, #0
 80012ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b0:	1c7b      	adds	r3, r7, #1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d004      	beq.n	80012c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012b8:	1cbb      	adds	r3, r7, #2
 80012ba:	881a      	ldrh	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c2:	1cbb      	adds	r3, r7, #2
 80012c4:	881a      	ldrh	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e082      	b.n	80013ec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2241      	movs	r2, #65	; 0x41
 80012ea:	5c9b      	ldrb	r3, [r3, r2]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d107      	bne.n	8001302 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	2100      	movs	r1, #0
 80012f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff fa31 	bl	8000764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2241      	movs	r2, #65	; 0x41
 8001306:	2124      	movs	r1, #36	; 0x24
 8001308:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	438a      	bics	r2, r1
 8001318:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4934      	ldr	r1, [pc, #208]	; (80013f4 <HAL_I2C_Init+0x120>)
 8001324:	400a      	ands	r2, r1
 8001326:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4931      	ldr	r1, [pc, #196]	; (80013f8 <HAL_I2C_Init+0x124>)
 8001334:	400a      	ands	r2, r1
 8001336:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d108      	bne.n	8001352 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	0209      	lsls	r1, r1, #8
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	e007      	b.n	8001362 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2184      	movs	r1, #132	; 0x84
 800135c:	0209      	lsls	r1, r1, #8
 800135e:	430a      	orrs	r2, r1
 8001360:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d104      	bne.n	8001374 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	491f      	ldr	r1, [pc, #124]	; (80013fc <HAL_I2C_Init+0x128>)
 8001380:	430a      	orrs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	491a      	ldr	r1, [pc, #104]	; (80013f8 <HAL_I2C_Init+0x124>)
 8001390:	400a      	ands	r2, r1
 8001392:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	431a      	orrs	r2, r3
 800139e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69d9      	ldr	r1, [r3, #28]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1a      	ldr	r2, [r3, #32]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2241      	movs	r2, #65	; 0x41
 80013d8:	2120      	movs	r1, #32
 80013da:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2242      	movs	r2, #66	; 0x42
 80013e6:	2100      	movs	r1, #0
 80013e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	f0ffffff 	.word	0xf0ffffff
 80013f8:	ffff7fff 	.word	0xffff7fff
 80013fc:	02008000 	.word	0x02008000

08001400 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af02      	add	r7, sp, #8
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	230a      	movs	r3, #10
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	1c0a      	adds	r2, r1, #0
 8001412:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2241      	movs	r2, #65	; 0x41
 800141c:	5c9b      	ldrb	r3, [r3, r2]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b20      	cmp	r3, #32
 8001422:	d000      	beq.n	8001426 <HAL_I2C_IsDeviceReady+0x26>
 8001424:	e0fd      	b.n	8001622 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	401a      	ands	r2, r3
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	429a      	cmp	r2, r3
 8001438:	d101      	bne.n	800143e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800143a:	2302      	movs	r3, #2
 800143c:	e0f2      	b.n	8001624 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2240      	movs	r2, #64	; 0x40
 8001442:	5c9b      	ldrb	r3, [r3, r2]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_I2C_IsDeviceReady+0x4c>
 8001448:	2302      	movs	r3, #2
 800144a:	e0eb      	b.n	8001624 <HAL_I2C_IsDeviceReady+0x224>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2240      	movs	r2, #64	; 0x40
 8001450:	2101      	movs	r1, #1
 8001452:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2241      	movs	r2, #65	; 0x41
 8001458:	2124      	movs	r1, #36	; 0x24
 800145a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d107      	bne.n	800147a <HAL_I2C_IsDeviceReady+0x7a>
 800146a:	230a      	movs	r3, #10
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	059b      	lsls	r3, r3, #22
 8001472:	0d9b      	lsrs	r3, r3, #22
 8001474:	4a6d      	ldr	r2, [pc, #436]	; (800162c <HAL_I2C_IsDeviceReady+0x22c>)
 8001476:	431a      	orrs	r2, r3
 8001478:	e006      	b.n	8001488 <HAL_I2C_IsDeviceReady+0x88>
 800147a:	230a      	movs	r3, #10
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	059b      	lsls	r3, r3, #22
 8001482:	0d9b      	lsrs	r3, r3, #22
 8001484:	4a6a      	ldr	r2, [pc, #424]	; (8001630 <HAL_I2C_IsDeviceReady+0x230>)
 8001486:	431a      	orrs	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800148e:	f7ff fb7f 	bl	8000b90 <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2220      	movs	r2, #32
 800149e:	4013      	ands	r3, r2
 80014a0:	3b20      	subs	r3, #32
 80014a2:	425a      	negs	r2, r3
 80014a4:	4153      	adcs	r3, r2
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	231f      	movs	r3, #31
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2210      	movs	r2, #16
 80014b6:	4013      	ands	r3, r2
 80014b8:	3b10      	subs	r3, #16
 80014ba:	425a      	negs	r2, r3
 80014bc:	4153      	adcs	r3, r2
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	231e      	movs	r3, #30
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80014c6:	e035      	b.n	8001534 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	d01a      	beq.n	8001504 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014ce:	f7ff fb5f 	bl	8000b90 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d302      	bcc.n	80014e4 <HAL_I2C_IsDeviceReady+0xe4>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10f      	bne.n	8001504 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2241      	movs	r2, #65	; 0x41
 80014e8:	2120      	movs	r1, #32
 80014ea:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	2220      	movs	r2, #32
 80014f2:	431a      	orrs	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	2100      	movs	r1, #0
 80014fe:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e08f      	b.n	8001624 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2220      	movs	r2, #32
 800150c:	4013      	ands	r3, r2
 800150e:	3b20      	subs	r3, #32
 8001510:	425a      	negs	r2, r3
 8001512:	4153      	adcs	r3, r2
 8001514:	b2da      	uxtb	r2, r3
 8001516:	231f      	movs	r3, #31
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2210      	movs	r2, #16
 8001524:	4013      	ands	r3, r2
 8001526:	3b10      	subs	r3, #16
 8001528:	425a      	negs	r2, r3
 800152a:	4153      	adcs	r3, r2
 800152c:	b2da      	uxtb	r2, r3
 800152e:	231e      	movs	r3, #30
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001534:	231f      	movs	r3, #31
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d104      	bne.n	8001548 <HAL_I2C_IsDeviceReady+0x148>
 800153e:	231e      	movs	r3, #30
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0bf      	beq.n	80014c8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2210      	movs	r2, #16
 8001550:	4013      	ands	r3, r2
 8001552:	2b10      	cmp	r3, #16
 8001554:	d01a      	beq.n	800158c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	0013      	movs	r3, r2
 8001560:	2200      	movs	r2, #0
 8001562:	2120      	movs	r1, #32
 8001564:	f000 f866 	bl	8001634 <I2C_WaitOnFlagUntilTimeout>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e059      	b.n	8001624 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2220      	movs	r2, #32
 8001576:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2241      	movs	r2, #65	; 0x41
 800157c:	2120      	movs	r1, #32
 800157e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2240      	movs	r2, #64	; 0x40
 8001584:	2100      	movs	r1, #0
 8001586:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	e04b      	b.n	8001624 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	0013      	movs	r3, r2
 8001596:	2200      	movs	r2, #0
 8001598:	2120      	movs	r1, #32
 800159a:	f000 f84b 	bl	8001634 <I2C_WaitOnFlagUntilTimeout>
 800159e:	1e03      	subs	r3, r0, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e03e      	b.n	8001624 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2210      	movs	r2, #16
 80015ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2220      	movs	r2, #32
 80015b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d119      	bne.n	80015f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	01c9      	lsls	r1, r1, #7
 80015cc:	430a      	orrs	r2, r1
 80015ce:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	0013      	movs	r3, r2
 80015da:	2200      	movs	r2, #0
 80015dc:	2120      	movs	r1, #32
 80015de:	f000 f829 	bl	8001634 <I2C_WaitOnFlagUntilTimeout>
 80015e2:	1e03      	subs	r3, r0, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e01c      	b.n	8001624 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2220      	movs	r2, #32
 80015f0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d900      	bls.n	8001602 <HAL_I2C_IsDeviceReady+0x202>
 8001600:	e72f      	b.n	8001462 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2241      	movs	r2, #65	; 0x41
 8001606:	2120      	movs	r1, #32
 8001608:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	2220      	movs	r2, #32
 8001610:	431a      	orrs	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2240      	movs	r2, #64	; 0x40
 800161a:	2100      	movs	r1, #0
 800161c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001622:	2302      	movs	r3, #2
  }
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b008      	add	sp, #32
 800162a:	bd80      	pop	{r7, pc}
 800162c:	02002000 	.word	0x02002000
 8001630:	02002800 	.word	0x02002800

08001634 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001644:	e030      	b.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	d02d      	beq.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800164c:	f7ff faa0 	bl	8000b90 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d302      	bcc.n	8001662 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d122      	bne.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	4013      	ands	r3, r2
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	425a      	negs	r2, r3
 8001672:	4153      	adcs	r3, r2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	001a      	movs	r2, r3
 8001678:	1dfb      	adds	r3, r7, #7
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d113      	bne.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001684:	2220      	movs	r2, #32
 8001686:	431a      	orrs	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2241      	movs	r2, #65	; 0x41
 8001690:	2120      	movs	r1, #32
 8001692:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2242      	movs	r2, #66	; 0x42
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2240      	movs	r2, #64	; 0x40
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e00f      	b.n	80016c8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	4013      	ands	r3, r2
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	425a      	negs	r2, r3
 80016b8:	4153      	adcs	r3, r2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	001a      	movs	r2, r3
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d0bf      	beq.n	8001646 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b004      	add	sp, #16
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2241      	movs	r2, #65	; 0x41
 80016de:	5c9b      	ldrb	r3, [r3, r2]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d138      	bne.n	8001758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2240      	movs	r2, #64	; 0x40
 80016ea:	5c9b      	ldrb	r3, [r3, r2]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e032      	b.n	800175a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2240      	movs	r2, #64	; 0x40
 80016f8:	2101      	movs	r1, #1
 80016fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2241      	movs	r2, #65	; 0x41
 8001700:	2124      	movs	r1, #36	; 0x24
 8001702:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2101      	movs	r1, #1
 8001710:	438a      	bics	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4911      	ldr	r1, [pc, #68]	; (8001764 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001720:	400a      	ands	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2241      	movs	r2, #65	; 0x41
 8001748:	2120      	movs	r1, #32
 800174a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	2100      	movs	r1, #0
 8001752:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	ffffefff 	.word	0xffffefff

08001768 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2241      	movs	r2, #65	; 0x41
 8001776:	5c9b      	ldrb	r3, [r3, r2]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b20      	cmp	r3, #32
 800177c:	d139      	bne.n	80017f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2240      	movs	r2, #64	; 0x40
 8001782:	5c9b      	ldrb	r3, [r3, r2]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001788:	2302      	movs	r3, #2
 800178a:	e033      	b.n	80017f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2240      	movs	r2, #64	; 0x40
 8001790:	2101      	movs	r1, #1
 8001792:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2241      	movs	r2, #65	; 0x41
 8001798:	2124      	movs	r1, #36	; 0x24
 800179a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2101      	movs	r1, #1
 80017a8:	438a      	bics	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2241      	movs	r2, #65	; 0x41
 80017e2:	2120      	movs	r1, #32
 80017e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	2100      	movs	r1, #0
 80017ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017f2:	2302      	movs	r3, #2
  }
}
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b004      	add	sp, #16
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	fffff0ff 	.word	0xfffff0ff

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	f000 fb76 	bl	8001f00 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	4013      	ands	r3, r2
 800181c:	d100      	bne.n	8001820 <HAL_RCC_OscConfig+0x20>
 800181e:	e08e      	b.n	800193e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001820:	4bc5      	ldr	r3, [pc, #788]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	220c      	movs	r2, #12
 8001826:	4013      	ands	r3, r2
 8001828:	2b04      	cmp	r3, #4
 800182a:	d00e      	beq.n	800184a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800182c:	4bc2      	ldr	r3, [pc, #776]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	220c      	movs	r2, #12
 8001832:	4013      	ands	r3, r2
 8001834:	2b08      	cmp	r3, #8
 8001836:	d117      	bne.n	8001868 <HAL_RCC_OscConfig+0x68>
 8001838:	4bbf      	ldr	r3, [pc, #764]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	23c0      	movs	r3, #192	; 0xc0
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	401a      	ands	r2, r3
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	025b      	lsls	r3, r3, #9
 8001846:	429a      	cmp	r2, r3
 8001848:	d10e      	bne.n	8001868 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	4bbb      	ldr	r3, [pc, #748]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	029b      	lsls	r3, r3, #10
 8001852:	4013      	ands	r3, r2
 8001854:	d100      	bne.n	8001858 <HAL_RCC_OscConfig+0x58>
 8001856:	e071      	b.n	800193c <HAL_RCC_OscConfig+0x13c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d000      	beq.n	8001862 <HAL_RCC_OscConfig+0x62>
 8001860:	e06c      	b.n	800193c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	f000 fb4c 	bl	8001f00 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x80>
 8001870:	4bb1      	ldr	r3, [pc, #708]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4bb0      	ldr	r3, [pc, #704]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	0249      	lsls	r1, r1, #9
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e02f      	b.n	80018e0 <HAL_RCC_OscConfig+0xe0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0xa2>
 8001888:	4bab      	ldr	r3, [pc, #684]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4baa      	ldr	r3, [pc, #680]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800188e:	49ab      	ldr	r1, [pc, #684]	; (8001b3c <HAL_RCC_OscConfig+0x33c>)
 8001890:	400a      	ands	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	4ba8      	ldr	r3, [pc, #672]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4ba7      	ldr	r3, [pc, #668]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800189a:	49a9      	ldr	r1, [pc, #676]	; (8001b40 <HAL_RCC_OscConfig+0x340>)
 800189c:	400a      	ands	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e01e      	b.n	80018e0 <HAL_RCC_OscConfig+0xe0>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10e      	bne.n	80018c8 <HAL_RCC_OscConfig+0xc8>
 80018aa:	4ba3      	ldr	r3, [pc, #652]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4ba2      	ldr	r3, [pc, #648]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	02c9      	lsls	r1, r1, #11
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4b9f      	ldr	r3, [pc, #636]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b9e      	ldr	r3, [pc, #632]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0249      	lsls	r1, r1, #9
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xe0>
 80018c8:	4b9b      	ldr	r3, [pc, #620]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b9a      	ldr	r3, [pc, #616]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018ce:	499b      	ldr	r1, [pc, #620]	; (8001b3c <HAL_RCC_OscConfig+0x33c>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	4b98      	ldr	r3, [pc, #608]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b97      	ldr	r3, [pc, #604]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80018da:	4999      	ldr	r1, [pc, #612]	; (8001b40 <HAL_RCC_OscConfig+0x340>)
 80018dc:	400a      	ands	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d014      	beq.n	8001912 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff f952 	bl	8000b90 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f2:	f7ff f94d 	bl	8000b90 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	; 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e2fd      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001904:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0xf2>
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff f93d 	bl	8000b90 <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff f938 	bl	8000b90 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e2e8      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	029b      	lsls	r3, r3, #10
 8001936:	4013      	ands	r3, r2
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x11c>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d100      	bne.n	800194a <HAL_RCC_OscConfig+0x14a>
 8001948:	e06c      	b.n	8001a24 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800194a:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	220c      	movs	r2, #12
 8001950:	4013      	ands	r3, r2
 8001952:	d00e      	beq.n	8001972 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001954:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	220c      	movs	r2, #12
 800195a:	4013      	ands	r3, r2
 800195c:	2b08      	cmp	r3, #8
 800195e:	d11f      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1a0>
 8001960:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	23c0      	movs	r3, #192	; 0xc0
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	401a      	ands	r2, r3
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	429a      	cmp	r2, r3
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x188>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e2bb      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	22f8      	movs	r2, #248	; 0xf8
 800198e:	4393      	bics	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00da      	lsls	r2, r3, #3
 8001998:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e041      	b.n	8001a24 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d024      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff f8ec 	bl	8000b90 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff f8e7 	bl	8000b90 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e297      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2202      	movs	r2, #2
 80019d6:	4013      	ands	r3, r2
 80019d8:	d0f1      	beq.n	80019be <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	22f8      	movs	r2, #248	; 0xf8
 80019e0:	4393      	bics	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	00da      	lsls	r2, r3, #3
 80019ea:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e018      	b.n	8001a24 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b51      	ldr	r3, [pc, #324]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 80019f8:	2101      	movs	r1, #1
 80019fa:	438a      	bics	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff f8c7 	bl	8000b90 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff f8c2 	bl	8000b90 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e272      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d1f1      	bne.n	8001a08 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d036      	beq.n	8001a9c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d019      	beq.n	8001a6a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff f8a5 	bl	8000b90 <HAL_GetTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f8a0 	bl	8000b90 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e250      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d0f1      	beq.n	8001a4c <HAL_RCC_OscConfig+0x24c>
 8001a68:	e018      	b.n	8001a9c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	438a      	bics	r2, r1
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff f88b 	bl	8000b90 <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff f886 	bl	8000b90 <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e236      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d1f1      	bne.n	8001a80 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d100      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x2a8>
 8001aa6:	e0b5      	b.n	8001c14 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa8:	201f      	movs	r0, #31
 8001aaa:	183b      	adds	r3, r7, r0
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	055b      	lsls	r3, r3, #21
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d110      	bne.n	8001ade <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001abe:	69da      	ldr	r2, [r3, #28]
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0549      	lsls	r1, r1, #21
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	61da      	str	r2, [r3, #28]
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	055b      	lsls	r3, r3, #21
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ad8:	183b      	adds	r3, r7, r0
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x344>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d11a      	bne.n	8001b20 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_RCC_OscConfig+0x344>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_RCC_OscConfig+0x344>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0049      	lsls	r1, r1, #1
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af8:	f7ff f84a 	bl	8000b90 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7ff f845 	bl	8000b90 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1f5      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_OscConfig+0x344>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10f      	bne.n	8001b48 <HAL_RCC_OscConfig+0x348>
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001b2a:	6a1a      	ldr	r2, [r3, #32]
 8001b2c:	4b02      	ldr	r3, [pc, #8]	; (8001b38 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	621a      	str	r2, [r3, #32]
 8001b34:	e036      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3a4>
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	fffeffff 	.word	0xfffeffff
 8001b40:	fffbffff 	.word	0xfffbffff
 8001b44:	40007000 	.word	0x40007000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x36a>
 8001b50:	4bca      	ldr	r3, [pc, #808]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	4bc9      	ldr	r3, [pc, #804]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	438a      	bics	r2, r1
 8001b5a:	621a      	str	r2, [r3, #32]
 8001b5c:	4bc7      	ldr	r3, [pc, #796]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	6a1a      	ldr	r2, [r3, #32]
 8001b60:	4bc6      	ldr	r3, [pc, #792]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b62:	2104      	movs	r1, #4
 8001b64:	438a      	bics	r2, r1
 8001b66:	621a      	str	r2, [r3, #32]
 8001b68:	e01c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3a4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x38c>
 8001b72:	4bc2      	ldr	r3, [pc, #776]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b74:	6a1a      	ldr	r2, [r3, #32]
 8001b76:	4bc1      	ldr	r3, [pc, #772]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b78:	2104      	movs	r1, #4
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	621a      	str	r2, [r3, #32]
 8001b7e:	4bbf      	ldr	r3, [pc, #764]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b80:	6a1a      	ldr	r2, [r3, #32]
 8001b82:	4bbe      	ldr	r3, [pc, #760]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	621a      	str	r2, [r3, #32]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3a4>
 8001b8c:	4bbb      	ldr	r3, [pc, #748]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
 8001b90:	4bba      	ldr	r3, [pc, #744]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	438a      	bics	r2, r1
 8001b96:	621a      	str	r2, [r3, #32]
 8001b98:	4bb8      	ldr	r3, [pc, #736]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	4bb7      	ldr	r3, [pc, #732]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d014      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7fe fff0 	bl	8000b90 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	e009      	b.n	8001bca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7fe ffeb 	bl	8000b90 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4aaf      	ldr	r2, [pc, #700]	; (8001e80 <HAL_RCC_OscConfig+0x680>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e19a      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	4bac      	ldr	r3, [pc, #688]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3b6>
 8001bd4:	e013      	b.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe ffdb 	bl	8000b90 <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	e009      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7fe ffd6 	bl	8000b90 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	4aa5      	ldr	r2, [pc, #660]	; (8001e80 <HAL_RCC_OscConfig+0x680>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e185      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	4ba1      	ldr	r3, [pc, #644]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bfe:	231f      	movs	r3, #31
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c08:	4b9c      	ldr	r3, [pc, #624]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c0a:	69da      	ldr	r2, [r3, #28]
 8001c0c:	4b9b      	ldr	r3, [pc, #620]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c0e:	499d      	ldr	r1, [pc, #628]	; (8001e84 <HAL_RCC_OscConfig+0x684>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2210      	movs	r2, #16
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d063      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d12a      	bne.n	8001c7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c26:	4b95      	ldr	r3, [pc, #596]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c32:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c36:	4b91      	ldr	r3, [pc, #580]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c38:	2101      	movs	r1, #1
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7fe ffa7 	bl	8000b90 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c48:	f7fe ffa2 	bl	8000b90 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e152      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c5a:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d0f1      	beq.n	8001c48 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c64:	4b85      	ldr	r3, [pc, #532]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	22f8      	movs	r2, #248	; 0xf8
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	00da      	lsls	r2, r3, #3
 8001c74:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c76:	430a      	orrs	r2, r1
 8001c78:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7a:	e034      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	3305      	adds	r3, #5
 8001c82:	d111      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c84:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c88:	4b7c      	ldr	r3, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c90:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	22f8      	movs	r2, #248	; 0xf8
 8001c96:	4393      	bics	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	00da      	lsls	r2, r3, #3
 8001ca0:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca6:	e01e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ca8:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cae:	2104      	movs	r1, #4
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001cb4:	4b71      	ldr	r3, [pc, #452]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb8:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7fe ff66 	bl	8000b90 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cca:	f7fe ff61 	bl	8000b90 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e111      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cdc:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f1      	bne.n	8001cca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2220      	movs	r2, #32
 8001cec:	4013      	ands	r3, r2
 8001cee:	d05c      	beq.n	8001daa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cf0:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	d00e      	beq.n	8001d1a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cfc:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	220c      	movs	r2, #12
 8001d02:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d114      	bne.n	8001d32 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d08:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	23c0      	movs	r3, #192	; 0xc0
 8001d0e:	025b      	lsls	r3, r3, #9
 8001d10:	401a      	ands	r2, r3
 8001d12:	23c0      	movs	r3, #192	; 0xc0
 8001d14:	025b      	lsls	r3, r3, #9
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d10b      	bne.n	8001d32 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d1a:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	4013      	ands	r3, r2
 8001d24:	d040      	beq.n	8001da8 <HAL_RCC_OscConfig+0x5a8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d03c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0e6      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d01b      	beq.n	8001d72 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d3a:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	0249      	lsls	r1, r1, #9
 8001d44:	430a      	orrs	r2, r1
 8001d46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe ff22 	bl	8000b90 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d52:	f7fe ff1d 	bl	8000b90 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0cd      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d64:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x552>
 8001d70:	e01b      	b.n	8001daa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d72:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d78:	4943      	ldr	r1, [pc, #268]	; (8001e88 <HAL_RCC_OscConfig+0x688>)
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe ff07 	bl	8000b90 <HAL_GetTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d88:	f7fe ff02 	bl	8000b90 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e0b2      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d9a:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	029b      	lsls	r3, r3, #10
 8001da2:	4013      	ands	r3, r2
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x588>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001da8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d100      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5b4>
 8001db2:	e0a4      	b.n	8001efe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db4:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	220c      	movs	r2, #12
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d100      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x5c2>
 8001dc0:	e078      	b.n	8001eb4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d14c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001dd0:	492e      	ldr	r1, [pc, #184]	; (8001e8c <HAL_RCC_OscConfig+0x68c>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe fedb 	bl	8000b90 <HAL_GetTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de0:	f7fe fed6 	bl	8000b90 <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e086      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	049b      	lsls	r3, r3, #18
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	220f      	movs	r2, #15
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <HAL_RCC_OscConfig+0x690>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	431a      	orrs	r2, r3
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	0449      	lsls	r1, r1, #17
 8001e36:	430a      	orrs	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fea9 	bl	8000b90 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe fea4 	bl	8000b90 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e054      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	049b      	lsls	r3, r3, #18
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x644>
 8001e62:	e04c      	b.n	8001efe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <HAL_RCC_OscConfig+0x68c>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7fe fe8e 	bl	8000b90 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x6a6>
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	00001388 	.word	0x00001388
 8001e84:	efffffff 	.word	0xefffffff
 8001e88:	fffeffff 	.word	0xfffeffff
 8001e8c:	feffffff 	.word	0xfeffffff
 8001e90:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7fe fe7c 	bl	8000b90 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e02c      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_RCC_OscConfig+0x708>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	049b      	lsls	r3, r3, #18
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x694>
 8001eb2:	e024      	b.n	8001efe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e01f      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_RCC_OscConfig+0x708>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_OscConfig+0x708>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	23c0      	movs	r3, #192	; 0xc0
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10e      	bne.n	8001efa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	220f      	movs	r2, #15
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	23f0      	movs	r3, #240	; 0xf0
 8001eee:	039b      	lsls	r3, r3, #14
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b008      	add	sp, #32
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0bf      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d911      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0a6      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d015      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2204      	movs	r2, #4
 8001f62:	4013      	ands	r3, r2
 8001f64:	d006      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f66:	4b51      	ldr	r3, [pc, #324]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f6c:	21e0      	movs	r1, #224	; 0xe0
 8001f6e:	00c9      	lsls	r1, r1, #3
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b4d      	ldr	r3, [pc, #308]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	22f0      	movs	r2, #240	; 0xf0
 8001f7a:	4393      	bics	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d04c      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b44      	ldr	r3, [pc, #272]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	029b      	lsls	r3, r3, #10
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d120      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07a      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb2:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	049b      	lsls	r3, r3, #18
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d114      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06e      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fca:	4b38      	ldr	r3, [pc, #224]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e062      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e05b      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe8:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2203      	movs	r2, #3
 8001fee:	4393      	bics	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fdc8 	bl	8000b90 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002004:	e009      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7fe fdc3 	bl	8000b90 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_RCC_ClockConfig+0x1a4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e042      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	220c      	movs	r2, #12
 8002020:	401a      	ands	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1ec      	bne.n	8002006 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	4013      	ands	r3, r2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d211      	bcs.n	800205e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	4393      	bics	r3, r2
 8002042:	0019      	movs	r1, r3
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x19c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e020      	b.n	80020a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2204      	movs	r2, #4
 8002064:	4013      	ands	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <HAL_RCC_ClockConfig+0x1a8>)
 800206e:	4013      	ands	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800207c:	f000 f820 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8002080:	0001      	movs	r1, r0
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1a0>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	220f      	movs	r2, #15
 800208a:	4013      	ands	r3, r2
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x1ac>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	000a      	movs	r2, r1
 8002092:	40da      	lsrs	r2, r3
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1b0>)
 8002096:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002098:	2003      	movs	r0, #3
 800209a:	f7fe fd33 	bl	8000b04 <HAL_InitTick>
  
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40022000 	.word	0x40022000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	00001388 	.word	0x00001388
 80020b4:	fffff8ff 	.word	0xfffff8ff
 80020b8:	08003298 	.word	0x08003298
 80020bc:	20000000 	.word	0x20000000

080020c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	220c      	movs	r2, #12
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d046      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0xb8>
 80020ea:	d848      	bhi.n	800217e <HAL_RCC_GetSysClockFreq+0xbe>
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d002      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x36>
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d003      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x3c>
 80020f4:	e043      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd4>)
 80020f8:	613b      	str	r3, [r7, #16]
      break;
 80020fa:	e043      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	0c9b      	lsrs	r3, r3, #18
 8002100:	220f      	movs	r2, #15
 8002102:	4013      	ands	r3, r2
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_RCC_GetSysClockFreq+0xd0>)
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	220f      	movs	r2, #15
 8002110:	4013      	ands	r3, r2
 8002112:	4a22      	ldr	r2, [pc, #136]	; (800219c <HAL_RCC_GetSysClockFreq+0xdc>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	23c0      	movs	r3, #192	; 0xc0
 800211c:	025b      	lsls	r3, r3, #9
 800211e:	401a      	ands	r2, r3
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	025b      	lsls	r3, r3, #9
 8002124:	429a      	cmp	r2, r3
 8002126:	d109      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	481a      	ldr	r0, [pc, #104]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd4>)
 800212c:	f7fd ffea 	bl	8000104 <__udivsi3>
 8002130:	0003      	movs	r3, r0
 8002132:	001a      	movs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4353      	muls	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e01a      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	23c0      	movs	r3, #192	; 0xc0
 8002140:	025b      	lsls	r3, r3, #9
 8002142:	401a      	ands	r2, r3
 8002144:	23c0      	movs	r3, #192	; 0xc0
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	429a      	cmp	r2, r3
 800214a:	d109      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	4814      	ldr	r0, [pc, #80]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002150:	f7fd ffd8 	bl	8000104 <__udivsi3>
 8002154:	0003      	movs	r3, r0
 8002156:	001a      	movs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4353      	muls	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e008      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002164:	f7fd ffce 	bl	8000104 <__udivsi3>
 8002168:	0003      	movs	r3, r0
 800216a:	001a      	movs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4353      	muls	r3, r2
 8002170:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	613b      	str	r3, [r7, #16]
      break;
 8002176:	e005      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800217a:	613b      	str	r3, [r7, #16]
      break;
 800217c:	e002      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002180:	613b      	str	r3, [r7, #16]
      break;
 8002182:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002184:	693b      	ldr	r3, [r7, #16]
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b006      	add	sp, #24
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	080032a8 	.word	0x080032a8
 800219c:	080032b8 	.word	0x080032b8
 80021a0:	02dc6c00 	.word	0x02dc6c00

080021a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	025b      	lsls	r3, r3, #9
 80021bc:	4013      	ands	r3, r2
 80021be:	d100      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80021c0:	e08e      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2017      	movs	r0, #23
 80021c4:	183b      	adds	r3, r7, r0
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ca:	4b6e      	ldr	r3, [pc, #440]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	055b      	lsls	r3, r3, #21
 80021d2:	4013      	ands	r3, r2
 80021d4:	d110      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b6b      	ldr	r3, [pc, #428]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	0549      	lsls	r1, r1, #21
 80021e0:	430a      	orrs	r2, r1
 80021e2:	61da      	str	r2, [r3, #28]
 80021e4:	4b67      	ldr	r3, [pc, #412]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f2:	183b      	adds	r3, r7, r0
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4013      	ands	r3, r2
 8002202:	d11a      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002204:	4b60      	ldr	r3, [pc, #384]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b5f      	ldr	r3, [pc, #380]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	0049      	lsls	r1, r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe fcbd 	bl	8000b90 <HAL_GetTick>
 8002216:	0003      	movs	r3, r0
 8002218:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	e008      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7fe fcb8 	bl	8000b90 <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0a6      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b56      	ldr	r3, [pc, #344]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d0f0      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800223a:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800223c:	6a1a      	ldr	r2, [r3, #32]
 800223e:	23c0      	movs	r3, #192	; 0xc0
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4013      	ands	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d034      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	23c0      	movs	r3, #192	; 0xc0
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4013      	ands	r3, r2
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d02c      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800225c:	4b49      	ldr	r3, [pc, #292]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a4a      	ldr	r2, [pc, #296]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002262:	4013      	ands	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002268:	6a1a      	ldr	r2, [r3, #32]
 800226a:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	0249      	lsls	r1, r1, #9
 8002270:	430a      	orrs	r2, r1
 8002272:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	4b42      	ldr	r3, [pc, #264]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800227a:	4945      	ldr	r1, [pc, #276]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800227c:	400a      	ands	r2, r1
 800227e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002280:	4b40      	ldr	r3, [pc, #256]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	4013      	ands	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe fc7f 	bl	8000b90 <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002296:	e009      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7fe fc7a 	bl	8000b90 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	4a3c      	ldr	r2, [pc, #240]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e067      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	4b35      	ldr	r3, [pc, #212]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4a34      	ldr	r2, [pc, #208]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80022bc:	4013      	ands	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ca:	2317      	movs	r3, #23
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022da:	492f      	ldr	r1, [pc, #188]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80022dc:	400a      	ands	r2, r1
 80022de:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	2203      	movs	r2, #3
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2202      	movs	r2, #2
 8002304:	4013      	ands	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4a23      	ldr	r2, [pc, #140]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002318:	430a      	orrs	r2, r1
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	02db      	lsls	r3, r3, #11
 8002324:	4013      	ands	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002338:	430a      	orrs	r2, r1
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2220      	movs	r2, #32
 8002342:	4013      	ands	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	2210      	movs	r2, #16
 800234c:	4393      	bics	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002356:	430a      	orrs	r2, r1
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4013      	ands	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	4393      	bics	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002376:	430a      	orrs	r2, r1
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b006      	add	sp, #24
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	40007000 	.word	0x40007000
 800238c:	fffffcff 	.word	0xfffffcff
 8002390:	fffeffff 	.word	0xfffeffff
 8002394:	00001388 	.word	0x00001388
 8002398:	efffffff 	.word	0xefffffff
 800239c:	fffcffff 	.word	0xfffcffff
 80023a0:	fff3ffff 	.word	0xfff3ffff

080023a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e042      	b.n	800243c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	223d      	movs	r2, #61	; 0x3d
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	223c      	movs	r2, #60	; 0x3c
 80023c6:	2100      	movs	r1, #0
 80023c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7fe fa91 	bl	80008f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	223d      	movs	r2, #61	; 0x3d
 80023d6:	2102      	movs	r1, #2
 80023d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	0019      	movs	r1, r3
 80023e4:	0010      	movs	r0, r2
 80023e6:	f000 fb87 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2246      	movs	r2, #70	; 0x46
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	223e      	movs	r2, #62	; 0x3e
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	223f      	movs	r2, #63	; 0x3f
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2240      	movs	r2, #64	; 0x40
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2241      	movs	r2, #65	; 0x41
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2242      	movs	r2, #66	; 0x42
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2243      	movs	r2, #67	; 0x43
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2244      	movs	r2, #68	; 0x44
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2245      	movs	r2, #69	; 0x45
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	223d      	movs	r2, #61	; 0x3d
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e042      	b.n	80024dc <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	223d      	movs	r2, #61	; 0x3d
 800245a:	5c9b      	ldrb	r3, [r3, r2]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	223c      	movs	r2, #60	; 0x3c
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	0018      	movs	r0, r3
 800246e:	f000 f839 	bl	80024e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	223d      	movs	r2, #61	; 0x3d
 8002476:	2102      	movs	r1, #2
 8002478:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	0019      	movs	r1, r3
 8002484:	0010      	movs	r0, r2
 8002486:	f000 fb37 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2246      	movs	r2, #70	; 0x46
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	223e      	movs	r2, #62	; 0x3e
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	223f      	movs	r2, #63	; 0x3f
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2240      	movs	r2, #64	; 0x40
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2241      	movs	r2, #65	; 0x41
 80024ae:	2101      	movs	r1, #1
 80024b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2242      	movs	r2, #66	; 0x42
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2243      	movs	r2, #67	; 0x43
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2244      	movs	r2, #68	; 0x44
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2245      	movs	r2, #69	; 0x45
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	223d      	movs	r2, #61	; 0x3d
 80024d6:	2101      	movs	r1, #1
 80024d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b002      	add	sp, #8
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e042      	b.n	800258c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	223d      	movs	r2, #61	; 0x3d
 800250a:	5c9b      	ldrb	r3, [r3, r2]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d107      	bne.n	8002522 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	223c      	movs	r2, #60	; 0x3c
 8002516:	2100      	movs	r1, #0
 8002518:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	0018      	movs	r0, r3
 800251e:	f000 f839 	bl	8002594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	223d      	movs	r2, #61	; 0x3d
 8002526:	2102      	movs	r1, #2
 8002528:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	0019      	movs	r1, r3
 8002534:	0010      	movs	r0, r2
 8002536:	f000 fadf 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2246      	movs	r2, #70	; 0x46
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	223e      	movs	r2, #62	; 0x3e
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	223f      	movs	r2, #63	; 0x3f
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2240      	movs	r2, #64	; 0x40
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2241      	movs	r2, #65	; 0x41
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2242      	movs	r2, #66	; 0x42
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2243      	movs	r2, #67	; 0x43
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2244      	movs	r2, #68	; 0x44
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2245      	movs	r2, #69	; 0x45
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	223d      	movs	r2, #61	; 0x3d
 8002586:	2101      	movs	r1, #1
 8002588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d108      	bne.n	80025c6 <HAL_TIM_PWM_Start+0x22>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	223e      	movs	r2, #62	; 0x3e
 80025b8:	5c9b      	ldrb	r3, [r3, r2]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	1e5a      	subs	r2, r3, #1
 80025c0:	4193      	sbcs	r3, r2
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e01f      	b.n	8002606 <HAL_TIM_PWM_Start+0x62>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d108      	bne.n	80025de <HAL_TIM_PWM_Start+0x3a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	223f      	movs	r2, #63	; 0x3f
 80025d0:	5c9b      	ldrb	r3, [r3, r2]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	1e5a      	subs	r2, r3, #1
 80025d8:	4193      	sbcs	r3, r2
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	e013      	b.n	8002606 <HAL_TIM_PWM_Start+0x62>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d108      	bne.n	80025f6 <HAL_TIM_PWM_Start+0x52>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	5c9b      	ldrb	r3, [r3, r2]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	1e5a      	subs	r2, r3, #1
 80025f0:	4193      	sbcs	r3, r2
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	e007      	b.n	8002606 <HAL_TIM_PWM_Start+0x62>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2241      	movs	r2, #65	; 0x41
 80025fa:	5c9b      	ldrb	r3, [r3, r2]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	4193      	sbcs	r3, r2
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e074      	b.n	80026f8 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d104      	bne.n	800261e <HAL_TIM_PWM_Start+0x7a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	223e      	movs	r2, #62	; 0x3e
 8002618:	2102      	movs	r1, #2
 800261a:	5499      	strb	r1, [r3, r2]
 800261c:	e013      	b.n	8002646 <HAL_TIM_PWM_Start+0xa2>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d104      	bne.n	800262e <HAL_TIM_PWM_Start+0x8a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	223f      	movs	r2, #63	; 0x3f
 8002628:	2102      	movs	r1, #2
 800262a:	5499      	strb	r1, [r3, r2]
 800262c:	e00b      	b.n	8002646 <HAL_TIM_PWM_Start+0xa2>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d104      	bne.n	800263e <HAL_TIM_PWM_Start+0x9a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2240      	movs	r2, #64	; 0x40
 8002638:	2102      	movs	r1, #2
 800263a:	5499      	strb	r1, [r3, r2]
 800263c:	e003      	b.n	8002646 <HAL_TIM_PWM_Start+0xa2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2241      	movs	r2, #65	; 0x41
 8002642:	2102      	movs	r1, #2
 8002644:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	2201      	movs	r2, #1
 800264e:	0018      	movs	r0, r3
 8002650:	f000 fd68 	bl	8003124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a29      	ldr	r2, [pc, #164]	; (8002700 <HAL_TIM_PWM_Start+0x15c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00e      	beq.n	800267c <HAL_TIM_PWM_Start+0xd8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a28      	ldr	r2, [pc, #160]	; (8002704 <HAL_TIM_PWM_Start+0x160>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d009      	beq.n	800267c <HAL_TIM_PWM_Start+0xd8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a26      	ldr	r2, [pc, #152]	; (8002708 <HAL_TIM_PWM_Start+0x164>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_TIM_PWM_Start+0xd8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a25      	ldr	r2, [pc, #148]	; (800270c <HAL_TIM_PWM_Start+0x168>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_TIM_PWM_Start+0xdc>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_TIM_PWM_Start+0xde>
 8002680:	2300      	movs	r3, #0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	0209      	lsls	r1, r1, #8
 8002694:	430a      	orrs	r2, r1
 8002696:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_TIM_PWM_Start+0x15c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00f      	beq.n	80026c2 <HAL_TIM_PWM_Start+0x11e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	05db      	lsls	r3, r3, #23
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d009      	beq.n	80026c2 <HAL_TIM_PWM_Start+0x11e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a17      	ldr	r2, [pc, #92]	; (8002710 <HAL_TIM_PWM_Start+0x16c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_TIM_PWM_Start+0x11e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_TIM_PWM_Start+0x160>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d111      	bne.n	80026e6 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2207      	movs	r2, #7
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d010      	beq.n	80026f6 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2101      	movs	r1, #1
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e4:	e007      	b.n	80026f6 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2101      	movs	r1, #1
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b004      	add	sp, #16
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40014000 	.word	0x40014000
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800
 8002710:	40000400 	.word	0x40000400

08002714 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002720:	2317      	movs	r3, #23
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	223c      	movs	r2, #60	; 0x3c
 800272c:	5c9b      	ldrb	r3, [r3, r2]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_TIM_OC_ConfigChannel+0x22>
 8002732:	2302      	movs	r3, #2
 8002734:	e042      	b.n	80027bc <HAL_TIM_OC_ConfigChannel+0xa8>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	223c      	movs	r2, #60	; 0x3c
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0c      	cmp	r3, #12
 8002742:	d027      	beq.n	8002794 <HAL_TIM_OC_ConfigChannel+0x80>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d82c      	bhi.n	80027a4 <HAL_TIM_OC_ConfigChannel+0x90>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d019      	beq.n	8002784 <HAL_TIM_OC_ConfigChannel+0x70>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b08      	cmp	r3, #8
 8002754:	d826      	bhi.n	80027a4 <HAL_TIM_OC_ConfigChannel+0x90>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_TIM_OC_ConfigChannel+0x50>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d008      	beq.n	8002774 <HAL_TIM_OC_ConfigChannel+0x60>
 8002762:	e01f      	b.n	80027a4 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	0011      	movs	r1, r2
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fa43 	bl	8002bf8 <TIM_OC1_SetConfig>
      break;
 8002772:	e01c      	b.n	80027ae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	0011      	movs	r1, r2
 800277c:	0018      	movs	r0, r3
 800277e:	f000 fac3 	bl	8002d08 <TIM_OC2_SetConfig>
      break;
 8002782:	e014      	b.n	80027ae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	0011      	movs	r1, r2
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fb3f 	bl	8002e10 <TIM_OC3_SetConfig>
      break;
 8002792:	e00c      	b.n	80027ae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	0011      	movs	r1, r2
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fbbd 	bl	8002f1c <TIM_OC4_SetConfig>
      break;
 80027a2:	e004      	b.n	80027ae <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80027a4:	2317      	movs	r3, #23
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
      break;
 80027ac:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	223c      	movs	r2, #60	; 0x3c
 80027b2:	2100      	movs	r1, #0
 80027b4:	5499      	strb	r1, [r3, r2]

  return status;
 80027b6:	2317      	movs	r3, #23
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	781b      	ldrb	r3, [r3, #0]
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b006      	add	sp, #24
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d0:	2317      	movs	r3, #23
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	223c      	movs	r2, #60	; 0x3c
 80027dc:	5c9b      	ldrb	r3, [r3, r2]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0ad      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	223c      	movs	r2, #60	; 0x3c
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b0c      	cmp	r3, #12
 80027f2:	d100      	bne.n	80027f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80027f4:	e076      	b.n	80028e4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d900      	bls.n	80027fe <HAL_TIM_PWM_ConfigChannel+0x3a>
 80027fc:	e095      	b.n	800292a <HAL_TIM_PWM_ConfigChannel+0x166>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d04e      	beq.n	80028a2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d900      	bls.n	800280c <HAL_TIM_PWM_ConfigChannel+0x48>
 800280a:	e08e      	b.n	800292a <HAL_TIM_PWM_ConfigChannel+0x166>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d021      	beq.n	800285c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002818:	e087      	b.n	800292a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	0011      	movs	r1, r2
 8002822:	0018      	movs	r0, r3
 8002824:	f000 f9e8 	bl	8002bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2108      	movs	r1, #8
 8002834:	430a      	orrs	r2, r1
 8002836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2104      	movs	r1, #4
 8002844:	438a      	bics	r2, r1
 8002846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6999      	ldr	r1, [r3, #24]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	619a      	str	r2, [r3, #24]
      break;
 800285a:	e06b      	b.n	8002934 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	0011      	movs	r1, r2
 8002864:	0018      	movs	r0, r3
 8002866:	f000 fa4f 	bl	8002d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	0109      	lsls	r1, r1, #4
 8002878:	430a      	orrs	r2, r1
 800287a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4931      	ldr	r1, [pc, #196]	; (800294c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002888:	400a      	ands	r2, r1
 800288a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6999      	ldr	r1, [r3, #24]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	021a      	lsls	r2, r3, #8
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	619a      	str	r2, [r3, #24]
      break;
 80028a0:	e048      	b.n	8002934 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	0011      	movs	r1, r2
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 fab0 	bl	8002e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2108      	movs	r1, #8
 80028bc:	430a      	orrs	r2, r1
 80028be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2104      	movs	r1, #4
 80028cc:	438a      	bics	r2, r1
 80028ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69d9      	ldr	r1, [r3, #28]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	61da      	str	r2, [r3, #28]
      break;
 80028e2:	e027      	b.n	8002934 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 fb15 	bl	8002f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	0109      	lsls	r1, r1, #4
 8002900:	430a      	orrs	r2, r1
 8002902:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	490f      	ldr	r1, [pc, #60]	; (800294c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002910:	400a      	ands	r2, r1
 8002912:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69d9      	ldr	r1, [r3, #28]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	021a      	lsls	r2, r3, #8
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	61da      	str	r2, [r3, #28]
      break;
 8002928:	e004      	b.n	8002934 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800292a:	2317      	movs	r3, #23
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
      break;
 8002932:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	223c      	movs	r2, #60	; 0x3c
 8002938:	2100      	movs	r1, #0
 800293a:	5499      	strb	r1, [r3, r2]

  return status;
 800293c:	2317      	movs	r3, #23
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	781b      	ldrb	r3, [r3, #0]
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b006      	add	sp, #24
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	fffffbff 	.word	0xfffffbff

08002950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	230f      	movs	r3, #15
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	223c      	movs	r2, #60	; 0x3c
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_TIM_ConfigClockSource+0x20>
 800296c:	2302      	movs	r3, #2
 800296e:	e0bc      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x19a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	223c      	movs	r2, #60	; 0x3c
 8002974:	2101      	movs	r1, #1
 8002976:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	223d      	movs	r2, #61	; 0x3d
 800297c:	2102      	movs	r1, #2
 800297e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2277      	movs	r2, #119	; 0x77
 800298c:	4393      	bics	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0192      	lsls	r2, r2, #6
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d040      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0xde>
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	0192      	lsls	r2, r2, #6
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d900      	bls.n	80029b6 <HAL_TIM_ConfigClockSource+0x66>
 80029b4:	e088      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x178>
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	0152      	lsls	r2, r2, #5
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d100      	bne.n	80029c0 <HAL_TIM_ConfigClockSource+0x70>
 80029be:	e088      	b.n	8002ad2 <HAL_TIM_ConfigClockSource+0x182>
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	0152      	lsls	r2, r2, #5
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d900      	bls.n	80029ca <HAL_TIM_ConfigClockSource+0x7a>
 80029c8:	e07e      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x178>
 80029ca:	2b70      	cmp	r3, #112	; 0x70
 80029cc:	d018      	beq.n	8002a00 <HAL_TIM_ConfigClockSource+0xb0>
 80029ce:	d900      	bls.n	80029d2 <HAL_TIM_ConfigClockSource+0x82>
 80029d0:	e07a      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x178>
 80029d2:	2b60      	cmp	r3, #96	; 0x60
 80029d4:	d04f      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x126>
 80029d6:	d900      	bls.n	80029da <HAL_TIM_ConfigClockSource+0x8a>
 80029d8:	e076      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x178>
 80029da:	2b50      	cmp	r3, #80	; 0x50
 80029dc:	d03b      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x106>
 80029de:	d900      	bls.n	80029e2 <HAL_TIM_ConfigClockSource+0x92>
 80029e0:	e072      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x178>
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d057      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x146>
 80029e6:	d900      	bls.n	80029ea <HAL_TIM_ConfigClockSource+0x9a>
 80029e8:	e06e      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x178>
 80029ea:	2b30      	cmp	r3, #48	; 0x30
 80029ec:	d063      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x166>
 80029ee:	d86b      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x178>
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d060      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x166>
 80029f4:	d868      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x178>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d05d      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x166>
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d05b      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x166>
 80029fe:	e063      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a10:	f000 fb68 	bl	80030e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2277      	movs	r2, #119	; 0x77
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	609a      	str	r2, [r3, #8]
      break;
 8002a2c:	e052      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a3e:	f000 fb51 	bl	80030e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	01c9      	lsls	r1, r1, #7
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
      break;
 8002a54:	e03e      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a62:	001a      	movs	r2, r3
 8002a64:	f000 fac4 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2150      	movs	r1, #80	; 0x50
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 fb1e 	bl	80030b0 <TIM_ITRx_SetConfig>
      break;
 8002a74:	e02e      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a82:	001a      	movs	r2, r3
 8002a84:	f000 fae2 	bl	800304c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2160      	movs	r1, #96	; 0x60
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 fb0e 	bl	80030b0 <TIM_ITRx_SetConfig>
      break;
 8002a94:	e01e      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	f000 faa4 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2140      	movs	r1, #64	; 0x40
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 fafe 	bl	80030b0 <TIM_ITRx_SetConfig>
      break;
 8002ab4:	e00e      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0019      	movs	r1, r3
 8002ac0:	0010      	movs	r0, r2
 8002ac2:	f000 faf5 	bl	80030b0 <TIM_ITRx_SetConfig>
      break;
 8002ac6:	e005      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ac8:	230f      	movs	r3, #15
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
      break;
 8002ad0:	e000      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002ad2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223d      	movs	r2, #61	; 0x3d
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	223c      	movs	r2, #60	; 0x3c
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]

  return status;
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	781b      	ldrb	r3, [r3, #0]
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b004      	add	sp, #16
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	ffff00ff 	.word	0xffff00ff

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <TIM_Base_SetConfig+0xe4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d008      	beq.n	8002b22 <TIM_Base_SetConfig+0x2a>
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	05db      	lsls	r3, r3, #23
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d003      	beq.n	8002b22 <TIM_Base_SetConfig+0x2a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <TIM_Base_SetConfig+0xe8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d108      	bne.n	8002b34 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2270      	movs	r2, #112	; 0x70
 8002b26:	4393      	bics	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <TIM_Base_SetConfig+0xe4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d018      	beq.n	8002b6e <TIM_Base_SetConfig+0x76>
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	05db      	lsls	r3, r3, #23
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d013      	beq.n	8002b6e <TIM_Base_SetConfig+0x76>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <TIM_Base_SetConfig+0xe8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00f      	beq.n	8002b6e <TIM_Base_SetConfig+0x76>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <TIM_Base_SetConfig+0xec>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <TIM_Base_SetConfig+0x76>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a23      	ldr	r2, [pc, #140]	; (8002be8 <TIM_Base_SetConfig+0xf0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0x76>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <TIM_Base_SetConfig+0xf4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0x76>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <TIM_Base_SetConfig+0xf8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <TIM_Base_SetConfig+0xfc>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	4393      	bics	r3, r2
 8002b86:	001a      	movs	r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <TIM_Base_SetConfig+0xe4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00b      	beq.n	8002bc6 <TIM_Base_SetConfig+0xce>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <TIM_Base_SetConfig+0xf0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <TIM_Base_SetConfig+0xce>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <TIM_Base_SetConfig+0xf4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d003      	beq.n	8002bc6 <TIM_Base_SetConfig+0xce>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <TIM_Base_SetConfig+0xf8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d103      	bne.n	8002bce <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	615a      	str	r2, [r3, #20]
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b004      	add	sp, #16
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40002000 	.word	0x40002000
 8002be8:	40014000 	.word	0x40014000
 8002bec:	40014400 	.word	0x40014400
 8002bf0:	40014800 	.word	0x40014800
 8002bf4:	fffffcff 	.word	0xfffffcff

08002bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	2201      	movs	r2, #1
 8002c08:	4393      	bics	r3, r2
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2270      	movs	r2, #112	; 0x70
 8002c26:	4393      	bics	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4393      	bics	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	4393      	bics	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <TIM_OC1_SetConfig+0xf8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_OC1_SetConfig+0x76>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <TIM_OC1_SetConfig+0xfc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <TIM_OC1_SetConfig+0x76>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <TIM_OC1_SetConfig+0x100>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_OC1_SetConfig+0x76>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <TIM_OC1_SetConfig+0x104>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10c      	bne.n	8002c88 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2208      	movs	r2, #8
 8002c72:	4393      	bics	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2204      	movs	r2, #4
 8002c84:	4393      	bics	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <TIM_OC1_SetConfig+0xf8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00b      	beq.n	8002ca8 <TIM_OC1_SetConfig+0xb0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <TIM_OC1_SetConfig+0xfc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <TIM_OC1_SetConfig+0xb0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <TIM_OC1_SetConfig+0x100>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d003      	beq.n	8002ca8 <TIM_OC1_SetConfig+0xb0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <TIM_OC1_SetConfig+0x104>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d111      	bne.n	8002ccc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <TIM_OC1_SetConfig+0x108>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <TIM_OC1_SetConfig+0x10c>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	621a      	str	r2, [r3, #32]
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b006      	add	sp, #24
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800
 8002d00:	fffffeff 	.word	0xfffffeff
 8002d04:	fffffdff 	.word	0xfffffdff

08002d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	2210      	movs	r2, #16
 8002d18:	4393      	bics	r3, r2
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a2e      	ldr	r2, [pc, #184]	; (8002df0 <TIM_OC2_SetConfig+0xe8>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <TIM_OC2_SetConfig+0xec>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2220      	movs	r2, #32
 8002d52:	4393      	bics	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a24      	ldr	r2, [pc, #144]	; (8002df8 <TIM_OC2_SetConfig+0xf0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10d      	bne.n	8002d86 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	4393      	bics	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	4393      	bics	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <TIM_OC2_SetConfig+0xf0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00b      	beq.n	8002da6 <TIM_OC2_SetConfig+0x9e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a1a      	ldr	r2, [pc, #104]	; (8002dfc <TIM_OC2_SetConfig+0xf4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <TIM_OC2_SetConfig+0x9e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <TIM_OC2_SetConfig+0xf8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <TIM_OC2_SetConfig+0x9e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <TIM_OC2_SetConfig+0xfc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d113      	bne.n	8002dce <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <TIM_OC2_SetConfig+0x100>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <TIM_OC2_SetConfig+0x104>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	621a      	str	r2, [r3, #32]
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b006      	add	sp, #24
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	ffff8fff 	.word	0xffff8fff
 8002df4:	fffffcff 	.word	0xfffffcff
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40014400 	.word	0x40014400
 8002e04:	40014800 	.word	0x40014800
 8002e08:	fffffbff 	.word	0xfffffbff
 8002e0c:	fffff7ff 	.word	0xfffff7ff

08002e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <TIM_OC3_SetConfig+0xe4>)
 8002e20:	401a      	ands	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2270      	movs	r2, #112	; 0x70
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2203      	movs	r2, #3
 8002e44:	4393      	bics	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <TIM_OC3_SetConfig+0xe8>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a24      	ldr	r2, [pc, #144]	; (8002efc <TIM_OC3_SetConfig+0xec>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10d      	bne.n	8002e8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <TIM_OC3_SetConfig+0xf0>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <TIM_OC3_SetConfig+0xf4>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <TIM_OC3_SetConfig+0xec>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00b      	beq.n	8002eaa <TIM_OC3_SetConfig+0x9a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <TIM_OC3_SetConfig+0xf8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <TIM_OC3_SetConfig+0x9a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <TIM_OC3_SetConfig+0xfc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d003      	beq.n	8002eaa <TIM_OC3_SetConfig+0x9a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <TIM_OC3_SetConfig+0x100>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d113      	bne.n	8002ed2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <TIM_OC3_SetConfig+0x104>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <TIM_OC3_SetConfig+0x108>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	621a      	str	r2, [r3, #32]
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b006      	add	sp, #24
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	fffffeff 	.word	0xfffffeff
 8002ef8:	fffffdff 	.word	0xfffffdff
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	fffff7ff 	.word	0xfffff7ff
 8002f04:	fffffbff 	.word	0xfffffbff
 8002f08:	40014000 	.word	0x40014000
 8002f0c:	40014400 	.word	0x40014400
 8002f10:	40014800 	.word	0x40014800
 8002f14:	ffffefff 	.word	0xffffefff
 8002f18:	ffffdfff 	.word	0xffffdfff

08002f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <TIM_OC4_SetConfig+0xb0>)
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <TIM_OC4_SetConfig+0xb4>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a21      	ldr	r2, [pc, #132]	; (8002fd4 <TIM_OC4_SetConfig+0xb8>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <TIM_OC4_SetConfig+0xbc>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	031b      	lsls	r3, r3, #12
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <TIM_OC4_SetConfig+0xc0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <TIM_OC4_SetConfig+0x78>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <TIM_OC4_SetConfig+0xc4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <TIM_OC4_SetConfig+0x78>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <TIM_OC4_SetConfig+0xc8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_OC4_SetConfig+0x78>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <TIM_OC4_SetConfig+0xcc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d109      	bne.n	8002fa8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	4a15      	ldr	r2, [pc, #84]	; (8002fec <TIM_OC4_SetConfig+0xd0>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b006      	add	sp, #24
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	ffffefff 	.word	0xffffefff
 8002fd0:	ffff8fff 	.word	0xffff8fff
 8002fd4:	fffffcff 	.word	0xfffffcff
 8002fd8:	ffffdfff 	.word	0xffffdfff
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800
 8002fec:	ffffbfff 	.word	0xffffbfff

08002ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	2201      	movs	r2, #1
 8003008:	4393      	bics	r3, r2
 800300a:	001a      	movs	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	22f0      	movs	r2, #240	; 0xf0
 800301a:	4393      	bics	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	220a      	movs	r2, #10
 800302c:	4393      	bics	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	621a      	str	r2, [r3, #32]
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b006      	add	sp, #24
 800304a:	bd80      	pop	{r7, pc}

0800304c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	2210      	movs	r2, #16
 800305e:	4393      	bics	r3, r2
 8003060:	001a      	movs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <TIM_TI2_ConfigInputStage+0x60>)
 8003076:	4013      	ands	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	031b      	lsls	r3, r3, #12
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	22a0      	movs	r2, #160	; 0xa0
 8003088:	4393      	bics	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b006      	add	sp, #24
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	ffff0fff 	.word	0xffff0fff

080030b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2270      	movs	r2, #112	; 0x70
 80030c4:	4393      	bics	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	2207      	movs	r2, #7
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	609a      	str	r2, [r3, #8]
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b004      	add	sp, #16
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4a09      	ldr	r2, [pc, #36]	; (8003120 <TIM_ETR_SetConfig+0x3c>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	021a      	lsls	r2, r3, #8
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	431a      	orrs	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	609a      	str	r2, [r3, #8]
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b006      	add	sp, #24
 800311e:	bd80      	pop	{r7, pc}
 8003120:	ffff00ff 	.word	0xffff00ff

08003124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	221f      	movs	r2, #31
 8003134:	4013      	ands	r3, r2
 8003136:	2201      	movs	r2, #1
 8003138:	409a      	lsls	r2, r3
 800313a:	0013      	movs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	43d2      	mvns	r2, r2
 8003146:	401a      	ands	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	211f      	movs	r1, #31
 8003154:	400b      	ands	r3, r1
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4099      	lsls	r1, r3
 800315a:	000b      	movs	r3, r1
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b006      	add	sp, #24
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	223c      	movs	r2, #60	; 0x3c
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003180:	2302      	movs	r3, #2
 8003182:	e047      	b.n	8003214 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	223c      	movs	r2, #60	; 0x3c
 8003188:	2101      	movs	r1, #1
 800318a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	223d      	movs	r2, #61	; 0x3d
 8003190:	2102      	movs	r1, #2
 8003192:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2270      	movs	r2, #112	; 0x70
 80031a8:	4393      	bics	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00f      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	05db      	lsls	r3, r3, #23
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d009      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a11      	ldr	r2, [pc, #68]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a10      	ldr	r2, [pc, #64]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d10c      	bne.n	8003202 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	4393      	bics	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	223d      	movs	r2, #61	; 0x3d
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	223c      	movs	r2, #60	; 0x3c
 800320e:	2100      	movs	r1, #0
 8003210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b004      	add	sp, #16
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400
 8003224:	40014000 	.word	0x40014000

08003228 <memset>:
 8003228:	0003      	movs	r3, r0
 800322a:	1882      	adds	r2, r0, r2
 800322c:	4293      	cmp	r3, r2
 800322e:	d100      	bne.n	8003232 <memset+0xa>
 8003230:	4770      	bx	lr
 8003232:	7019      	strb	r1, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	e7f9      	b.n	800322c <memset+0x4>

08003238 <__libc_init_array>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	2600      	movs	r6, #0
 800323c:	4c0c      	ldr	r4, [pc, #48]	; (8003270 <__libc_init_array+0x38>)
 800323e:	4d0d      	ldr	r5, [pc, #52]	; (8003274 <__libc_init_array+0x3c>)
 8003240:	1b64      	subs	r4, r4, r5
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	42a6      	cmp	r6, r4
 8003246:	d109      	bne.n	800325c <__libc_init_array+0x24>
 8003248:	2600      	movs	r6, #0
 800324a:	f000 f819 	bl	8003280 <_init>
 800324e:	4c0a      	ldr	r4, [pc, #40]	; (8003278 <__libc_init_array+0x40>)
 8003250:	4d0a      	ldr	r5, [pc, #40]	; (800327c <__libc_init_array+0x44>)
 8003252:	1b64      	subs	r4, r4, r5
 8003254:	10a4      	asrs	r4, r4, #2
 8003256:	42a6      	cmp	r6, r4
 8003258:	d105      	bne.n	8003266 <__libc_init_array+0x2e>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	00b3      	lsls	r3, r6, #2
 800325e:	58eb      	ldr	r3, [r5, r3]
 8003260:	4798      	blx	r3
 8003262:	3601      	adds	r6, #1
 8003264:	e7ee      	b.n	8003244 <__libc_init_array+0xc>
 8003266:	00b3      	lsls	r3, r6, #2
 8003268:	58eb      	ldr	r3, [r5, r3]
 800326a:	4798      	blx	r3
 800326c:	3601      	adds	r6, #1
 800326e:	e7f2      	b.n	8003256 <__libc_init_array+0x1e>
 8003270:	080032c8 	.word	0x080032c8
 8003274:	080032c8 	.word	0x080032c8
 8003278:	080032cc 	.word	0x080032cc
 800327c:	080032c8 	.word	0x080032c8

08003280 <_init>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr

0800328c <_fini>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr
