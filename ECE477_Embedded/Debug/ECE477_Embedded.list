
ECE477_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003000  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f4  080030f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030f4  080030f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f4  080030f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003108  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003108  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ce6  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a56  00000000  00000000  00028d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0002a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ac  00000000  00000000  0002af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa5d  00000000  00000000  0002b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a88a  00000000  00000000  00045f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fbae  00000000  00000000  000507bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018a4  00000000  00000000  000f036c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f1c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080030a4 	.word	0x080030a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080030a4 	.word	0x080030a4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <Jetson_Bridge_RxBridgeMsg>:

/* for memcpy*/
#include <string.h>

void Jetson_Bridge_RxBridgeMsg(uint8_t * rx_buff, uint8_t rx_buff_size)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	000a      	movs	r2, r1
 8000226:	1cfb      	adds	r3, r7, #3
 8000228:	701a      	strb	r2, [r3, #0]
    (void) rx_buff;
}
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	b002      	add	sp, #8
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <UART_Driver_Init>:
  * @brief UART Initialization Function
  * @param None
  * @retval None
*/
void UART_Driver_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0

      /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800023a:	4b2a      	ldr	r3, [pc, #168]	; (80002e4 <UART_Driver_Init+0xb0>)
 800023c:	695a      	ldr	r2, [r3, #20]
 800023e:	4b29      	ldr	r3, [pc, #164]	; (80002e4 <UART_Driver_Init+0xb0>)
 8000240:	2101      	movs	r1, #1
 8000242:	430a      	orrs	r2, r1
 8000244:	615a      	str	r2, [r3, #20]
 8000246:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <UART_Driver_Init+0xb0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	2201      	movs	r2, #1
 800024c:	4013      	ands	r3, r2
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Ch1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	2100      	movs	r1, #0
 8000256:	2009      	movs	r0, #9
 8000258:	f000 fb5c 	bl	8000914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 800025c:	2009      	movs	r0, #9
 800025e:	f000 fb6e 	bl	800093e <HAL_NVIC_EnableIRQ>
    /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 8000262:	2200      	movs	r2, #0
 8000264:	2100      	movs	r1, #0
 8000266:	200a      	movs	r0, #10
 8000268:	f000 fb54 	bl	8000914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 800026c:	200a      	movs	r0, #10
 800026e:	f000 fb66 	bl	800093e <HAL_NVIC_EnableIRQ>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <UART_Driver_Init+0xb0>)
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <UART_Driver_Init+0xb0>)
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	0289      	lsls	r1, r1, #10
 800027c:	430a      	orrs	r2, r1
 800027e:	615a      	str	r2, [r3, #20]
 8000280:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <UART_Driver_Init+0xb0>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	029b      	lsls	r3, r3, #10
 8000288:	4013      	ands	r3, r2
 800028a:	603b      	str	r3, [r7, #0]
 800028c:	683b      	ldr	r3, [r7, #0]

    huart1.Instance = USART1;
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <UART_Driver_Init+0xb4>)
 8000290:	4a16      	ldr	r2, [pc, #88]	; (80002ec <UART_Driver_Init+0xb8>)
 8000292:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <UART_Driver_Init+0xb4>)
 8000296:	22e1      	movs	r2, #225	; 0xe1
 8000298:	0252      	lsls	r2, r2, #9
 800029a:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <UART_Driver_Init+0xb4>)
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <UART_Driver_Init+0xb4>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <UART_Driver_Init+0xb4>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <UART_Driver_Init+0xb4>)
 80002b0:	220c      	movs	r2, #12
 80002b2:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <UART_Driver_Init+0xb4>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <UART_Driver_Init+0xb4>)
 80002bc:	2200      	movs	r2, #0
 80002be:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <UART_Driver_Init+0xb4>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <UART_Driver_Init+0xb4>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	625a      	str	r2, [r3, #36]	; 0x24
    
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <UART_Driver_Init+0xb4>)
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fcf0 	bl	8001cb4 <HAL_UART_Init>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <UART_Driver_Init+0xa8>
    {
    Error_Handler();
 80002d8:	f000 f8d0 	bl	800047c <Error_Handler>
    }
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b002      	add	sp, #8
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40013800 	.word	0x40013800

080002f0 <UART_Driver_RxInit>:
  HAL_UART_Transmit_DMA(&huart1, UART_Driver_TxBuffer, sizeof(UART_Driver_TxBuffer));

}

void UART_Driver_RxInit(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  	HAL_UART_Receive_DMA (&huart1, UART_Driver_RxBuffer, sizeof(UART_Driver_RxBuffer));    /* USER CODE END WHILE */
 80002f4:	4904      	ldr	r1, [pc, #16]	; (8000308 <UART_Driver_RxInit+0x18>)
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <UART_Driver_RxInit+0x1c>)
 80002f8:	2210      	movs	r2, #16
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 fd2e 	bl	8001d5c <HAL_UART_Receive_DMA>
}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	20000138 	.word	0x20000138
 800030c:	20000028 	.word	0x20000028

08000310 <DMA1_Ch1_IRQHandler>:

void DMA1_Ch1_IRQHandler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <DMA1_Ch1_IRQHandler+0x14>)
 8000316:	0018      	movs	r0, r3
 8000318:	f000 fc59 	bl	8000bce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	200000f4 	.word	0x200000f4

08000328 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 800032e:	0018      	movs	r0, r3
 8000330:	f000 fc4d 	bl	8000bce <HAL_DMA_IRQHandler>
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	200000b0 	.word	0x200000b0

08000340 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <USART1_IRQHandler+0x14>)
 8000346:	0018      	movs	r0, r3
 8000348:	f001 fd60 	bl	8001e0c <HAL_UART_IRQHandler>
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	20000028 	.word	0x20000028

08000358 <HAL_UART_RxHalfCpltCallback>:


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  memcpy(UART_Driver_RxMsg, UART_Driver_RxBuffer, sizeof(UART_Driver_RxMsg));
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <HAL_UART_RxHalfCpltCallback+0x24>)
 8000362:	4a07      	ldr	r2, [pc, #28]	; (8000380 <HAL_UART_RxHalfCpltCallback+0x28>)
 8000364:	ca03      	ldmia	r2!, {r0, r1}
 8000366:	c303      	stmia	r3!, {r0, r1}
  Jetson_Bridge_RxBridgeMsg(UART_Driver_RxMsg, sizeof(UART_Driver_RxMsg));
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <HAL_UART_RxHalfCpltCallback+0x24>)
 800036a:	2108      	movs	r1, #8
 800036c:	0018      	movs	r0, r3
 800036e:	f7ff ff55 	bl	800021c <Jetson_Bridge_RxBridgeMsg>
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	20000148 	.word	0x20000148
 8000380:	20000138 	.word	0x20000138

08000384 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  memcpy(UART_Driver_RxMsg, UART_Driver_RxBuffer + (sizeof(UART_Driver_RxBuffer) / 2), sizeof(UART_Driver_RxMsg));
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <HAL_UART_RxCpltCallback+0x2c>)
 800038e:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <HAL_UART_RxCpltCallback+0x30>)
 8000390:	0010      	movs	r0, r2
 8000392:	0019      	movs	r1, r3
 8000394:	2308      	movs	r3, #8
 8000396:	001a      	movs	r2, r3
 8000398:	f002 fe7a 	bl	8003090 <memcpy>
  Jetson_Bridge_RxBridgeMsg(UART_Driver_RxMsg, sizeof(UART_Driver_RxMsg));
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <HAL_UART_RxCpltCallback+0x30>)
 800039e:	2108      	movs	r1, #8
 80003a0:	0018      	movs	r0, r3
 80003a2:	f7ff ff3b 	bl	800021c <Jetson_Bridge_RxBridgeMsg>
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b002      	add	sp, #8
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	20000140 	.word	0x20000140
 80003b4:	20000148 	.word	0x20000148

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 f99a 	bl	80006f4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f805 	bl	80003ce <SystemClock_Config>

  UART_Driver_Init();
 80003c4:	f7ff ff36 	bl	8000234 <UART_Driver_Init>
  UART_Driver_RxInit();
 80003c8:	f7ff ff92 	bl	80002f0 <UART_Driver_RxInit>
  while (1)
 80003cc:	e7fe      	b.n	80003cc <main+0x14>

080003ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ce:	b590      	push	{r4, r7, lr}
 80003d0:	b099      	sub	sp, #100	; 0x64
 80003d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d4:	242c      	movs	r4, #44	; 0x2c
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	0018      	movs	r0, r3
 80003da:	2334      	movs	r3, #52	; 0x34
 80003dc:	001a      	movs	r2, r3
 80003de:	2100      	movs	r1, #0
 80003e0:	f002 fe29 	bl	8003036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e4:	231c      	movs	r3, #28
 80003e6:	18fb      	adds	r3, r7, r3
 80003e8:	0018      	movs	r0, r3
 80003ea:	2310      	movs	r3, #16
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f002 fe21 	bl	8003036 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f4:	003b      	movs	r3, r7
 80003f6:	0018      	movs	r0, r3
 80003f8:	231c      	movs	r3, #28
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f002 fe1a 	bl	8003036 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000402:	0021      	movs	r1, r4
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2202      	movs	r2, #2
 8000408:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2201      	movs	r2, #1
 800040e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2210      	movs	r2, #16
 8000414:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2200      	movs	r2, #0
 800041a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041c:	187b      	adds	r3, r7, r1
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fe56 	bl	80010d0 <HAL_RCC_OscConfig>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000428:	f000 f828 	bl	800047c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	211c      	movs	r1, #28
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2207      	movs	r2, #7
 8000432:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2200      	movs	r2, #0
 8000438:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2100      	movs	r1, #0
 800044a:	0018      	movs	r0, r3
 800044c:	f001 f9c6 	bl	80017dc <HAL_RCC_ClockConfig>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000454:	f000 f812 	bl	800047c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000458:	003b      	movs	r3, r7
 800045a:	2201      	movs	r2, #1
 800045c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800045e:	003b      	movs	r3, r7
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000464:	003b      	movs	r3, r7
 8000466:	0018      	movs	r0, r3
 8000468:	f001 fb24 	bl	8001ab4 <HAL_RCCEx_PeriphCLKConfig>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000470:	f000 f804 	bl	800047c <Error_Handler>
  }
}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b019      	add	sp, #100	; 0x64
 800047a:	bd90      	pop	{r4, r7, pc}

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	e7fe      	b.n	8000484 <Error_Handler+0x8>
	...

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <HAL_MspInit+0x44>)
 8000490:	699a      	ldr	r2, [r3, #24]
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <HAL_MspInit+0x44>)
 8000494:	2101      	movs	r1, #1
 8000496:	430a      	orrs	r2, r1
 8000498:	619a      	str	r2, [r3, #24]
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <HAL_MspInit+0x44>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	2201      	movs	r2, #1
 80004a0:	4013      	ands	r3, r2
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <HAL_MspInit+0x44>)
 80004a8:	69da      	ldr	r2, [r3, #28]
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <HAL_MspInit+0x44>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0549      	lsls	r1, r1, #21
 80004b0:	430a      	orrs	r2, r1
 80004b2:	61da      	str	r2, [r3, #28]
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <HAL_MspInit+0x44>)
 80004b6:	69da      	ldr	r2, [r3, #28]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	055b      	lsls	r3, r3, #21
 80004bc:	4013      	ands	r3, r2
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000

080004d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b08b      	sub	sp, #44	; 0x2c
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	2414      	movs	r4, #20
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	0018      	movs	r0, r3
 80004de:	2314      	movs	r3, #20
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f002 fda7 	bl	8003036 <memset>
  if(huart->Instance==USART1)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a57      	ldr	r2, [pc, #348]	; (800064c <HAL_UART_MspInit+0x17c>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d000      	beq.n	80004f4 <HAL_UART_MspInit+0x24>
 80004f2:	e0a7      	b.n	8000644 <HAL_UART_MspInit+0x174>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004f4:	4b56      	ldr	r3, [pc, #344]	; (8000650 <HAL_UART_MspInit+0x180>)
 80004f6:	699a      	ldr	r2, [r3, #24]
 80004f8:	4b55      	ldr	r3, [pc, #340]	; (8000650 <HAL_UART_MspInit+0x180>)
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	01c9      	lsls	r1, r1, #7
 80004fe:	430a      	orrs	r2, r1
 8000500:	619a      	str	r2, [r3, #24]
 8000502:	4b53      	ldr	r3, [pc, #332]	; (8000650 <HAL_UART_MspInit+0x180>)
 8000504:	699a      	ldr	r2, [r3, #24]
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	01db      	lsls	r3, r3, #7
 800050a:	4013      	ands	r3, r2
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b4f      	ldr	r3, [pc, #316]	; (8000650 <HAL_UART_MspInit+0x180>)
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	4b4e      	ldr	r3, [pc, #312]	; (8000650 <HAL_UART_MspInit+0x180>)
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	0289      	lsls	r1, r1, #10
 800051a:	430a      	orrs	r2, r1
 800051c:	615a      	str	r2, [r3, #20]
 800051e:	4b4c      	ldr	r3, [pc, #304]	; (8000650 <HAL_UART_MspInit+0x180>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	029b      	lsls	r3, r3, #10
 8000526:	4013      	ands	r3, r2
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	22c0      	movs	r2, #192	; 0xc0
 8000530:	00d2      	lsls	r2, r2, #3
 8000532:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000534:	0021      	movs	r1, r4
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2202      	movs	r2, #2
 800053a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2203      	movs	r2, #3
 8000546:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2201      	movs	r2, #1
 800054c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	187a      	adds	r2, r7, r1
 8000550:	2390      	movs	r3, #144	; 0x90
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fc42 	bl	8000de0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800055c:	4b3d      	ldr	r3, [pc, #244]	; (8000654 <HAL_UART_MspInit+0x184>)
 800055e:	4a3e      	ldr	r2, [pc, #248]	; (8000658 <HAL_UART_MspInit+0x188>)
 8000560:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000562:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <HAL_UART_MspInit+0x184>)
 8000564:	2210      	movs	r2, #16
 8000566:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000568:	4b3a      	ldr	r3, [pc, #232]	; (8000654 <HAL_UART_MspInit+0x184>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800056e:	4b39      	ldr	r3, [pc, #228]	; (8000654 <HAL_UART_MspInit+0x184>)
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000574:	4b37      	ldr	r3, [pc, #220]	; (8000654 <HAL_UART_MspInit+0x184>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800057a:	4b36      	ldr	r3, [pc, #216]	; (8000654 <HAL_UART_MspInit+0x184>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000580:	4b34      	ldr	r3, [pc, #208]	; (8000654 <HAL_UART_MspInit+0x184>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000586:	4b33      	ldr	r3, [pc, #204]	; (8000654 <HAL_UART_MspInit+0x184>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800058c:	4b31      	ldr	r3, [pc, #196]	; (8000654 <HAL_UART_MspInit+0x184>)
 800058e:	0018      	movs	r0, r3
 8000590:	f000 f9f2 	bl	8000978 <HAL_DMA_Init>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000598:	f7ff ff70 	bl	800047c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <HAL_UART_MspInit+0x18c>)
 800059e:	23a8      	movs	r3, #168	; 0xa8
 80005a0:	58d3      	ldr	r3, [r2, r3]
 80005a2:	492e      	ldr	r1, [pc, #184]	; (800065c <HAL_UART_MspInit+0x18c>)
 80005a4:	22f0      	movs	r2, #240	; 0xf0
 80005a6:	4393      	bics	r3, r2
 80005a8:	22a8      	movs	r2, #168	; 0xa8
 80005aa:	508b      	str	r3, [r1, r2]
 80005ac:	4a2b      	ldr	r2, [pc, #172]	; (800065c <HAL_UART_MspInit+0x18c>)
 80005ae:	23a8      	movs	r3, #168	; 0xa8
 80005b0:	58d3      	ldr	r3, [r2, r3]
 80005b2:	492a      	ldr	r1, [pc, #168]	; (800065c <HAL_UART_MspInit+0x18c>)
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	4313      	orrs	r3, r2
 80005b8:	22a8      	movs	r2, #168	; 0xa8
 80005ba:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a25      	ldr	r2, [pc, #148]	; (8000654 <HAL_UART_MspInit+0x184>)
 80005c0:	671a      	str	r2, [r3, #112]	; 0x70
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <HAL_UART_MspInit+0x184>)
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <HAL_UART_MspInit+0x190>)
 80005ca:	4a26      	ldr	r2, [pc, #152]	; (8000664 <HAL_UART_MspInit+0x194>)
 80005cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ce:	4b24      	ldr	r3, [pc, #144]	; (8000660 <HAL_UART_MspInit+0x190>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <HAL_UART_MspInit+0x190>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <HAL_UART_MspInit+0x190>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <HAL_UART_MspInit+0x190>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <HAL_UART_MspInit+0x190>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <HAL_UART_MspInit+0x190>)
 80005ee:	2220      	movs	r2, #32
 80005f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <HAL_UART_MspInit+0x190>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <HAL_UART_MspInit+0x190>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f9bc 	bl	8000978 <HAL_DMA_Init>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000604:	f7ff ff3a 	bl	800047c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_UART_MspInit+0x18c>)
 800060a:	23a8      	movs	r3, #168	; 0xa8
 800060c:	58d3      	ldr	r3, [r2, r3]
 800060e:	4913      	ldr	r1, [pc, #76]	; (800065c <HAL_UART_MspInit+0x18c>)
 8000610:	220f      	movs	r2, #15
 8000612:	4393      	bics	r3, r2
 8000614:	22a8      	movs	r2, #168	; 0xa8
 8000616:	508b      	str	r3, [r1, r2]
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <HAL_UART_MspInit+0x18c>)
 800061a:	23a8      	movs	r3, #168	; 0xa8
 800061c:	58d3      	ldr	r3, [r2, r3]
 800061e:	490f      	ldr	r1, [pc, #60]	; (800065c <HAL_UART_MspInit+0x18c>)
 8000620:	2208      	movs	r2, #8
 8000622:	4313      	orrs	r3, r2
 8000624:	22a8      	movs	r2, #168	; 0xa8
 8000626:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <HAL_UART_MspInit+0x190>)
 800062c:	675a      	str	r2, [r3, #116]	; 0x74
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <HAL_UART_MspInit+0x190>)
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	201b      	movs	r0, #27
 800063a:	f000 f96b 	bl	8000914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800063e:	201b      	movs	r0, #27
 8000640:	f000 f97d 	bl	800093e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b00b      	add	sp, #44	; 0x2c
 800064a:	bd90      	pop	{r4, r7, pc}
 800064c:	40013800 	.word	0x40013800
 8000650:	40021000 	.word	0x40021000
 8000654:	200000b0 	.word	0x200000b0
 8000658:	4002001c 	.word	0x4002001c
 800065c:	40020000 	.word	0x40020000
 8000660:	200000f4 	.word	0x200000f4
 8000664:	40020008 	.word	0x40020008

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler+0x4>

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068c:	f000 f87a 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a4:	f7ff fff7 	bl	8000696 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	; (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ce:	f002 fcbb 	bl	8003048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fe71 	bl	80003b8 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	080030fc 	.word	0x080030fc
  ldr r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ec:	20000154 	.word	0x20000154

080006f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_COMP_IRQHandler>
	...

080006f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <HAL_Init+0x24>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_Init+0x24>)
 80006fe:	2110      	movs	r1, #16
 8000700:	430a      	orrs	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 f809 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070a:	f7ff febd 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_InitTick+0x5c>)
 8000726:	681c      	ldr	r4, [r3, #0]
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_InitTick+0x60>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	0019      	movs	r1, r3
 800072e:	23fa      	movs	r3, #250	; 0xfa
 8000730:	0098      	lsls	r0, r3, #2
 8000732:	f7ff fce7 	bl	8000104 <__udivsi3>
 8000736:	0003      	movs	r3, r0
 8000738:	0019      	movs	r1, r3
 800073a:	0020      	movs	r0, r4
 800073c:	f7ff fce2 	bl	8000104 <__udivsi3>
 8000740:	0003      	movs	r3, r0
 8000742:	0018      	movs	r0, r3
 8000744:	f000 f90b 	bl	800095e <HAL_SYSTICK_Config>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800074c:	2301      	movs	r3, #1
 800074e:	e00f      	b.n	8000770 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d80b      	bhi.n	800076e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	2301      	movs	r3, #1
 800075a:	425b      	negs	r3, r3
 800075c:	2200      	movs	r2, #0
 800075e:	0018      	movs	r0, r3
 8000760:	f000 f8d8 	bl	8000914 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_InitTick+0x64>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b003      	add	sp, #12
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x1c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	001a      	movs	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x20>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	18d2      	adds	r2, r2, r3
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_IncTick+0x20>)
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000150 	.word	0x20000150

080007a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000150 	.word	0x20000150

080007bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	0002      	movs	r2, r0
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b7f      	cmp	r3, #127	; 0x7f
 80007ce:	d809      	bhi.n	80007e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	001a      	movs	r2, r3
 80007d6:	231f      	movs	r3, #31
 80007d8:	401a      	ands	r2, r3
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_EnableIRQ+0x30>)
 80007dc:	2101      	movs	r1, #1
 80007de:	4091      	lsls	r1, r2
 80007e0:	000a      	movs	r2, r1
 80007e2:	601a      	str	r2, [r3, #0]
  }
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b7f      	cmp	r3, #127	; 0x7f
 8000804:	d828      	bhi.n	8000858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000806:	4a2f      	ldr	r2, [pc, #188]	; (80008c4 <__NVIC_SetPriority+0xd4>)
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b25b      	sxtb	r3, r3
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	33c0      	adds	r3, #192	; 0xc0
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	589b      	ldr	r3, [r3, r2]
 8000816:	1dfa      	adds	r2, r7, #7
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	0011      	movs	r1, r2
 800081c:	2203      	movs	r2, #3
 800081e:	400a      	ands	r2, r1
 8000820:	00d2      	lsls	r2, r2, #3
 8000822:	21ff      	movs	r1, #255	; 0xff
 8000824:	4091      	lsls	r1, r2
 8000826:	000a      	movs	r2, r1
 8000828:	43d2      	mvns	r2, r2
 800082a:	401a      	ands	r2, r3
 800082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	019b      	lsls	r3, r3, #6
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	401a      	ands	r2, r3
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	0018      	movs	r0, r3
 800083c:	2303      	movs	r3, #3
 800083e:	4003      	ands	r3, r0
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000844:	481f      	ldr	r0, [pc, #124]	; (80008c4 <__NVIC_SetPriority+0xd4>)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b25b      	sxtb	r3, r3
 800084c:	089b      	lsrs	r3, r3, #2
 800084e:	430a      	orrs	r2, r1
 8000850:	33c0      	adds	r3, #192	; 0xc0
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000856:	e031      	b.n	80008bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <__NVIC_SetPriority+0xd8>)
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	0019      	movs	r1, r3
 8000860:	230f      	movs	r3, #15
 8000862:	400b      	ands	r3, r1
 8000864:	3b08      	subs	r3, #8
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	3306      	adds	r3, #6
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	18d3      	adds	r3, r2, r3
 800086e:	3304      	adds	r3, #4
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	1dfa      	adds	r2, r7, #7
 8000874:	7812      	ldrb	r2, [r2, #0]
 8000876:	0011      	movs	r1, r2
 8000878:	2203      	movs	r2, #3
 800087a:	400a      	ands	r2, r1
 800087c:	00d2      	lsls	r2, r2, #3
 800087e:	21ff      	movs	r1, #255	; 0xff
 8000880:	4091      	lsls	r1, r2
 8000882:	000a      	movs	r2, r1
 8000884:	43d2      	mvns	r2, r2
 8000886:	401a      	ands	r2, r3
 8000888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	019b      	lsls	r3, r3, #6
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	401a      	ands	r2, r3
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	0018      	movs	r0, r3
 8000898:	2303      	movs	r3, #3
 800089a:	4003      	ands	r3, r0
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <__NVIC_SetPriority+0xd8>)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	001c      	movs	r4, r3
 80008a8:	230f      	movs	r3, #15
 80008aa:	4023      	ands	r3, r4
 80008ac:	3b08      	subs	r3, #8
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	430a      	orrs	r2, r1
 80008b2:	3306      	adds	r3, #6
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	18c3      	adds	r3, r0, r3
 80008b8:	3304      	adds	r3, #4
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b003      	add	sp, #12
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	045b      	lsls	r3, r3, #17
 80008dc:	429a      	cmp	r2, r3
 80008de:	d301      	bcc.n	80008e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e0:	2301      	movs	r3, #1
 80008e2:	e010      	b.n	8000906 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <SysTick_Config+0x44>)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	3a01      	subs	r2, #1
 80008ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ec:	2301      	movs	r3, #1
 80008ee:	425b      	negs	r3, r3
 80008f0:	2103      	movs	r1, #3
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff ff7c 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <SysTick_Config+0x44>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <SysTick_Config+0x44>)
 8000900:	2207      	movs	r2, #7
 8000902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000904:	2300      	movs	r3, #0
}
 8000906:	0018      	movs	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	e000e010 	.word	0xe000e010

08000914 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	210f      	movs	r1, #15
 8000920:	187b      	adds	r3, r7, r1
 8000922:	1c02      	adds	r2, r0, #0
 8000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	187b      	adds	r3, r7, r1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b25b      	sxtb	r3, r3
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff ff5d 	bl	80007f0 <__NVIC_SetPriority>
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b004      	add	sp, #16
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	0002      	movs	r2, r0
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b25b      	sxtb	r3, r3
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ff33 	bl	80007bc <__NVIC_EnableIRQ>
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff ffaf 	bl	80008cc <SysTick_Config>
 800096e:	0003      	movs	r3, r0
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e036      	b.n	80009fc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2221      	movs	r2, #33	; 0x21
 8000992:	2102      	movs	r1, #2
 8000994:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	4a18      	ldr	r2, [pc, #96]	; (8000a04 <HAL_DMA_Init+0x8c>)
 80009a2:	4013      	ands	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 f9c4 	bl	8000d6c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2221      	movs	r2, #33	; 0x21
 80009ee:	2101      	movs	r1, #1
 80009f0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2220      	movs	r2, #32
 80009f6:	2100      	movs	r1, #0
 80009f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b004      	add	sp, #16
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	ffffc00f 	.word	0xffffc00f

08000a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a16:	2317      	movs	r3, #23
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2220      	movs	r2, #32
 8000a22:	5c9b      	ldrb	r3, [r3, r2]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d101      	bne.n	8000a2c <HAL_DMA_Start_IT+0x24>
 8000a28:	2302      	movs	r3, #2
 8000a2a:	e04f      	b.n	8000acc <HAL_DMA_Start_IT+0xc4>
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2220      	movs	r2, #32
 8000a30:	2101      	movs	r1, #1
 8000a32:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2221      	movs	r2, #33	; 0x21
 8000a38:	5c9b      	ldrb	r3, [r3, r2]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d13a      	bne.n	8000ab6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2221      	movs	r2, #33	; 0x21
 8000a44:	2102      	movs	r1, #2
 8000a46:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	438a      	bics	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f000 f954 	bl	8000d12 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d008      	beq.n	8000a84 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	210e      	movs	r1, #14
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	e00f      	b.n	8000aa4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	210a      	movs	r1, #10
 8000a90:	430a      	orrs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	438a      	bics	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2101      	movs	r1, #1
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	e007      	b.n	8000ac6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2220      	movs	r2, #32
 8000aba:	2100      	movs	r1, #0
 8000abc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000abe:	2317      	movs	r3, #23
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000ac6:	2317      	movs	r3, #23
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	781b      	ldrb	r3, [r3, #0]
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b006      	add	sp, #24
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2221      	movs	r2, #33	; 0x21
 8000ae0:	5c9b      	ldrb	r3, [r3, r2]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d008      	beq.n	8000afa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2204      	movs	r2, #4
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2220      	movs	r2, #32
 8000af2:	2100      	movs	r1, #0
 8000af4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e020      	b.n	8000b3c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	210e      	movs	r1, #14
 8000b06:	438a      	bics	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	438a      	bics	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b22:	2101      	movs	r1, #1
 8000b24:	4091      	lsls	r1, r2
 8000b26:	000a      	movs	r2, r1
 8000b28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2221      	movs	r2, #33	; 0x21
 8000b2e:	2101      	movs	r1, #1
 8000b30:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2220      	movs	r2, #32
 8000b36:	2100      	movs	r1, #0
 8000b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2221      	movs	r2, #33	; 0x21
 8000b58:	5c9b      	ldrb	r3, [r3, r2]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d006      	beq.n	8000b6e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2204      	movs	r2, #4
 8000b64:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e028      	b.n	8000bc0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	210e      	movs	r1, #14
 8000b7a:	438a      	bics	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2101      	movs	r1, #1
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b96:	2101      	movs	r1, #1
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2221      	movs	r2, #33	; 0x21
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2220      	movs	r2, #32
 8000baa:	2100      	movs	r1, #0
 8000bac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	0010      	movs	r0, r2
 8000bbe:	4798      	blx	r3
    }
  }
  return status;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	781b      	ldrb	r3, [r3, #0]
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	2204      	movs	r2, #4
 8000bec:	409a      	lsls	r2, r3
 8000bee:	0013      	movs	r3, r2
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	d024      	beq.n	8000c40 <HAL_DMA_IRQHandler+0x72>
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d020      	beq.n	8000c40 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2220      	movs	r2, #32
 8000c06:	4013      	ands	r3, r2
 8000c08:	d107      	bne.n	8000c1a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2104      	movs	r1, #4
 8000c16:	438a      	bics	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c22:	2104      	movs	r1, #4
 8000c24:	4091      	lsls	r1, r2
 8000c26:	000a      	movs	r2, r1
 8000c28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d100      	bne.n	8000c34 <HAL_DMA_IRQHandler+0x66>
 8000c32:	e06a      	b.n	8000d0a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	0010      	movs	r0, r2
 8000c3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000c3e:	e064      	b.n	8000d0a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	2202      	movs	r2, #2
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	d02b      	beq.n	8000ca8 <HAL_DMA_IRQHandler+0xda>
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2202      	movs	r2, #2
 8000c54:	4013      	ands	r3, r2
 8000c56:	d027      	beq.n	8000ca8 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2220      	movs	r2, #32
 8000c60:	4013      	ands	r3, r2
 8000c62:	d10b      	bne.n	8000c7c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	210a      	movs	r1, #10
 8000c70:	438a      	bics	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2221      	movs	r2, #33	; 0x21
 8000c78:	2101      	movs	r1, #1
 8000c7a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c84:	2102      	movs	r1, #2
 8000c86:	4091      	lsls	r1, r2
 8000c88:	000a      	movs	r2, r1
 8000c8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2220      	movs	r2, #32
 8000c90:	2100      	movs	r1, #0
 8000c92:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d036      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000ca6:	e030      	b.n	8000d0a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	2208      	movs	r2, #8
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d028      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x13c>
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d024      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	210e      	movs	r1, #14
 8000ccc:	438a      	bics	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	000a      	movs	r2, r1
 8000cde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2221      	movs	r2, #33	; 0x21
 8000cea:	2101      	movs	r1, #1
 8000cec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	0010      	movs	r0, r2
 8000d06:	4798      	blx	r3
    }
  }
}
 8000d08:	e7ff      	b.n	8000d0a <HAL_DMA_IRQHandler+0x13c>
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4091      	lsls	r1, r2
 8000d2c:	000a      	movs	r2, r1
 8000d2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b10      	cmp	r3, #16
 8000d3e:	d108      	bne.n	8000d52 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d50:	e007      	b.n	8000d62 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	60da      	str	r2, [r3, #12]
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b004      	add	sp, #16
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <DMA_CalcBaseAndBitshift+0x60>)
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d810      	bhi.n	8000da2 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8000d86:	4694      	mov	ip, r2
 8000d88:	4463      	add	r3, ip
 8000d8a:	2114      	movs	r1, #20
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff f9b9 	bl	8000104 <__udivsi3>
 8000d92:	0003      	movs	r3, r0
 8000d94:	009a      	lsls	r2, r3, #2
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8000d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000da0:	e00f      	b.n	8000dc2 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <DMA_CalcBaseAndBitshift+0x6c>)
 8000da8:	4694      	mov	ip, r2
 8000daa:	4463      	add	r3, ip
 8000dac:	2114      	movs	r1, #20
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff f9a8 	bl	8000104 <__udivsi3>
 8000db4:	0003      	movs	r3, r0
 8000db6:	009a      	lsls	r2, r3, #2
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <DMA_CalcBaseAndBitshift+0x70>)
 8000dc0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40020407 	.word	0x40020407
 8000dd0:	bffdfff8 	.word	0xbffdfff8
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	bffdfbf8 	.word	0xbffdfbf8
 8000ddc:	40020400 	.word	0x40020400

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e155      	b.n	800109c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <HAL_GPIO_Init+0x28>
 8000e06:	e146      	b.n	8001096 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d130      	bne.n	8000e82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	43da      	mvns	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	409a      	lsls	r2, r3
 8000e42:	0013      	movs	r3, r2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d017      	beq.n	8000ebe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	58d3      	ldr	r3, [r2, r3]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2207      	movs	r2, #7
 8000edc:	4013      	ands	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	6939      	ldr	r1, [r7, #16]
 8000f10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	23c0      	movs	r3, #192	; 0xc0
 8000f4c:	029b      	lsls	r3, r3, #10
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0x174>
 8000f52:	e0a0      	b.n	8001096 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	4b56      	ldr	r3, [pc, #344]	; (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	619a      	str	r2, [r3, #24]
 8000f60:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x2d4>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	2201      	movs	r2, #1
 8000f66:	4013      	ands	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6c:	4a52      	ldr	r2, [pc, #328]	; (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	589b      	ldr	r3, [r3, r2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	4013      	ands	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	2390      	movs	r3, #144	; 0x90
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x1ee>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	; (80010bc <HAL_GPIO_Init+0x2dc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x1ea>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	; (80010c0 <HAL_GPIO_Init+0x2e0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x1e6>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a45      	ldr	r2, [pc, #276]	; (80010c4 <HAL_GPIO_Init+0x2e4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x1e2>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a44      	ldr	r2, [pc, #272]	; (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x1de>
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x1f0>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	; (80010b8 <HAL_GPIO_Init+0x2d8>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	035b      	lsls	r3, r3, #13
 8001006:	4013      	ands	r3, r2
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43da      	mvns	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	039b      	lsls	r3, r3, #14
 8001030:	4013      	ands	r3, r2
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43da      	mvns	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	029b      	lsls	r3, r3, #10
 800105a:	4013      	ands	r3, r2
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	4013      	ands	r3, r2
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_GPIO_Init+0x2ec>)
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	40da      	lsrs	r2, r3
 80010a4:	1e13      	subs	r3, r2, #0
 80010a6:	d000      	beq.n	80010aa <HAL_GPIO_Init+0x2ca>
 80010a8:	e6a2      	b.n	8000df0 <HAL_GPIO_Init+0x10>
  } 
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b006      	add	sp, #24
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000800 	.word	0x48000800
 80010c4:	48000c00 	.word	0x48000c00
 80010c8:	48001000 	.word	0x48001000
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	f000 fb76 	bl	80017d0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2201      	movs	r2, #1
 80010ea:	4013      	ands	r3, r2
 80010ec:	d100      	bne.n	80010f0 <HAL_RCC_OscConfig+0x20>
 80010ee:	e08e      	b.n	800120e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f0:	4bc5      	ldr	r3, [pc, #788]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	220c      	movs	r2, #12
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d00e      	beq.n	800111a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010fc:	4bc2      	ldr	r3, [pc, #776]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	220c      	movs	r2, #12
 8001102:	4013      	ands	r3, r2
 8001104:	2b08      	cmp	r3, #8
 8001106:	d117      	bne.n	8001138 <HAL_RCC_OscConfig+0x68>
 8001108:	4bbf      	ldr	r3, [pc, #764]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	23c0      	movs	r3, #192	; 0xc0
 800110e:	025b      	lsls	r3, r3, #9
 8001110:	401a      	ands	r2, r3
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	025b      	lsls	r3, r3, #9
 8001116:	429a      	cmp	r2, r3
 8001118:	d10e      	bne.n	8001138 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111a:	4bbb      	ldr	r3, [pc, #748]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	029b      	lsls	r3, r3, #10
 8001122:	4013      	ands	r3, r2
 8001124:	d100      	bne.n	8001128 <HAL_RCC_OscConfig+0x58>
 8001126:	e071      	b.n	800120c <HAL_RCC_OscConfig+0x13c>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d000      	beq.n	8001132 <HAL_RCC_OscConfig+0x62>
 8001130:	e06c      	b.n	800120c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	f000 fb4c 	bl	80017d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d107      	bne.n	8001150 <HAL_RCC_OscConfig+0x80>
 8001140:	4bb1      	ldr	r3, [pc, #708]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4bb0      	ldr	r3, [pc, #704]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0249      	lsls	r1, r1, #9
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e02f      	b.n	80011b0 <HAL_RCC_OscConfig+0xe0>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10c      	bne.n	8001172 <HAL_RCC_OscConfig+0xa2>
 8001158:	4bab      	ldr	r3, [pc, #684]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4baa      	ldr	r3, [pc, #680]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800115e:	49ab      	ldr	r1, [pc, #684]	; (800140c <HAL_RCC_OscConfig+0x33c>)
 8001160:	400a      	ands	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	4ba8      	ldr	r3, [pc, #672]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4ba7      	ldr	r3, [pc, #668]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800116a:	49a9      	ldr	r1, [pc, #676]	; (8001410 <HAL_RCC_OscConfig+0x340>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e01e      	b.n	80011b0 <HAL_RCC_OscConfig+0xe0>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b05      	cmp	r3, #5
 8001178:	d10e      	bne.n	8001198 <HAL_RCC_OscConfig+0xc8>
 800117a:	4ba3      	ldr	r3, [pc, #652]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4ba2      	ldr	r3, [pc, #648]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	02c9      	lsls	r1, r1, #11
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	4b9f      	ldr	r3, [pc, #636]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0249      	lsls	r1, r1, #9
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xe0>
 8001198:	4b9b      	ldr	r3, [pc, #620]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b9a      	ldr	r3, [pc, #616]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800119e:	499b      	ldr	r1, [pc, #620]	; (800140c <HAL_RCC_OscConfig+0x33c>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	4b98      	ldr	r3, [pc, #608]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b97      	ldr	r3, [pc, #604]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80011aa:	4999      	ldr	r1, [pc, #612]	; (8001410 <HAL_RCC_OscConfig+0x340>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d014      	beq.n	80011e2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff faf6 	bl	80007a8 <HAL_GetTick>
 80011bc:	0003      	movs	r3, r0
 80011be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c2:	f7ff faf1 	bl	80007a8 <HAL_GetTick>
 80011c6:	0002      	movs	r2, r0
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b64      	cmp	r3, #100	; 0x64
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e2fd      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d4:	4b8c      	ldr	r3, [pc, #560]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	029b      	lsls	r3, r3, #10
 80011dc:	4013      	ands	r3, r2
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0xf2>
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fae1 	bl	80007a8 <HAL_GetTick>
 80011e6:	0003      	movs	r3, r0
 80011e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fadc 	bl	80007a8 <HAL_GetTick>
 80011f0:	0002      	movs	r2, r0
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e2e8      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	4b82      	ldr	r3, [pc, #520]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	029b      	lsls	r3, r3, #10
 8001206:	4013      	ands	r3, r2
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x11c>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2202      	movs	r2, #2
 8001214:	4013      	ands	r3, r2
 8001216:	d100      	bne.n	800121a <HAL_RCC_OscConfig+0x14a>
 8001218:	e06c      	b.n	80012f4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800121a:	4b7b      	ldr	r3, [pc, #492]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	220c      	movs	r2, #12
 8001220:	4013      	ands	r3, r2
 8001222:	d00e      	beq.n	8001242 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001224:	4b78      	ldr	r3, [pc, #480]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	220c      	movs	r2, #12
 800122a:	4013      	ands	r3, r2
 800122c:	2b08      	cmp	r3, #8
 800122e:	d11f      	bne.n	8001270 <HAL_RCC_OscConfig+0x1a0>
 8001230:	4b75      	ldr	r3, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	23c0      	movs	r3, #192	; 0xc0
 8001236:	025b      	lsls	r3, r3, #9
 8001238:	401a      	ands	r2, r3
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	429a      	cmp	r2, r3
 8001240:	d116      	bne.n	8001270 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001242:	4b71      	ldr	r3, [pc, #452]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
 800124a:	d005      	beq.n	8001258 <HAL_RCC_OscConfig+0x188>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d001      	beq.n	8001258 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e2bb      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b6b      	ldr	r3, [pc, #428]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	22f8      	movs	r2, #248	; 0xf8
 800125e:	4393      	bics	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00da      	lsls	r2, r3, #3
 8001268:	4b67      	ldr	r3, [pc, #412]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	e041      	b.n	80012f4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d024      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001278:	4b63      	ldr	r3, [pc, #396]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b62      	ldr	r3, [pc, #392]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800127e:	2101      	movs	r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fa90 	bl	80007a8 <HAL_GetTick>
 8001288:	0003      	movs	r3, r0
 800128a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff fa8b 	bl	80007a8 <HAL_GetTick>
 8001292:	0002      	movs	r2, r0
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e297      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2202      	movs	r2, #2
 80012a6:	4013      	ands	r3, r2
 80012a8:	d0f1      	beq.n	800128e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	22f8      	movs	r2, #248	; 0xf8
 80012b0:	4393      	bics	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	00da      	lsls	r2, r3, #3
 80012ba:	4b53      	ldr	r3, [pc, #332]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e018      	b.n	80012f4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	4b51      	ldr	r3, [pc, #324]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b50      	ldr	r3, [pc, #320]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	438a      	bics	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fa6b 	bl	80007a8 <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fa66 	bl	80007a8 <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e272      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2202      	movs	r2, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	d1f1      	bne.n	80012d8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2208      	movs	r2, #8
 80012fa:	4013      	ands	r3, r2
 80012fc:	d036      	beq.n	800136c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d019      	beq.n	800133a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b40      	ldr	r3, [pc, #256]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130a:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fa49 	bl	80007a8 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff fa44 	bl	80007a8 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e250      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d0f1      	beq.n	800131c <HAL_RCC_OscConfig+0x24c>
 8001338:	e018      	b.n	800136c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800133c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001340:	2101      	movs	r1, #1
 8001342:	438a      	bics	r2, r1
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fa2f 	bl	80007a8 <HAL_GetTick>
 800134a:	0003      	movs	r3, r0
 800134c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fa2a 	bl	80007a8 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e236      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	d1f1      	bne.n	8001350 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2204      	movs	r2, #4
 8001372:	4013      	ands	r3, r2
 8001374:	d100      	bne.n	8001378 <HAL_RCC_OscConfig+0x2a8>
 8001376:	e0b5      	b.n	80014e4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001378:	201f      	movs	r0, #31
 800137a:	183b      	adds	r3, r7, r0
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001382:	69da      	ldr	r2, [r3, #28]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	055b      	lsls	r3, r3, #21
 8001388:	4013      	ands	r3, r2
 800138a:	d110      	bne.n	80013ae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	0549      	lsls	r1, r1, #21
 8001396:	430a      	orrs	r2, r1
 8001398:	61da      	str	r2, [r3, #28]
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 800139c:	69da      	ldr	r2, [r3, #28]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	055b      	lsls	r3, r3, #21
 80013a2:	4013      	ands	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013a8:	183b      	adds	r3, r7, r0
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_OscConfig+0x344>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	d11a      	bne.n	80013f0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_RCC_OscConfig+0x344>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_RCC_OscConfig+0x344>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0049      	lsls	r1, r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c8:	f7ff f9ee 	bl	80007a8 <HAL_GetTick>
 80013cc:	0003      	movs	r3, r0
 80013ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d2:	f7ff f9e9 	bl	80007a8 <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1f5      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_OscConfig+0x344>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10f      	bne.n	8001418 <HAL_RCC_OscConfig+0x348>
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80013fa:	6a1a      	ldr	r2, [r3, #32]
 80013fc:	4b02      	ldr	r3, [pc, #8]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80013fe:	2101      	movs	r1, #1
 8001400:	430a      	orrs	r2, r1
 8001402:	621a      	str	r2, [r3, #32]
 8001404:	e036      	b.n	8001474 <HAL_RCC_OscConfig+0x3a4>
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40021000 	.word	0x40021000
 800140c:	fffeffff 	.word	0xfffeffff
 8001410:	fffbffff 	.word	0xfffbffff
 8001414:	40007000 	.word	0x40007000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x36a>
 8001420:	4bca      	ldr	r3, [pc, #808]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	4bc9      	ldr	r3, [pc, #804]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001426:	2101      	movs	r1, #1
 8001428:	438a      	bics	r2, r1
 800142a:	621a      	str	r2, [r3, #32]
 800142c:	4bc7      	ldr	r3, [pc, #796]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	4bc6      	ldr	r3, [pc, #792]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001432:	2104      	movs	r1, #4
 8001434:	438a      	bics	r2, r1
 8001436:	621a      	str	r2, [r3, #32]
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x3a4>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x38c>
 8001442:	4bc2      	ldr	r3, [pc, #776]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	4bc1      	ldr	r3, [pc, #772]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001448:	2104      	movs	r1, #4
 800144a:	430a      	orrs	r2, r1
 800144c:	621a      	str	r2, [r3, #32]
 800144e:	4bbf      	ldr	r3, [pc, #764]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001450:	6a1a      	ldr	r2, [r3, #32]
 8001452:	4bbe      	ldr	r3, [pc, #760]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001454:	2101      	movs	r1, #1
 8001456:	430a      	orrs	r2, r1
 8001458:	621a      	str	r2, [r3, #32]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0x3a4>
 800145c:	4bbb      	ldr	r3, [pc, #748]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800145e:	6a1a      	ldr	r2, [r3, #32]
 8001460:	4bba      	ldr	r3, [pc, #744]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001462:	2101      	movs	r1, #1
 8001464:	438a      	bics	r2, r1
 8001466:	621a      	str	r2, [r3, #32]
 8001468:	4bb8      	ldr	r3, [pc, #736]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	4bb7      	ldr	r3, [pc, #732]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800146e:	2104      	movs	r1, #4
 8001470:	438a      	bics	r2, r1
 8001472:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d014      	beq.n	80014a6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff f994 	bl	80007a8 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	e009      	b.n	800149a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff f98f 	bl	80007a8 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4aaf      	ldr	r2, [pc, #700]	; (8001750 <HAL_RCC_OscConfig+0x680>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e19a      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	4bac      	ldr	r3, [pc, #688]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x3b6>
 80014a4:	e013      	b.n	80014ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff f97f 	bl	80007a8 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ae:	e009      	b.n	80014c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff f97a 	bl	80007a8 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	4aa5      	ldr	r2, [pc, #660]	; (8001750 <HAL_RCC_OscConfig+0x680>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e185      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	4ba1      	ldr	r3, [pc, #644]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014ce:	231f      	movs	r3, #31
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d8:	4b9c      	ldr	r3, [pc, #624]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	4b9b      	ldr	r3, [pc, #620]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80014de:	499d      	ldr	r1, [pc, #628]	; (8001754 <HAL_RCC_OscConfig+0x684>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2210      	movs	r2, #16
 80014ea:	4013      	ands	r3, r2
 80014ec:	d063      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d12a      	bne.n	800154c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014f6:	4b95      	ldr	r3, [pc, #596]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fa:	4b94      	ldr	r3, [pc, #592]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80014fc:	2104      	movs	r1, #4
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001502:	4b92      	ldr	r3, [pc, #584]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001506:	4b91      	ldr	r3, [pc, #580]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001508:	2101      	movs	r1, #1
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff f94b 	bl	80007a8 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001518:	f7ff f946 	bl	80007a8 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e152      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800152a:	4b88      	ldr	r3, [pc, #544]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800152c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	d0f1      	beq.n	8001518 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001534:	4b85      	ldr	r3, [pc, #532]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	22f8      	movs	r2, #248	; 0xf8
 800153a:	4393      	bics	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	00da      	lsls	r2, r3, #3
 8001544:	4b81      	ldr	r3, [pc, #516]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001546:	430a      	orrs	r2, r1
 8001548:	635a      	str	r2, [r3, #52]	; 0x34
 800154a:	e034      	b.n	80015b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	3305      	adds	r3, #5
 8001552:	d111      	bne.n	8001578 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001554:	4b7d      	ldr	r3, [pc, #500]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001558:	4b7c      	ldr	r3, [pc, #496]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800155a:	2104      	movs	r1, #4
 800155c:	438a      	bics	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001560:	4b7a      	ldr	r3, [pc, #488]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001564:	22f8      	movs	r2, #248	; 0xf8
 8001566:	4393      	bics	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	00da      	lsls	r2, r3, #3
 8001570:	4b76      	ldr	r3, [pc, #472]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001572:	430a      	orrs	r2, r1
 8001574:	635a      	str	r2, [r3, #52]	; 0x34
 8001576:	e01e      	b.n	80015b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001578:	4b74      	ldr	r3, [pc, #464]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800157a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157c:	4b73      	ldr	r3, [pc, #460]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800157e:	2104      	movs	r1, #4
 8001580:	430a      	orrs	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001584:	4b71      	ldr	r3, [pc, #452]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001588:	4b70      	ldr	r3, [pc, #448]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff f90a 	bl	80007a8 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800159a:	f7ff f905 	bl	80007a8 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e111      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015ac:	4b67      	ldr	r3, [pc, #412]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80015ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b0:	2202      	movs	r2, #2
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f1      	bne.n	800159a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2220      	movs	r2, #32
 80015bc:	4013      	ands	r3, r2
 80015be:	d05c      	beq.n	800167a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015c0:	4b62      	ldr	r3, [pc, #392]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	220c      	movs	r2, #12
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b0c      	cmp	r3, #12
 80015ca:	d00e      	beq.n	80015ea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015cc:	4b5f      	ldr	r3, [pc, #380]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	220c      	movs	r2, #12
 80015d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d114      	bne.n	8001602 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015d8:	4b5c      	ldr	r3, [pc, #368]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	23c0      	movs	r3, #192	; 0xc0
 80015de:	025b      	lsls	r3, r3, #9
 80015e0:	401a      	ands	r2, r3
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d10b      	bne.n	8001602 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015ea:	4b58      	ldr	r3, [pc, #352]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80015ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	029b      	lsls	r3, r3, #10
 80015f2:	4013      	ands	r3, r2
 80015f4:	d040      	beq.n	8001678 <HAL_RCC_OscConfig+0x5a8>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d03c      	beq.n	8001678 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0e6      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d01b      	beq.n	8001642 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800160a:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800160c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160e:	4b4f      	ldr	r3, [pc, #316]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0249      	lsls	r1, r1, #9
 8001614:	430a      	orrs	r2, r1
 8001616:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff f8c6 	bl	80007a8 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001622:	f7ff f8c1 	bl	80007a8 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0cd      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001634:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	029b      	lsls	r3, r3, #10
 800163c:	4013      	ands	r3, r2
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x552>
 8001640:	e01b      	b.n	800167a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001642:	4b42      	ldr	r3, [pc, #264]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001646:	4b41      	ldr	r3, [pc, #260]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001648:	4943      	ldr	r1, [pc, #268]	; (8001758 <HAL_RCC_OscConfig+0x688>)
 800164a:	400a      	ands	r2, r1
 800164c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff f8ab 	bl	80007a8 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001658:	f7ff f8a6 	bl	80007a8 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0b2      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800166a:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800166c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	029b      	lsls	r3, r3, #10
 8001672:	4013      	ands	r3, r2
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x588>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001678:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	2b00      	cmp	r3, #0
 8001680:	d100      	bne.n	8001684 <HAL_RCC_OscConfig+0x5b4>
 8001682:	e0a4      	b.n	80017ce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	220c      	movs	r2, #12
 800168a:	4013      	ands	r3, r2
 800168c:	2b08      	cmp	r3, #8
 800168e:	d100      	bne.n	8001692 <HAL_RCC_OscConfig+0x5c2>
 8001690:	e078      	b.n	8001784 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	2b02      	cmp	r3, #2
 8001698:	d14c      	bne.n	8001734 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b2c      	ldr	r3, [pc, #176]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80016a0:	492e      	ldr	r1, [pc, #184]	; (800175c <HAL_RCC_OscConfig+0x68c>)
 80016a2:	400a      	ands	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff f87f 	bl	80007a8 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff f87a 	bl	80007a8 <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e086      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	049b      	lsls	r3, r3, #18
 80016ca:	4013      	ands	r3, r2
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	220f      	movs	r2, #15
 80016d4:	4393      	bics	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x690>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	431a      	orrs	r2, r3
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0449      	lsls	r1, r1, #17
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff f84d 	bl	80007a8 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff f848 	bl	80007a8 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e054      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	049b      	lsls	r3, r3, #18
 800172e:	4013      	ands	r3, r2
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x644>
 8001732:	e04c      	b.n	80017ce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <HAL_RCC_OscConfig+0x68c>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff f832 	bl	80007a8 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001748:	e015      	b.n	8001776 <HAL_RCC_OscConfig+0x6a6>
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	40021000 	.word	0x40021000
 8001750:	00001388 	.word	0x00001388
 8001754:	efffffff 	.word	0xefffffff
 8001758:	fffeffff 	.word	0xfffeffff
 800175c:	feffffff 	.word	0xfeffffff
 8001760:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff f820 	bl	80007a8 <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e02c      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_RCC_OscConfig+0x708>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	049b      	lsls	r3, r3, #18
 800177e:	4013      	ands	r3, r2
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x694>
 8001782:	e024      	b.n	80017ce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e01f      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_RCC_OscConfig+0x708>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_RCC_OscConfig+0x708>)
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d10e      	bne.n	80017ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	220f      	movs	r2, #15
 80017b0:	401a      	ands	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	23f0      	movs	r3, #240	; 0xf0
 80017be:	039b      	lsls	r3, r3, #14
 80017c0:	401a      	ands	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b008      	add	sp, #32
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0bf      	b.n	8001970 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	4b61      	ldr	r3, [pc, #388]	; (8001978 <HAL_RCC_ClockConfig+0x19c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4013      	ands	r3, r2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d911      	bls.n	8001822 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b5e      	ldr	r3, [pc, #376]	; (8001978 <HAL_RCC_ClockConfig+0x19c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4393      	bics	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <HAL_RCC_ClockConfig+0x19c>)
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_ClockConfig+0x19c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0a6      	b.n	8001970 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2202      	movs	r2, #2
 8001828:	4013      	ands	r3, r2
 800182a:	d015      	beq.n	8001858 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2204      	movs	r2, #4
 8001832:	4013      	ands	r3, r2
 8001834:	d006      	beq.n	8001844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	21e0      	movs	r1, #224	; 0xe0
 800183e:	00c9      	lsls	r1, r1, #3
 8001840:	430a      	orrs	r2, r1
 8001842:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001844:	4b4d      	ldr	r3, [pc, #308]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	22f0      	movs	r2, #240	; 0xf0
 800184a:	4393      	bics	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	4b4a      	ldr	r3, [pc, #296]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	d04c      	beq.n	80018fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b44      	ldr	r3, [pc, #272]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	029b      	lsls	r3, r3, #10
 8001872:	4013      	ands	r3, r2
 8001874:	d120      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e07a      	b.n	8001970 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	049b      	lsls	r3, r3, #18
 800188a:	4013      	ands	r3, r2
 800188c:	d114      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e06e      	b.n	8001970 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 800189c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	029b      	lsls	r3, r3, #10
 80018a2:	4013      	ands	r3, r2
 80018a4:	d108      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e062      	b.n	8001970 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e05b      	b.n	8001970 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2203      	movs	r2, #3
 80018be:	4393      	bics	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 80018c8:	430a      	orrs	r2, r1
 80018ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018cc:	f7fe ff6c 	bl	80007a8 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d4:	e009      	b.n	80018ea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7fe ff67 	bl	80007a8 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4a27      	ldr	r2, [pc, #156]	; (8001980 <HAL_RCC_ClockConfig+0x1a4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e042      	b.n	8001970 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	220c      	movs	r2, #12
 80018f0:	401a      	ands	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1ec      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_RCC_ClockConfig+0x19c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d211      	bcs.n	800192e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_RCC_ClockConfig+0x19c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2201      	movs	r2, #1
 8001910:	4393      	bics	r3, r2
 8001912:	0019      	movs	r1, r3
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_RCC_ClockConfig+0x19c>)
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_RCC_ClockConfig+0x19c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2201      	movs	r2, #1
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e020      	b.n	8001970 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2204      	movs	r2, #4
 8001934:	4013      	ands	r3, r2
 8001936:	d009      	beq.n	800194c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_RCC_ClockConfig+0x1a8>)
 800193e:	4013      	ands	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800194c:	f000 f820 	bl	8001990 <HAL_RCC_GetSysClockFreq>
 8001950:	0001      	movs	r1, r0
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1a0>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	220f      	movs	r2, #15
 800195a:	4013      	ands	r3, r2
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_RCC_ClockConfig+0x1ac>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	000a      	movs	r2, r1
 8001962:	40da      	lsrs	r2, r3
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1b0>)
 8001966:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001968:	2003      	movs	r0, #3
 800196a:	f7fe fed7 	bl	800071c <HAL_InitTick>
  
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b004      	add	sp, #16
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40022000 	.word	0x40022000
 800197c:	40021000 	.word	0x40021000
 8001980:	00001388 	.word	0x00001388
 8001984:	fffff8ff 	.word	0xfffff8ff
 8001988:	080030bc 	.word	0x080030bc
 800198c:	20000000 	.word	0x20000000

08001990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_GetSysClockFreq+0xd0>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	220c      	movs	r2, #12
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d046      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0xb8>
 80019ba:	d848      	bhi.n	8001a4e <HAL_RCC_GetSysClockFreq+0xbe>
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d002      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x36>
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d003      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x3c>
 80019c4:	e043      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xd4>)
 80019c8:	613b      	str	r3, [r7, #16]
      break;
 80019ca:	e043      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	220f      	movs	r2, #15
 80019d2:	4013      	ands	r3, r2
 80019d4:	4a24      	ldr	r2, [pc, #144]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xd8>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_GetSysClockFreq+0xd0>)
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	220f      	movs	r2, #15
 80019e0:	4013      	ands	r3, r2
 80019e2:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xdc>)
 80019e4:	5cd3      	ldrb	r3, [r2, r3]
 80019e6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	23c0      	movs	r3, #192	; 0xc0
 80019ec:	025b      	lsls	r3, r3, #9
 80019ee:	401a      	ands	r2, r3
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d109      	bne.n	8001a0c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	481a      	ldr	r0, [pc, #104]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xd4>)
 80019fc:	f7fe fb82 	bl	8000104 <__udivsi3>
 8001a00:	0003      	movs	r3, r0
 8001a02:	001a      	movs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4353      	muls	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e01a      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	23c0      	movs	r3, #192	; 0xc0
 8001a10:	025b      	lsls	r3, r3, #9
 8001a12:	401a      	ands	r2, r3
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	025b      	lsls	r3, r3, #9
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d109      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	4814      	ldr	r0, [pc, #80]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001a20:	f7fe fb70 	bl	8000104 <__udivsi3>
 8001a24:	0003      	movs	r3, r0
 8001a26:	001a      	movs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4353      	muls	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	480c      	ldr	r0, [pc, #48]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a34:	f7fe fb66 	bl	8000104 <__udivsi3>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4353      	muls	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	613b      	str	r3, [r7, #16]
      break;
 8001a46:	e005      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001a4a:	613b      	str	r3, [r7, #16]
      break;
 8001a4c:	e002      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a50:	613b      	str	r3, [r7, #16]
      break;
 8001a52:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a54:	693b      	ldr	r3, [r7, #16]
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b006      	add	sp, #24
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	40021000 	.word	0x40021000
 8001a64:	007a1200 	.word	0x007a1200
 8001a68:	080030d4 	.word	0x080030d4
 8001a6c:	080030e4 	.word	0x080030e4
 8001a70:	02dc6c00 	.word	0x02dc6c00

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	0001      	movs	r1, r0
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	2207      	movs	r2, #7
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	40d9      	lsrs	r1, r3
 8001aa2:	000b      	movs	r3, r1
}    
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	080030cc 	.word	0x080030cc

08001ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	025b      	lsls	r3, r3, #9
 8001acc:	4013      	ands	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ad0:	e08e      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2017      	movs	r0, #23
 8001ad4:	183b      	adds	r3, r7, r0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4b6e      	ldr	r3, [pc, #440]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	055b      	lsls	r3, r3, #21
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d110      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b6b      	ldr	r3, [pc, #428]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0549      	lsls	r1, r1, #21
 8001af0:	430a      	orrs	r2, r1
 8001af2:	61da      	str	r2, [r3, #28]
 8001af4:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	055b      	lsls	r3, r3, #21
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	d11a      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b14:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	0049      	lsls	r1, r1, #1
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b22:	f7fe fe41 	bl	80007a8 <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	e008      	b.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2c:	f7fe fe3c 	bl	80007a8 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0a6      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	4b56      	ldr	r3, [pc, #344]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b4a:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4c:	6a1a      	ldr	r2, [r3, #32]
 8001b4e:	23c0      	movs	r3, #192	; 0xc0
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d034      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	23c0      	movs	r3, #192	; 0xc0
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4013      	ands	r3, r2
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d02c      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0249      	lsls	r1, r1, #9
 8001b80:	430a      	orrs	r2, r1
 8001b82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b84:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b8a:	4945      	ldr	r1, [pc, #276]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b90:	4b40      	ldr	r3, [pc, #256]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7fe fe03 	bl	80007a8 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba6:	e009      	b.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7fe fdfe 	bl	80007a8 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a3c      	ldr	r2, [pc, #240]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e067      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc6:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a34      	ldr	r2, [pc, #208]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bda:	2317      	movs	r3, #23
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001be6:	69da      	ldr	r2, [r3, #28]
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bea:	492f      	ldr	r1, [pc, #188]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	2203      	movs	r2, #3
 8001c00:	4393      	bics	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2202      	movs	r2, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d009      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	02db      	lsls	r3, r3, #11
 8001c34:	4013      	ands	r3, r2
 8001c36:	d009      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2220      	movs	r2, #32
 8001c52:	4013      	ands	r3, r2
 8001c54:	d009      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	4393      	bics	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4013      	ands	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	2240      	movs	r2, #64	; 0x40
 8001c7c:	4393      	bics	r3, r2
 8001c7e:	0019      	movs	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c86:	430a      	orrs	r2, r1
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b006      	add	sp, #24
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	fffffcff 	.word	0xfffffcff
 8001ca0:	fffeffff 	.word	0xfffeffff
 8001ca4:	00001388 	.word	0x00001388
 8001ca8:	efffffff 	.word	0xefffffff
 8001cac:	fffcffff 	.word	0xfffcffff
 8001cb0:	fff3ffff 	.word	0xfff3ffff

08001cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e044      	b.n	8001d50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2278      	movs	r2, #120	; 0x78
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7fe fbf9 	bl	80004d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2224      	movs	r2, #36	; 0x24
 8001ce2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 fb84 	bl	8002404 <UART_SetConfig>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e024      	b.n	8001d50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f000 fd5f 	bl	80027d4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	490d      	ldr	r1, [pc, #52]	; (8001d58 <HAL_UART_Init+0xa4>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	212a      	movs	r1, #42	; 0x2a
 8001d32:	438a      	bics	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 fdf7 	bl	800293c <UART_CheckIdleState>
 8001d4e:	0003      	movs	r3, r0
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	ffffb7ff 	.word	0xffffb7ff

08001d5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	1dbb      	adds	r3, r7, #6
 8001d68:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	589b      	ldr	r3, [r3, r2]
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d145      	bne.n	8001e00 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_UART_Receive_DMA+0x26>
 8001d7a:	1dbb      	adds	r3, r7, #6
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e03d      	b.n	8001e02 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d109      	bne.n	8001da6 <HAL_UART_Receive_DMA+0x4a>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e02d      	b.n	8001e02 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	4013      	ands	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dba:	f3ef 8310 	mrs	r3, PRIMASK
 8001dbe:	613b      	str	r3, [r7, #16]
  return(result);
 8001dc0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f383 8810 	msr	PRIMASK, r3
}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	04c9      	lsls	r1, r1, #19
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f383 8810 	msr	PRIMASK, r3
}
 8001dec:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001dee:	1dbb      	adds	r3, r7, #6
 8001df0:	881a      	ldrh	r2, [r3, #0]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 feb2 	bl	8002b60 <UART_Start_Receive_DMA>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	e000      	b.n	8001e02 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001e00:	2302      	movs	r3, #2
  }
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b008      	add	sp, #32
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b0ab      	sub	sp, #172	; 0xac
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	22a4      	movs	r2, #164	; 0xa4
 8001e1c:	18b9      	adds	r1, r7, r2
 8001e1e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	20a0      	movs	r0, #160	; 0xa0
 8001e28:	1839      	adds	r1, r7, r0
 8001e2a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	219c      	movs	r1, #156	; 0x9c
 8001e34:	1879      	adds	r1, r7, r1
 8001e36:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e38:	0011      	movs	r1, r2
 8001e3a:	18bb      	adds	r3, r7, r2
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a99      	ldr	r2, [pc, #612]	; (80020a4 <HAL_UART_IRQHandler+0x298>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	2298      	movs	r2, #152	; 0x98
 8001e44:	18bc      	adds	r4, r7, r2
 8001e46:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001e48:	18bb      	adds	r3, r7, r2
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d114      	bne.n	8001e7a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2220      	movs	r2, #32
 8001e56:	4013      	ands	r3, r2
 8001e58:	d00f      	beq.n	8001e7a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	4013      	ands	r3, r2
 8001e62:	d00a      	beq.n	8001e7a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d100      	bne.n	8001e6e <HAL_UART_IRQHandler+0x62>
 8001e6c:	e29e      	b.n	80023ac <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	0010      	movs	r0, r2
 8001e76:	4798      	blx	r3
      }
      return;
 8001e78:	e298      	b.n	80023ac <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001e7a:	2398      	movs	r3, #152	; 0x98
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d100      	bne.n	8001e86 <HAL_UART_IRQHandler+0x7a>
 8001e84:	e114      	b.n	80020b0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001e86:	239c      	movs	r3, #156	; 0x9c
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d106      	bne.n	8001ea0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001e92:	23a0      	movs	r3, #160	; 0xa0
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a83      	ldr	r2, [pc, #524]	; (80020a8 <HAL_UART_IRQHandler+0x29c>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d100      	bne.n	8001ea0 <HAL_UART_IRQHandler+0x94>
 8001e9e:	e107      	b.n	80020b0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ea0:	23a4      	movs	r3, #164	; 0xa4
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d012      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xc6>
 8001eac:	23a0      	movs	r3, #160	; 0xa0
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2284      	movs	r2, #132	; 0x84
 8001ec6:	589b      	ldr	r3, [r3, r2]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2184      	movs	r1, #132	; 0x84
 8001ed0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ed2:	23a4      	movs	r3, #164	; 0xa4
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d011      	beq.n	8001f02 <HAL_UART_IRQHandler+0xf6>
 8001ede:	239c      	movs	r3, #156	; 0x9c
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d00b      	beq.n	8001f02 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2284      	movs	r2, #132	; 0x84
 8001ef6:	589b      	ldr	r3, [r3, r2]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2184      	movs	r1, #132	; 0x84
 8001f00:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f02:	23a4      	movs	r3, #164	; 0xa4
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d011      	beq.n	8001f32 <HAL_UART_IRQHandler+0x126>
 8001f0e:	239c      	movs	r3, #156	; 0x9c
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	d00b      	beq.n	8001f32 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2284      	movs	r2, #132	; 0x84
 8001f26:	589b      	ldr	r3, [r3, r2]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2184      	movs	r1, #132	; 0x84
 8001f30:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f32:	23a4      	movs	r3, #164	; 0xa4
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2208      	movs	r2, #8
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d017      	beq.n	8001f6e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f3e:	23a0      	movs	r3, #160	; 0xa0
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2220      	movs	r2, #32
 8001f46:	4013      	ands	r3, r2
 8001f48:	d105      	bne.n	8001f56 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001f4a:	239c      	movs	r3, #156	; 0x9c
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f54:	d00b      	beq.n	8001f6e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2284      	movs	r2, #132	; 0x84
 8001f62:	589b      	ldr	r3, [r3, r2]
 8001f64:	2208      	movs	r2, #8
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2184      	movs	r1, #132	; 0x84
 8001f6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001f6e:	23a4      	movs	r3, #164	; 0xa4
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_UART_IRQHandler+0x198>
 8001f7c:	23a0      	movs	r3, #160	; 0xa0
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	04db      	lsls	r3, r3, #19
 8001f86:	4013      	ands	r3, r2
 8001f88:	d00c      	beq.n	8001fa4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2284      	movs	r2, #132	; 0x84
 8001f98:	589b      	ldr	r3, [r3, r2]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2184      	movs	r1, #132	; 0x84
 8001fa2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2284      	movs	r2, #132	; 0x84
 8001fa8:	589b      	ldr	r3, [r3, r2]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d100      	bne.n	8001fb0 <HAL_UART_IRQHandler+0x1a4>
 8001fae:	e1ff      	b.n	80023b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fb0:	23a4      	movs	r3, #164	; 0xa4
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d00e      	beq.n	8001fda <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fbc:	23a0      	movs	r3, #160	; 0xa0
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d008      	beq.n	8001fda <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2284      	movs	r2, #132	; 0x84
 8001fde:	589b      	ldr	r3, [r3, r2]
 8001fe0:	2194      	movs	r1, #148	; 0x94
 8001fe2:	187a      	adds	r2, r7, r1
 8001fe4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d004      	beq.n	8001ffe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2228      	movs	r2, #40	; 0x28
 8001ffa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ffc:	d047      	beq.n	800208e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f000 fe71 	bl	8002ce8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	4013      	ands	r3, r2
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	d137      	bne.n	8002084 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002014:	f3ef 8310 	mrs	r3, PRIMASK
 8002018:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800201a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800201c:	2090      	movs	r0, #144	; 0x90
 800201e:	183a      	adds	r2, r7, r0
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	2301      	movs	r3, #1
 8002024:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002028:	f383 8810 	msr	PRIMASK, r3
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2140      	movs	r1, #64	; 0x40
 800203a:	438a      	bics	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	183b      	adds	r3, r7, r0
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002046:	f383 8810 	msr	PRIMASK, r3
}
 800204a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	2b00      	cmp	r3, #0
 8002052:	d012      	beq.n	800207a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_UART_IRQHandler+0x2a0>)
 800205a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002060:	0018      	movs	r0, r3
 8002062:	f7fe fd6f 	bl	8000b44 <HAL_DMA_Abort_IT>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d01a      	beq.n	80020a0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002074:	0018      	movs	r0, r3
 8002076:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002078:	e012      	b.n	80020a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 f9ad 	bl	80023dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002082:	e00d      	b.n	80020a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f9a8 	bl	80023dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208c:	e008      	b.n	80020a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	0018      	movs	r0, r3
 8002092:	f000 f9a3 	bl	80023dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2284      	movs	r2, #132	; 0x84
 800209a:	2100      	movs	r1, #0
 800209c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800209e:	e187      	b.n	80023b0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a0:	46c0      	nop			; (mov r8, r8)
    return;
 80020a2:	e185      	b.n	80023b0 <HAL_UART_IRQHandler+0x5a4>
 80020a4:	0000080f 	.word	0x0000080f
 80020a8:	04000120 	.word	0x04000120
 80020ac:	08002fa3 	.word	0x08002fa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d000      	beq.n	80020ba <HAL_UART_IRQHandler+0x2ae>
 80020b8:	e139      	b.n	800232e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80020ba:	23a4      	movs	r3, #164	; 0xa4
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2210      	movs	r2, #16
 80020c2:	4013      	ands	r3, r2
 80020c4:	d100      	bne.n	80020c8 <HAL_UART_IRQHandler+0x2bc>
 80020c6:	e132      	b.n	800232e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80020c8:	23a0      	movs	r3, #160	; 0xa0
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2210      	movs	r2, #16
 80020d0:	4013      	ands	r3, r2
 80020d2:	d100      	bne.n	80020d6 <HAL_UART_IRQHandler+0x2ca>
 80020d4:	e12b      	b.n	800232e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2210      	movs	r2, #16
 80020dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	d000      	beq.n	80020ee <HAL_UART_IRQHandler+0x2e2>
 80020ec:	e09f      	b.n	800222e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	217e      	movs	r1, #126	; 0x7e
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d100      	bne.n	8002106 <HAL_UART_IRQHandler+0x2fa>
 8002104:	e156      	b.n	80023b4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2258      	movs	r2, #88	; 0x58
 800210a:	5a9b      	ldrh	r3, [r3, r2]
 800210c:	187a      	adds	r2, r7, r1
 800210e:	8812      	ldrh	r2, [r2, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d300      	bcc.n	8002116 <HAL_UART_IRQHandler+0x30a>
 8002114:	e14e      	b.n	80023b4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	187a      	adds	r2, r7, r1
 800211a:	215a      	movs	r1, #90	; 0x5a
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b20      	cmp	r3, #32
 8002128:	d06f      	beq.n	800220a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800212a:	f3ef 8310 	mrs	r3, PRIMASK
 800212e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002132:	67bb      	str	r3, [r7, #120]	; 0x78
 8002134:	2301      	movs	r3, #1
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	f383 8810 	msr	PRIMASK, r3
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	499e      	ldr	r1, [pc, #632]	; (80023c4 <HAL_UART_IRQHandler+0x5b8>)
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002152:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002156:	f383 8810 	msr	PRIMASK, r3
}
 800215a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800215c:	f3ef 8310 	mrs	r3, PRIMASK
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002164:	677b      	str	r3, [r7, #116]	; 0x74
 8002166:	2301      	movs	r3, #1
 8002168:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216c:	f383 8810 	msr	PRIMASK, r3
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	438a      	bics	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002184:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002188:	f383 8810 	msr	PRIMASK, r3
}
 800218c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218e:	f3ef 8310 	mrs	r3, PRIMASK
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002194:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002196:	673b      	str	r3, [r7, #112]	; 0x70
 8002198:	2301      	movs	r3, #1
 800219a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219e:	f383 8810 	msr	PRIMASK, r3
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2140      	movs	r1, #64	; 0x40
 80021b0:	438a      	bics	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ba:	f383 8810 	msr	PRIMASK, r3
}
 80021be:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	2120      	movs	r1, #32
 80021c6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ce:	f3ef 8310 	mrs	r3, PRIMASK
 80021d2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80021d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021d8:	2301      	movs	r3, #1
 80021da:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021de:	f383 8810 	msr	PRIMASK, r3
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2110      	movs	r1, #16
 80021f0:	438a      	bics	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fa:	f383 8810 	msr	PRIMASK, r3
}
 80021fe:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002204:	0018      	movs	r0, r3
 8002206:	f7fe fc65 	bl	8000ad4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2258      	movs	r2, #88	; 0x58
 8002214:	5a9a      	ldrh	r2, [r3, r2]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	215a      	movs	r1, #90	; 0x5a
 800221a:	5a5b      	ldrh	r3, [r3, r1]
 800221c:	b29b      	uxth	r3, r3
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	b29a      	uxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0011      	movs	r1, r2
 8002226:	0018      	movs	r0, r3
 8002228:	f000 f8e0 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800222c:	e0c2      	b.n	80023b4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2258      	movs	r2, #88	; 0x58
 8002232:	5a99      	ldrh	r1, [r3, r2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	225a      	movs	r2, #90	; 0x5a
 8002238:	5a9b      	ldrh	r3, [r3, r2]
 800223a:	b29a      	uxth	r2, r3
 800223c:	208e      	movs	r0, #142	; 0x8e
 800223e:	183b      	adds	r3, r7, r0
 8002240:	1a8a      	subs	r2, r1, r2
 8002242:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	225a      	movs	r2, #90	; 0x5a
 8002248:	5a9b      	ldrh	r3, [r3, r2]
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <HAL_UART_IRQHandler+0x446>
 8002250:	e0b2      	b.n	80023b8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002252:	183b      	adds	r3, r7, r0
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d100      	bne.n	800225c <HAL_UART_IRQHandler+0x450>
 800225a:	e0ad      	b.n	80023b8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800225c:	f3ef 8310 	mrs	r3, PRIMASK
 8002260:	60fb      	str	r3, [r7, #12]
  return(result);
 8002262:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002264:	2488      	movs	r4, #136	; 0x88
 8002266:	193a      	adds	r2, r7, r4
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	2301      	movs	r3, #1
 800226c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f383 8810 	msr	PRIMASK, r3
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4951      	ldr	r1, [pc, #324]	; (80023c8 <HAL_UART_IRQHandler+0x5bc>)
 8002282:	400a      	ands	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	193b      	adds	r3, r7, r4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f383 8810 	msr	PRIMASK, r3
}
 8002292:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002294:	f3ef 8310 	mrs	r3, PRIMASK
 8002298:	61bb      	str	r3, [r7, #24]
  return(result);
 800229a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229c:	2484      	movs	r4, #132	; 0x84
 800229e:	193a      	adds	r2, r7, r4
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	2301      	movs	r3, #1
 80022a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f383 8810 	msr	PRIMASK, r3
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	438a      	bics	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	193b      	adds	r3, r7, r4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	f383 8810 	msr	PRIMASK, r3
}
 80022ca:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	2120      	movs	r1, #32
 80022d2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e0:	f3ef 8310 	mrs	r3, PRIMASK
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022e8:	2480      	movs	r4, #128	; 0x80
 80022ea:	193a      	adds	r2, r7, r4
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	2301      	movs	r3, #1
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	f383 8810 	msr	PRIMASK, r3
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2110      	movs	r1, #16
 8002306:	438a      	bics	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	193b      	adds	r3, r7, r4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	f383 8810 	msr	PRIMASK, r3
}
 8002316:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800231e:	183b      	adds	r3, r7, r0
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0011      	movs	r1, r2
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f860 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800232c:	e044      	b.n	80023b8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800232e:	23a4      	movs	r3, #164	; 0xa4
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	035b      	lsls	r3, r3, #13
 8002338:	4013      	ands	r3, r2
 800233a:	d010      	beq.n	800235e <HAL_UART_IRQHandler+0x552>
 800233c:	239c      	movs	r3, #156	; 0x9c
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	03db      	lsls	r3, r3, #15
 8002346:	4013      	ands	r3, r2
 8002348:	d009      	beq.n	800235e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	0352      	lsls	r2, r2, #13
 8002352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fe65 	bl	8003026 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800235c:	e02f      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800235e:	23a4      	movs	r3, #164	; 0xa4
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	4013      	ands	r3, r2
 8002368:	d00f      	beq.n	800238a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800236a:	23a0      	movs	r3, #160	; 0xa0
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	4013      	ands	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01e      	beq.n	80023bc <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	0010      	movs	r0, r2
 8002386:	4798      	blx	r3
    }
    return;
 8002388:	e018      	b.n	80023bc <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800238a:	23a4      	movs	r3, #164	; 0xa4
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	4013      	ands	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_UART_IRQHandler+0x5b2>
 8002396:	23a0      	movs	r3, #160	; 0xa0
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	4013      	ands	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fe13 	bl	8002fd0 <UART_EndTransmit_IT>
    return;
 80023aa:	e008      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
      return;
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	e006      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
    return;
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	e004      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
      return;
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	e002      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
      return;
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	e000      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
    return;
 80023bc:	46c0      	nop			; (mov r8, r8)
  }

}
 80023be:	46bd      	mov	sp, r7
 80023c0:	b02b      	add	sp, #172	; 0xac
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	fffffeff 	.word	0xfffffeff
 80023c8:	fffffedf 	.word	0xfffffedf

080023cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	000a      	movs	r2, r1
 80023f6:	1cbb      	adds	r3, r7, #2
 80023f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800240c:	231e      	movs	r3, #30
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4abe      	ldr	r2, [pc, #760]	; (800272c <UART_SetConfig+0x328>)
 8002434:	4013      	ands	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4ab9      	ldr	r2, [pc, #740]	; (8002730 <UART_SetConfig+0x32c>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4ab0      	ldr	r2, [pc, #704]	; (8002734 <UART_SetConfig+0x330>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	430a      	orrs	r2, r1
 800247e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4aac      	ldr	r2, [pc, #688]	; (8002738 <UART_SetConfig+0x334>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d127      	bne.n	80024da <UART_SetConfig+0xd6>
 800248a:	4bac      	ldr	r3, [pc, #688]	; (800273c <UART_SetConfig+0x338>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	2203      	movs	r2, #3
 8002490:	4013      	ands	r3, r2
 8002492:	2b03      	cmp	r3, #3
 8002494:	d00d      	beq.n	80024b2 <UART_SetConfig+0xae>
 8002496:	d81b      	bhi.n	80024d0 <UART_SetConfig+0xcc>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d014      	beq.n	80024c6 <UART_SetConfig+0xc2>
 800249c:	d818      	bhi.n	80024d0 <UART_SetConfig+0xcc>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <UART_SetConfig+0xa4>
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d00a      	beq.n	80024bc <UART_SetConfig+0xb8>
 80024a6:	e013      	b.n	80024d0 <UART_SetConfig+0xcc>
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e0bd      	b.n	800262e <UART_SetConfig+0x22a>
 80024b2:	231f      	movs	r3, #31
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2202      	movs	r2, #2
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e0b8      	b.n	800262e <UART_SetConfig+0x22a>
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2204      	movs	r2, #4
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e0b3      	b.n	800262e <UART_SetConfig+0x22a>
 80024c6:	231f      	movs	r3, #31
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2208      	movs	r2, #8
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e0ae      	b.n	800262e <UART_SetConfig+0x22a>
 80024d0:	231f      	movs	r3, #31
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2210      	movs	r2, #16
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e0a9      	b.n	800262e <UART_SetConfig+0x22a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a98      	ldr	r2, [pc, #608]	; (8002740 <UART_SetConfig+0x33c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d134      	bne.n	800254e <UART_SetConfig+0x14a>
 80024e4:	4b95      	ldr	r3, [pc, #596]	; (800273c <UART_SetConfig+0x338>)
 80024e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e8:	23c0      	movs	r3, #192	; 0xc0
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	4013      	ands	r3, r2
 80024ee:	22c0      	movs	r2, #192	; 0xc0
 80024f0:	0292      	lsls	r2, r2, #10
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d017      	beq.n	8002526 <UART_SetConfig+0x122>
 80024f6:	22c0      	movs	r2, #192	; 0xc0
 80024f8:	0292      	lsls	r2, r2, #10
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d822      	bhi.n	8002544 <UART_SetConfig+0x140>
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0292      	lsls	r2, r2, #10
 8002502:	4293      	cmp	r3, r2
 8002504:	d019      	beq.n	800253a <UART_SetConfig+0x136>
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	0292      	lsls	r2, r2, #10
 800250a:	4293      	cmp	r3, r2
 800250c:	d81a      	bhi.n	8002544 <UART_SetConfig+0x140>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <UART_SetConfig+0x118>
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	0252      	lsls	r2, r2, #9
 8002516:	4293      	cmp	r3, r2
 8002518:	d00a      	beq.n	8002530 <UART_SetConfig+0x12c>
 800251a:	e013      	b.n	8002544 <UART_SetConfig+0x140>
 800251c:	231f      	movs	r3, #31
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e083      	b.n	800262e <UART_SetConfig+0x22a>
 8002526:	231f      	movs	r3, #31
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e07e      	b.n	800262e <UART_SetConfig+0x22a>
 8002530:	231f      	movs	r3, #31
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2204      	movs	r2, #4
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e079      	b.n	800262e <UART_SetConfig+0x22a>
 800253a:	231f      	movs	r3, #31
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2208      	movs	r2, #8
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e074      	b.n	800262e <UART_SetConfig+0x22a>
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2210      	movs	r2, #16
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e06f      	b.n	800262e <UART_SetConfig+0x22a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7c      	ldr	r2, [pc, #496]	; (8002744 <UART_SetConfig+0x340>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d134      	bne.n	80025c2 <UART_SetConfig+0x1be>
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <UART_SetConfig+0x338>)
 800255a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255c:	23c0      	movs	r3, #192	; 0xc0
 800255e:	031b      	lsls	r3, r3, #12
 8002560:	4013      	ands	r3, r2
 8002562:	22c0      	movs	r2, #192	; 0xc0
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	4293      	cmp	r3, r2
 8002568:	d017      	beq.n	800259a <UART_SetConfig+0x196>
 800256a:	22c0      	movs	r2, #192	; 0xc0
 800256c:	0312      	lsls	r2, r2, #12
 800256e:	4293      	cmp	r3, r2
 8002570:	d822      	bhi.n	80025b8 <UART_SetConfig+0x1b4>
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	0312      	lsls	r2, r2, #12
 8002576:	4293      	cmp	r3, r2
 8002578:	d019      	beq.n	80025ae <UART_SetConfig+0x1aa>
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	0312      	lsls	r2, r2, #12
 800257e:	4293      	cmp	r3, r2
 8002580:	d81a      	bhi.n	80025b8 <UART_SetConfig+0x1b4>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <UART_SetConfig+0x18c>
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	02d2      	lsls	r2, r2, #11
 800258a:	4293      	cmp	r3, r2
 800258c:	d00a      	beq.n	80025a4 <UART_SetConfig+0x1a0>
 800258e:	e013      	b.n	80025b8 <UART_SetConfig+0x1b4>
 8002590:	231f      	movs	r3, #31
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e049      	b.n	800262e <UART_SetConfig+0x22a>
 800259a:	231f      	movs	r3, #31
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	e044      	b.n	800262e <UART_SetConfig+0x22a>
 80025a4:	231f      	movs	r3, #31
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2204      	movs	r2, #4
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e03f      	b.n	800262e <UART_SetConfig+0x22a>
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2208      	movs	r2, #8
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e03a      	b.n	800262e <UART_SetConfig+0x22a>
 80025b8:	231f      	movs	r3, #31
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2210      	movs	r2, #16
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e035      	b.n	800262e <UART_SetConfig+0x22a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a60      	ldr	r2, [pc, #384]	; (8002748 <UART_SetConfig+0x344>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d104      	bne.n	80025d6 <UART_SetConfig+0x1d2>
 80025cc:	231f      	movs	r3, #31
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e02b      	b.n	800262e <UART_SetConfig+0x22a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5c      	ldr	r2, [pc, #368]	; (800274c <UART_SetConfig+0x348>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d104      	bne.n	80025ea <UART_SetConfig+0x1e6>
 80025e0:	231f      	movs	r3, #31
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e021      	b.n	800262e <UART_SetConfig+0x22a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a58      	ldr	r2, [pc, #352]	; (8002750 <UART_SetConfig+0x34c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d104      	bne.n	80025fe <UART_SetConfig+0x1fa>
 80025f4:	231f      	movs	r3, #31
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e017      	b.n	800262e <UART_SetConfig+0x22a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a54      	ldr	r2, [pc, #336]	; (8002754 <UART_SetConfig+0x350>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d104      	bne.n	8002612 <UART_SetConfig+0x20e>
 8002608:	231f      	movs	r3, #31
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e00d      	b.n	800262e <UART_SetConfig+0x22a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a50      	ldr	r2, [pc, #320]	; (8002758 <UART_SetConfig+0x354>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d104      	bne.n	8002626 <UART_SetConfig+0x222>
 800261c:	231f      	movs	r3, #31
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e003      	b.n	800262e <UART_SetConfig+0x22a>
 8002626:	231f      	movs	r3, #31
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2210      	movs	r2, #16
 800262c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	429a      	cmp	r2, r3
 8002638:	d15c      	bne.n	80026f4 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 800263a:	231f      	movs	r3, #31
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d015      	beq.n	8002670 <UART_SetConfig+0x26c>
 8002644:	dc18      	bgt.n	8002678 <UART_SetConfig+0x274>
 8002646:	2b04      	cmp	r3, #4
 8002648:	d00d      	beq.n	8002666 <UART_SetConfig+0x262>
 800264a:	dc15      	bgt.n	8002678 <UART_SetConfig+0x274>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <UART_SetConfig+0x252>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d005      	beq.n	8002660 <UART_SetConfig+0x25c>
 8002654:	e010      	b.n	8002678 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002656:	f7ff fa17 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 800265a:	0003      	movs	r3, r0
 800265c:	61bb      	str	r3, [r7, #24]
        break;
 800265e:	e012      	b.n	8002686 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002660:	4b3e      	ldr	r3, [pc, #248]	; (800275c <UART_SetConfig+0x358>)
 8002662:	61bb      	str	r3, [r7, #24]
        break;
 8002664:	e00f      	b.n	8002686 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002666:	f7ff f993 	bl	8001990 <HAL_RCC_GetSysClockFreq>
 800266a:	0003      	movs	r3, r0
 800266c:	61bb      	str	r3, [r7, #24]
        break;
 800266e:	e00a      	b.n	8002686 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	61bb      	str	r3, [r7, #24]
        break;
 8002676:	e006      	b.n	8002686 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800267c:	231e      	movs	r3, #30
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
        break;
 8002684:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d100      	bne.n	800268e <UART_SetConfig+0x28a>
 800268c:	e095      	b.n	80027ba <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	005a      	lsls	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	18d2      	adds	r2, r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	0019      	movs	r1, r3
 80026a0:	0010      	movs	r0, r2
 80026a2:	f7fd fd2f 	bl	8000104 <__udivsi3>
 80026a6:	0003      	movs	r3, r0
 80026a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d91c      	bls.n	80026ea <UART_SetConfig+0x2e6>
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	025b      	lsls	r3, r3, #9
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d217      	bcs.n	80026ea <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	200e      	movs	r0, #14
 80026c0:	183b      	adds	r3, r7, r0
 80026c2:	210f      	movs	r1, #15
 80026c4:	438a      	bics	r2, r1
 80026c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2207      	movs	r2, #7
 80026d0:	4013      	ands	r3, r2
 80026d2:	b299      	uxth	r1, r3
 80026d4:	183b      	adds	r3, r7, r0
 80026d6:	183a      	adds	r2, r7, r0
 80026d8:	8812      	ldrh	r2, [r2, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	183a      	adds	r2, r7, r0
 80026e4:	8812      	ldrh	r2, [r2, #0]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	e067      	b.n	80027ba <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80026ea:	231e      	movs	r3, #30
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e062      	b.n	80027ba <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026f4:	231f      	movs	r3, #31
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d030      	beq.n	8002760 <UART_SetConfig+0x35c>
 80026fe:	dc33      	bgt.n	8002768 <UART_SetConfig+0x364>
 8002700:	2b04      	cmp	r3, #4
 8002702:	d00d      	beq.n	8002720 <UART_SetConfig+0x31c>
 8002704:	dc30      	bgt.n	8002768 <UART_SetConfig+0x364>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <UART_SetConfig+0x30c>
 800270a:	2b02      	cmp	r3, #2
 800270c:	d005      	beq.n	800271a <UART_SetConfig+0x316>
 800270e:	e02b      	b.n	8002768 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002710:	f7ff f9ba 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002714:	0003      	movs	r3, r0
 8002716:	61bb      	str	r3, [r7, #24]
        break;
 8002718:	e02d      	b.n	8002776 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <UART_SetConfig+0x358>)
 800271c:	61bb      	str	r3, [r7, #24]
        break;
 800271e:	e02a      	b.n	8002776 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002720:	f7ff f936 	bl	8001990 <HAL_RCC_GetSysClockFreq>
 8002724:	0003      	movs	r3, r0
 8002726:	61bb      	str	r3, [r7, #24]
        break;
 8002728:	e025      	b.n	8002776 <UART_SetConfig+0x372>
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	efff69f3 	.word	0xefff69f3
 8002730:	ffffcfff 	.word	0xffffcfff
 8002734:	fffff4ff 	.word	0xfffff4ff
 8002738:	40013800 	.word	0x40013800
 800273c:	40021000 	.word	0x40021000
 8002740:	40004400 	.word	0x40004400
 8002744:	40004800 	.word	0x40004800
 8002748:	40004c00 	.word	0x40004c00
 800274c:	40005000 	.word	0x40005000
 8002750:	40011400 	.word	0x40011400
 8002754:	40011800 	.word	0x40011800
 8002758:	40011c00 	.word	0x40011c00
 800275c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	61bb      	str	r3, [r7, #24]
        break;
 8002766:	e006      	b.n	8002776 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800276c:	231e      	movs	r3, #30
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
        break;
 8002774:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01e      	beq.n	80027ba <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	085a      	lsrs	r2, r3, #1
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	18d2      	adds	r2, r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0019      	movs	r1, r3
 800278c:	0010      	movs	r0, r2
 800278e:	f7fd fcb9 	bl	8000104 <__udivsi3>
 8002792:	0003      	movs	r3, r0
 8002794:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d90a      	bls.n	80027b2 <UART_SetConfig+0x3ae>
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	025b      	lsls	r3, r3, #9
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d205      	bcs.n	80027b2 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	e003      	b.n	80027ba <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80027b2:	231e      	movs	r3, #30
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80027c6:	231e      	movs	r3, #30
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b008      	add	sp, #32
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2201      	movs	r2, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d00b      	beq.n	80027fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <UART_AdvFeatureConfig+0x144>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2202      	movs	r2, #2
 8002804:	4013      	ands	r3, r2
 8002806:	d00b      	beq.n	8002820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a43      	ldr	r2, [pc, #268]	; (800291c <UART_AdvFeatureConfig+0x148>)
 8002810:	4013      	ands	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2204      	movs	r2, #4
 8002826:	4013      	ands	r3, r2
 8002828:	d00b      	beq.n	8002842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a3b      	ldr	r2, [pc, #236]	; (8002920 <UART_AdvFeatureConfig+0x14c>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2208      	movs	r2, #8
 8002848:	4013      	ands	r3, r2
 800284a:	d00b      	beq.n	8002864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a34      	ldr	r2, [pc, #208]	; (8002924 <UART_AdvFeatureConfig+0x150>)
 8002854:	4013      	ands	r3, r2
 8002856:	0019      	movs	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2210      	movs	r2, #16
 800286a:	4013      	ands	r3, r2
 800286c:	d00b      	beq.n	8002886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a2c      	ldr	r2, [pc, #176]	; (8002928 <UART_AdvFeatureConfig+0x154>)
 8002876:	4013      	ands	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2220      	movs	r2, #32
 800288c:	4013      	ands	r3, r2
 800288e:	d00b      	beq.n	80028a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4a25      	ldr	r2, [pc, #148]	; (800292c <UART_AdvFeatureConfig+0x158>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2240      	movs	r2, #64	; 0x40
 80028ae:	4013      	ands	r3, r2
 80028b0:	d01d      	beq.n	80028ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <UART_AdvFeatureConfig+0x15c>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	035b      	lsls	r3, r3, #13
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10b      	bne.n	80028ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <UART_AdvFeatureConfig+0x160>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00b      	beq.n	8002910 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <UART_AdvFeatureConfig+0x164>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	605a      	str	r2, [r3, #4]
  }
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b002      	add	sp, #8
 8002916:	bd80      	pop	{r7, pc}
 8002918:	fffdffff 	.word	0xfffdffff
 800291c:	fffeffff 	.word	0xfffeffff
 8002920:	fffbffff 	.word	0xfffbffff
 8002924:	ffff7fff 	.word	0xffff7fff
 8002928:	ffffefff 	.word	0xffffefff
 800292c:	ffffdfff 	.word	0xffffdfff
 8002930:	ffefffff 	.word	0xffefffff
 8002934:	ff9fffff 	.word	0xff9fffff
 8002938:	fff7ffff 	.word	0xfff7ffff

0800293c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b092      	sub	sp, #72	; 0x48
 8002940:	af02      	add	r7, sp, #8
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2284      	movs	r2, #132	; 0x84
 8002948:	2100      	movs	r1, #0
 800294a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800294c:	f7fd ff2c 	bl	80007a8 <HAL_GetTick>
 8002950:	0003      	movs	r3, r0
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2208      	movs	r2, #8
 800295c:	4013      	ands	r3, r2
 800295e:	2b08      	cmp	r3, #8
 8002960:	d12c      	bne.n	80029bc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	0391      	lsls	r1, r2, #14
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4a46      	ldr	r2, [pc, #280]	; (8002a84 <UART_CheckIdleState+0x148>)
 800296c:	9200      	str	r2, [sp, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	f000 f88c 	bl	8002a8c <UART_WaitOnFlagUntilTimeout>
 8002974:	1e03      	subs	r3, r0, #0
 8002976:	d021      	beq.n	80029bc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002978:	f3ef 8310 	mrs	r3, PRIMASK
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002980:	63bb      	str	r3, [r7, #56]	; 0x38
 8002982:	2301      	movs	r3, #1
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	f383 8810 	msr	PRIMASK, r3
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	438a      	bics	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	f383 8810 	msr	PRIMASK, r3
}
 80029a8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2278      	movs	r2, #120	; 0x78
 80029b4:	2100      	movs	r1, #0
 80029b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e05f      	b.n	8002a7c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2204      	movs	r2, #4
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d146      	bne.n	8002a58 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	03d1      	lsls	r1, r2, #15
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <UART_CheckIdleState+0x148>)
 80029d4:	9200      	str	r2, [sp, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f000 f858 	bl	8002a8c <UART_WaitOnFlagUntilTimeout>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d03b      	beq.n	8002a58 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e0:	f3ef 8310 	mrs	r3, PRIMASK
 80029e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80029e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ea:	2301      	movs	r3, #1
 80029ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f383 8810 	msr	PRIMASK, r3
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4921      	ldr	r1, [pc, #132]	; (8002a88 <UART_CheckIdleState+0x14c>)
 8002a02:	400a      	ands	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f383 8810 	msr	PRIMASK, r3
}
 8002a10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a12:	f3ef 8310 	mrs	r3, PRIMASK
 8002a16:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a18:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f383 8810 	msr	PRIMASK, r3
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	2120      	movs	r1, #32
 8002a4a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2278      	movs	r2, #120	; 0x78
 8002a50:	2100      	movs	r1, #0
 8002a52:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e011      	b.n	8002a7c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	2120      	movs	r1, #32
 8002a64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2278      	movs	r2, #120	; 0x78
 8002a76:	2100      	movs	r1, #0
 8002a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b010      	add	sp, #64	; 0x40
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	01ffffff 	.word	0x01ffffff
 8002a88:	fffffedf 	.word	0xfffffedf

08002a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9c:	e04b      	b.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	d048      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa4:	f7fd fe80 	bl	80007a8 <HAL_GetTick>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d302      	bcc.n	8002aba <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e04b      	b.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d035      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d111      	bne.n	8002afc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2208      	movs	r2, #8
 8002ade:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 f900 	bl	8002ce8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2284      	movs	r2, #132	; 0x84
 8002aec:	2108      	movs	r1, #8
 8002aee:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2278      	movs	r2, #120	; 0x78
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e02c      	b.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	401a      	ands	r2, r3
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d112      	bne.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2280      	movs	r2, #128	; 0x80
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 f8e3 	bl	8002ce8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2284      	movs	r2, #132	; 0x84
 8002b26:	2120      	movs	r1, #32
 8002b28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2278      	movs	r2, #120	; 0x78
 8002b2e:	2100      	movs	r1, #0
 8002b30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e00f      	b.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	425a      	negs	r2, r3
 8002b46:	4153      	adcs	r3, r2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	1dfb      	adds	r3, r7, #7
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d0a4      	beq.n	8002a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b004      	add	sp, #16
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	; 0x40
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	1dbb      	adds	r3, r7, #6
 8002b6c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1dba      	adds	r2, r7, #6
 8002b78:	2158      	movs	r1, #88	; 0x58
 8002b7a:	8812      	ldrh	r2, [r2, #0]
 8002b7c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2284      	movs	r2, #132	; 0x84
 8002b82:	2100      	movs	r1, #0
 8002b84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	2122      	movs	r1, #34	; 0x22
 8002b8c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d028      	beq.n	8002be8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	4a3e      	ldr	r2, [pc, #248]	; (8002c94 <UART_Start_Receive_DMA+0x134>)
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <UART_Start_Receive_DMA+0x138>)
 8002ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002baa:	4a3c      	ldr	r2, [pc, #240]	; (8002c9c <UART_Start_Receive_DMA+0x13c>)
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3324      	adds	r3, #36	; 0x24
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	1dbb      	adds	r3, r7, #6
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	f7fd ff1c 	bl	8000a08 <HAL_DMA_Start_IT>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d009      	beq.n	8002be8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2284      	movs	r2, #132	; 0x84
 8002bd8:	2110      	movs	r1, #16
 8002bda:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	2120      	movs	r1, #32
 8002be2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e050      	b.n	8002c8a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d019      	beq.n	8002c24 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	0049      	lsls	r1, r1, #1
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	f383 8810 	msr	PRIMASK, r3
}
 8002c22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c24:	f3ef 8310 	mrs	r3, PRIMASK
 8002c28:	613b      	str	r3, [r7, #16]
  return(result);
 8002c2a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c2e:	2301      	movs	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f383 8810 	msr	PRIMASK, r3
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	430a      	orrs	r2, r1
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f383 8810 	msr	PRIMASK, r3
}
 8002c54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c56:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5a:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c5c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c60:	2301      	movs	r3, #1
 8002c62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	f383 8810 	msr	PRIMASK, r3
}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	f383 8810 	msr	PRIMASK, r3
}
 8002c86:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b010      	add	sp, #64	; 0x40
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	08002db1 	.word	0x08002db1
 8002c98:	08002edd 	.word	0x08002edd
 8002c9c:	08002f1f 	.word	0x08002f1f

08002ca0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cae:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f383 8810 	msr	PRIMASK, r3
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	21c0      	movs	r1, #192	; 0xc0
 8002cca:	438a      	bics	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b006      	add	sp, #24
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf4:	617b      	str	r3, [r7, #20]
  return(result);
 8002cf6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f383 8810 	msr	PRIMASK, r3
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4926      	ldr	r1, [pc, #152]	; (8002dac <UART_EndRxTransfer+0xc4>)
 8002d12:	400a      	ands	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d22:	f3ef 8310 	mrs	r3, PRIMASK
 8002d26:	623b      	str	r3, [r7, #32]
  return(result);
 8002d28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	f383 8810 	msr	PRIMASK, r3
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	438a      	bics	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d118      	bne.n	8002d8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d60:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d66:	2301      	movs	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f383 8810 	msr	PRIMASK, r3
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	438a      	bics	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f383 8810 	msr	PRIMASK, r3
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	2120      	movs	r1, #32
 8002d94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b00e      	add	sp, #56	; 0x38
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	fffffedf 	.word	0xfffffedf

08002db0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b094      	sub	sp, #80	; 0x50
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d06f      	beq.n	8002ea6 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc8:	225a      	movs	r2, #90	; 0x5a
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dce:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dd4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd8:	2301      	movs	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f383 8810 	msr	PRIMASK, r3
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	493a      	ldr	r1, [pc, #232]	; (8002ed8 <UART_DMAReceiveCplt+0x128>)
 8002df0:	400a      	ands	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e00:	f3ef 8310 	mrs	r3, PRIMASK
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	f383 8810 	msr	PRIMASK, r3
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2101      	movs	r1, #1
 8002e22:	438a      	bics	r2, r1
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	f383 8810 	msr	PRIMASK, r3
}
 8002e30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e32:	f3ef 8310 	mrs	r3, PRIMASK
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	f383 8810 	msr	PRIMASK, r3
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2140      	movs	r1, #64	; 0x40
 8002e54:	438a      	bics	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	f383 8810 	msr	PRIMASK, r3
}
 8002e62:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	2120      	movs	r1, #32
 8002e6a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d118      	bne.n	8002ea6 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e74:	f3ef 8310 	mrs	r3, PRIMASK
 8002e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7e:	2301      	movs	r3, #1
 8002e80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2110      	movs	r1, #16
 8002e96:	438a      	bics	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f383 8810 	msr	PRIMASK, r3
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d108      	bne.n	8002ec6 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb6:	2258      	movs	r2, #88	; 0x58
 8002eb8:	5a9a      	ldrh	r2, [r3, r2]
 8002eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebc:	0011      	movs	r1, r2
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7ff fa94 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ec4:	e003      	b.n	8002ece <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7fd fa5b 	bl	8000384 <HAL_UART_RxCpltCallback>
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b014      	add	sp, #80	; 0x50
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	fffffeff 	.word	0xfffffeff

08002edc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d10a      	bne.n	8002f0e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2258      	movs	r2, #88	; 0x58
 8002efc:	5a9b      	ldrh	r3, [r3, r2]
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	0011      	movs	r1, r2
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff fa70 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f0c:	e003      	b.n	8002f16 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fd fa21 	bl	8000358 <HAL_UART_RxHalfCpltCallback>
}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	589b      	ldr	r3, [r3, r2]
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	d10a      	bne.n	8002f5e <UART_DMAError+0x40>
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b21      	cmp	r3, #33	; 0x21
 8002f4c:	d107      	bne.n	8002f5e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2252      	movs	r2, #82	; 0x52
 8002f52:	2100      	movs	r1, #0
 8002f54:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff fea1 	bl	8002ca0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d10a      	bne.n	8002f82 <UART_DMAError+0x64>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b22      	cmp	r3, #34	; 0x22
 8002f70:	d107      	bne.n	8002f82 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	225a      	movs	r2, #90	; 0x5a
 8002f76:	2100      	movs	r1, #0
 8002f78:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f7ff feb3 	bl	8002ce8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2284      	movs	r2, #132	; 0x84
 8002f86:	589b      	ldr	r3, [r3, r2]
 8002f88:	2210      	movs	r2, #16
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2184      	movs	r1, #132	; 0x84
 8002f90:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff fa21 	bl	80023dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b006      	add	sp, #24
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	225a      	movs	r2, #90	; 0x5a
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2252      	movs	r2, #82	; 0x52
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7ff fa0a 	bl	80023dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b004      	add	sp, #16
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fde:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f383 8810 	msr	PRIMASK, r3
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2140      	movs	r1, #64	; 0x40
 8002ffa:	438a      	bics	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f383 8810 	msr	PRIMASK, r3
}
 8003008:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff f9d7 	bl	80023cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	b006      	add	sp, #24
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b002      	add	sp, #8
 8003034:	bd80      	pop	{r7, pc}

08003036 <memset>:
 8003036:	0003      	movs	r3, r0
 8003038:	1882      	adds	r2, r0, r2
 800303a:	4293      	cmp	r3, r2
 800303c:	d100      	bne.n	8003040 <memset+0xa>
 800303e:	4770      	bx	lr
 8003040:	7019      	strb	r1, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	e7f9      	b.n	800303a <memset+0x4>
	...

08003048 <__libc_init_array>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	2600      	movs	r6, #0
 800304c:	4c0c      	ldr	r4, [pc, #48]	; (8003080 <__libc_init_array+0x38>)
 800304e:	4d0d      	ldr	r5, [pc, #52]	; (8003084 <__libc_init_array+0x3c>)
 8003050:	1b64      	subs	r4, r4, r5
 8003052:	10a4      	asrs	r4, r4, #2
 8003054:	42a6      	cmp	r6, r4
 8003056:	d109      	bne.n	800306c <__libc_init_array+0x24>
 8003058:	2600      	movs	r6, #0
 800305a:	f000 f823 	bl	80030a4 <_init>
 800305e:	4c0a      	ldr	r4, [pc, #40]	; (8003088 <__libc_init_array+0x40>)
 8003060:	4d0a      	ldr	r5, [pc, #40]	; (800308c <__libc_init_array+0x44>)
 8003062:	1b64      	subs	r4, r4, r5
 8003064:	10a4      	asrs	r4, r4, #2
 8003066:	42a6      	cmp	r6, r4
 8003068:	d105      	bne.n	8003076 <__libc_init_array+0x2e>
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	00b3      	lsls	r3, r6, #2
 800306e:	58eb      	ldr	r3, [r5, r3]
 8003070:	4798      	blx	r3
 8003072:	3601      	adds	r6, #1
 8003074:	e7ee      	b.n	8003054 <__libc_init_array+0xc>
 8003076:	00b3      	lsls	r3, r6, #2
 8003078:	58eb      	ldr	r3, [r5, r3]
 800307a:	4798      	blx	r3
 800307c:	3601      	adds	r6, #1
 800307e:	e7f2      	b.n	8003066 <__libc_init_array+0x1e>
 8003080:	080030f4 	.word	0x080030f4
 8003084:	080030f4 	.word	0x080030f4
 8003088:	080030f8 	.word	0x080030f8
 800308c:	080030f4 	.word	0x080030f4

08003090 <memcpy>:
 8003090:	2300      	movs	r3, #0
 8003092:	b510      	push	{r4, lr}
 8003094:	429a      	cmp	r2, r3
 8003096:	d100      	bne.n	800309a <memcpy+0xa>
 8003098:	bd10      	pop	{r4, pc}
 800309a:	5ccc      	ldrb	r4, [r1, r3]
 800309c:	54c4      	strb	r4, [r0, r3]
 800309e:	3301      	adds	r3, #1
 80030a0:	e7f8      	b.n	8003094 <memcpy+0x4>
	...

080030a4 <_init>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr

080030b0 <_fini>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr
